//* 
XPECT_SETUP org.omg.sysml.xpect.tests.validation.invalid.SysMLInvalidationTests
	ResourceSet {
		ThisFile {}
		File {from ="/library.kernel/Base.kerml"}
       	File {from ="/library.kernel/Occurrences.kerml"}
       	File {from ="/library.kernel/Objects.kerml"}
       	File {from ="/library.kernel/Performances.kerml"}
		File {from ="/library.kernel/BaseFunctions.kerml"}
		File {from ="/library.kernel/Transfers.kerml"}
		File {from ="/library.systems/Activities.sysml"}
		File {from ="/library.systems/Blocks.sysml"}
		}
	Workspace {
		JavaProject {
			SrcFolder {
				ThisFile {}
				File {from ="/library.kernel/Base.kerml"}
				File {from ="/library.kernel/Occurrences.kerml"}
		       	File {from ="/library.kernel/Objects.kerml"}
 		      	File {from ="/library.kernel/Performances.kerml"}
				File {from ="/library.kernel/BaseFunctions.kerml"}
				File {from ="/library.kernel/Transfers.kerml"}
				File {from ="/library.systems/Activities.sysml"}
				File {from ="/library.systems/Blocks.sysml"}
			}
		}
	}
END_SETUP 
*/

package 'Control - Camera' {
	//import 'Action Decomposition'::*;
	block Scene;
	block Image;
	block Picture;
	
	activity Focus(in scene : Scene, out image : Image);
	activity Shoot(in image : Image, out picture : Picture);	
	activity TakePicture(in scene : Scene, out picture : Picture);
		
	action takePicture : TakePicture (in scene, out picture) {
		action focus : Focus (
			in scene = takePicture::scene, 
			out image
		);
		
		action shoot : Shoot (
			in image flow from focus::image, 
			out picture = takePicture::picture
		);
	}
	
	block Camera;
	block FocusingSubsystem;
	block ImagingSubsystem;
	block Image2;
	part camera : Camera {
		ref view : Scene;
		part photos : Picture[*];
				
		part autoFocus {
			ref in view : Scene = camera::view;		
			ref out realImage : Image;
		}
		bind autoFocus::realImage = imager::focusedImage;
		// XPECT warnings --> "Bound features should have conforming types" at "autoFocus::realImage = imager::focusedImage2;"
		bind autoFocus::realImage = imager::focusedImage2;
		
		part imager {
			ref in focusedImage : Image;		
			ref in focusedImage2 : Image2;		
			ref out photo : Picture :> photos;
		}
		
	}
}