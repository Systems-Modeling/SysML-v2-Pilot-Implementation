package '3a-Function-based Behavior' {
	
	// ITEMS
	
	class FuelCmd;
	class EngineTorque;
	class TransmissionTorque;
	class DriveshaftTorque;
	class WheelTorque;
	
	// SIGNALS
	
	class EngineStart;
	class EngineOff;
	
	// BEHAVIORS
	
	behavior 'Generate Torque'(in fuelCmd: FuelCmd, out engineTorque: EngineTorque);
	behavior 'Amplify Torque'(in engineTorque: EngineTorque, out transmissionTorque: TransmissionTorque);
	behavior 'Transfer Torque'(in transmissionTorque: TransmissionTorque, out driveshaftTorque: DriveshaftTorque);
	behavior 'Distribute Torque'(in driveShaftTorque: DriveshaftTorque, out wheelTorque1: WheelTorque, out wheelTorque2: WheelTorque);
	
	behavior 'Provide Power'(in fuelCmd: FuelCmd, out wheelTorque1: WheelTorque, out wheelTorque2: WheelTorque) {
		step 'generate torque': 'Generate Torque'(
			in = 'Provide Power'::fuelCmd, 
			out engineTorque
		);
		
		step 'amplify torque': 'Amplify Torque'(
			in from 'generate torque'::engineTorque, 
			out transmissionTorque
		);
		
		step 'transfer torque': 'Transfer Torque'(
			in from 'amplify torque'::transmissionTorque, 
			out driveshaftTorque
		);
		
		step 'distribute torque': 'Distribute Torque'(
			in from 'transfer torque'::driveshaftTorque, 
			out = 'Provide Power'::wheelTorque1, 
			out = 'Provide Power'::wheelTorque2
		); 
	}
	
	behavior 'Provide Power With Control'(in fuelCmd: FuelCmd, out wheelTorque1: WheelTorque, out wheelTorque2: WheelTorque) {
		import Base::*;
		import Transfers::Transfer;
		import BaseFunctions::*;
		
		step 'provide power': 'Provide Power'[*] (
			in fuelCmd = 'Provide Power With Control'::fuelCmd, 
			out wheelTorque1 = 'Provide Power With Control'::wheelTorque1,
			out wheelTorque2 = 'Provide Power With Control'::wheelTorque2
		);
		
		feature self: 'Provide Power With Control' redefines Base::self;
		
		feature engineStart: Transfer[*] ordered {
			feature item: EngineStart redefines Transfer::item;
			end transferSource: Occurrence redefines Transfer::transferSource; 
			end transferTarget: Occurrence redefines Transfer::transferTarget = self;
		}
		
		feature engineOff: Transfer[*] ordered {
			feature item: EngineOff redefines Transfer::item;
			end transferSource: Occurrence redefines Transfer::transferSource;
			end transferTarget: Occurrence redefines Transfer::transferTarget = self;
		}
		
		feature firstEngineStart[1] subsets engineStart = first(engineStart);
		feature restEngineStart[*] subsets engineStart = rest(engineStart);
		
		succession engineStart[1] to engineOff[1];
		succession engineOff[1] to restEngineStart[1];		
		
		succession engineStart[1] to 'provide power'[1];
		succession 'provide power'[1] to engineOff[1];
	}
}