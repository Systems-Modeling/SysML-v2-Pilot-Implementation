/*****************************************************************************
 * SysML 2 Pilot Implementation
 * Copyright (c) 2018, 2020 Model Driven Solutions, Inc.
 * Copyright (c) 2018 IncQuery Labs Ltd.
 * Copyright (c) 2019 Maplesoft (Waterloo Maple, Inc.)
 * Copyright (c) 2019 Mgnite Inc.
 *    
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of theGNU Lesser General Public License
 * along with this program.  If not, see <https://www.gnu.org/licenses/>.
 *
 * @license LGPL-3.0-or-later <http://spdx.org/licenses/LGPL-3.0-or-later>
 * 
 * Contributors:
 *  Ed Seidewitz, MDS
 *  Zoltan Kiss, IncQuery
 *  Balazs Grill, IncQuery
 *  Hisashi Miyashita, Maplesoft/Mgnite
 * 
 *****************************************************************************/

grammar org.omg.sysml.xtext.SysML hidden (WS, ML_NOTE, SL_NOTE)

import "http://www.eclipse.org/emf/2002/Ecore" as Ecore
import "http://www.omg.org/spec/SysML/2.0" as SysML

/* ROOT PACKAGE */

RootPackage returns SysML::Package :
	{SysML::Package} PackageBodyElement*
;

/* BASIC ELEMENTS */

fragment Identification returns SysML::Element :
	  'id' humanId = Name ( name = Name )?
	| name = Name
;

/* ANNOTATIONS */

/* Comments */

Comment returns SysML::Comment :
	( 'comment' Identification? 'about' ownedRelationship_comp += Annotation
	  ( ',' ownedRelationship_comp += Annotation )*
	| ( 'comment' Identification? )? ownedRelationship_comp += EmptyAnnotation
	)
	body = REGULAR_COMMENT
;

Annotation returns SysML::Annotation :
	annotatedElement = [SysML::Element|QualifiedName]
;

EmptyAnnotation returns SysML::Annotation :
	{SysML::Annotation}
;

/* Documentation */

OwnedDocumentation returns SysML::Documentation :
	documentingComment_comp = DocumentationComment
;

DocumentationComment returns SysML::Comment :
	'doc' ( 'id' humanId = Name )? body = REGULAR_COMMENT
;

PrefixDocumentation returns SysML::Annotation :
	ownedRelatedElement_comp += PrefixDocumentationComment
;

PrefixDocumentationComment returns SysML::Comment :
	( 'doc' ( 'id' humanId = Name )? )? body = DOCUMENTATION_COMMENT
;

/* Textual Representation */

TextualRepresentation returns SysML::TextualRepresentation :
    ( 'rep' Identification? 'about' ownedRelationship_comp += Annotation
    | ( 'rep' Identification? )? ownedRelationship_comp += EmptyAnnotation
    )
    'language' language = STRING_VALUE 
    body = REGULAR_COMMENT
;

/* PACKAGES */

/* Packages */

Package returns SysML::Package :
	PackageDeclaration PackageBody 
;

fragment PackageDeclaration returns SysML::Package :
	'package' Identification?
;

fragment PackageBody returns SysML::Package :
	  ';' 
	| '{' ( // Note: PackageBodyElement is expanded here to avoid
			// infinite loops in the incremental parser.
		    documentation_comp += OwnedDocumentation
	      | ownedMembership_comp += PackageMember 
	      | ownedImport_comp += PackageImport )* 
	  '}'
;

/* Package Bodies */

fragment PackageBodyElement returns SysML::Package :
	  documentation_comp += OwnedDocumentation
	| ownedMembership_comp += PackageMember 
	| ownedImport_comp += PackageImport
;

PackageMember returns SysML::Membership : 
	( ownedRelationship_comp += PrefixDocumentation )*
    ( visibility = BasicVisibilityIndicator )?		
	( NonUsagePackageMember | UsagePackageMember )
;

fragment NonUsagePackageMember returns SysML::Membership :
	  ownedMemberElement_comp = DefinitionElement
	| ( 'alias' | 'import' ) memberElement = [SysML::Element|QualifiedName] ( 'as' memberName = Name )? ';'
;

fragment UsagePackageMember returns SysML::Membership :
	  ownedMemberElement_comp = UsageElement
;

PackageImport returns SysML::Import :
	( ownedRelationship_comp += PrefixDocumentation )*
	( visibility = BasicVisibilityIndicator )?  
	'import' (
	  importedPackage = [SysML::Package|Name] ( '::' | '.' ) '*' 
	| importedPackage = [SysML::Package|ColonQualifiedName] '::' '*' 
	| importedPackage = [SysML::Package|DotQualifiedName] '.' '*'
	) ';'
;

enum BasicVisibilityIndicator returns SysML::VisibilityKind:
	public = 'public' | private = 'private'
;

/* Package Elements */

DefinitionElement returns SysML::Element :
	  Package
	| Comment
	| TextualRepresentation
	| Dependency	  
	| AttributeDefinition
	| ItemDefinition
	| PartDefinition
	| IndividualDefinition
	| ConnectionDefinition
	| InterfaceDefinition
	| PortDefinition
	| ActionDefinition
	| CalculationDefinition
	| StateDefinition
	| ConstraintDefinition
	| RequirementDefinition
	| CaseDefinition
	| AnalysisCaseDefinition
	| VerificationCaseDefinition
	| ViewDefinition
	| ViewpointDefinition
	| RenderingDefinition
    | BindingConnector
    | Succession
    | ItemFlow
    | SuccessionItemFlow
	| ConnectionUsage
	| Connector
;
	
UsageElement returns SysML::Usage :
	  AttributeUsage
	| ItemUsage
	| PartUsage
	| IndividualUsage
	| TimeSliceUsage
	| SnapshotUsage
	| PortUsage
	| InterfaceUsage
	| ActionUsage
	| CalculationUsage
	| StateUsage
	| ConstraintUsage
	| RequirementUsage
	| CaseUsage
	| AnalysisCaseUsage
	| VerificationCaseUsage
	| ViewUsage
	| ViewpointUsage
	| RenderingUsage
;

/* TYPES */

fragment TypeBody returns SysML::Type :
	';' | 
	'{' ( documentation_comp += OwnedDocumentation
		| ownedMembership_comp += NonFeatureTypeMember 
		| ownedFeatureMembership_comp += FeatureTypeMember 
		| ownedImport_comp += PackageImport
	)* '}'
;

NonFeatureTypeMember returns SysML::Membership : 
	TypeMemberPrefix NonUsagePackageMember
;

FeatureTypeMember returns SysML::FeatureMembership : 
	FeatureMember | EndFeatureMember
;

fragment TypeMemberPrefix returns SysML::Membership :
	( ownedRelationship_comp += PrefixDocumentation )*
    ( visibility = VisibilityIndicator )?
;

enum VisibilityIndicator returns SysML::VisibilityKind :
	public = 'public' | private = 'private' | protected = 'protected'
;

/* Feature Memberships */

FeatureMember returns SysML::FeatureMembership :
	TypeMemberPrefix direction = FeatureDirection 
	ownedMemberFeature_comp = FeatureElement
;

EndFeatureMember returns SysML::EndFeatureMembership :
	TypeMemberPrefix 'end' direction = FeatureDirection 
	ownedMemberFeature_comp = FeatureElement
;

enum FeatureDirection returns SysML::FeatureDirectionKind:
	in = 'in' | out = 'out' | inout = 'inout'
;

FeatureElement returns SysML::Feature :
      UsageElement
;

/* CLASSIFIERS */

/* Superclassing */

fragment SuperclassingPart returns SysML::Classifier :
	SpecializesKeyword ownedRelationship_comp += OwnedSuperclassing 
	( ',' ownedRelationship_comp += OwnedSuperclassing )*
;

SpecializesKeyword :
	':>' | 'specializes'
;

OwnedSuperclassing returns SysML::Superclassing:
	superclass = [SysML::Classifier | QualifiedName]
;

/* FEATURES */

/* Features */

fragment FeatureDeclaration returns SysML::Feature :
	  Identification FeatureSpecializationPart?
	| FeatureSpecializationPart
;

fragment FeatureSpecializationPart returns SysML::Feature :
	  ( -> FeatureSpecialization )+ MultiplicityPart? FeatureSpecialization*
	| MultiplicityPart FeatureSpecialization*
;

fragment MultiplicityPart returns SysML::Feature :
	ownedMembership_comp += MultiplicityMember 
	( isOrdered ?= 'ordered'? & isNonunique ?= 'nonunique'? )
;

fragment FeatureSpecialization returns SysML::Feature :
	Typings | Subsettings | Redefinitions
;

fragment Typings returns SysML::Feature :
	TypedBy ( ',' ownedRelationship_comp += OwnedFeatureTyping )*
;

fragment TypedBy returns SysML::Feature :
	DefinedByKeyword ownedRelationship_comp += OwnedFeatureTyping
;

DefinedByKeyword :
	':' | 'defined' 'by'
;

fragment Subsettings returns SysML::Feature :
	Subsets ( ',' ownedRelationship_comp += OwnedSubsetting )*
;

fragment Subsets returns SysML::Feature :
	SubsetsKeyword ownedRelationship_comp += OwnedSubsetting 
;

SubsetsKeyword :
	':>' | 'subsets'
;

fragment Redefinitions returns SysML::Feature :
	Redefines ( ',' ownedRelationship_comp += OwnedRedefinition )*
;

fragment Redefines returns SysML::Feature :
	RedefinesKeyword ownedRelationship_comp += OwnedRedefinition
;

RedefinesKeyword :
	':>>' | 'redefines'
;

/* Feature Typing, Subsetting and Redefinition */

OwnedFeatureTyping returns SysML::FeatureTyping :
	type = [SysML::Type | QualifiedName]
;

OwnedSubsetting returns SysML::Subsetting:
	subsettedFeature = [SysML::Feature|QualifiedName]
;

OwnedRedefinition returns SysML::Redefinition:
	redefinedFeature = [SysML::Feature | QualifiedName] 
;

/* Multiplicity */

MultiplicityMember returns SysML::Membership :
	ownedMemberElement_comp = Multiplicity
;

Multiplicity returns SysML::MultiplicityRange :
	// TODO: Allow general expressions for bounds. (Causes LL parsing issues.)
	'[' ( ownedMembership_comp += LiteralIntegerMember '..' )? 
	      ownedMembership_comp += LiteralUnlimitedNaturalMember ']'
;

LiteralIntegerMember returns SysML::Membership :
	ownedMemberElement_comp = LiteralInteger
;

LiteralUnlimitedNaturalMember returns SysML::Membership :
	ownedMemberElement_comp = LiteralUnlimitedNatural
;

/* CONNECTORS */

/* Connectors */

ConnectorEndMember returns SysML::EndFeatureMembership :
	( memberName = Name '=>' )? ownedMemberFeature_comp = ConnectorEnd
;

ConnectorEnd returns SysML::Feature :
	ownedRelationship_comp += OwnedSubsetting 
	( ownedMembership_comp += MultiplicityMember )?
;

/* Binding Connectors */

BindingKeyword :
	'bind'
;

BindingConnector returns SysML::BindingConnector :
	( isAbstract ?= 'abstract' )? BindingKeyword 
	BindingConnectorDeclaration TypeBody	
;

fragment BindingConnectorDeclaration returns SysML::BindingConnector :
	( FeatureDeclaration 'as' )?
	ownedFeatureMembership_comp += ConnectorEndMember '=' 
	ownedFeatureMembership_comp += ConnectorEndMember
;

/* Successions */

SuccessionKeyword :
	'succession'
;

Succession returns SysML::Succession :
	( isAbstract ?= 'abstract' )? SuccessionKeyword SuccessionDeclaration TypeBody
;

fragment SuccessionDeclaration returns SysML::Succession :
	( FeatureDeclaration? 'first' )?
	ownedFeatureMembership_comp += ConnectorEndMember 'then' 
	ownedFeatureMembership_comp += ConnectorEndMember
;

/* INTERACTIONS */

/* Item Flows */

ItemFlowKeyword :
	'stream'
;

ItemFlow returns SysML::ItemFlow :
	( isAbstract ?= 'abstract' )? ItemFlowKeyword 
	ItemFlowDeclaration TypeBody
;

SuccessionItemFlowKeyword :
	'flow'
;

SuccessionItemFlow returns SysML::SuccessionItemFlow :
	( isAbstract ?= 'abstract' )? SuccessionItemFlowKeyword 
	ItemFlowDeclaration TypeBody
;

fragment ItemFlowDeclaration returns SysML::ItemFlow :
	( FeatureDeclaration? 
      ( 'of'  ownedFeatureMembership_comp += ItemFeatureMember
      | ownedFeatureMembership_comp += EmptyItemFeatureMember
      ) 'from'
    | ownedFeatureMembership_comp += EmptyItemFeatureMember
    )
	ownedFeatureMembership_comp += ItemFlowEndMember 'to' 
	ownedFeatureMembership_comp += ItemFlowEndMember
;

ItemFeatureMember returns SysML::FeatureMembership :
	( memberName = Name DefinedByKeyword )? ownedMemberFeature_comp = ItemFeature
;

ItemFeature returns SysML::ItemFeature :
	  ownedRelationship_comp += OwnedFeatureTyping 
	  ( ownedMembership_comp += MultiplicityMember )?
	| ownedMembership_comp += MultiplicityMember
	  ( ownedRelationship_comp += OwnedFeatureTyping )?
;

EmptyItemFeature returns SysML::ItemFeature :
	{SysML::ItemFeature}
;

ItemFlowEndMember returns SysML::EndFeatureMembership :
	ownedMemberFeature_comp = ItemFlowEnd
;

ItemFlowEnd returns SysML::ItemFlowEnd :
	ownedFeatureMembership_comp += ItemFlowFeatureMember
;

EmptyItemFeatureMember returns SysML::FeatureMembership :
	ownedMemberFeature_comp = EmptyItemFeature
;

EmptyItemFlowEnd returns SysML::ItemFlowEnd :
	ownedFeatureMembership_comp += EmptyItemFlowFeatureMember
;

ItemFlowFeatureMember returns SysML::FeatureMembership :
	ownedMemberFeature_comp = ItemFlowFeature
;

ItemFlowFeature returns SysML::ItemFlowFeature :
	ownedRelationship_comp += OwnedRedefinition
;

EmptyItemFlowEndMember returns SysML::EndFeatureMembership :
	ownedMemberFeature_comp = EmptyItemFlowEnd
;

EmptyItemFlowFeatureMember returns SysML::FeatureMembership :
	ownedMemberFeature_comp = EmptyItemFlowFeature
;

EmptyItemFlowFeature returns SysML::ItemFlowFeature :
	ownedRelationship_comp += EmptyRedefinition
;

EmptyRedefinition returns SysML::Redefinition :
	{SysML::Redefinition}
;

/* DEPENDENCIES */

Dependency returns SysML::Dependency :
	'dependency' ( Identification? 'from' )?
    client += [SysML::Element|QualifiedName] ( ',' client += [SysML::Element|QualifiedName] )* 'to'
    supplier += [SysML::Element|QualifiedName] ( ',' supplier += [SysML::Element|QualifiedName] )* ';'
;

/* DEFINITION AND USAGE */

/* Definitions */

fragment DefinitionPrefix returns SysML::Definition :
	isAbstract ?= 'abstract' | isVariation ?= 'variation'
;

fragment Definition returns SysML::Definition :
	DefinitionDeclaration DefinitionBody
;

fragment DefinitionDeclaration returns SysML::Definition :	
	Identification? SuperclassingPart?
;

fragment DefinitionBody returns SysML::Type :
	  ';' 
	| '{' DefinitionBodyItem* '}'
;

fragment DefinitionBodyItem returns SysML::Type :
	  documentation_comp += OwnedDocumentation
	| ownedMembership_comp += NestedDefinitionMember 
	| ownedMembership_comp += VariantUsageMember
	| ownedFeatureMembership_comp += NestedUsageMember 
	| ( ownedFeatureMembership_comp += EmptySuccessionMember )?
	  ownedFeatureMembership_comp += IndividualUsageMember
	| => ownedImport_comp += PackageImport	
;

NestedDefinitionMember returns SysML::Membership : 
	NonFeatureTypeMember
;

VariantUsageMember returns SysML::VariantMembership :
	DefinitionMemberPrefix 'variant' 
	ownedVariantUsage_comp = VariantUsageElement
;

NestedUsageMember returns SysML::FeatureMembership :
	StructureUsageMember | BehaviorUsageMember | FlowUsageMember
;

StructureUsageMember returns SysML::FeatureMembership :
	DefinitionMemberPrefix ownedMemberFeature_comp = StructureUsageElement
;

BehaviorUsageMember returns SysML::FeatureMembership :
	DefinitionMemberPrefix ownedMemberFeature_comp = BehaviorUsageElement
;

IndividualUsageMember returns SysML::FeatureMembership :
	DefinitionMemberPrefix ownedMemberFeature_comp = IndividualUsageElement
;

FlowUsageMember returns SysML::FeatureMembership :
	DefinitionMemberPrefix direction = FeatureDirection
	ownedMemberFeature_comp = FlowUsageElement
;

fragment DefinitionMemberPrefix returns SysML::Membership :
	( ownedRelationship_comp += PrefixDocumentation )*
    ( visibility = VisibilityIndicator )?
;

/* Usages */

fragment UsagePrefix returns SysML::Usage :
	isAbstract ?= 'abstract' | isVariation ?= 'variation'
;

fragment Usage returns SysML::Usage :
	UsageDeclaration? UsageCompletion
;

fragment UsageDeclaration returns SysML::Feature :
	  FeatureDeclaration
;

fragment UsageCompletion returns SysML::Usage :
	ValueOrFlowPart? UsageBody
;

fragment UsageBody returns SysML::Usage :
	DefinitionBody
;

fragment ValuePart returns SysML::Feature :
	  ownedMembership_comp += FeatureValue
;

fragment ValueOrFlowPart returns SysML::Feature :
	ownedMembership_comp += ( FeatureValue | SourceItemFlowMember )
;

FeatureValue returns SysML::FeatureValue :
	'=' value_comp = OwnedExpression
;

SourceItemFlowMember returns SysML::FeatureMembership :
	ownedMemberFeature_comp = SourceItemFlow
;

SourceItemFlow returns SysML::ItemFlow :
	( ItemFlowKeyword | {SysML::SuccessionItemFlow} SuccessionItemFlowKeyword ) 
	ownedFeatureMembership_comp += EmptyItemFeatureMember 
	'from' ownedFeatureMembership_comp += ItemFlowEndMember
	ownedFeatureMembership_comp += EmptyItemFlowEndMember
;

/* Reference Usages */

ReferenceKeyword :
	'ref'
;

ReferenceUsageKeyword :
	ReferenceKeyword
;

ReferenceUsage returns SysML::ReferenceUsage :
	UsagePrefix? ReferenceUsageKeyword Usage
;

ReferenceEndUsage returns SysML::ReferenceUsage :
	UsagePrefix? ReferenceUsageKeyword? Usage
;

// TODO: Find a better way to handle variant references that using ReferenceUsage.
ReferenceVariantUsage returns SysML::ReferenceUsage :
	  ReferenceUsage
	| ownedRelationship_comp += OwnedSubsetting 
	  FeatureSpecialization* UsageBody
;

/* Body Elements */

StructureUsageElement returns SysML::Feature :
	  ReferenceUsage
	| AttributeUsage
	| ItemRefUsage
	| PartRefUsage
	| ViewRefUsage
	| RenderingRefUsage
	| PortUsage
	| InterfaceUsage
;

IndividualUsageElement returns SysML::Usage :
	  IndividualRefUsage
	| TimeSliceRefUsage
	| SnapshotRefUsage
;

BehaviorUsageElement returns SysML::Usage :
	  ActionRefUsage
	| CalculationRefUsage
	| StateRefUsage
	| ConstraintRefUsage
	| RequirementRefUsage
	| CaseRefUsage
	| AnalysisCaseRefUsage
	| VerificationCaseRefUsage
	| ViewpointRefUsage
	| PerformActionUsage
	| ExhibitStateUsage
	| AssertConstraintUsage
	| SatisfyRequirementUsage
;

VariantUsageElement returns SysML::Usage :
	  ReferenceVariantUsage
	| AttributeVariantUsage
	| ItemRefUsage
	| PartRefUsage
	| PortUsage
	| ConnectionUsage
	| Connector
	| InterfaceUsage
	| IndividualUsageElement
	| BehaviorUsageElement
;

FlowUsageElement returns SysML::Usage :
	  ReferenceUsage
	| AttributeUsage
	| ItemFlowUsage
	| PartFlowUsage
	| ViewFlowUsage
	| RenderingFlowUsage
	| ActionFlowUsage
	| CalculationFlowUsage
	| StateFlowUsage
	| ConstraintFlowUsage
	| RequirementFlowUsage
	| CaseFlowUsage
	| AnalysisCaseFlowUsage
	| VerificationCaseFlowUsage
	| ViewpointFlowUsage
;

/* ATTRIBUTES */

AttributeKeyword :
	'attribute'
;

AttributeDefKeyword :
	AttributeKeyword 'def' | 'value' 'type'
;

AttributeUsageKeyword :
	AttributeKeyword | 'value'
;

AttributeDefinition returns SysML::AttributeDefinition :
	DefinitionPrefix? AttributeDefKeyword Definition
;

AttributeUsage returns SysML::AttributeUsage :
	UsagePrefix? 
	( AttributeUsageKeyword Usage 
	| UsageDeclaration ValueOrFlowPart? UsageBody
	)
;

AttributeVariantUsage returns SysML::AttributeUsage :
	UsagePrefix? AttributeUsageKeyword Usage
;

/* ITEM DEFINITIONS */

ItemKeyword :
	'item'
;

ItemDefKeyword :
	ItemKeyword 'def'
;

ItemUsageKeyword :
	ItemKeyword
;

ItemDefinition returns SysML::ItemDefinition :
	DefinitionPrefix? ItemDefKeyword Definition
;

ItemUsage returns SysML::ItemUsage :
	UsagePrefix? ItemUsageKeyword Usage
;

ItemFlowUsage returns SysML::ItemUsage :
	UsagePrefix? 'ref'? ItemUsageKeyword Usage
;

ItemRefUsage returns SysML::ItemUsage :
	UsagePrefix? ( 'ref' ItemUsageKeyword | isComposite ?= ItemUsageKeyword ) Usage
;

/* PART DEFINITIONS */

PartKeyword :
	'part'
;

PartDefKeyword :
	PartKeyword 'def' | 'block'
;

PartUsageKeyword :
	PartKeyword
;

PartDefinition returns SysML::PartDefinition :
	DefinitionPrefix? PartDefKeyword Definition
;

PartUsage returns SysML::PartUsage :
	UsagePrefix? PartUsageKeyword Usage
;

PartFlowUsage returns SysML::PartUsage :
	UsagePrefix? 'ref'? PartUsageKeyword Usage
;

PartRefUsage returns SysML::PartUsage :
	UsagePrefix? ( 'ref' PartUsageKeyword | isComposite ?= PartUsageKeyword ) Usage
;

/* PORTS */

/* Port Definitions */

PortKeyword :
	'port'
;

PortDefKeyword :
	PortKeyword 'def' | 'interface' 'block'
;

PortDefinition returns SysML::PortDefinition :
	DefinitionPrefix? PortDefKeyword Definition
	ownedMembership_comp += ConjugatedPortDefinitionMember
;

ConjugatedPortDefinitionMember returns SysML::Membership :
	ownedMemberElement_comp = ConjugatedPortDefinition
;

ConjugatedPortDefinition returns SysML::ConjugatedPortDefinition :
	ownedRelationship_comp += PortConjugation
;

PortConjugation returns SysML::PortConjugation :
	{SysML::PortConjugation}
;

/* Port Usages */

PortUsageKeyword :
	PortKeyword
;

PortUsage returns SysML::PortUsage :
	UsagePrefix? PortUsageKeyword PortUsageDeclaration UsageCompletion
;

PortEndUsage returns SysML::PortUsage :
	UsagePrefix? PortUsageKeyword? PortUsageDeclaration UsageCompletion
;

fragment PortUsageDeclaration returns SysML::Usage :
	  Identification PortSpecializationPart?
	| PortSpecializationPart
;

fragment PortSpecializationPart returns SysML::Usage :
	  ( -> PortSpecialization )+ MultiplicityPart? PortSpecialization*
	| MultiplicityPart PortSpecialization*
;

fragment PortSpecialization returns SysML::Usage :
	PortTypings | Subsettings | Redefinitions
;

fragment PortTypings returns SysML::Feature :
	  DefinedByKeyword ownedRelationship_comp += PortTyping 
	  ( ',' ownedRelationship_comp += PortTyping )*
;

PortTyping returns SysML::FeatureTyping :
	OwnedFeatureTyping | ConjugatedPortTyping
;

ConjugatedPortTyping returns SysML::ConjugatedPortTyping :
	'~' portDefinition = [SysML::PortDefinition | QualifiedName]
;

/* CONNECTIONS */

/* Connection Definitions */

ConnectionKeyword :
	'connection'
;

ConnectionDefKeyword :
	ConnectionKeyword 'def' | 'assoc' 'block' 
;

ConnectionDefinition returns SysML::ConnectionDefinition :
	DefinitionPrefix? ConnectionDefKeyword 
	DefinitionDeclaration ConnectionBody
;

fragment ConnectionBody returns SysML::Type :
	  ';'
	| '{' (
		  documentation_comp += OwnedDocumentation
		| ownedMembership_comp += NestedDefinitionMember 
		| ownedMembership_comp += VariantUsageMember
		| ownedFeatureMembership_comp += ConnectionUsageMember
		| ( ownedFeatureMembership_comp += EmptySuccessionMember )?
		  ownedFeatureMembership_comp += IndividualUsageMember
		| ownedImport_comp += PackageImport
	  )* '}'
;

ConnectionUsageMember returns SysML::FeatureMembership :
	NestedUsageMember | ConnectionEndMember
;

ConnectionEndMember returns SysML::EndFeatureMembership :
	DefinitionMemberPrefix 'end' ownedMemberFeature_comp = ConnectionEndElement
;

ConnectionEndElement returns SysML::Feature :
	  ReferenceEndUsage
	| ItemRefUsage
	| PartRefUsage
	| PortUsage
	| ActionRefUsage
	| CalculationRefUsage
	| StateRefUsage
;

/* Connection Usages */

ConnectorKeyword :
	'connect'
;

Connector returns SysML::ConnectionUsage :
	UsagePrefix? ConnectorKeyword ConnectorPart ConnectionBody
;

ConnectionUsageKeyword :
	ConnectionKeyword | 'link'
;

ConnectionUsage returns SysML::ConnectionUsage :
	UsagePrefix? ConnectionUsageKeyword UsageDeclaration? 
	( ConnectorKeyword ConnectorPart )? ConnectionBody
;

fragment ConnectorPart returns SysML::ConnectionUsage :
	BinaryConnectorPart | NaryConnectorPart
;

fragment BinaryConnectorPart returns SysML::Connector :
	ownedFeatureMembership_comp += ConnectorEndMember 'to' 
	ownedFeatureMembership_comp += ConnectorEndMember
;

fragment NaryConnectorPart returns SysML::Connector :
	'(' ownedFeatureMembership_comp += ConnectorEndMember ',' 
	    ownedFeatureMembership_comp += ConnectorEndMember
	    ( ',' ownedFeatureMembership_comp += ConnectorEndMember )* ')'
;

EmptySourceEndMember returns SysML::EndFeatureMembership :
	ownedMemberFeature_comp = EmptySourceEnd
;

EmptySourceEnd returns SysML::Feature :
	{SysML::SourceEnd}
;

/* INTERFACES */

/* Interface Definitions */

InterfaceKeyword :
	'interface'
;

InterfaceDefKeyword :
	InterfaceKeyword 'def'
;

InterfaceDefinition returns SysML::InterfaceDefinition :
	InterfaceDefDeclaration InterfaceDefBody
;

fragment InterfaceDefDeclaration returns SysML::InterfaceDefinition :
	DefinitionPrefix? InterfaceDefKeyword DefinitionDeclaration
;

fragment InterfaceDefBody returns SysML::Type :
	  ';'
	| '{' ( 
		  documentation_comp += OwnedDocumentation
		| ownedMembership_comp += NestedDefinitionMember 
		| ownedMembership_comp += VariantUsageMember
		| ownedFeatureMembership_comp += InterfaceUsageMember
		| ownedImport_comp += PackageImport
	)* '}'
;

InterfaceUsageMember returns SysML::FeatureMembership :
	NestedUsageMember | InterfaceEndMember
;

InterfaceEndMember returns SysML::EndFeatureMembership :
	DefinitionMemberPrefix 'end' ownedMemberFeature_comp = PortEndUsage
;

/* Interface Usages */

InterfaceUsageKeyword :
	InterfaceKeyword
;

InterfaceUsage returns SysML::InterfaceUsage :	 
	UsagePrefix? InterfaceUsageKeyword InterfaceUsageDeclaration InterfaceDefBody
;

fragment InterfaceUsageDeclaration returns SysML::InterfaceUsage :
	UsageDeclaration? ( ConnectorKeyword ConnectorPart )? | ConnectorPart
;

/* INDIVIDUALS */

/* Individual Definitions */

IndividualKeyword :
	'individual'
;

IndividualDefKeyword :
	IndividualKeyword 'def'
;

IndividualDefinition returns SysML::IndividualDefinition :
	DefinitionPrefix? IndividualDefKeyword Definition
	ownedMembership_comp += LifeClassMembership
;

LifeClassMembership returns SysML::Membership :
	ownedMemberElement_comp = LifeClass
;

LifeClass returns SysML::LifeClass :
	{SysML::LifeClass}
;

/* Individual Usages */

IndividualUsageKeyword :
	IndividualKeyword
;

TimeSliceKeyword :
	'timeslice'
;

SnapshotKeyword :
	'snapshot'
;

IndividualUsage returns SysML::IndividualUsage :
	UsagePrefix? IndividualUsageKeyword Usage
;

IndividualRefUsage returns SysML::IndividualUsage :
	UsagePrefix? ( 'ref' IndividualUsageKeyword | isComposite ?= IndividualUsageKeyword ) Usage
;

TimeSliceUsage returns SysML::IndividualUsage :
	UsagePrefix? TimeSliceKeyword Usage
	ownedFeatureMembership_comp += TimeSliceFeatureMember 
;

TimeSliceRefUsage returns SysML::IndividualUsage :
	UsagePrefix? ( 'ref' TimeSliceKeyword | isComposite ?= TimeSliceKeyword ) Usage 
	ownedFeatureMembership_comp += TimeSliceFeatureMember 
;

TimeSliceFeatureMember returns SysML::FeatureMembership :
	ownedMemberFeature_comp = TimeSliceFeature
;

TimeSliceFeature returns SysML::TimeSliceFeature :
	{SysML::TimeSliceFeature}
;

SnapshotUsage returns SysML::IndividualUsage :
	UsagePrefix? SnapshotKeyword Usage
	ownedFeatureMembership_comp += SnapshotFeatureMember
;

SnapshotRefUsage returns SysML::IndividualUsage :
	UsagePrefix? ( 'ref' SnapshotKeyword | isComposite ?= SnapshotKeyword ) Usage 
	ownedFeatureMembership_comp += SnapshotFeatureMember 
;

SnapshotFeatureMember returns SysML::FeatureMembership :
	ownedMemberFeature_comp = SnapshotFeature
;

SnapshotFeature returns SysML::SnapshotFeature :
	{SysML::SnapshotFeature}
;

/* Individual Succession */

EmptySuccessionMember returns SysML::FeatureMembership :
	ownedMemberFeature_comp = EmptySuccession
;

EmptySuccession returns SysML::Succession :
	'then' ownedFeatureMembership_comp += MultiplicitySourceEndMember 
	ownedFeatureMembership_comp += EmptyTargetEndMember
;

MultiplicitySourceEndMember returns SysML::EndFeatureMembership :
	ownedMemberFeature_comp = MultiplicitySourceEnd
;

MultiplicitySourceEnd returns SysML::Feature :
	{SysML::SourceEnd} ( ownedMembership_comp += MultiplicityMember )?
;

EmptyTargetEndMember returns SysML::EndFeatureMembership :
	ownedMemberFeature_comp = EmptyTargetEnd
;

EmptyTargetEnd returns SysML::Feature :
	{SysML::TargetEnd}
;

/* ACTION */

/* Action Definitions */

ActionKeyword :
	'action'
;

ActionDefKeyword :
	ActionKeyword 'def' | 'activity'
;

ActionDefinition returns SysML::ActionDefinition :
	DefinitionPrefix? ActionDefKeyword ActionDeclaration ActionBody
;

fragment ActionDeclaration returns SysML::ActionDefinition :
	DefinitionDeclaration ParameterList? 
;

fragment ParameterList returns SysML::Type :
	'(' ( ownedFeatureMembership_comp += ParameterMember 
		( ',' ownedFeatureMembership_comp += ParameterMember )* )? ')'
;

ParameterMember returns SysML::ParameterMembership :
	( direction = FeatureDirection )? ownedMemberParameter_comp = Parameter
;

fragment ActionBody returns SysML::Type :
	    ';' 
		// Note: Using a syntactic predicate here seems to avoid a possible infinite loop
		// while incrementally parsing.
	  | '{' => ActionBodyItem* '}' 
;

fragment ActionBodyItem returns SysML::Type :
	  documentation_comp += OwnedDocumentation
	| ownedMembership_comp += NestedDefinitionMember 
	| ownedMembership_comp += VariantUsageMember
	| ownedFeatureMembership_comp += ParameterFlowUsageMember
	| ownedFeatureMembership_comp += StructureUsageMember
	| ( ownedFeatureMembership_comp += EmptySuccessionMember )?
	  ownedFeatureMembership_comp += IndividualUsageMember
	| ownedFeatureMembership_comp += InitialNodeMember
	  ( ownedFeatureMembership_comp += TargetSuccessionMember )*
	| ( ownedFeatureMembership_comp += EmptySuccessionMember )? 
	  ownedFeatureMembership_comp += ( BehaviorUsageMember | ActionNodeMember )
	  ( ownedFeatureMembership_comp += TargetSuccessionMember )*
	| ownedFeatureMembership_comp += GuardedSuccessionMember
	| ownedImport_comp += PackageImport
;

ParameterFlowUsageMember returns SysML::ParameterMembership :
	DefinitionMemberPrefix direction = FeatureDirection 
	ownedMemberParameter_comp = FlowUsageElement
;

InitialNodeMember returns SysML::FeatureMembership :
	DefinitionMemberPrefix 'first' memberFeature = [SysML::Feature|QualifiedName] ';'
	
;

ActionNodeMember returns SysML::FeatureMembership :
	DefinitionMemberPrefix ownedMemberFeature_comp = ActionNode
;

TargetSuccessionMember returns SysML::FeatureMembership :
	DefinitionMemberPrefix ownedMemberFeature_comp = ActionTargetSuccession ';'
;

GuardedSuccessionMember returns SysML::FeatureMembership :
	ownedMemberFeature_comp = GuardedSuccession ';'
;

/* Parameters */

Parameter returns SysML::Usage :
      {SysML::ReferenceUsage} ( ParameterDeclaration | ReferenceUsageKeyword ParameterDeclaration?)
    | {SysML::AttributeUsage} AttributeUsageKeyword ParameterDeclaration?
    | {SysML::ItemUsage} ItemUsageKeyword ParameterDeclaration?
    | {SysML::PartUsage} PartUsageKeyword ParameterDeclaration?
    | {SysML::ViewUsage} ViewUsageKeyword ParameterDeclaration?
    | {SysML::RenderingUsage} RenderingUsageKeyword ParameterDeclaration?
    | {SysML::ActionUsage} ActionUsageKeyword ParameterDeclaration?
    | {SysML::CalculationUsage} CalculationUsageKeyword ParameterDeclaration?
    | {SysML::StateUsage} StateUsageKeyword ParameterDeclaration?
    | {SysML::ConstraintUsage} ConstraintUsageKeyword ParameterDeclaration?
    | {SysML::RequirementUsage} RequirementUsageKeyword ParameterDeclaration?
    | {SysML::AnalysisCaseUsage} AnalysisCaseUsageKeyword ParameterDeclaration?
    | {SysML::VerificationCaseUsage} VerificationCaseUsageKeyword ParameterDeclaration?
    | {SysML::ViewpointUsage} ViewpointUsageKeyword ParameterDeclaration?
;

fragment ParameterDeclaration returns SysML::Usage :
	  Identification ParameterSpecializationPart? 
	| ParameterSpecializationPart
;

fragment ParameterSpecializationPart returns SysML::Feature :
	  ( -> ParameterSpecialization )+ MultiplicityPart? ParameterSpecialization*
	| MultiplicityPart ParameterSpecialization*
;

fragment ParameterSpecialization returns SysML::Feature :
	TypedBy | Subsets | Redefines
;

/* Action Usages */

ActionUsageKeyword :
	ActionKeyword
;

ActionUsage returns SysML::ActionUsage :
	UsagePrefix? ActionUsageKeyword ActionUsageDeclaration ActionBody
;

ActionFlowUsage returns SysML::ActionUsage :
	UsagePrefix? 'ref'? ActionUsageKeyword ActionUsageDeclaration ActionBody
;

ActionRefUsage returns SysML::ActionUsage :
	UsagePrefix? ( 'ref' ActionUsageKeyword | isComposite ?= ActionUsageKeyword ) 
	ActionUsageDeclaration ActionBody
;

PerformActionUsage returns SysML::PerformActionUsage :
	UsagePrefix? 'perform' PerformActionUsageDeclaration ActionBody
;

fragment PerformActionUsageDeclaration returns SysML::ActionUsage :
   	( ownedRelationship_comp += OwnedSubsetting FeatureSpecializationPart?
   	| ActionUsageKeyword UsageDeclaration? )
    ( ValuePart | ActionUsageParameterList )?
;

fragment ActionUsageDeclaration returns SysML::Step :
	  UsageDeclaration? ( ValuePart | ActionUsageParameterList )?
;

fragment ActionUsageParameterList returns SysML::Type :
	'(' ( ownedFeatureMembership_comp += ActionUsageParameterMember 
		  ( ',' ownedFeatureMembership_comp += ActionUsageParameterMember )* )? ')'
;

ActionUsageParameterMember returns SysML::ParameterMembership :
	( direction = FeatureDirection )? ownedMemberParameter_comp = ActionUsageParameter
;

ActionUsageParameter returns SysML::Usage :
	Parameter ValueOrFlowPart? | {SysML::ReferenceUsage} ValueOrFlowPart
;

/* Action Nodes */

ActionNode returns SysML::ActionUsage :
	  SendNode | AcceptNode | ControlNode
;

AcceptNode returns SysML::AcceptActionUsage :
	UsagePrefix? AcceptNodeDeclaration ActionBody
;

fragment AcceptNodeDeclaration returns SysML::ActionUsage :
	ownedFeatureMembership_comp += EmptyParameterMember
	( 'action' UsageDeclaration )? 'accept'ownedFeatureMembership_comp += ItemFeatureMember
;

SendNode returns SysML::SendActionUsage :
	UsagePrefix? SendNodeDeclaration ActionBody
;

fragment SendNodeDeclaration returns SysML::ActionUsage :
	ownedFeatureMembership_comp += EmptyParameterMember ownedFeatureMembership_comp += EmptyItemFeatureMember
	( 'action' UsageDeclaration )? 'send' ownedFeatureMembership_comp += OwnedExpressionMember 
	'to' ownedFeatureMembership_comp += OwnedExpressionMember
;

ControlNode returns SysML::ControlNode :
	  MergeNode
	| DecisionNode
	| JoinNode
	| ForkNode
;

MergeNode returns SysML::MergeNode :
	UsagePrefix? isComposite ?= 'merge' UsageDeclaration? ';'
;

DecisionNode returns SysML::DecisionNode :
	UsagePrefix? isComposite ?= 'decide' UsageDeclaration? ';'
;

JoinNode returns SysML::JoinNode :
	UsagePrefix? isComposite ?= 'join' UsageDeclaration? ';'
;

ForkNode returns SysML::ForkNode :
	UsagePrefix? isComposite ?= 'fork' UsageDeclaration? ';'
;

EmptyParameterMember returns SysML::ParameterMembership :
	ownedMemberParameter_comp = EmptyParameter
;

EmptyParameter returns SysML::Usage :
	{SysML::ReferenceUsage}
;

/* Action Succession */

ActionTargetSuccession returns SysML::Feature :
	TargetSuccession | GuardedTargetSuccession | DefaultTargetSuccession
;

TargetSuccession returns SysML::Succession :
	'then' ownedFeatureMembership_comp += MultiplicitySourceEndMember 
	ownedFeatureMembership_comp += ConnectorEndMember
;

GuardedTargetSuccession returns SysML::TransitionUsage :
	ownedFeatureMembership_comp += GuardExpressionMember
	'then' ownedFeatureMembership_comp += TransitionSuccessionMember
;

DefaultTargetSuccession returns SysML::TransitionUsage :
	'else' ownedFeatureMembership_comp += TransitionSuccessionMember
;

GuardedSuccession returns SysML::TransitionUsage :
	SuccessionKeyword ( UsageDeclaration? 'first' )? 
	ownedFeatureMembership_comp += TransitionSourceMember 
	ownedFeatureMembership_comp += GuardExpressionMember
	'then' ownedFeatureMembership_comp += TransitionSuccessionMember
;

/* STATES */

/* State Definitions */

StateKeyword :
	'state'
;

StateDefKeyword :
	StateKeyword 'def'
;

StateDefinition returns SysML::StateDefinition :
	( isAbstract ?= 'abstract')? StateDefKeyword ActionDeclaration StateBody
;

fragment StateBody returns SysML::Type :
	';' | '{' StateBodyPart '}'
;

fragment StateBodyPart returns SysML::Type :
	( ownedFeatureMembership_comp += EntryActionMember
	  ( ownedFeatureMembership_comp += EntryTransitionMember )*
	)?
	( ownedFeatureMembership_comp += DoActionMember )?
	( ownedFeatureMembership_comp += ExitActionMember )?
	
	// Note: Using a syntactic predicate here seems to avoid a possible infinite loop
	// while incrementally parsing.
	=> StateDefBodyItem*
;

fragment StateDefBodyItem returns SysML::Type :
	  documentation_comp += OwnedDocumentation
	| ownedMembership_comp += NestedDefinitionMember 
	| ownedMembership_comp += VariantUsageMember
	| ownedFeatureMembership_comp += ParameterFlowUsageMember
	| ownedFeatureMembership_comp += StructureUsageMember
	| ( ownedFeatureMembership_comp += EmptySuccessionMember )?
	  ownedFeatureMembership_comp += IndividualUsageMember
	| ownedFeatureMembership_comp += BehaviorUsageMember
		( ownedFeatureMembership_comp += TargetTransitionUsageMember )*
	| ownedFeatureMembership_comp += TransitionUsageMember
	| ownedImport_comp += PackageImport
;

EntryActionMember returns SysML::StateSubactionMembership :
	DefinitionMemberPrefix kind = EntryActionKind ownedMemberFeature_comp = StateActionUsage
;

EntryActionKind returns SysML::StateSubactionKind :
	'entry'
;

DoActionMember returns SysML::StateSubactionMembership :
	DefinitionMemberPrefix kind = DoActionKind ownedMemberFeature_comp = StateActionUsage
;

DoActionKind returns SysML::StateSubactionKind :
	'do'
;

ExitActionMember returns SysML::StateSubactionMembership :
	DefinitionMemberPrefix kind = ExitActionKind ownedMemberFeature_comp = StateActionUsage
;

ExitActionKind returns SysML::StateSubactionKind :
	'exit'
;

EntryTransitionMember returns SysML::FeatureMembership :
	DefinitionMemberPrefix 
	( ownedMemberFeature_comp = GuardedTargetSuccession 
	| 'then' ownedMemberFeature_comp = TransitionSuccession
	) ';'
;

StateActionUsage returns SysML::ActionUsage :
	EmptyActionUsage ';' | PerformedActionUsage ActionBody
;

EmptyActionUsage returns SysML::ActionUsage :
	{SysML::ActionUsage}
;

PerformedActionUsage returns SysML::ActionUsage :
	  {SysML::PerformActionUsage} PerformActionUsageDeclaration 
	| {SysML::AcceptActionUsage} AcceptNodeDeclaration 
	| {SysML::SendActionUsage} SendNodeDeclaration
;

TransitionUsageMember returns SysML::FeatureMembership :
	DefinitionMemberPrefix ownedMemberFeature_comp = TransitionUsage ';'
;

TargetTransitionUsageMember returns SysML::FeatureMembership :
	DefinitionMemberPrefix ownedMemberFeature_comp = TargetTransitionUsage ';'
;

/* State Usages */

StateUsageKeyword :
	StateKeyword
;

StateUsage returns SysML::StateUsage :
	UsagePrefix? StateUsageKeyword ActionUsageDeclaration StateBody
;

StateFlowUsage returns SysML::StateUsage :
	UsagePrefix? 'ref'? StateUsageKeyword ActionUsageDeclaration StateBody
;

StateRefUsage returns SysML::StateUsage :
	UsagePrefix? ( 'ref' StateUsageKeyword | isComposite ?= StateUsageKeyword ) 
	ActionUsageDeclaration StateBody
;

ExhibitStateUsage returns SysML::ExhibitStateUsage :
    UsagePrefix? 'exhibit' 
    ( ownedRelationship_comp += OwnedSubsetting FeatureSpecializationPart?
    | StateUsageKeyword UsageDeclaration?
    )
    ( ValuePart | ActionUsageParameterList )? StateBody
;

/* Transition Usages */

TransitionUsageKeyword :
	'transition'
;

TransitionUsage returns SysML::TransitionUsage :
	TransitionUsageKeyword ( UsageDeclaration? 'first' )? 
	ownedFeatureMembership_comp += TransitionSourceMember 
	( ownedImport_comp += EmptyImport
	  ownedFeatureMembership_comp += TriggerActionMember )?
	( ownedFeatureMembership_comp += GuardExpressionMember )?
	( ownedFeatureMembership_comp += EffectBehaviorMember )?
	'then' ownedFeatureMembership_comp += TransitionSuccessionMember
;

TargetTransitionUsage returns SysML::TransitionUsage :
	( ownedImport_comp += EmptyImport
	  ownedFeatureMembership_comp += TriggerActionMember )?
	( ownedFeatureMembership_comp += GuardExpressionMember )?
	( ownedFeatureMembership_comp += EffectBehaviorMember )?
	'then' ownedFeatureMembership_comp += TransitionSuccessionMember
;

EmptyImport returns SysML::Import :
	{SysML::Import}
;

TransitionSourceMember returns SysML::FeatureMembership :
	memberFeature = [SysML::Feature|QualifiedName]
;

TriggerActionMember returns SysML::TransitionFeatureMembership :
	kind = TriggerFeatureKind ownedMemberFeature_comp = TriggerAction
;

enum TriggerFeatureKind returns SysML::TransitionFeatureKind :
	trigger = 'accept'
;

TriggerAction returns SysML::AcceptActionUsage :
	ownedFeatureMembership_comp += EmptyParameterMember
	ownedFeatureMembership_comp += ItemFeatureMember
;

GuardExpressionMember returns SysML::TransitionFeatureMembership :
	kind = GuardFeatureKind ownedMemberFeature_comp = OwnedExpression
;

enum GuardFeatureKind returns SysML::TransitionFeatureKind :
	guard = 'if'
;

EffectBehaviorMember returns SysML::TransitionFeatureMembership :
	kind = EffectFeatureKind ownedMemberFeature_comp = EffectBehaviorUsage
;

enum EffectFeatureKind returns SysML::TransitionFeatureKind :
	effect = 'do'
;

EffectBehaviorUsage returns SysML::ActionUsage :
	  EmptyActionUsage | PerformedActionUsage ( '{' ActionBodyItem* '}' )?
;

TransitionSuccessionMember returns SysML::FeatureMembership :
	ownedMemberFeature_comp = TransitionSuccession
;

TransitionSuccession returns SysML::Succession :
	ownedFeatureMembership_comp += EmptySourceEndMember 
	ownedFeatureMembership_comp += ConnectorEndMember
;

/* CALCULATIONS */

/* Calculation Definitions */

CalculationKeyword :
	'calc'
;

CalculationDefKeyword :
	CalculationKeyword 'def'
;

CalculationDefinition returns SysML::CalculationDefinition :
	DefinitionPrefix? CalculationDefKeyword CalculationDeclaration 
	( CalculationBody 
	| '=' ownedFeatureMembership_comp += ResultExpressionMember ';'
	)
;

fragment CalculationDeclaration returns SysML::CalculationDefinition :
	DefinitionDeclaration ( ParameterList ReturnParameterPart? )?
;

fragment ReturnParameterPart returns SysML::Type :
	ownedFeatureMembership_comp += ReturnParameterMember
;

ReturnParameterMember returns SysML::ReturnParameterMembership :
	'return'? ownedMemberParameter_comp = Parameter
;

fragment CalculationBody returns SysML::Type :
	    ';' 
	  | '{' => CalculationBodyItem*
	        ( ownedFeatureMembership_comp += ResultExpressionMember )?
	    '}' 
;

fragment CalculationBodyItem returns SysML::Type :
	  ActionBodyItem
	| ownedFeatureMembership_comp += ReturnParameterFlowUsageMember
;

ReturnParameterFlowUsageMember returns SysML::ReturnParameterMembership :
	DefinitionMemberPrefix 'return' 
	ownedMemberParameter_comp = FlowUsageElement
;

ResultExpressionMember returns SysML::ResultExpressionMembership :
	DefinitionMemberPrefix ownedResultExpression_comp = OwnedExpression
;

/* Calculation Usages */

CalculationUsageKeyword :
	CalculationKeyword
;

CalculationUsage returns SysML::CalculationUsage :
	UsagePrefix? CalculationUsageKeyword CalculationUsageDeclaration CalculationBody
;

CalculationFlowUsage returns SysML::CalculationUsage :
	UsagePrefix? 'ref'? CalculationUsageKeyword CalculationUsageDeclaration CalculationBody
;

CalculationRefUsage returns SysML::CalculationUsage :
	UsagePrefix? ( 'ref' CalculationUsageKeyword | isComposite ?= CalculationUsageKeyword ) 
	CalculationUsageDeclaration CalculationBody
;

fragment CalculationUsageDeclaration returns SysML::Step :
	  UsageDeclaration? ( ValuePart | CalculationUsageParameterPart )?
;

fragment CalculationUsageParameterPart returns SysML::Feature :
	  ActionUsageParameterList CalculationReturnParameterPart?
;

fragment CalculationReturnParameterPart returns SysML::Feature :
	ownedFeatureMembership_comp += CalculationReturnParameterMember
;

CalculationReturnParameterMember returns SysML::ReturnParameterMembership :
	'return'? ownedMemberParameter_comp = ActionUsageParameter
;

/* CONSTRAINTS */

/* Constraint Definitions */

ConstraintKeyword :
	'constraint'
;

ConstraintDefKeyword :
	ConstraintKeyword 'def'
;

ConstraintDefinition returns SysML::ConstraintDefinition :
	DefinitionPrefix? ConstraintDefKeyword ConstraintDeclaration CalculationBody  
;

fragment ConstraintDeclaration returns SysML::ConstraintDefinition :
	DefinitionDeclaration ParameterList? EmptyReturnParameterPart
;

fragment EmptyReturnParameterPart returns SysML::Type :
	ownedFeatureMembership_comp += EmptyReturnParameterMember
;

EmptyReturnParameterMember returns SysML::ReturnParameterMembership :
	ownedMemberParameter_comp = EmptyParameter
;

/* Constraint Usages */

ConstraintUsageKeyword :
	ConstraintKeyword
;

ConstraintUsage returns SysML::ConstraintUsage :
	UsagePrefix? ConstraintUsageKeyword CalculationUsageDeclaration CalculationBody
;

ConstraintFlowUsage returns SysML::ConstraintUsage :
	UsagePrefix? 'ref'? ConstraintUsageKeyword CalculationUsageDeclaration CalculationBody
;

ConstraintRefUsage returns SysML::ConstraintUsage :
	UsagePrefix? ( 'ref' ConstraintUsageKeyword | isComposite ?= ConstraintUsageKeyword ) 
	CalculationUsageDeclaration CalculationBody
;

AssertConstraintUsage returns SysML::AssertConstraintUsage :
	UsagePrefix? 'assert'
    ( ownedRelationship_comp += OwnedSubsetting FeatureSpecializationPart?
    | ConstraintUsageKeyword UsageDeclaration? 
    )
    CalculationUsageParameterPart? InvariantPart CalculationBody
;

fragment InvariantPart returns SysML::Invariant :
	ownedFeatureMembership_comp += TrueLiteralMember
;

TrueLiteralMember returns SysML::FeatureMembership :
	ownedMemberFeature_comp = TrueLiteralExpression
;

TrueLiteralExpression returns SysML::LiteralBoolean :
	{SysML::LiteralBoolean}
;

/* REQUIREMENTS */

/* Requirement Definitions */

RequirementKeyword :
	'requirement'
;

RequirementDefKeyword :
	RequirementKeyword 'def'
;

RequirementDefinition returns SysML::RequirementDefinition :
	DefinitionPrefix? RequirementDefKeyword ConstraintDeclaration RequirementBody  
;

fragment RequirementBody returns SysML::Type :
	  ';' | '{' => RequirementBodyItem* '}'
;

fragment RequirementBodyItem returns SysML::Type :
	  DefinitionBodyItem
	| ownedFeatureMembership_comp += SubjectMember
	| ownedFeatureMembership_comp += RequirementConstraintMember
;

SubjectMember returns SysML::SubjectMembership :
	DefinitionMemberPrefix ownedSubjectParameter_comp = SubjectUsage
;

SubjectUsage returns SysML::ReferenceUsage :
	'subject' Usage
;

RequirementConstraintMember returns SysML::RequirementConstraintMembership :
	DefinitionMemberPrefix kind = RequirementConstraintKind 
	ownedMemberFeature_comp = RequirementConstraintUsage
;

enum RequirementConstraintKind returns SysML::RequirementConstraintKind :
	assumption = 'assume' | requirement = 'require'
;

RequirementConstraintUsage returns SysML::ConstraintUsage :
      ownedRelationship_comp += OwnedSubsetting FeatureSpecialization* 
      CalculationUsageParameterPart? RequirementBody
    | 'constraint' CalculationUsageDeclaration CalculationBody
;

/* Requirement Usages */

RequirementUsageKeyword :
	RequirementKeyword
;

RequirementUsage returns SysML::RequirementUsage :
	UsagePrefix? RequirementUsageKeyword CalculationUsageDeclaration RequirementBody
;

RequirementFlowUsage returns SysML::RequirementUsage :
	UsagePrefix? 'ref'? RequirementUsageKeyword CalculationUsageDeclaration RequirementBody
;

RequirementRefUsage returns SysML::RequirementUsage :
	UsagePrefix? ( 'ref' RequirementUsageKeyword | isComposite ?= RequirementUsageKeyword ) 
	CalculationUsageDeclaration RequirementBody
;

SatisfyRequirementUsage returns SysML::SatisfyRequirementUsage :
	UsagePrefix? 'satisfy'
	( ownedRelationship_comp += OwnedSubsetting FeatureSpecializationPart?
    | RequirementUsageKeyword UsageDeclaration? 
    )
    ( ValuePart | ActionUsageParameterList )?
    ( 'by' ownedMembership_comp += SatisfactionConnectorMember )?
    InvariantPart RequirementBody
;

SatisfactionConnectorMember returns SysML::Membership :
	ownedMemberElement_comp = SatisfactionConnector
;

SatisfactionConnector returns SysML::BindingConnector :
	ownedFeatureMembership_comp += EmptySourceEndMember ownedFeatureMembership_comp += ConnectorEndMember
;

/* CASES */

/* Case Definitions */

CaseKeyword :
	'case'
;

CaseDefKeyword :
	CaseKeyword 'def'
;

CaseDefinition returns SysML::CaseDefinition :
	DefinitionPrefix? CaseDefKeyword CalculationDeclaration CaseBody
;

fragment CaseBody returns SysML::Type :
	    ';' 
	  | '{' => CaseBodyItem*
	        ( ownedFeatureMembership_comp += ResultExpressionMember )?
	    '}' 
;

fragment CaseBodyItem returns SysML::Type :
	  CalculationBodyItem
	| ownedFeatureMembership_comp += SubjectMember 
	| ownedFeatureMembership_comp += ObjectiveMember
	
;

ObjectiveMember returns SysML::ObjectiveMembership :
	DefinitionMemberPrefix 'objective' ownedObjectiveRequirement_comp = ObjectiveRequirementUsage
;

ObjectiveRequirementUsage returns SysML::RequirementUsage :
	CalculationUsageDeclaration RequirementBody
;

/* Case Usages */

CaseUsageKeyword :
	CaseKeyword
;

CaseUsage returns SysML::CaseUsage :
	UsagePrefix? CaseUsageKeyword CalculationUsageDeclaration CaseBody
;

CaseFlowUsage returns SysML::CaseUsage :
	UsagePrefix? 'ref'? CaseUsageKeyword CalculationUsageDeclaration CaseBody
;

CaseRefUsage returns SysML::CaseUsage :
	UsagePrefix? ( 'ref' CaseUsageKeyword | isComposite ?= CaseUsageKeyword ) 
	CalculationUsageDeclaration CaseBody
;

/* ANALYSIS CASES */

AnalysisCaseKeyword :
	'analysis'
;

AnalysisCaseDefKeyword :
	AnalysisCaseKeyword 'def'
;

AnalysisCaseUsageKeyword :
	AnalysisCaseKeyword
;

AnalysisCaseDefinition returns SysML::AnalysisCaseDefinition :
	DefinitionPrefix? AnalysisCaseDefKeyword CalculationDeclaration CaseBody
;

AnalysisCaseUsage returns SysML::AnalysisCaseUsage :
	UsagePrefix? AnalysisCaseUsageKeyword CalculationUsageDeclaration CaseBody
;

AnalysisCaseFlowUsage returns SysML::AnalysisCaseUsage :
	UsagePrefix? 'ref'? AnalysisCaseUsageKeyword CalculationUsageDeclaration CaseBody
;

AnalysisCaseRefUsage returns SysML::AnalysisCaseUsage :
	UsagePrefix? ( 'ref' AnalysisCaseUsageKeyword | isComposite ?= AnalysisCaseUsageKeyword ) 
	CalculationUsageDeclaration CaseBody
;

/* VERIFICATION CASES */

VerificationCaseKeyword :
	'verification'
;

VerificationCaseDefKeyword :
	VerificationCaseKeyword 'def'
;

VerificationCaseUsageKeyword :
	VerificationCaseKeyword
;

VerificationCaseDefinition returns SysML::VerificationCaseDefinition :
	DefinitionPrefix? VerificationCaseDefKeyword CalculationDeclaration CaseBody
;

VerificationCaseUsage returns SysML::VerificationCaseUsage :
	UsagePrefix? VerificationCaseUsageKeyword CalculationUsageDeclaration CaseBody
;

VerificationCaseFlowUsage returns SysML::VerificationCaseUsage :
	UsagePrefix? 'ref'? VerificationCaseUsageKeyword CalculationUsageDeclaration CaseBody
;

VerificationCaseRefUsage returns SysML::VerificationCaseUsage :
	UsagePrefix? ( 'ref' VerificationCaseUsageKeyword | isComposite ?= VerificationCaseUsageKeyword ) 
	CalculationUsageDeclaration CaseBody
;

/* VIEWS */

/* View Definitions */

ViewKeyword :
	'view'
;

ViewDefKeyword :
	ViewKeyword 'def'
;

ViewDefinition returns SysML::ViewDefinition :
	DefinitionPrefix? ViewDefKeyword DefinitionDeclaration DefinitionBody
;

/* View Usages */

ViewUsageKeyword :
	ViewKeyword
;

ViewUsage returns SysML::ViewUsage :
	UsagePrefix? ViewUsageKeyword UsageDeclaration? ValueOrFlowPart? ViewBody
;

ViewFlowUsage returns SysML::ViewUsage :
	UsagePrefix? 'ref'? ViewUsageKeyword UsageDeclaration? ValueOrFlowPart? ViewBody
;

ViewRefUsage returns SysML::ViewUsage :
	UsagePrefix? ( 'ref' ViewUsageKeyword | isComposite ?= ViewUsageKeyword ) UsageDeclaration? ValueOrFlowPart? ViewBody
;

fragment ViewBody returns SysML::ViewUsage :
	';' | '{' ViewBodyItem* '}'
;


fragment ViewBodyItem returns SysML::ViewUsage :
	  DefinitionBodyItem
	| ownedImport_comp += Expose
;

Expose returns SysML::Expose :
	( ownedRelationship_comp += PrefixDocumentation )*
	( visibility = BasicVisibilityIndicator )?  
	'expose' (
	  importedPackage = [SysML::Package|Name] ( '::' | '.' ) '*' 
	| importedPackage = [SysML::Package|ColonQualifiedName] '::' '*' 
	| importedPackage = [SysML::Package|DotQualifiedName] '.' '*'
	) ';'
;

/* VIEWPOINTS */

ViewpointKeyword :
	'viewpoint'
;

ViewpointDefKeyword :
	ViewpointKeyword 'def'
;

ViewpointUsageKeyword :
	ViewpointKeyword
;

ViewpointDefinition returns SysML::ViewpointDefinition :
	DefinitionPrefix? ViewpointDefKeyword ConstraintDeclaration RequirementBody  
;

ViewpointUsage returns SysML::ViewpointUsage :
	UsagePrefix? ViewpointUsageKeyword CalculationUsageDeclaration RequirementBody
;

ViewpointFlowUsage returns SysML::ViewpointUsage :
	UsagePrefix? 'ref'? ViewpointUsageKeyword CalculationUsageDeclaration RequirementBody
;

ViewpointRefUsage returns SysML::ViewpointUsage :
	UsagePrefix? ( 'ref' ViewpointUsageKeyword | isComposite ?= ViewpointUsageKeyword ) 
	CalculationUsageDeclaration RequirementBody
;

/* RENDERINGS */

RenderingKeyword :
	'rendering'
;

RenderingDefKeyword :
	RenderingKeyword 'def'
;

RenderingDefinition returns SysML::RenderingDefinition :
	DefinitionPrefix? RenderingDefKeyword Definition
;

RenderingUsageKeyword :
	RenderingKeyword
;

RenderingUsage returns SysML::RenderingUsage :
	UsagePrefix? RenderingUsageKeyword Usage
;

RenderingFlowUsage returns SysML::RenderingUsage :
	UsagePrefix? 'ref' RenderingUsageKeyword Usage
;

RenderingRefUsage returns SysML::RenderingUsage :
	UsagePrefix? ( 'ref' RenderingUsageKeyword | isComposite ?= RenderingUsageKeyword ) Usage
;

/* EXPRESSIONS */

/* Operator Expressions */

OwnedExpressionMember returns SysML::FeatureMembership :
	ownedMemberFeature_comp = OwnedExpression
;

OwnedExpression returns SysML::Expression :
	 ConditionalExpression | QueryPathExpression
;

// Conditional Test Expressions

ConditionalExpression returns SysML::Expression :
	NullCoalescingExpression ( {SysML::OperatorExpression.operand_comp += current}
		operator = ConditionalTestOperator operand_comp += OwnedExpression ':' operand_comp += ConditionalExpression
	)?
;

ConditionalTestOperator: 
	'?'
;

// Null Coalescing Expressions

NullCoalescingExpression returns SysML::Expression :
	ConditionalOrExpression ( {SysML::OperatorExpression.operand_comp += current}
		operator = NullCoalescingOperator operand_comp += ConditionalOrExpression )*
;

NullCoalescingOperator :
	'??'
;

// Conditional Logical Expressions

ConditionalOrExpression returns SysML::Expression :
	ConditionalAndExpression ( {SysML::OperatorExpression.operand_comp += current}
		operator = ConditionalOrOperator operand_comp += ConditionalAndExpression )*
;

ConditionalOrOperator :
	'||'
;

ConditionalAndExpression returns SysML::Expression :
	OrExpression ( {SysML::OperatorExpression.operand_comp += current}
		operator = ConditionalAndOperator operand_comp += OrExpression )*
;

ConditionalAndOperator :
	'&&'
;

// Logical Expressions

OrExpression returns SysML::Expression :
	XorExpression ( {SysML::OperatorExpression.operand_comp += current}  
		operator = OrOperator operand_comp += XorExpression )*
;

OrOperator :
	'|'
;

XorExpression returns SysML::Expression :
	AndExpression ( {SysML::OperatorExpression.operand_comp += current}  
		operator = XorOperator operand_comp += AndExpression )*
;

XorOperator :
	'^'
;

AndExpression returns SysML::Expression :
	EqualityExpression ( {SysML::OperatorExpression.operand_comp += current}  
		operator = AndOperator operand_comp += EqualityExpression )*
;

AndOperator :
	'&'
;

// Equality Expressions

EqualityExpression returns SysML::Expression :
	ClassificationExpression ( {SysML::OperatorExpression.operand_comp += current}  
		operator = EqualityOperator operand_comp += ClassificationExpression )*
	
;

EqualityOperator :
	'==' | '!=' 
;

// Classification Expressions

ClassificationExpression returns SysML::Expression :
	RelationalExpression ( {SysML::OperatorExpression.operand_comp += current}
		operator = ClassificationOperator ownedFeatureMembership_comp += TypeReferenceMember )?
;

ClassificationOperator :
	'instanceof' | 'hastype' | 'istype'
;

TypeReferenceMember returns SysML::FeatureMembership :
	ownedMemberFeature_comp = TypeReference
;

TypeReference returns SysML::Feature :
	ownedRelationship_comp += OwnedFeatureTyping
;

// Relational Expressions

RelationalExpression returns SysML::Expression :
	AdditiveExpression ( {SysML::OperatorExpression.operand_comp += current}  
		operator = RelationalOperator operand_comp += AdditiveExpression )*
;

RelationalOperator :
	'<' | '>' | '<=' | '>='
;

// Arithmetic Expressions

AdditiveExpression returns SysML::Expression :
	MultiplicativeExpression ( {SysML::OperatorExpression.operand_comp += current}  
		operator = AdditiveOperator operand_comp += MultiplicativeExpression )*	
;

AdditiveOperator :
	'+' | '-' 
;

MultiplicativeExpression returns SysML::Expression :
	ExponentiationExpression ( {SysML::OperatorExpression.operand_comp += current}  
		operator = MultiplicativeOperator operand_comp += ExponentiationExpression )*	
;

MultiplicativeOperator :
	'*' | '/' 
;

ExponentiationExpression returns SysML::Expression :
	UnitsExpression ( {SysML::OperatorExpression.operand_comp += current}  
		operator = ExponentiationOperator operand_comp += UnitsExpression )*		
;

ExponentiationOperator :
	'**'
;

// Units Expressions

UnitsExpression returns SysML::Expression :
	UnaryExpression ( {SysML::OperatorExpression.operand_comp += current} 
		operator = '@' '[' operand_comp += OwnedExpression ']' )?		
;

// Unary Expressions

UnaryExpression returns SysML::Expression:
	  {SysML::OperatorExpression} operator = UnaryOperator operand_comp += ExtentExpression
	| ExtentExpression
;

UnaryOperator :
	'+' | '-' | '!' | '~'
;

// Extent Expressions

ExtentExpression returns SysML::Expression :
	  {SysML::OperatorExpression} operator = 'all' ownedFeatureMembership_comp += TypeReferenceMember
	| SequenceExpression
;

/* Sequence Expressions */

SequenceExpression returns SysML::Expression :
	( SequenceConstructionExpression | BaseExpression )
	( {SysML::OperatorExpression.operand_comp += current} 
	  operator = '[' operand_comp += OwnedExpression ']'
	| {SysML::OperatorExpression.operand_comp += current} '->' 
	  operator = Name ( ownedFeatureMembership_comp += BodyExpressionMember )+
	)*
;

BodyExpressionMember returns SysML::FeatureMembership :
	ownedMemberFeature_comp = BodyExpression
;

BodyExpression returns SysML::BlockExpression :
	   => ( ownedFeatureMembership_comp += BodyParameterMember 
	   	    ( ownedFeatureMembership_comp += BodyParameterMember )* 
	        '(' ownedFeatureMembership_comp += ResultExpressionMember ')' )
	 | ownedRelationship_comp += ExpressionTyping
;

BodyParameterMember returns SysML::ParameterMembership :
	memberName = Name ownedMemberParameter_comp = BodyParameter
;

BodyParameter returns SysML::Usage :
	{SysML::ReferenceUsage} ( TypedBy MultiplicityPart? | MultiplicityPart TypedBy? )?
;

ExpressionTyping returns SysML::FeatureTyping :
	type = [ SysML::Function | QualifiedName ]
;

SequenceConstructionExpression returns SysML::Expression :
	  {SysML::NullExpression} '{' '}'
	| '{' OwnedExpression
	      ( {SysML::OperatorExpression.operand_comp += current} operator = ',' operand_comp += SequenceElementList
	      | {SysML::OperatorExpression.operand_comp += current} operator = '..' operand_comp += OwnedExpression
	      )?
	  '}'
;

SequenceElementList returns SysML::Expression :	
	OwnedExpression ( {SysML::OperatorExpression.operand_comp += current} operator = ',' operand_comp += SequenceElementList )?
;

/* Base Expressions */

BaseExpression returns SysML::Expression :
	  NullExpression
	| LiteralExpression 
	| FeatureReferenceExpression 
	| InvocationExpression 
	| ExtentExpression_Deprecated
	| '(' OwnedExpression ')'
;

// Null Expressions

NullExpression returns SysML::NullExpression :
	{SysML::NullExpression} 'null'
;

// Feature Reference Expressions

FeatureReferenceExpression returns SysML::FeatureReferenceExpression :
	ownedFeatureMembership_comp += FeatureReferenceMember
;

FeatureReferenceMember returns SysML::ReturnParameterMembership :
	ownedMemberFeature_comp = FeatureReference
;

FeatureReference returns SysML::ReferenceUsage :
	ownedRelationship_comp += OwnedSubsetting
;

// Invocation Expressions

InvocationExpression returns SysML::InvocationExpression :
	ownedRelationship_comp += OwnedFeatureTyping '(' ArgumentList? ')'
;

fragment ArgumentList returns SysML::Expression :
	PositionalArgumentList | NamedArgumentList
;

fragment PositionalArgumentList returns SysML::Expression :
	ownedFeatureMembership_comp += OwnedExpressionMember ( ',' ownedFeatureMembership_comp += OwnedExpressionMember )*
;

fragment NamedArgumentList returns SysML::Expression :
	ownedFeatureMembership_comp += NamedExpressionMember ( ',' ownedFeatureMembership_comp += NamedExpressionMember )*
;

NamedExpressionMember returns SysML::FeatureMembership :
	memberName = Name '=>' ownedMemberFeature_comp = OwnedExpression
;

// Extent Expressions (Deprecated)

ExtentExpression_Deprecated returns SysML::OperatorExpression :
	  ownedFeatureMembership_comp += TypeReferenceMember '.' operator = 'allInstances' '(' ')'
;

/* Literal Expressions */

LiteralExpression returns SysML::LiteralExpression :
	  LiteralBoolean 
	| LiteralString 
	| LiteralInteger
	| LiteralReal 
	| LiteralUnbounded
;

LiteralBoolean returns SysML::LiteralBoolean :
	value = BooleanValue
;

BooleanValue returns Ecore::EBoolean :
	'true' | 'false'
;

LiteralString returns SysML::LiteralString :
	value = STRING_VALUE
;

LiteralInteger returns SysML::LiteralInteger:
	value = DECIMAL_VALUE
;

LiteralReal returns SysML::LiteralReal:
	value = RealValue
;

RealValue returns Ecore::EDouble:
	DECIMAL_VALUE? '.' ( DECIMAL_VALUE | EXP_VALUE ) | EXP_VALUE
;

LiteralUnbounded returns SysML::LiteralUnbounded :
	{SysML::LiteralUnbounded} '*'
;

LiteralUnlimitedNatural returns SysML::LiteralExpression:
	LiteralInteger | LiteralUnbounded
;

/* QUERY PATH EXPRESSIONS */

QueryPathExpression returns SysML::Expression :
	QueryHeadExpression
	( '[' {SysML::QueryQualifierExpression.operand_comp += current}
         ( ownedFeatureMembership_comp += BodyExpressionMember ) ']' )?
	( '/' {SysML::QueryPathStepExpression.operand_comp += current}
		operand_comp += QueryNameExpression
		( '[' {SysML::QueryQualifierExpression.operand_comp += current}
	         ( ownedFeatureMembership_comp += BodyExpressionMember ) ']' )?
	)*
;

QueryNameExpression returns SysML::QueryPathExpression :
    /* isParent ?= '..'
    | isDescendants ?= '/'
    | @traversal
    */
    ownedFeatureMembership_comp += FeatureReferenceMember
;

QueryHeadExpression returns SysML::QueryPathExpression :
	'./' ownedFeatureMembership_comp += FeatureReferenceMember
;        

/* NAMES */

Name :
	ID | UNRESTRICTED_NAME
;

QualifiedName :
	Name | ColonQualifiedName | DotQualifiedName
;

ColonQualifiedName :
	Name ('::' Name)+
;

DotQualifiedName :
	Name ('.' Name)+
;

/* TERMINALS */

//terminal NATURAL_VALUE returns Ecore::EInt :
//	('0' | '1'..'9' (('_')? '0'..'9')*) | //DECIMAL 
//	(('0b' | '0B') '0'..'1' (('_')? '0'..'1')*) | // BINARY
//	(('0x'|'0X') ('0'..'9'|'a'..'f'|'A'..'F')  (('_')? ('0'..'9'|'a'..'f'|'A'..'F'))*) | // HEX
//	('0' ('_')? '0'..'7' (('_')? '0'..'7')*) // OCT
//;

terminal DECIMAL_VALUE returns Ecore::EInt :
	'0'..'9' ('0'..'9')*
;

terminal EXP_VALUE :
	DECIMAL_VALUE ('e' | 'E') ('+' | '-')? DECIMAL_VALUE
;

terminal ID : ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')* ;
terminal UNRESTRICTED_NAME returns Ecore::EString : 
	'\'' ( '\\' ('b'|'t'|'n'|'f'|'r'|'"'|"'"|'\\') | !('\\'|'\'') )* '\'' ;

terminal STRING_VALUE returns Ecore::EString : 
	'"' ( '\\' ('b'|'t'|'n'|'f'|'r'|'"'|"'"|'\\') | !('\\'|'"') )* '"' ;

terminal REGULAR_COMMENT	: '/*' !'*' -> '*/';
terminal DOCUMENTATION_COMMENT : '/**' -> '*/' ;

terminal ML_NOTE : '//*' -> '*/';
terminal SL_NOTE : '//' (!('\n'|'\r') !('\n'|'\r')*)? ('\r'? '\n')?;

terminal WS : (' '|'\t'|'\r'|'\n')+;
