/*
 * generated by Xtext 2.34.0
 */
package org.omg.kerml.xtext.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.EnumLiteralDeclaration;
import org.eclipse.xtext.EnumRule;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.service.AbstractElementFinder;
import org.eclipse.xtext.service.GrammarProvider;
import org.omg.kerml.expressions.xtext.services.KerMLExpressionsGrammarAccess;

@Singleton
public class KerMLGrammarAccess extends AbstractElementFinder.AbstractGrammarElementFinder {
	
	public class RootNamespaceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.xtext.KerML.RootNamespace");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cNamespaceAction_0 = (Action)cGroup.eContents().get(0);
		private final RuleCall cNamespaceBodyElementParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		///* ROOT NAMESPACE */
		//RootNamespace returns SysML::Namespace :
		//    {SysML::Namespace}NamespaceBodyElement*
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//{SysML::Namespace}NamespaceBodyElement*
		public Group getGroup() { return cGroup; }
		
		//{SysML::Namespace}
		public Action getNamespaceAction_0() { return cNamespaceAction_0; }
		
		//NamespaceBodyElement*
		public RuleCall getNamespaceBodyElementParserRuleCall_1() { return cNamespaceBodyElementParserRuleCall_1; }
	}
	public class IdentificationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.xtext.KerML.Identification");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cLessThanSignKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Assignment cDeclaredShortNameAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cDeclaredShortNameNameParserRuleCall_0_1_0 = (RuleCall)cDeclaredShortNameAssignment_0_1.eContents().get(0);
		private final Keyword cGreaterThanSignKeyword_0_2 = (Keyword)cGroup_0.eContents().get(2);
		private final Assignment cDeclaredNameAssignment_0_3 = (Assignment)cGroup_0.eContents().get(3);
		private final RuleCall cDeclaredNameNameParserRuleCall_0_3_0 = (RuleCall)cDeclaredNameAssignment_0_3.eContents().get(0);
		private final Assignment cDeclaredNameAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cDeclaredNameNameParserRuleCall_1_0 = (RuleCall)cDeclaredNameAssignment_1.eContents().get(0);
		
		///* ELEMENTS */
		///* Elements */
		//fragment Identification returns SysML::Element :
		//      '<' declaredShortName = Name '>' ( declaredName = Name )?
		//    | declaredName = Name
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//  '<' declaredShortName = Name '>' ( declaredName = Name )?
		//| declaredName = Name
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'<' declaredShortName = Name '>' ( declaredName = Name )?
		public Group getGroup_0() { return cGroup_0; }
		
		//'<'
		public Keyword getLessThanSignKeyword_0_0() { return cLessThanSignKeyword_0_0; }
		
		//declaredShortName = Name
		public Assignment getDeclaredShortNameAssignment_0_1() { return cDeclaredShortNameAssignment_0_1; }
		
		//Name
		public RuleCall getDeclaredShortNameNameParserRuleCall_0_1_0() { return cDeclaredShortNameNameParserRuleCall_0_1_0; }
		
		//'>'
		public Keyword getGreaterThanSignKeyword_0_2() { return cGreaterThanSignKeyword_0_2; }
		
		//( declaredName = Name )?
		public Assignment getDeclaredNameAssignment_0_3() { return cDeclaredNameAssignment_0_3; }
		
		//Name
		public RuleCall getDeclaredNameNameParserRuleCall_0_3_0() { return cDeclaredNameNameParserRuleCall_0_3_0; }
		
		//declaredName = Name
		public Assignment getDeclaredNameAssignment_1() { return cDeclaredNameAssignment_1; }
		
		//Name
		public RuleCall getDeclaredNameNameParserRuleCall_1_0() { return cDeclaredNameNameParserRuleCall_1_0; }
	}
	public class RelationshipBodyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.xtext.KerML.RelationshipBody");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cSemicolonKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cRelationshipOwnedElementParserRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		private final Keyword cRightCurlyBracketKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		
		///* Relationships */
		//fragment RelationshipBody returns SysML::Relationship :
		//    ';' | '{' RelationshipOwnedElement* '}'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//';' | '{' RelationshipOwnedElement* '}'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//';'
		public Keyword getSemicolonKeyword_0() { return cSemicolonKeyword_0; }
		
		//'{' RelationshipOwnedElement* '}'
		public Group getGroup_1() { return cGroup_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1_0() { return cLeftCurlyBracketKeyword_1_0; }
		
		//RelationshipOwnedElement*
		public RuleCall getRelationshipOwnedElementParserRuleCall_1_1() { return cRelationshipOwnedElementParserRuleCall_1_1; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_1_2() { return cRightCurlyBracketKeyword_1_2; }
	}
	public class RelationshipOwnedElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.xtext.KerML.RelationshipOwnedElement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cOwnedRelatedElementAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cOwnedRelatedElementOwnedRelatedElementParserRuleCall_0_0 = (RuleCall)cOwnedRelatedElementAssignment_0.eContents().get(0);
		private final Assignment cOwnedRelationshipAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cOwnedRelationshipOwnedAnnotationParserRuleCall_1_0 = (RuleCall)cOwnedRelationshipAssignment_1.eContents().get(0);
		
		//fragment RelationshipOwnedElement returns SysML::Relationship:
		//      ownedRelatedElement += OwnedRelatedElement
		//    | ownedRelationship += OwnedAnnotation
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//  ownedRelatedElement += OwnedRelatedElement
		//| ownedRelationship += OwnedAnnotation
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//ownedRelatedElement += OwnedRelatedElement
		public Assignment getOwnedRelatedElementAssignment_0() { return cOwnedRelatedElementAssignment_0; }
		
		//OwnedRelatedElement
		public RuleCall getOwnedRelatedElementOwnedRelatedElementParserRuleCall_0_0() { return cOwnedRelatedElementOwnedRelatedElementParserRuleCall_0_0; }
		
		//ownedRelationship += OwnedAnnotation
		public Assignment getOwnedRelationshipAssignment_1() { return cOwnedRelationshipAssignment_1; }
		
		//OwnedAnnotation
		public RuleCall getOwnedRelationshipOwnedAnnotationParserRuleCall_1_0() { return cOwnedRelationshipOwnedAnnotationParserRuleCall_1_0; }
	}
	public class OwnedRelatedElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.xtext.KerML.OwnedRelatedElement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cNonFeatureElementParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cFeatureElementParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//OwnedRelatedElement returns SysML::Element :
		//    NonFeatureElement | FeatureElement
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//NonFeatureElement | FeatureElement
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//NonFeatureElement
		public RuleCall getNonFeatureElementParserRuleCall_0() { return cNonFeatureElementParserRuleCall_0; }
		
		//FeatureElement
		public RuleCall getFeatureElementParserRuleCall_1() { return cFeatureElementParserRuleCall_1; }
	}
	public class DependencyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.xtext.KerML.Dependency");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cOwnedRelationshipAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cOwnedRelationshipPrefixMetadataAnnotationParserRuleCall_0_0 = (RuleCall)cOwnedRelationshipAssignment_0.eContents().get(0);
		private final Keyword cDependencyKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final RuleCall cIdentificationParserRuleCall_2_0 = (RuleCall)cGroup_2.eContents().get(0);
		private final Keyword cFromKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Assignment cClientAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cClientElementCrossReference_3_0 = (CrossReference)cClientAssignment_3.eContents().get(0);
		private final RuleCall cClientElementQualifiedNameParserRuleCall_3_0_1 = (RuleCall)cClientElementCrossReference_3_0.eContents().get(1);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cCommaKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cClientAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final CrossReference cClientElementCrossReference_4_1_0 = (CrossReference)cClientAssignment_4_1.eContents().get(0);
		private final RuleCall cClientElementQualifiedNameParserRuleCall_4_1_0_1 = (RuleCall)cClientElementCrossReference_4_1_0.eContents().get(1);
		private final Keyword cToKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cSupplierAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final CrossReference cSupplierElementCrossReference_6_0 = (CrossReference)cSupplierAssignment_6.eContents().get(0);
		private final RuleCall cSupplierElementQualifiedNameParserRuleCall_6_0_1 = (RuleCall)cSupplierElementCrossReference_6_0.eContents().get(1);
		private final Group cGroup_7 = (Group)cGroup.eContents().get(7);
		private final Keyword cCommaKeyword_7_0 = (Keyword)cGroup_7.eContents().get(0);
		private final Assignment cSupplierAssignment_7_1 = (Assignment)cGroup_7.eContents().get(1);
		private final CrossReference cSupplierElementCrossReference_7_1_0 = (CrossReference)cSupplierAssignment_7_1.eContents().get(0);
		private final RuleCall cSupplierElementQualifiedNameParserRuleCall_7_1_0_1 = (RuleCall)cSupplierElementCrossReference_7_1_0.eContents().get(1);
		private final RuleCall cRelationshipBodyParserRuleCall_8 = (RuleCall)cGroup.eContents().get(8);
		
		///* DEPENDENCIES */
		//Dependency returns SysML::Dependency :
		//    ( ownedRelationship += PrefixMetadataAnnotation )*
		//    'dependency' ( Identification? 'from' )?
		//    client += [SysML::Element|QualifiedName] ( ',' client += [SysML::Element|QualifiedName] )* 'to'
		//    supplier += [SysML::Element|QualifiedName] ( ',' supplier += [SysML::Element|QualifiedName] )*
		//    RelationshipBody
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//( ownedRelationship += PrefixMetadataAnnotation )*
		//'dependency' ( Identification? 'from' )?
		//client += [SysML::Element|QualifiedName] ( ',' client += [SysML::Element|QualifiedName] )* 'to'
		//supplier += [SysML::Element|QualifiedName] ( ',' supplier += [SysML::Element|QualifiedName] )*
		//RelationshipBody
		public Group getGroup() { return cGroup; }
		
		//( ownedRelationship += PrefixMetadataAnnotation )*
		public Assignment getOwnedRelationshipAssignment_0() { return cOwnedRelationshipAssignment_0; }
		
		//PrefixMetadataAnnotation
		public RuleCall getOwnedRelationshipPrefixMetadataAnnotationParserRuleCall_0_0() { return cOwnedRelationshipPrefixMetadataAnnotationParserRuleCall_0_0; }
		
		//'dependency'
		public Keyword getDependencyKeyword_1() { return cDependencyKeyword_1; }
		
		//( Identification? 'from' )?
		public Group getGroup_2() { return cGroup_2; }
		
		//Identification?
		public RuleCall getIdentificationParserRuleCall_2_0() { return cIdentificationParserRuleCall_2_0; }
		
		//'from'
		public Keyword getFromKeyword_2_1() { return cFromKeyword_2_1; }
		
		//client += [SysML::Element|QualifiedName]
		public Assignment getClientAssignment_3() { return cClientAssignment_3; }
		
		//[SysML::Element|QualifiedName]
		public CrossReference getClientElementCrossReference_3_0() { return cClientElementCrossReference_3_0; }
		
		//QualifiedName
		public RuleCall getClientElementQualifiedNameParserRuleCall_3_0_1() { return cClientElementQualifiedNameParserRuleCall_3_0_1; }
		
		//( ',' client += [SysML::Element|QualifiedName] )*
		public Group getGroup_4() { return cGroup_4; }
		
		//','
		public Keyword getCommaKeyword_4_0() { return cCommaKeyword_4_0; }
		
		//client += [SysML::Element|QualifiedName]
		public Assignment getClientAssignment_4_1() { return cClientAssignment_4_1; }
		
		//[SysML::Element|QualifiedName]
		public CrossReference getClientElementCrossReference_4_1_0() { return cClientElementCrossReference_4_1_0; }
		
		//QualifiedName
		public RuleCall getClientElementQualifiedNameParserRuleCall_4_1_0_1() { return cClientElementQualifiedNameParserRuleCall_4_1_0_1; }
		
		//'to'
		public Keyword getToKeyword_5() { return cToKeyword_5; }
		
		//supplier += [SysML::Element|QualifiedName]
		public Assignment getSupplierAssignment_6() { return cSupplierAssignment_6; }
		
		//[SysML::Element|QualifiedName]
		public CrossReference getSupplierElementCrossReference_6_0() { return cSupplierElementCrossReference_6_0; }
		
		//QualifiedName
		public RuleCall getSupplierElementQualifiedNameParserRuleCall_6_0_1() { return cSupplierElementQualifiedNameParserRuleCall_6_0_1; }
		
		//( ',' supplier += [SysML::Element|QualifiedName] )*
		public Group getGroup_7() { return cGroup_7; }
		
		//','
		public Keyword getCommaKeyword_7_0() { return cCommaKeyword_7_0; }
		
		//supplier += [SysML::Element|QualifiedName]
		public Assignment getSupplierAssignment_7_1() { return cSupplierAssignment_7_1; }
		
		//[SysML::Element|QualifiedName]
		public CrossReference getSupplierElementCrossReference_7_1_0() { return cSupplierElementCrossReference_7_1_0; }
		
		//QualifiedName
		public RuleCall getSupplierElementQualifiedNameParserRuleCall_7_1_0_1() { return cSupplierElementQualifiedNameParserRuleCall_7_1_0_1; }
		
		//RelationshipBody
		public RuleCall getRelationshipBodyParserRuleCall_8() { return cRelationshipBodyParserRuleCall_8; }
	}
	public class AnnotationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.xtext.KerML.Annotation");
		private final Assignment cAnnotatedElementAssignment = (Assignment)rule.eContents().get(1);
		private final CrossReference cAnnotatedElementElementCrossReference_0 = (CrossReference)cAnnotatedElementAssignment.eContents().get(0);
		private final RuleCall cAnnotatedElementElementQualifiedNameParserRuleCall_0_1 = (RuleCall)cAnnotatedElementElementCrossReference_0.eContents().get(1);
		
		///* ANNOTATIONS */
		//Annotation returns SysML::Annotation :
		//    annotatedElement = [SysML::Element|QualifiedName]
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//annotatedElement = [SysML::Element|QualifiedName]
		public Assignment getAnnotatedElementAssignment() { return cAnnotatedElementAssignment; }
		
		//[SysML::Element|QualifiedName]
		public CrossReference getAnnotatedElementElementCrossReference_0() { return cAnnotatedElementElementCrossReference_0; }
		
		//QualifiedName
		public RuleCall getAnnotatedElementElementQualifiedNameParserRuleCall_0_1() { return cAnnotatedElementElementQualifiedNameParserRuleCall_0_1; }
	}
	public class OwnedAnnotationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.xtext.KerML.OwnedAnnotation");
		private final Assignment cOwnedRelatedElementAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cOwnedRelatedElementAnnotatingElementParserRuleCall_0 = (RuleCall)cOwnedRelatedElementAssignment.eContents().get(0);
		
		//OwnedAnnotation returns SysML::Annotation :
		//    ownedRelatedElement += AnnotatingElement
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//ownedRelatedElement += AnnotatingElement
		public Assignment getOwnedRelatedElementAssignment() { return cOwnedRelatedElementAssignment; }
		
		//AnnotatingElement
		public RuleCall getOwnedRelatedElementAnnotatingElementParserRuleCall_0() { return cOwnedRelatedElementAnnotatingElementParserRuleCall_0; }
	}
	public class AnnotatingElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.xtext.KerML.AnnotatingElement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cCommentParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cDocumentationParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cTextualRepresentationParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cMetadataFeatureParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//AnnotatingElement returns SysML::AnnotatingElement :
		//      Comment
		//    | Documentation
		//    | TextualRepresentation
		//    | MetadataFeature
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//  Comment
		//| Documentation
		//| TextualRepresentation
		//| MetadataFeature
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Comment
		public RuleCall getCommentParserRuleCall_0() { return cCommentParserRuleCall_0; }
		
		//Documentation
		public RuleCall getDocumentationParserRuleCall_1() { return cDocumentationParserRuleCall_1; }
		
		//TextualRepresentation
		public RuleCall getTextualRepresentationParserRuleCall_2() { return cTextualRepresentationParserRuleCall_2; }
		
		//MetadataFeature
		public RuleCall getMetadataFeatureParserRuleCall_3() { return cMetadataFeatureParserRuleCall_3; }
	}
	public class CommentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.xtext.KerML.Comment");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final Keyword cCommentKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final RuleCall cIdentificationParserRuleCall_0_1 = (RuleCall)cGroup_0.eContents().get(1);
		private final Group cGroup_0_2 = (Group)cGroup_0.eContents().get(2);
		private final Keyword cAboutKeyword_0_2_0 = (Keyword)cGroup_0_2.eContents().get(0);
		private final Assignment cOwnedRelationshipAssignment_0_2_1 = (Assignment)cGroup_0_2.eContents().get(1);
		private final RuleCall cOwnedRelationshipAnnotationParserRuleCall_0_2_1_0 = (RuleCall)cOwnedRelationshipAssignment_0_2_1.eContents().get(0);
		private final Group cGroup_0_2_2 = (Group)cGroup_0_2.eContents().get(2);
		private final Keyword cCommaKeyword_0_2_2_0 = (Keyword)cGroup_0_2_2.eContents().get(0);
		private final Assignment cOwnedRelationshipAssignment_0_2_2_1 = (Assignment)cGroup_0_2_2.eContents().get(1);
		private final RuleCall cOwnedRelationshipAnnotationParserRuleCall_0_2_2_1_0 = (RuleCall)cOwnedRelationshipAssignment_0_2_2_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cLocaleKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cLocaleAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cLocaleSTRING_VALUETerminalRuleCall_1_1_0 = (RuleCall)cLocaleAssignment_1_1.eContents().get(0);
		private final Assignment cBodyAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cBodyREGULAR_COMMENTTerminalRuleCall_2_0 = (RuleCall)cBodyAssignment_2.eContents().get(0);
		
		///* Comments */
		//Comment returns SysML::Comment :
		//    ( 'comment' Identification?
		//      ('about' ownedRelationship += Annotation
		//         ( ',' ownedRelationship += Annotation )* )?
		//    )?
		//    ( 'locale' locale = STRING_VALUE )?
		//    body = REGULAR_COMMENT
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//( 'comment' Identification?
		//  ('about' ownedRelationship += Annotation
		//     ( ',' ownedRelationship += Annotation )* )?
		//)?
		//( 'locale' locale = STRING_VALUE )?
		//body = REGULAR_COMMENT
		public Group getGroup() { return cGroup; }
		
		//( 'comment' Identification?
		//  ('about' ownedRelationship += Annotation
		//     ( ',' ownedRelationship += Annotation )* )?
		//)?
		public Group getGroup_0() { return cGroup_0; }
		
		//'comment'
		public Keyword getCommentKeyword_0_0() { return cCommentKeyword_0_0; }
		
		//Identification?
		public RuleCall getIdentificationParserRuleCall_0_1() { return cIdentificationParserRuleCall_0_1; }
		
		//('about' ownedRelationship += Annotation
		//   ( ',' ownedRelationship += Annotation )* )?
		public Group getGroup_0_2() { return cGroup_0_2; }
		
		//'about'
		public Keyword getAboutKeyword_0_2_0() { return cAboutKeyword_0_2_0; }
		
		//ownedRelationship += Annotation
		public Assignment getOwnedRelationshipAssignment_0_2_1() { return cOwnedRelationshipAssignment_0_2_1; }
		
		//Annotation
		public RuleCall getOwnedRelationshipAnnotationParserRuleCall_0_2_1_0() { return cOwnedRelationshipAnnotationParserRuleCall_0_2_1_0; }
		
		//( ',' ownedRelationship += Annotation )*
		public Group getGroup_0_2_2() { return cGroup_0_2_2; }
		
		//','
		public Keyword getCommaKeyword_0_2_2_0() { return cCommaKeyword_0_2_2_0; }
		
		//ownedRelationship += Annotation
		public Assignment getOwnedRelationshipAssignment_0_2_2_1() { return cOwnedRelationshipAssignment_0_2_2_1; }
		
		//Annotation
		public RuleCall getOwnedRelationshipAnnotationParserRuleCall_0_2_2_1_0() { return cOwnedRelationshipAnnotationParserRuleCall_0_2_2_1_0; }
		
		//( 'locale' locale = STRING_VALUE )?
		public Group getGroup_1() { return cGroup_1; }
		
		//'locale'
		public Keyword getLocaleKeyword_1_0() { return cLocaleKeyword_1_0; }
		
		//locale = STRING_VALUE
		public Assignment getLocaleAssignment_1_1() { return cLocaleAssignment_1_1; }
		
		//STRING_VALUE
		public RuleCall getLocaleSTRING_VALUETerminalRuleCall_1_1_0() { return cLocaleSTRING_VALUETerminalRuleCall_1_1_0; }
		
		//body = REGULAR_COMMENT
		public Assignment getBodyAssignment_2() { return cBodyAssignment_2; }
		
		//REGULAR_COMMENT
		public RuleCall getBodyREGULAR_COMMENTTerminalRuleCall_2_0() { return cBodyREGULAR_COMMENTTerminalRuleCall_2_0; }
	}
	public class DocumentationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.xtext.KerML.Documentation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDocKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cIdentificationParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cLocaleKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cLocaleAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cLocaleSTRING_VALUETerminalRuleCall_2_1_0 = (RuleCall)cLocaleAssignment_2_1.eContents().get(0);
		private final Assignment cBodyAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cBodyREGULAR_COMMENTTerminalRuleCall_3_0 = (RuleCall)cBodyAssignment_3.eContents().get(0);
		
		//Documentation returns SysML::Documentation :
		//    'doc' Identification?
		//    ( 'locale' locale = STRING_VALUE )?
		//    body = REGULAR_COMMENT
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'doc' Identification?
		//( 'locale' locale = STRING_VALUE )?
		//body = REGULAR_COMMENT
		public Group getGroup() { return cGroup; }
		
		//'doc'
		public Keyword getDocKeyword_0() { return cDocKeyword_0; }
		
		//Identification?
		public RuleCall getIdentificationParserRuleCall_1() { return cIdentificationParserRuleCall_1; }
		
		//( 'locale' locale = STRING_VALUE )?
		public Group getGroup_2() { return cGroup_2; }
		
		//'locale'
		public Keyword getLocaleKeyword_2_0() { return cLocaleKeyword_2_0; }
		
		//locale = STRING_VALUE
		public Assignment getLocaleAssignment_2_1() { return cLocaleAssignment_2_1; }
		
		//STRING_VALUE
		public RuleCall getLocaleSTRING_VALUETerminalRuleCall_2_1_0() { return cLocaleSTRING_VALUETerminalRuleCall_2_1_0; }
		
		//body = REGULAR_COMMENT
		public Assignment getBodyAssignment_3() { return cBodyAssignment_3; }
		
		//REGULAR_COMMENT
		public RuleCall getBodyREGULAR_COMMENTTerminalRuleCall_3_0() { return cBodyREGULAR_COMMENTTerminalRuleCall_3_0; }
	}
	public class TextualRepresentationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.xtext.KerML.TextualRepresentation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final Keyword cRepKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final RuleCall cIdentificationParserRuleCall_0_1 = (RuleCall)cGroup_0.eContents().get(1);
		private final Keyword cLanguageKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cLanguageAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cLanguageSTRING_VALUETerminalRuleCall_2_0 = (RuleCall)cLanguageAssignment_2.eContents().get(0);
		private final Assignment cBodyAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cBodyREGULAR_COMMENTTerminalRuleCall_3_0 = (RuleCall)cBodyAssignment_3.eContents().get(0);
		
		///* Textual Representation */
		//TextualRepresentation returns SysML::TextualRepresentation :
		//    ( 'rep' Identification? )?
		//    'language' language = STRING_VALUE
		//    body = REGULAR_COMMENT
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//( 'rep' Identification? )?
		//'language' language = STRING_VALUE
		//body = REGULAR_COMMENT
		public Group getGroup() { return cGroup; }
		
		//( 'rep' Identification? )?
		public Group getGroup_0() { return cGroup_0; }
		
		//'rep'
		public Keyword getRepKeyword_0_0() { return cRepKeyword_0_0; }
		
		//Identification?
		public RuleCall getIdentificationParserRuleCall_0_1() { return cIdentificationParserRuleCall_0_1; }
		
		//'language'
		public Keyword getLanguageKeyword_1() { return cLanguageKeyword_1; }
		
		//language = STRING_VALUE
		public Assignment getLanguageAssignment_2() { return cLanguageAssignment_2; }
		
		//STRING_VALUE
		public RuleCall getLanguageSTRING_VALUETerminalRuleCall_2_0() { return cLanguageSTRING_VALUETerminalRuleCall_2_0; }
		
		//body = REGULAR_COMMENT
		public Assignment getBodyAssignment_3() { return cBodyAssignment_3; }
		
		//REGULAR_COMMENT
		public RuleCall getBodyREGULAR_COMMENTTerminalRuleCall_3_0() { return cBodyREGULAR_COMMENTTerminalRuleCall_3_0; }
	}
	public class NamespaceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.xtext.KerML.Namespace");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cOwnedRelationshipAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cOwnedRelationshipPrefixMetadataMemberParserRuleCall_0_0 = (RuleCall)cOwnedRelationshipAssignment_0.eContents().get(0);
		private final RuleCall cNamespaceDeclarationParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final RuleCall cNamespaceBodyParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		///* NAMESPACES */
		//Namespace returns SysML::Namespace :
		//    ( ownedRelationship += PrefixMetadataMember )*
		//    NamespaceDeclaration NamespaceBody
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//( ownedRelationship += PrefixMetadataMember )*
		//NamespaceDeclaration NamespaceBody
		public Group getGroup() { return cGroup; }
		
		//( ownedRelationship += PrefixMetadataMember )*
		public Assignment getOwnedRelationshipAssignment_0() { return cOwnedRelationshipAssignment_0; }
		
		//PrefixMetadataMember
		public RuleCall getOwnedRelationshipPrefixMetadataMemberParserRuleCall_0_0() { return cOwnedRelationshipPrefixMetadataMemberParserRuleCall_0_0; }
		
		//NamespaceDeclaration
		public RuleCall getNamespaceDeclarationParserRuleCall_1() { return cNamespaceDeclarationParserRuleCall_1; }
		
		//NamespaceBody
		public RuleCall getNamespaceBodyParserRuleCall_2() { return cNamespaceBodyParserRuleCall_2; }
	}
	public class NamespaceDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.xtext.KerML.NamespaceDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cNamespaceKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cIdentificationParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//fragment NamespaceDeclaration returns SysML::Namespace :
		//    'namespace' Identification?
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'namespace' Identification?
		public Group getGroup() { return cGroup; }
		
		//'namespace'
		public Keyword getNamespaceKeyword_0() { return cNamespaceKeyword_0; }
		
		//Identification?
		public RuleCall getIdentificationParserRuleCall_1() { return cIdentificationParserRuleCall_1; }
	}
	public class NamespaceBodyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.xtext.KerML.NamespaceBody");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cSemicolonKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Alternatives cAlternatives_1_1 = (Alternatives)cGroup_1.eContents().get(1);
		private final Assignment cOwnedRelationshipAssignment_1_1_0 = (Assignment)cAlternatives_1_1.eContents().get(0);
		private final RuleCall cOwnedRelationshipNamespaceMemberParserRuleCall_1_1_0_0 = (RuleCall)cOwnedRelationshipAssignment_1_1_0.eContents().get(0);
		private final Assignment cOwnedRelationshipAssignment_1_1_1 = (Assignment)cAlternatives_1_1.eContents().get(1);
		private final RuleCall cOwnedRelationshipAliasMemberParserRuleCall_1_1_1_0 = (RuleCall)cOwnedRelationshipAssignment_1_1_1.eContents().get(0);
		private final Assignment cOwnedRelationshipAssignment_1_1_2 = (Assignment)cAlternatives_1_1.eContents().get(2);
		private final RuleCall cOwnedRelationshipImportParserRuleCall_1_1_2_0 = (RuleCall)cOwnedRelationshipAssignment_1_1_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		
		//fragment NamespaceBody returns SysML::Namespace :
		//      ';'
		//    | '{' ( // Note: PackageBodyElement is expanded here to avoid
		//            // infinite loops in the incremental parser.
		//            ownedRelationship += NamespaceMember
		//          | ownedRelationship += AliasMember
		//          | ownedRelationship += Import )*
		//      '}'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//  ';'
		//| '{' ( // Note: PackageBodyElement is expanded here to avoid
		//        // infinite loops in the incremental parser.
		//        ownedRelationship += NamespaceMember
		//      | ownedRelationship += AliasMember
		//      | ownedRelationship += Import )*
		//  '}'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//';'
		public Keyword getSemicolonKeyword_0() { return cSemicolonKeyword_0; }
		
		//'{' ( // Note: PackageBodyElement is expanded here to avoid
		//           // infinite loops in the incremental parser.
		//           ownedRelationship += NamespaceMember
		//         | ownedRelationship += AliasMember
		//         | ownedRelationship += Import )*
		//     '}'
		public Group getGroup_1() { return cGroup_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1_0() { return cLeftCurlyBracketKeyword_1_0; }
		
		//( // Note: PackageBodyElement is expanded here to avoid
		//           // infinite loops in the incremental parser.
		//           ownedRelationship += NamespaceMember
		//         | ownedRelationship += AliasMember
		//         | ownedRelationship += Import )*
		public Alternatives getAlternatives_1_1() { return cAlternatives_1_1; }
		
		//// Note: PackageBodyElement is expanded here to avoid
		//           // infinite loops in the incremental parser.
		//           ownedRelationship += NamespaceMember
		public Assignment getOwnedRelationshipAssignment_1_1_0() { return cOwnedRelationshipAssignment_1_1_0; }
		
		//NamespaceMember
		public RuleCall getOwnedRelationshipNamespaceMemberParserRuleCall_1_1_0_0() { return cOwnedRelationshipNamespaceMemberParserRuleCall_1_1_0_0; }
		
		//ownedRelationship += AliasMember
		public Assignment getOwnedRelationshipAssignment_1_1_1() { return cOwnedRelationshipAssignment_1_1_1; }
		
		//AliasMember
		public RuleCall getOwnedRelationshipAliasMemberParserRuleCall_1_1_1_0() { return cOwnedRelationshipAliasMemberParserRuleCall_1_1_1_0; }
		
		//ownedRelationship += Import
		public Assignment getOwnedRelationshipAssignment_1_1_2() { return cOwnedRelationshipAssignment_1_1_2; }
		
		//Import
		public RuleCall getOwnedRelationshipImportParserRuleCall_1_1_2_0() { return cOwnedRelationshipImportParserRuleCall_1_1_2_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_1_2() { return cRightCurlyBracketKeyword_1_2; }
	}
	public class NamespaceBodyElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.xtext.KerML.NamespaceBodyElement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cOwnedRelationshipAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cOwnedRelationshipNamespaceMemberParserRuleCall_0_0 = (RuleCall)cOwnedRelationshipAssignment_0.eContents().get(0);
		private final Assignment cOwnedRelationshipAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cOwnedRelationshipAliasMemberParserRuleCall_1_0 = (RuleCall)cOwnedRelationshipAssignment_1.eContents().get(0);
		private final Assignment cOwnedRelationshipAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final RuleCall cOwnedRelationshipImportParserRuleCall_2_0 = (RuleCall)cOwnedRelationshipAssignment_2.eContents().get(0);
		
		///* Namespace Bodies */
		//fragment NamespaceBodyElement returns SysML::Namespace :
		//      ownedRelationship += NamespaceMember
		//    | ownedRelationship += AliasMember
		//    | ownedRelationship += Import
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//  ownedRelationship += NamespaceMember
		//| ownedRelationship += AliasMember
		//| ownedRelationship += Import
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//ownedRelationship += NamespaceMember
		public Assignment getOwnedRelationshipAssignment_0() { return cOwnedRelationshipAssignment_0; }
		
		//NamespaceMember
		public RuleCall getOwnedRelationshipNamespaceMemberParserRuleCall_0_0() { return cOwnedRelationshipNamespaceMemberParserRuleCall_0_0; }
		
		//ownedRelationship += AliasMember
		public Assignment getOwnedRelationshipAssignment_1() { return cOwnedRelationshipAssignment_1; }
		
		//AliasMember
		public RuleCall getOwnedRelationshipAliasMemberParserRuleCall_1_0() { return cOwnedRelationshipAliasMemberParserRuleCall_1_0; }
		
		//ownedRelationship += Import
		public Assignment getOwnedRelationshipAssignment_2() { return cOwnedRelationshipAssignment_2; }
		
		//Import
		public RuleCall getOwnedRelationshipImportParserRuleCall_2_0() { return cOwnedRelationshipImportParserRuleCall_2_0; }
	}
	public class MemberPrefixElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.xtext.KerML.MemberPrefix");
		private final Assignment cVisibilityAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cVisibilityVisibilityIndicatorEnumRuleCall_0 = (RuleCall)cVisibilityAssignment.eContents().get(0);
		
		//fragment MemberPrefix returns SysML::Membership :
		//    ( visibility = VisibilityIndicator )?
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//( visibility = VisibilityIndicator )?
		public Assignment getVisibilityAssignment() { return cVisibilityAssignment; }
		
		//VisibilityIndicator
		public RuleCall getVisibilityVisibilityIndicatorEnumRuleCall_0() { return cVisibilityVisibilityIndicatorEnumRuleCall_0; }
	}
	public class NamespaceMemberElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.xtext.KerML.NamespaceMember");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cNonFeatureMemberParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cNamespaceFeatureMemberParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//NamespaceMember returns SysML::OwningMembership :
		//      NonFeatureMember | NamespaceFeatureMember
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//NonFeatureMember | NamespaceFeatureMember
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//NonFeatureMember
		public RuleCall getNonFeatureMemberParserRuleCall_0() { return cNonFeatureMemberParserRuleCall_0; }
		
		//NamespaceFeatureMember
		public RuleCall getNamespaceFeatureMemberParserRuleCall_1() { return cNamespaceFeatureMemberParserRuleCall_1; }
	}
	public class NonFeatureMemberElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.xtext.KerML.NonFeatureMember");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cMemberPrefixParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Assignment cOwnedRelatedElementAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cOwnedRelatedElementMemberElementParserRuleCall_1_0 = (RuleCall)cOwnedRelatedElementAssignment_1.eContents().get(0);
		
		//NonFeatureMember returns SysML::OwningMembership :
		//    MemberPrefix ownedRelatedElement += MemberElement
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//MemberPrefix ownedRelatedElement += MemberElement
		public Group getGroup() { return cGroup; }
		
		//MemberPrefix
		public RuleCall getMemberPrefixParserRuleCall_0() { return cMemberPrefixParserRuleCall_0; }
		
		//ownedRelatedElement += MemberElement
		public Assignment getOwnedRelatedElementAssignment_1() { return cOwnedRelatedElementAssignment_1; }
		
		//MemberElement
		public RuleCall getOwnedRelatedElementMemberElementParserRuleCall_1_0() { return cOwnedRelatedElementMemberElementParserRuleCall_1_0; }
	}
	public class NamespaceFeatureMemberElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.xtext.KerML.NamespaceFeatureMember");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cMemberPrefixParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Assignment cOwnedRelatedElementAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cOwnedRelatedElementFeatureElementParserRuleCall_1_0 = (RuleCall)cOwnedRelatedElementAssignment_1.eContents().get(0);
		
		//NamespaceFeatureMember returns SysML::OwningMembership :
		//    MemberPrefix ownedRelatedElement += FeatureElement
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//MemberPrefix ownedRelatedElement += FeatureElement
		public Group getGroup() { return cGroup; }
		
		//MemberPrefix
		public RuleCall getMemberPrefixParserRuleCall_0() { return cMemberPrefixParserRuleCall_0; }
		
		//ownedRelatedElement += FeatureElement
		public Assignment getOwnedRelatedElementAssignment_1() { return cOwnedRelatedElementAssignment_1; }
		
		//FeatureElement
		public RuleCall getOwnedRelatedElementFeatureElementParserRuleCall_1_0() { return cOwnedRelatedElementFeatureElementParserRuleCall_1_0; }
	}
	public class AliasMemberElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.xtext.KerML.AliasMember");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cMemberPrefixParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cAliasKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cLessThanSignKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cMemberShortNameAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cMemberShortNameNameParserRuleCall_2_1_0 = (RuleCall)cMemberShortNameAssignment_2_1.eContents().get(0);
		private final Keyword cGreaterThanSignKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		private final Assignment cMemberNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cMemberNameNameParserRuleCall_3_0 = (RuleCall)cMemberNameAssignment_3.eContents().get(0);
		private final Keyword cForKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cMemberElementAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final CrossReference cMemberElementElementCrossReference_5_0 = (CrossReference)cMemberElementAssignment_5.eContents().get(0);
		private final RuleCall cMemberElementElementQualifiedNameParserRuleCall_5_0_1 = (RuleCall)cMemberElementElementCrossReference_5_0.eContents().get(1);
		private final RuleCall cRelationshipBodyParserRuleCall_6 = (RuleCall)cGroup.eContents().get(6);
		
		//AliasMember returns SysML::Membership :
		//    MemberPrefix
		//    'alias' ( '<' memberShortName = Name '>' )? ( memberName = Name )?
		//    'for' memberElement = [SysML::Element|QualifiedName]
		//    RelationshipBody
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//MemberPrefix
		//'alias' ( '<' memberShortName = Name '>' )? ( memberName = Name )?
		//'for' memberElement = [SysML::Element|QualifiedName]
		//RelationshipBody
		public Group getGroup() { return cGroup; }
		
		//MemberPrefix
		public RuleCall getMemberPrefixParserRuleCall_0() { return cMemberPrefixParserRuleCall_0; }
		
		//'alias'
		public Keyword getAliasKeyword_1() { return cAliasKeyword_1; }
		
		//( '<' memberShortName = Name '>' )?
		public Group getGroup_2() { return cGroup_2; }
		
		//'<'
		public Keyword getLessThanSignKeyword_2_0() { return cLessThanSignKeyword_2_0; }
		
		//memberShortName = Name
		public Assignment getMemberShortNameAssignment_2_1() { return cMemberShortNameAssignment_2_1; }
		
		//Name
		public RuleCall getMemberShortNameNameParserRuleCall_2_1_0() { return cMemberShortNameNameParserRuleCall_2_1_0; }
		
		//'>'
		public Keyword getGreaterThanSignKeyword_2_2() { return cGreaterThanSignKeyword_2_2; }
		
		//( memberName = Name )?
		public Assignment getMemberNameAssignment_3() { return cMemberNameAssignment_3; }
		
		//Name
		public RuleCall getMemberNameNameParserRuleCall_3_0() { return cMemberNameNameParserRuleCall_3_0; }
		
		//'for'
		public Keyword getForKeyword_4() { return cForKeyword_4; }
		
		//memberElement = [SysML::Element|QualifiedName]
		public Assignment getMemberElementAssignment_5() { return cMemberElementAssignment_5; }
		
		//[SysML::Element|QualifiedName]
		public CrossReference getMemberElementElementCrossReference_5_0() { return cMemberElementElementCrossReference_5_0; }
		
		//QualifiedName
		public RuleCall getMemberElementElementQualifiedNameParserRuleCall_5_0_1() { return cMemberElementElementQualifiedNameParserRuleCall_5_0_1; }
		
		//RelationshipBody
		public RuleCall getRelationshipBodyParserRuleCall_6() { return cRelationshipBodyParserRuleCall_6; }
	}
	public class ImportPrefixElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.xtext.KerML.ImportPrefix");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cVisibilityAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cVisibilityVisibilityIndicatorEnumRuleCall_0_0 = (RuleCall)cVisibilityAssignment_0.eContents().get(0);
		private final Keyword cImportKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cIsImportAllAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Keyword cIsImportAllAllKeyword_2_0 = (Keyword)cIsImportAllAssignment_2.eContents().get(0);
		
		//fragment ImportPrefix returns SysML::Import :
		//    visibility = VisibilityIndicator
		//    'import' ( isImportAll ?= 'all' )?
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//visibility = VisibilityIndicator
		//'import' ( isImportAll ?= 'all' )?
		public Group getGroup() { return cGroup; }
		
		//visibility = VisibilityIndicator
		public Assignment getVisibilityAssignment_0() { return cVisibilityAssignment_0; }
		
		//VisibilityIndicator
		public RuleCall getVisibilityVisibilityIndicatorEnumRuleCall_0_0() { return cVisibilityVisibilityIndicatorEnumRuleCall_0_0; }
		
		//'import'
		public Keyword getImportKeyword_1() { return cImportKeyword_1; }
		
		//( isImportAll ?= 'all' )?
		public Assignment getIsImportAllAssignment_2() { return cIsImportAllAssignment_2; }
		
		//'all'
		public Keyword getIsImportAllAllKeyword_2_0() { return cIsImportAllAllKeyword_2_0; }
	}
	public class ImportElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.xtext.KerML.Import");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final RuleCall cMembershipImportParserRuleCall_0_0 = (RuleCall)cAlternatives_0.eContents().get(0);
		private final RuleCall cNamespaceImportParserRuleCall_0_1 = (RuleCall)cAlternatives_0.eContents().get(1);
		private final RuleCall cRelationshipBodyParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//Import returns SysML::Import :
		//    ( MembershipImport | NamespaceImport )
		//    RelationshipBody
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//( MembershipImport | NamespaceImport )
		//RelationshipBody
		public Group getGroup() { return cGroup; }
		
		//( MembershipImport | NamespaceImport )
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//MembershipImport
		public RuleCall getMembershipImportParserRuleCall_0_0() { return cMembershipImportParserRuleCall_0_0; }
		
		//NamespaceImport
		public RuleCall getNamespaceImportParserRuleCall_0_1() { return cNamespaceImportParserRuleCall_0_1; }
		
		//RelationshipBody
		public RuleCall getRelationshipBodyParserRuleCall_1() { return cRelationshipBodyParserRuleCall_1; }
	}
	public class MembershipImportElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.xtext.KerML.MembershipImport");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cImportPrefixParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final RuleCall cImportedMembershipParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//MembershipImport returns SysML::MembershipImport :
		//    ImportPrefix ImportedMembership
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//ImportPrefix ImportedMembership
		public Group getGroup() { return cGroup; }
		
		//ImportPrefix
		public RuleCall getImportPrefixParserRuleCall_0() { return cImportPrefixParserRuleCall_0; }
		
		//ImportedMembership
		public RuleCall getImportedMembershipParserRuleCall_1() { return cImportedMembershipParserRuleCall_1; }
	}
	public class ImportedMembershipElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.xtext.KerML.ImportedMembership");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cImportedMembershipAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cImportedMembershipMembershipCrossReference_0_0 = (CrossReference)cImportedMembershipAssignment_0.eContents().get(0);
		private final RuleCall cImportedMembershipMembershipQualifiedNameParserRuleCall_0_0_1 = (RuleCall)cImportedMembershipMembershipCrossReference_0_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cColonColonKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cIsRecursiveAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Keyword cIsRecursiveAsteriskAsteriskKeyword_1_1_0 = (Keyword)cIsRecursiveAssignment_1_1.eContents().get(0);
		
		//fragment ImportedMembership returns SysML::MembershipImport :
		//    importedMembership = [SysML::Membership|QualifiedName]
		//    ( '::' isRecursive ?= '**' )?
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//importedMembership = [SysML::Membership|QualifiedName]
		//( '::' isRecursive ?= '**' )?
		public Group getGroup() { return cGroup; }
		
		//importedMembership = [SysML::Membership|QualifiedName]
		public Assignment getImportedMembershipAssignment_0() { return cImportedMembershipAssignment_0; }
		
		//[SysML::Membership|QualifiedName]
		public CrossReference getImportedMembershipMembershipCrossReference_0_0() { return cImportedMembershipMembershipCrossReference_0_0; }
		
		//QualifiedName
		public RuleCall getImportedMembershipMembershipQualifiedNameParserRuleCall_0_0_1() { return cImportedMembershipMembershipQualifiedNameParserRuleCall_0_0_1; }
		
		//( '::' isRecursive ?= '**' )?
		public Group getGroup_1() { return cGroup_1; }
		
		//'::'
		public Keyword getColonColonKeyword_1_0() { return cColonColonKeyword_1_0; }
		
		//isRecursive ?= '**'
		public Assignment getIsRecursiveAssignment_1_1() { return cIsRecursiveAssignment_1_1; }
		
		//'**'
		public Keyword getIsRecursiveAsteriskAsteriskKeyword_1_1_0() { return cIsRecursiveAsteriskAsteriskKeyword_1_1_0; }
	}
	public class NamespaceImportElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.xtext.KerML.NamespaceImport");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cImportPrefixParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final RuleCall cImportedNamespaceParserRuleCall_1_0 = (RuleCall)cAlternatives_1.eContents().get(0);
		private final Assignment cOwnedRelatedElementAssignment_1_1 = (Assignment)cAlternatives_1.eContents().get(1);
		private final RuleCall cOwnedRelatedElementFilterPackageParserRuleCall_1_1_0 = (RuleCall)cOwnedRelatedElementAssignment_1_1.eContents().get(0);
		
		//NamespaceImport returns SysML::NamespaceImport :
		//    ImportPrefix
		//    ( ImportedNamespace
		//    | ownedRelatedElement += FilterPackage
		//    )
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//ImportPrefix
		//( ImportedNamespace
		//| ownedRelatedElement += FilterPackage
		//)
		public Group getGroup() { return cGroup; }
		
		//ImportPrefix
		public RuleCall getImportPrefixParserRuleCall_0() { return cImportPrefixParserRuleCall_0; }
		
		//( ImportedNamespace
		//| ownedRelatedElement += FilterPackage
		//)
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//ImportedNamespace
		public RuleCall getImportedNamespaceParserRuleCall_1_0() { return cImportedNamespaceParserRuleCall_1_0; }
		
		//ownedRelatedElement += FilterPackage
		public Assignment getOwnedRelatedElementAssignment_1_1() { return cOwnedRelatedElementAssignment_1_1; }
		
		//FilterPackage
		public RuleCall getOwnedRelatedElementFilterPackageParserRuleCall_1_1_0() { return cOwnedRelatedElementFilterPackageParserRuleCall_1_1_0; }
	}
	public class ImportedNamespaceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.xtext.KerML.ImportedNamespace");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cImportedNamespaceAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cImportedNamespaceNamespaceCrossReference_0_0 = (CrossReference)cImportedNamespaceAssignment_0.eContents().get(0);
		private final RuleCall cImportedNamespaceNamespaceQualifiedNameParserRuleCall_0_0_1 = (RuleCall)cImportedNamespaceNamespaceCrossReference_0_0.eContents().get(1);
		private final Keyword cColonColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cAsteriskKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cColonColonKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cIsRecursiveAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final Keyword cIsRecursiveAsteriskAsteriskKeyword_3_1_0 = (Keyword)cIsRecursiveAssignment_3_1.eContents().get(0);
		
		//fragment ImportedNamespace returns SysML::NamespaceImport :
		//    importedNamespace = [SysML::Namespace|QualifiedName] '::' '*'
		//    ( '::' isRecursive ?= '**' )?
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//importedNamespace = [SysML::Namespace|QualifiedName] '::' '*'
		//( '::' isRecursive ?= '**' )?
		public Group getGroup() { return cGroup; }
		
		//importedNamespace = [SysML::Namespace|QualifiedName]
		public Assignment getImportedNamespaceAssignment_0() { return cImportedNamespaceAssignment_0; }
		
		//[SysML::Namespace|QualifiedName]
		public CrossReference getImportedNamespaceNamespaceCrossReference_0_0() { return cImportedNamespaceNamespaceCrossReference_0_0; }
		
		//QualifiedName
		public RuleCall getImportedNamespaceNamespaceQualifiedNameParserRuleCall_0_0_1() { return cImportedNamespaceNamespaceQualifiedNameParserRuleCall_0_0_1; }
		
		//'::'
		public Keyword getColonColonKeyword_1() { return cColonColonKeyword_1; }
		
		//'*'
		public Keyword getAsteriskKeyword_2() { return cAsteriskKeyword_2; }
		
		//( '::' isRecursive ?= '**' )?
		public Group getGroup_3() { return cGroup_3; }
		
		//'::'
		public Keyword getColonColonKeyword_3_0() { return cColonColonKeyword_3_0; }
		
		//isRecursive ?= '**'
		public Assignment getIsRecursiveAssignment_3_1() { return cIsRecursiveAssignment_3_1; }
		
		//'**'
		public Keyword getIsRecursiveAsteriskAsteriskKeyword_3_1_0() { return cIsRecursiveAsteriskAsteriskKeyword_3_1_0; }
	}
	public class FilterPackageElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.xtext.KerML.FilterPackage");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cOwnedRelationshipAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cOwnedRelationshipFilterPackageImportParserRuleCall_0_0 = (RuleCall)cOwnedRelationshipAssignment_0.eContents().get(0);
		private final Assignment cOwnedRelationshipAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cOwnedRelationshipFilterPackageMemberParserRuleCall_1_0 = (RuleCall)cOwnedRelationshipAssignment_1.eContents().get(0);
		
		//FilterPackage returns SysML::Package :
		//    ownedRelationship += FilterPackageImport
		//    ( ownedRelationship += FilterPackageMember )+
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//ownedRelationship += FilterPackageImport
		//( ownedRelationship += FilterPackageMember )+
		public Group getGroup() { return cGroup; }
		
		//ownedRelationship += FilterPackageImport
		public Assignment getOwnedRelationshipAssignment_0() { return cOwnedRelationshipAssignment_0; }
		
		//FilterPackageImport
		public RuleCall getOwnedRelationshipFilterPackageImportParserRuleCall_0_0() { return cOwnedRelationshipFilterPackageImportParserRuleCall_0_0; }
		
		//( ownedRelationship += FilterPackageMember )+
		public Assignment getOwnedRelationshipAssignment_1() { return cOwnedRelationshipAssignment_1; }
		
		//FilterPackageMember
		public RuleCall getOwnedRelationshipFilterPackageMemberParserRuleCall_1_0() { return cOwnedRelationshipFilterPackageMemberParserRuleCall_1_0; }
	}
	public class FilterPackageImportElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.xtext.KerML.FilterPackageImport");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cFilterPackageMembershipImportParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cFilterPackageNamespaceImportParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//FilterPackageImport returns SysML::Import :
		//     FilterPackageMembershipImport | FilterPackageNamespaceImport
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//FilterPackageMembershipImport | FilterPackageNamespaceImport
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//FilterPackageMembershipImport
		public RuleCall getFilterPackageMembershipImportParserRuleCall_0() { return cFilterPackageMembershipImportParserRuleCall_0; }
		
		//FilterPackageNamespaceImport
		public RuleCall getFilterPackageNamespaceImportParserRuleCall_1() { return cFilterPackageNamespaceImportParserRuleCall_1; }
	}
	public class FilterPackageMembershipImportElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.xtext.KerML.FilterPackageMembershipImport");
		private final RuleCall cImportedMembershipParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//FilterPackageMembershipImport returns SysML::MembershipImport :
		//    ImportedMembership
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//ImportedMembership
		public RuleCall getImportedMembershipParserRuleCall() { return cImportedMembershipParserRuleCall; }
	}
	public class FilterPackageNamespaceImportElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.xtext.KerML.FilterPackageNamespaceImport");
		private final RuleCall cImportedNamespaceParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//FilterPackageNamespaceImport returns SysML::NamespaceImport :
		//    ImportedNamespace
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//ImportedNamespace
		public RuleCall getImportedNamespaceParserRuleCall() { return cImportedNamespaceParserRuleCall; }
	}
	public class FilterPackageMemberElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.xtext.KerML.FilterPackageMember");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cVisibilityAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cVisibilityFilterPackageMemberVisibilityEnumRuleCall_0_0 = (RuleCall)cVisibilityAssignment_0.eContents().get(0);
		private final Assignment cOwnedRelatedElementAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cOwnedRelatedElementOwnedExpressionParserRuleCall_1_0 = (RuleCall)cOwnedRelatedElementAssignment_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//FilterPackageMember returns SysML::ElementFilterMembership :
		//    visibility = FilterPackageMemberVisibility ownedRelatedElement += OwnedExpression ']'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//visibility = FilterPackageMemberVisibility ownedRelatedElement += OwnedExpression ']'
		public Group getGroup() { return cGroup; }
		
		//visibility = FilterPackageMemberVisibility
		public Assignment getVisibilityAssignment_0() { return cVisibilityAssignment_0; }
		
		//FilterPackageMemberVisibility
		public RuleCall getVisibilityFilterPackageMemberVisibilityEnumRuleCall_0_0() { return cVisibilityFilterPackageMemberVisibilityEnumRuleCall_0_0; }
		
		//ownedRelatedElement += OwnedExpression
		public Assignment getOwnedRelatedElementAssignment_1() { return cOwnedRelatedElementAssignment_1; }
		
		//OwnedExpression
		public RuleCall getOwnedRelatedElementOwnedExpressionParserRuleCall_1_0() { return cOwnedRelatedElementOwnedExpressionParserRuleCall_1_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_2() { return cRightSquareBracketKeyword_2; }
	}
	public class MemberElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.xtext.KerML.MemberElement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cAnnotatingElementParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cNonFeatureElementParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		///* Namespace Elements */
		//MemberElement returns SysML::Element :
		//    AnnotatingElement | NonFeatureElement
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//AnnotatingElement | NonFeatureElement
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//AnnotatingElement
		public RuleCall getAnnotatingElementParserRuleCall_0() { return cAnnotatingElementParserRuleCall_0; }
		
		//NonFeatureElement
		public RuleCall getNonFeatureElementParserRuleCall_1() { return cNonFeatureElementParserRuleCall_1; }
	}
	public class NonFeatureElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.xtext.KerML.NonFeatureElement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cDependencyParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cNamespaceParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cPackageParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cLibraryPackageParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cMultiplicityParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cTypeParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cClassifierParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		private final RuleCall cClassParserRuleCall_7 = (RuleCall)cAlternatives.eContents().get(7);
		private final RuleCall cStructureParserRuleCall_8 = (RuleCall)cAlternatives.eContents().get(8);
		private final RuleCall cMetaclassParserRuleCall_9 = (RuleCall)cAlternatives.eContents().get(9);
		private final RuleCall cDataTypeParserRuleCall_10 = (RuleCall)cAlternatives.eContents().get(10);
		private final RuleCall cAssociationParserRuleCall_11 = (RuleCall)cAlternatives.eContents().get(11);
		private final RuleCall cAssociationStructureParserRuleCall_12 = (RuleCall)cAlternatives.eContents().get(12);
		private final RuleCall cInteractionParserRuleCall_13 = (RuleCall)cAlternatives.eContents().get(13);
		private final RuleCall cBehaviorParserRuleCall_14 = (RuleCall)cAlternatives.eContents().get(14);
		private final RuleCall cFunctionParserRuleCall_15 = (RuleCall)cAlternatives.eContents().get(15);
		private final RuleCall cPredicateParserRuleCall_16 = (RuleCall)cAlternatives.eContents().get(16);
		private final RuleCall cSpecializationParserRuleCall_17 = (RuleCall)cAlternatives.eContents().get(17);
		private final RuleCall cConjugationParserRuleCall_18 = (RuleCall)cAlternatives.eContents().get(18);
		private final RuleCall cFeatureTypingParserRuleCall_19 = (RuleCall)cAlternatives.eContents().get(19);
		private final RuleCall cSubclassificationParserRuleCall_20 = (RuleCall)cAlternatives.eContents().get(20);
		private final RuleCall cDisjoiningParserRuleCall_21 = (RuleCall)cAlternatives.eContents().get(21);
		private final RuleCall cFeatureInvertingParserRuleCall_22 = (RuleCall)cAlternatives.eContents().get(22);
		private final RuleCall cSubsettingParserRuleCall_23 = (RuleCall)cAlternatives.eContents().get(23);
		private final RuleCall cRedefinitionParserRuleCall_24 = (RuleCall)cAlternatives.eContents().get(24);
		private final RuleCall cTypeFeaturingParserRuleCall_25 = (RuleCall)cAlternatives.eContents().get(25);
		
		//NonFeatureElement returns SysML::Element :
		//      Dependency
		//    | Namespace
		//    | Package
		//    | LibraryPackage
		//    | Multiplicity
		//    | Type
		//    | Classifier
		//    | Class
		//    | Structure
		//    | Metaclass
		//    | DataType
		//    | Association
		//    | AssociationStructure
		//    | Interaction
		//    | Behavior
		//    | Function
		//    | Predicate
		//    | Specialization
		//    | Conjugation
		//    | FeatureTyping
		//    | Subclassification
		//    | Disjoining
		//    | FeatureInverting
		//    | Subsetting
		//    | Redefinition
		//    | TypeFeaturing
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//  Dependency
		//| Namespace
		//| Package
		//| LibraryPackage
		//| Multiplicity
		//| Type
		//| Classifier
		//| Class
		//| Structure
		//| Metaclass
		//| DataType
		//| Association
		//| AssociationStructure
		//| Interaction
		//| Behavior
		//| Function
		//| Predicate
		//| Specialization
		//| Conjugation
		//| FeatureTyping
		//| Subclassification
		//| Disjoining
		//| FeatureInverting
		//| Subsetting
		//| Redefinition
		//| TypeFeaturing
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Dependency
		public RuleCall getDependencyParserRuleCall_0() { return cDependencyParserRuleCall_0; }
		
		//Namespace
		public RuleCall getNamespaceParserRuleCall_1() { return cNamespaceParserRuleCall_1; }
		
		//Package
		public RuleCall getPackageParserRuleCall_2() { return cPackageParserRuleCall_2; }
		
		//LibraryPackage
		public RuleCall getLibraryPackageParserRuleCall_3() { return cLibraryPackageParserRuleCall_3; }
		
		//Multiplicity
		public RuleCall getMultiplicityParserRuleCall_4() { return cMultiplicityParserRuleCall_4; }
		
		//Type
		public RuleCall getTypeParserRuleCall_5() { return cTypeParserRuleCall_5; }
		
		//Classifier
		public RuleCall getClassifierParserRuleCall_6() { return cClassifierParserRuleCall_6; }
		
		//Class
		public RuleCall getClassParserRuleCall_7() { return cClassParserRuleCall_7; }
		
		//Structure
		public RuleCall getStructureParserRuleCall_8() { return cStructureParserRuleCall_8; }
		
		//Metaclass
		public RuleCall getMetaclassParserRuleCall_9() { return cMetaclassParserRuleCall_9; }
		
		//DataType
		public RuleCall getDataTypeParserRuleCall_10() { return cDataTypeParserRuleCall_10; }
		
		//Association
		public RuleCall getAssociationParserRuleCall_11() { return cAssociationParserRuleCall_11; }
		
		//AssociationStructure
		public RuleCall getAssociationStructureParserRuleCall_12() { return cAssociationStructureParserRuleCall_12; }
		
		//Interaction
		public RuleCall getInteractionParserRuleCall_13() { return cInteractionParserRuleCall_13; }
		
		//Behavior
		public RuleCall getBehaviorParserRuleCall_14() { return cBehaviorParserRuleCall_14; }
		
		//Function
		public RuleCall getFunctionParserRuleCall_15() { return cFunctionParserRuleCall_15; }
		
		//Predicate
		public RuleCall getPredicateParserRuleCall_16() { return cPredicateParserRuleCall_16; }
		
		//Specialization
		public RuleCall getSpecializationParserRuleCall_17() { return cSpecializationParserRuleCall_17; }
		
		//Conjugation
		public RuleCall getConjugationParserRuleCall_18() { return cConjugationParserRuleCall_18; }
		
		//FeatureTyping
		public RuleCall getFeatureTypingParserRuleCall_19() { return cFeatureTypingParserRuleCall_19; }
		
		//Subclassification
		public RuleCall getSubclassificationParserRuleCall_20() { return cSubclassificationParserRuleCall_20; }
		
		//Disjoining
		public RuleCall getDisjoiningParserRuleCall_21() { return cDisjoiningParserRuleCall_21; }
		
		//FeatureInverting
		public RuleCall getFeatureInvertingParserRuleCall_22() { return cFeatureInvertingParserRuleCall_22; }
		
		//Subsetting
		public RuleCall getSubsettingParserRuleCall_23() { return cSubsettingParserRuleCall_23; }
		
		//Redefinition
		public RuleCall getRedefinitionParserRuleCall_24() { return cRedefinitionParserRuleCall_24; }
		
		//TypeFeaturing
		public RuleCall getTypeFeaturingParserRuleCall_25() { return cTypeFeaturingParserRuleCall_25; }
	}
	public class FeatureElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.xtext.KerML.FeatureElement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cFeatureParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cStepParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cExpressionParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cBooleanExpressionParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cInvariantParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cConnectorParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cBindingConnectorParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		private final RuleCall cSuccessionParserRuleCall_7 = (RuleCall)cAlternatives.eContents().get(7);
		private final RuleCall cItemFlowParserRuleCall_8 = (RuleCall)cAlternatives.eContents().get(8);
		private final RuleCall cSuccessionItemFlowParserRuleCall_9 = (RuleCall)cAlternatives.eContents().get(9);
		
		//FeatureElement returns SysML::Feature :
		//      Feature
		//    | Step
		//    | Expression
		//    | BooleanExpression
		//    | Invariant
		//    | Connector
		//    | BindingConnector
		//    | Succession
		//    | ItemFlow
		//    | SuccessionItemFlow
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//  Feature
		//| Step
		//| Expression
		//| BooleanExpression
		//| Invariant
		//| Connector
		//| BindingConnector
		//| Succession
		//| ItemFlow
		//| SuccessionItemFlow
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Feature
		public RuleCall getFeatureParserRuleCall_0() { return cFeatureParserRuleCall_0; }
		
		//Step
		public RuleCall getStepParserRuleCall_1() { return cStepParserRuleCall_1; }
		
		//Expression
		public RuleCall getExpressionParserRuleCall_2() { return cExpressionParserRuleCall_2; }
		
		//BooleanExpression
		public RuleCall getBooleanExpressionParserRuleCall_3() { return cBooleanExpressionParserRuleCall_3; }
		
		//Invariant
		public RuleCall getInvariantParserRuleCall_4() { return cInvariantParserRuleCall_4; }
		
		//Connector
		public RuleCall getConnectorParserRuleCall_5() { return cConnectorParserRuleCall_5; }
		
		//BindingConnector
		public RuleCall getBindingConnectorParserRuleCall_6() { return cBindingConnectorParserRuleCall_6; }
		
		//Succession
		public RuleCall getSuccessionParserRuleCall_7() { return cSuccessionParserRuleCall_7; }
		
		//ItemFlow
		public RuleCall getItemFlowParserRuleCall_8() { return cItemFlowParserRuleCall_8; }
		
		//SuccessionItemFlow
		public RuleCall getSuccessionItemFlowParserRuleCall_9() { return cSuccessionItemFlowParserRuleCall_9; }
	}
	public class PackageElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.xtext.KerML.Package");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cOwnedRelationshipAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cOwnedRelationshipPrefixMetadataMemberParserRuleCall_0_0 = (RuleCall)cOwnedRelationshipAssignment_0.eContents().get(0);
		private final RuleCall cPackageDeclarationParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final RuleCall cPackageBodyParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		///* PACKAGES */
		//Package returns SysML::Package :
		//    ( ownedRelationship += PrefixMetadataMember )*
		//    PackageDeclaration PackageBody
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//( ownedRelationship += PrefixMetadataMember )*
		//PackageDeclaration PackageBody
		public Group getGroup() { return cGroup; }
		
		//( ownedRelationship += PrefixMetadataMember )*
		public Assignment getOwnedRelationshipAssignment_0() { return cOwnedRelationshipAssignment_0; }
		
		//PrefixMetadataMember
		public RuleCall getOwnedRelationshipPrefixMetadataMemberParserRuleCall_0_0() { return cOwnedRelationshipPrefixMetadataMemberParserRuleCall_0_0; }
		
		//PackageDeclaration
		public RuleCall getPackageDeclarationParserRuleCall_1() { return cPackageDeclarationParserRuleCall_1; }
		
		//PackageBody
		public RuleCall getPackageBodyParserRuleCall_2() { return cPackageBodyParserRuleCall_2; }
	}
	public class LibraryPackageElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.xtext.KerML.LibraryPackage");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cIsStandardAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cIsStandardStandardKeyword_0_0 = (Keyword)cIsStandardAssignment_0.eContents().get(0);
		private final Keyword cLibraryKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cOwnedRelationshipAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cOwnedRelationshipPrefixMetadataMemberParserRuleCall_2_0 = (RuleCall)cOwnedRelationshipAssignment_2.eContents().get(0);
		private final RuleCall cPackageDeclarationParserRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		private final RuleCall cPackageBodyParserRuleCall_4 = (RuleCall)cGroup.eContents().get(4);
		
		//LibraryPackage returns SysML::LibraryPackage :
		//    ( isStandard ?= 'standard' )? 'library'
		//    ( ownedRelationship += PrefixMetadataMember )*
		//    PackageDeclaration PackageBody
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//( isStandard ?= 'standard' )? 'library'
		//( ownedRelationship += PrefixMetadataMember )*
		//PackageDeclaration PackageBody
		public Group getGroup() { return cGroup; }
		
		//( isStandard ?= 'standard' )?
		public Assignment getIsStandardAssignment_0() { return cIsStandardAssignment_0; }
		
		//'standard'
		public Keyword getIsStandardStandardKeyword_0_0() { return cIsStandardStandardKeyword_0_0; }
		
		//'library'
		public Keyword getLibraryKeyword_1() { return cLibraryKeyword_1; }
		
		//( ownedRelationship += PrefixMetadataMember )*
		public Assignment getOwnedRelationshipAssignment_2() { return cOwnedRelationshipAssignment_2; }
		
		//PrefixMetadataMember
		public RuleCall getOwnedRelationshipPrefixMetadataMemberParserRuleCall_2_0() { return cOwnedRelationshipPrefixMetadataMemberParserRuleCall_2_0; }
		
		//PackageDeclaration
		public RuleCall getPackageDeclarationParserRuleCall_3() { return cPackageDeclarationParserRuleCall_3; }
		
		//PackageBody
		public RuleCall getPackageBodyParserRuleCall_4() { return cPackageBodyParserRuleCall_4; }
	}
	public class PackageDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.xtext.KerML.PackageDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPackageKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cIdentificationParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//fragment PackageDeclaration returns SysML::Package :
		//    'package' Identification?
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'package' Identification?
		public Group getGroup() { return cGroup; }
		
		//'package'
		public Keyword getPackageKeyword_0() { return cPackageKeyword_0; }
		
		//Identification?
		public RuleCall getIdentificationParserRuleCall_1() { return cIdentificationParserRuleCall_1; }
	}
	public class PackageBodyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.xtext.KerML.PackageBody");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cSemicolonKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Alternatives cAlternatives_1_1 = (Alternatives)cGroup_1.eContents().get(1);
		private final Assignment cOwnedRelationshipAssignment_1_1_0 = (Assignment)cAlternatives_1_1.eContents().get(0);
		private final RuleCall cOwnedRelationshipNamespaceMemberParserRuleCall_1_1_0_0 = (RuleCall)cOwnedRelationshipAssignment_1_1_0.eContents().get(0);
		private final Assignment cOwnedRelationshipAssignment_1_1_1 = (Assignment)cAlternatives_1_1.eContents().get(1);
		private final RuleCall cOwnedRelationshipElementFilterMemberParserRuleCall_1_1_1_0 = (RuleCall)cOwnedRelationshipAssignment_1_1_1.eContents().get(0);
		private final Assignment cOwnedRelationshipAssignment_1_1_2 = (Assignment)cAlternatives_1_1.eContents().get(2);
		private final RuleCall cOwnedRelationshipAliasMemberParserRuleCall_1_1_2_0 = (RuleCall)cOwnedRelationshipAssignment_1_1_2.eContents().get(0);
		private final Assignment cOwnedRelationshipAssignment_1_1_3 = (Assignment)cAlternatives_1_1.eContents().get(3);
		private final RuleCall cOwnedRelationshipImportParserRuleCall_1_1_3_0 = (RuleCall)cOwnedRelationshipAssignment_1_1_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		
		//fragment PackageBody returns SysML::Namespace :
		//      ';'
		//    | '{' ( // Note: PackageBodyElement is expanded here to avoid
		//            // infinite loops in the incremental parser.
		//            ownedRelationship += NamespaceMember
		//          | ownedRelationship += ElementFilterMember
		//          | ownedRelationship += AliasMember
		//          | ownedRelationship += Import )*
		//      '}'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//  ';'
		//| '{' ( // Note: PackageBodyElement is expanded here to avoid
		//        // infinite loops in the incremental parser.
		//        ownedRelationship += NamespaceMember
		//      | ownedRelationship += ElementFilterMember
		//      | ownedRelationship += AliasMember
		//      | ownedRelationship += Import )*
		//  '}'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//';'
		public Keyword getSemicolonKeyword_0() { return cSemicolonKeyword_0; }
		
		//'{' ( // Note: PackageBodyElement is expanded here to avoid
		//           // infinite loops in the incremental parser.
		//           ownedRelationship += NamespaceMember
		//         | ownedRelationship += ElementFilterMember
		//         | ownedRelationship += AliasMember
		//         | ownedRelationship += Import )*
		//     '}'
		public Group getGroup_1() { return cGroup_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1_0() { return cLeftCurlyBracketKeyword_1_0; }
		
		//( // Note: PackageBodyElement is expanded here to avoid
		//           // infinite loops in the incremental parser.
		//           ownedRelationship += NamespaceMember
		//         | ownedRelationship += ElementFilterMember
		//         | ownedRelationship += AliasMember
		//         | ownedRelationship += Import )*
		public Alternatives getAlternatives_1_1() { return cAlternatives_1_1; }
		
		//// Note: PackageBodyElement is expanded here to avoid
		//           // infinite loops in the incremental parser.
		//           ownedRelationship += NamespaceMember
		public Assignment getOwnedRelationshipAssignment_1_1_0() { return cOwnedRelationshipAssignment_1_1_0; }
		
		//NamespaceMember
		public RuleCall getOwnedRelationshipNamespaceMemberParserRuleCall_1_1_0_0() { return cOwnedRelationshipNamespaceMemberParserRuleCall_1_1_0_0; }
		
		//ownedRelationship += ElementFilterMember
		public Assignment getOwnedRelationshipAssignment_1_1_1() { return cOwnedRelationshipAssignment_1_1_1; }
		
		//ElementFilterMember
		public RuleCall getOwnedRelationshipElementFilterMemberParserRuleCall_1_1_1_0() { return cOwnedRelationshipElementFilterMemberParserRuleCall_1_1_1_0; }
		
		//ownedRelationship += AliasMember
		public Assignment getOwnedRelationshipAssignment_1_1_2() { return cOwnedRelationshipAssignment_1_1_2; }
		
		//AliasMember
		public RuleCall getOwnedRelationshipAliasMemberParserRuleCall_1_1_2_0() { return cOwnedRelationshipAliasMemberParserRuleCall_1_1_2_0; }
		
		//ownedRelationship += Import
		public Assignment getOwnedRelationshipAssignment_1_1_3() { return cOwnedRelationshipAssignment_1_1_3; }
		
		//Import
		public RuleCall getOwnedRelationshipImportParserRuleCall_1_1_3_0() { return cOwnedRelationshipImportParserRuleCall_1_1_3_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_1_2() { return cRightCurlyBracketKeyword_1_2; }
	}
	public class ElementFilterMemberElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.xtext.KerML.ElementFilterMember");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cMemberPrefixParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cFilterKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cOwnedRelatedElementAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cOwnedRelatedElementOwnedExpressionParserRuleCall_2_0 = (RuleCall)cOwnedRelatedElementAssignment_2.eContents().get(0);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//ElementFilterMember returns SysML::ElementFilterMembership :
		//    MemberPrefix
		//    'filter' ownedRelatedElement += OwnedExpression ';'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//MemberPrefix
		//'filter' ownedRelatedElement += OwnedExpression ';'
		public Group getGroup() { return cGroup; }
		
		//MemberPrefix
		public RuleCall getMemberPrefixParserRuleCall_0() { return cMemberPrefixParserRuleCall_0; }
		
		//'filter'
		public Keyword getFilterKeyword_1() { return cFilterKeyword_1; }
		
		//ownedRelatedElement += OwnedExpression
		public Assignment getOwnedRelatedElementAssignment_2() { return cOwnedRelatedElementAssignment_2; }
		
		//OwnedExpression
		public RuleCall getOwnedRelatedElementOwnedExpressionParserRuleCall_2_0() { return cOwnedRelatedElementOwnedExpressionParserRuleCall_2_0; }
		
		//';'
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
	}
	public class TypePrefixElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.xtext.KerML.TypePrefix");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cIsAbstractAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cIsAbstractAbstractKeyword_0_0 = (Keyword)cIsAbstractAssignment_0.eContents().get(0);
		private final Assignment cOwnedRelationshipAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cOwnedRelationshipPrefixMetadataMemberParserRuleCall_1_0 = (RuleCall)cOwnedRelationshipAssignment_1.eContents().get(0);
		
		///* TYPES */
		///* Types */
		//fragment TypePrefix returns SysML::Type :
		//    ( isAbstract ?= 'abstract' )?
		//    ( ownedRelationship += PrefixMetadataMember )*
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//( isAbstract ?= 'abstract' )?
		//( ownedRelationship += PrefixMetadataMember )*
		public Group getGroup() { return cGroup; }
		
		//( isAbstract ?= 'abstract' )?
		public Assignment getIsAbstractAssignment_0() { return cIsAbstractAssignment_0; }
		
		//'abstract'
		public Keyword getIsAbstractAbstractKeyword_0_0() { return cIsAbstractAbstractKeyword_0_0; }
		
		//( ownedRelationship += PrefixMetadataMember )*
		public Assignment getOwnedRelationshipAssignment_1() { return cOwnedRelationshipAssignment_1; }
		
		//PrefixMetadataMember
		public RuleCall getOwnedRelationshipPrefixMetadataMemberParserRuleCall_1_0() { return cOwnedRelationshipPrefixMetadataMemberParserRuleCall_1_0; }
	}
	public class TypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.xtext.KerML.Type");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cTypePrefixParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cTypeKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final RuleCall cTypeDeclarationParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final RuleCall cTypeBodyParserRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		
		//Type returns SysML::Type :
		//    TypePrefix 'type'
		//    TypeDeclaration TypeBody
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//TypePrefix 'type'
		//TypeDeclaration TypeBody
		public Group getGroup() { return cGroup; }
		
		//TypePrefix
		public RuleCall getTypePrefixParserRuleCall_0() { return cTypePrefixParserRuleCall_0; }
		
		//'type'
		public Keyword getTypeKeyword_1() { return cTypeKeyword_1; }
		
		//TypeDeclaration
		public RuleCall getTypeDeclarationParserRuleCall_2() { return cTypeDeclarationParserRuleCall_2; }
		
		//TypeBody
		public RuleCall getTypeBodyParserRuleCall_3() { return cTypeBodyParserRuleCall_3; }
	}
	public class TypeDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.xtext.KerML.TypeDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cIsSufficientAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cIsSufficientAllKeyword_0_0 = (Keyword)cIsSufficientAssignment_0.eContents().get(0);
		private final RuleCall cIdentificationParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Assignment cOwnedRelationshipAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cOwnedRelationshipOwnedMultiplicityParserRuleCall_2_0 = (RuleCall)cOwnedRelationshipAssignment_2.eContents().get(0);
		private final Alternatives cAlternatives_3 = (Alternatives)cGroup.eContents().get(3);
		private final RuleCall cSpecializationPartParserRuleCall_3_0 = (RuleCall)cAlternatives_3.eContents().get(0);
		private final RuleCall cConjugationPartParserRuleCall_3_1 = (RuleCall)cAlternatives_3.eContents().get(1);
		private final RuleCall cTypeRelationshipPartParserRuleCall_4 = (RuleCall)cGroup.eContents().get(4);
		
		//fragment TypeDeclaration returns SysML::Type :
		//    ( isSufficient ?= 'all' )? Identification?
		//    ( ownedRelationship += OwnedMultiplicity )?
		//    ( SpecializationPart | ConjugationPart )
		//    TypeRelationshipPart*
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//( isSufficient ?= 'all' )? Identification?
		//( ownedRelationship += OwnedMultiplicity )?
		//( SpecializationPart | ConjugationPart )
		//TypeRelationshipPart*
		public Group getGroup() { return cGroup; }
		
		//( isSufficient ?= 'all' )?
		public Assignment getIsSufficientAssignment_0() { return cIsSufficientAssignment_0; }
		
		//'all'
		public Keyword getIsSufficientAllKeyword_0_0() { return cIsSufficientAllKeyword_0_0; }
		
		//Identification?
		public RuleCall getIdentificationParserRuleCall_1() { return cIdentificationParserRuleCall_1; }
		
		//( ownedRelationship += OwnedMultiplicity )?
		public Assignment getOwnedRelationshipAssignment_2() { return cOwnedRelationshipAssignment_2; }
		
		//OwnedMultiplicity
		public RuleCall getOwnedRelationshipOwnedMultiplicityParserRuleCall_2_0() { return cOwnedRelationshipOwnedMultiplicityParserRuleCall_2_0; }
		
		//( SpecializationPart | ConjugationPart )
		public Alternatives getAlternatives_3() { return cAlternatives_3; }
		
		//SpecializationPart
		public RuleCall getSpecializationPartParserRuleCall_3_0() { return cSpecializationPartParserRuleCall_3_0; }
		
		//ConjugationPart
		public RuleCall getConjugationPartParserRuleCall_3_1() { return cConjugationPartParserRuleCall_3_1; }
		
		//TypeRelationshipPart*
		public RuleCall getTypeRelationshipPartParserRuleCall_4() { return cTypeRelationshipPartParserRuleCall_4; }
	}
	public class SpecializationPartElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.xtext.KerML.SpecializationPart");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Keyword cColonGreaterThanSignKeyword_0_0 = (Keyword)cAlternatives_0.eContents().get(0);
		private final Keyword cSpecializesKeyword_0_1 = (Keyword)cAlternatives_0.eContents().get(1);
		private final Assignment cOwnedRelationshipAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cOwnedRelationshipOwnedSpecializationParserRuleCall_1_0 = (RuleCall)cOwnedRelationshipAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cCommaKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cOwnedRelationshipAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cOwnedRelationshipOwnedSpecializationParserRuleCall_2_1_0 = (RuleCall)cOwnedRelationshipAssignment_2_1.eContents().get(0);
		
		//fragment SpecializationPart returns SysML::Type :
		//      ( ':>' | 'specializes' ) ownedRelationship += OwnedSpecialization
		//      ( ',' ownedRelationship += OwnedSpecialization )*
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//( ':>' | 'specializes' ) ownedRelationship += OwnedSpecialization
		//( ',' ownedRelationship += OwnedSpecialization )*
		public Group getGroup() { return cGroup; }
		
		//( ':>' | 'specializes' )
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//':>'
		public Keyword getColonGreaterThanSignKeyword_0_0() { return cColonGreaterThanSignKeyword_0_0; }
		
		//'specializes'
		public Keyword getSpecializesKeyword_0_1() { return cSpecializesKeyword_0_1; }
		
		//ownedRelationship += OwnedSpecialization
		public Assignment getOwnedRelationshipAssignment_1() { return cOwnedRelationshipAssignment_1; }
		
		//OwnedSpecialization
		public RuleCall getOwnedRelationshipOwnedSpecializationParserRuleCall_1_0() { return cOwnedRelationshipOwnedSpecializationParserRuleCall_1_0; }
		
		//( ',' ownedRelationship += OwnedSpecialization )*
		public Group getGroup_2() { return cGroup_2; }
		
		//','
		public Keyword getCommaKeyword_2_0() { return cCommaKeyword_2_0; }
		
		//ownedRelationship += OwnedSpecialization
		public Assignment getOwnedRelationshipAssignment_2_1() { return cOwnedRelationshipAssignment_2_1; }
		
		//OwnedSpecialization
		public RuleCall getOwnedRelationshipOwnedSpecializationParserRuleCall_2_1_0() { return cOwnedRelationshipOwnedSpecializationParserRuleCall_2_1_0; }
	}
	public class ConjugationPartElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.xtext.KerML.ConjugationPart");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Keyword cTildeKeyword_0_0 = (Keyword)cAlternatives_0.eContents().get(0);
		private final Keyword cConjugatesKeyword_0_1 = (Keyword)cAlternatives_0.eContents().get(1);
		private final Assignment cOwnedRelationshipAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cOwnedRelationshipOwnedConjugationParserRuleCall_1_0 = (RuleCall)cOwnedRelationshipAssignment_1.eContents().get(0);
		
		//fragment ConjugationPart returns SysML::Type :
		//    ( '~' | 'conjugates' ) ownedRelationship += OwnedConjugation
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//( '~' | 'conjugates' ) ownedRelationship += OwnedConjugation
		public Group getGroup() { return cGroup; }
		
		//( '~' | 'conjugates' )
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//'~'
		public Keyword getTildeKeyword_0_0() { return cTildeKeyword_0_0; }
		
		//'conjugates'
		public Keyword getConjugatesKeyword_0_1() { return cConjugatesKeyword_0_1; }
		
		//ownedRelationship += OwnedConjugation
		public Assignment getOwnedRelationshipAssignment_1() { return cOwnedRelationshipAssignment_1; }
		
		//OwnedConjugation
		public RuleCall getOwnedRelationshipOwnedConjugationParserRuleCall_1_0() { return cOwnedRelationshipOwnedConjugationParserRuleCall_1_0; }
	}
	public class TypeRelationshipPartElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.xtext.KerML.TypeRelationshipPart");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cDisjoiningPartParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cUnioningPartParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cIntersectingPartParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cDifferencingPartParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//fragment TypeRelationshipPart returns SysML::Type :
		//    DisjoiningPart | UnioningPart | IntersectingPart | DifferencingPart
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//DisjoiningPart | UnioningPart | IntersectingPart | DifferencingPart
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//DisjoiningPart
		public RuleCall getDisjoiningPartParserRuleCall_0() { return cDisjoiningPartParserRuleCall_0; }
		
		//UnioningPart
		public RuleCall getUnioningPartParserRuleCall_1() { return cUnioningPartParserRuleCall_1; }
		
		//IntersectingPart
		public RuleCall getIntersectingPartParserRuleCall_2() { return cIntersectingPartParserRuleCall_2; }
		
		//DifferencingPart
		public RuleCall getDifferencingPartParserRuleCall_3() { return cDifferencingPartParserRuleCall_3; }
	}
	public class DisjoiningPartElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.xtext.KerML.DisjoiningPart");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDisjointKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cFromKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cOwnedRelationshipAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cOwnedRelationshipOwnedDisjoiningParserRuleCall_2_0 = (RuleCall)cOwnedRelationshipAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cCommaKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cOwnedRelationshipAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cOwnedRelationshipOwnedDisjoiningParserRuleCall_3_1_0 = (RuleCall)cOwnedRelationshipAssignment_3_1.eContents().get(0);
		
		//fragment DisjoiningPart returns SysML::Type :
		//    'disjoint' 'from' ownedRelationship += OwnedDisjoining
		//    ( ',' ownedRelationship += OwnedDisjoining )*
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'disjoint' 'from' ownedRelationship += OwnedDisjoining
		//( ',' ownedRelationship += OwnedDisjoining )*
		public Group getGroup() { return cGroup; }
		
		//'disjoint'
		public Keyword getDisjointKeyword_0() { return cDisjointKeyword_0; }
		
		//'from'
		public Keyword getFromKeyword_1() { return cFromKeyword_1; }
		
		//ownedRelationship += OwnedDisjoining
		public Assignment getOwnedRelationshipAssignment_2() { return cOwnedRelationshipAssignment_2; }
		
		//OwnedDisjoining
		public RuleCall getOwnedRelationshipOwnedDisjoiningParserRuleCall_2_0() { return cOwnedRelationshipOwnedDisjoiningParserRuleCall_2_0; }
		
		//( ',' ownedRelationship += OwnedDisjoining )*
		public Group getGroup_3() { return cGroup_3; }
		
		//','
		public Keyword getCommaKeyword_3_0() { return cCommaKeyword_3_0; }
		
		//ownedRelationship += OwnedDisjoining
		public Assignment getOwnedRelationshipAssignment_3_1() { return cOwnedRelationshipAssignment_3_1; }
		
		//OwnedDisjoining
		public RuleCall getOwnedRelationshipOwnedDisjoiningParserRuleCall_3_1_0() { return cOwnedRelationshipOwnedDisjoiningParserRuleCall_3_1_0; }
	}
	public class UnioningPartElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.xtext.KerML.UnioningPart");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cUnionsKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cOwnedRelationshipAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cOwnedRelationshipUnioningParserRuleCall_1_0 = (RuleCall)cOwnedRelationshipAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cCommaKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cOwnedRelationshipAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cOwnedRelationshipUnioningParserRuleCall_2_1_0 = (RuleCall)cOwnedRelationshipAssignment_2_1.eContents().get(0);
		
		//fragment UnioningPart returns SysML::Type :
		//    'unions' ownedRelationship += Unioning
		//    ( ',' ownedRelationship += Unioning )*
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'unions' ownedRelationship += Unioning
		//( ',' ownedRelationship += Unioning )*
		public Group getGroup() { return cGroup; }
		
		//'unions'
		public Keyword getUnionsKeyword_0() { return cUnionsKeyword_0; }
		
		//ownedRelationship += Unioning
		public Assignment getOwnedRelationshipAssignment_1() { return cOwnedRelationshipAssignment_1; }
		
		//Unioning
		public RuleCall getOwnedRelationshipUnioningParserRuleCall_1_0() { return cOwnedRelationshipUnioningParserRuleCall_1_0; }
		
		//( ',' ownedRelationship += Unioning )*
		public Group getGroup_2() { return cGroup_2; }
		
		//','
		public Keyword getCommaKeyword_2_0() { return cCommaKeyword_2_0; }
		
		//ownedRelationship += Unioning
		public Assignment getOwnedRelationshipAssignment_2_1() { return cOwnedRelationshipAssignment_2_1; }
		
		//Unioning
		public RuleCall getOwnedRelationshipUnioningParserRuleCall_2_1_0() { return cOwnedRelationshipUnioningParserRuleCall_2_1_0; }
	}
	public class IntersectingPartElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.xtext.KerML.IntersectingPart");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cIntersectsKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cOwnedRelationshipAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cOwnedRelationshipIntersectingParserRuleCall_1_0 = (RuleCall)cOwnedRelationshipAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cCommaKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cOwnedRelationshipAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cOwnedRelationshipIntersectingParserRuleCall_2_1_0 = (RuleCall)cOwnedRelationshipAssignment_2_1.eContents().get(0);
		
		//fragment IntersectingPart returns SysML::Type :
		//    'intersects' ownedRelationship += Intersecting
		//    ( ',' ownedRelationship += Intersecting )*
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'intersects' ownedRelationship += Intersecting
		//( ',' ownedRelationship += Intersecting )*
		public Group getGroup() { return cGroup; }
		
		//'intersects'
		public Keyword getIntersectsKeyword_0() { return cIntersectsKeyword_0; }
		
		//ownedRelationship += Intersecting
		public Assignment getOwnedRelationshipAssignment_1() { return cOwnedRelationshipAssignment_1; }
		
		//Intersecting
		public RuleCall getOwnedRelationshipIntersectingParserRuleCall_1_0() { return cOwnedRelationshipIntersectingParserRuleCall_1_0; }
		
		//( ',' ownedRelationship += Intersecting )*
		public Group getGroup_2() { return cGroup_2; }
		
		//','
		public Keyword getCommaKeyword_2_0() { return cCommaKeyword_2_0; }
		
		//ownedRelationship += Intersecting
		public Assignment getOwnedRelationshipAssignment_2_1() { return cOwnedRelationshipAssignment_2_1; }
		
		//Intersecting
		public RuleCall getOwnedRelationshipIntersectingParserRuleCall_2_1_0() { return cOwnedRelationshipIntersectingParserRuleCall_2_1_0; }
	}
	public class DifferencingPartElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.xtext.KerML.DifferencingPart");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDifferencesKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cOwnedRelationshipAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cOwnedRelationshipDifferencingParserRuleCall_1_0 = (RuleCall)cOwnedRelationshipAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cCommaKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cOwnedRelationshipAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cOwnedRelationshipDifferencingParserRuleCall_2_1_0 = (RuleCall)cOwnedRelationshipAssignment_2_1.eContents().get(0);
		
		//fragment DifferencingPart returns SysML::Type :
		//    'differences' ownedRelationship += Differencing
		//    ( ',' ownedRelationship += Differencing )*
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'differences' ownedRelationship += Differencing
		//( ',' ownedRelationship += Differencing )*
		public Group getGroup() { return cGroup; }
		
		//'differences'
		public Keyword getDifferencesKeyword_0() { return cDifferencesKeyword_0; }
		
		//ownedRelationship += Differencing
		public Assignment getOwnedRelationshipAssignment_1() { return cOwnedRelationshipAssignment_1; }
		
		//Differencing
		public RuleCall getOwnedRelationshipDifferencingParserRuleCall_1_0() { return cOwnedRelationshipDifferencingParserRuleCall_1_0; }
		
		//( ',' ownedRelationship += Differencing )*
		public Group getGroup_2() { return cGroup_2; }
		
		//','
		public Keyword getCommaKeyword_2_0() { return cCommaKeyword_2_0; }
		
		//ownedRelationship += Differencing
		public Assignment getOwnedRelationshipAssignment_2_1() { return cOwnedRelationshipAssignment_2_1; }
		
		//Differencing
		public RuleCall getOwnedRelationshipDifferencingParserRuleCall_2_1_0() { return cOwnedRelationshipDifferencingParserRuleCall_2_1_0; }
	}
	public class TypeBodyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.xtext.KerML.TypeBody");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cSemicolonKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Alternatives cAlternatives_1_1 = (Alternatives)cGroup_1.eContents().get(1);
		private final Assignment cOwnedRelationshipAssignment_1_1_0 = (Assignment)cAlternatives_1_1.eContents().get(0);
		private final RuleCall cOwnedRelationshipNonFeatureMemberParserRuleCall_1_1_0_0 = (RuleCall)cOwnedRelationshipAssignment_1_1_0.eContents().get(0);
		private final Assignment cOwnedRelationshipAssignment_1_1_1 = (Assignment)cAlternatives_1_1.eContents().get(1);
		private final RuleCall cOwnedRelationshipFeatureMemberParserRuleCall_1_1_1_0 = (RuleCall)cOwnedRelationshipAssignment_1_1_1.eContents().get(0);
		private final Assignment cOwnedRelationshipAssignment_1_1_2 = (Assignment)cAlternatives_1_1.eContents().get(2);
		private final RuleCall cOwnedRelationshipAliasMemberParserRuleCall_1_1_2_0 = (RuleCall)cOwnedRelationshipAssignment_1_1_2.eContents().get(0);
		private final Assignment cOwnedRelationshipAssignment_1_1_3 = (Assignment)cAlternatives_1_1.eContents().get(3);
		private final RuleCall cOwnedRelationshipImportParserRuleCall_1_1_3_0 = (RuleCall)cOwnedRelationshipAssignment_1_1_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		
		//fragment TypeBody returns SysML::Type :
		//     ';'
		//    | '{' ( ownedRelationship += NonFeatureMember
		//          | ownedRelationship += FeatureMember
		//          | ownedRelationship += AliasMember
		//          | ownedRelationship += Import
		//          )*
		//      '}'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		// ';'
		//| '{' ( ownedRelationship += NonFeatureMember
		//      | ownedRelationship += FeatureMember
		//      | ownedRelationship += AliasMember
		//      | ownedRelationship += Import
		//      )*
		//  '}'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//';'
		public Keyword getSemicolonKeyword_0() { return cSemicolonKeyword_0; }
		
		//'{' ( ownedRelationship += NonFeatureMember
		//         | ownedRelationship += FeatureMember
		//         | ownedRelationship += AliasMember
		//         | ownedRelationship += Import
		//         )*
		//     '}'
		public Group getGroup_1() { return cGroup_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1_0() { return cLeftCurlyBracketKeyword_1_0; }
		
		//( ownedRelationship += NonFeatureMember
		//         | ownedRelationship += FeatureMember
		//         | ownedRelationship += AliasMember
		//         | ownedRelationship += Import
		//         )*
		public Alternatives getAlternatives_1_1() { return cAlternatives_1_1; }
		
		//ownedRelationship += NonFeatureMember
		public Assignment getOwnedRelationshipAssignment_1_1_0() { return cOwnedRelationshipAssignment_1_1_0; }
		
		//NonFeatureMember
		public RuleCall getOwnedRelationshipNonFeatureMemberParserRuleCall_1_1_0_0() { return cOwnedRelationshipNonFeatureMemberParserRuleCall_1_1_0_0; }
		
		//ownedRelationship += FeatureMember
		public Assignment getOwnedRelationshipAssignment_1_1_1() { return cOwnedRelationshipAssignment_1_1_1; }
		
		//FeatureMember
		public RuleCall getOwnedRelationshipFeatureMemberParserRuleCall_1_1_1_0() { return cOwnedRelationshipFeatureMemberParserRuleCall_1_1_1_0; }
		
		//ownedRelationship += AliasMember
		public Assignment getOwnedRelationshipAssignment_1_1_2() { return cOwnedRelationshipAssignment_1_1_2; }
		
		//AliasMember
		public RuleCall getOwnedRelationshipAliasMemberParserRuleCall_1_1_2_0() { return cOwnedRelationshipAliasMemberParserRuleCall_1_1_2_0; }
		
		//ownedRelationship += Import
		public Assignment getOwnedRelationshipAssignment_1_1_3() { return cOwnedRelationshipAssignment_1_1_3; }
		
		//Import
		public RuleCall getOwnedRelationshipImportParserRuleCall_1_1_3_0() { return cOwnedRelationshipImportParserRuleCall_1_1_3_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_1_2() { return cRightCurlyBracketKeyword_1_2; }
	}
	public class FeatureMemberElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.xtext.KerML.FeatureMember");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cTypeFeatureMemberParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cOwnedFeatureMemberParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		///* Feature Membership */
		//FeatureMember returns SysML::OwningMembership :
		//    TypeFeatureMember | OwnedFeatureMember
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//TypeFeatureMember | OwnedFeatureMember
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//TypeFeatureMember
		public RuleCall getTypeFeatureMemberParserRuleCall_0() { return cTypeFeatureMemberParserRuleCall_0; }
		
		//OwnedFeatureMember
		public RuleCall getOwnedFeatureMemberParserRuleCall_1() { return cOwnedFeatureMemberParserRuleCall_1; }
	}
	public class TypeFeatureMemberElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.xtext.KerML.TypeFeatureMember");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cMemberPrefixParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cMemberKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cOwnedRelatedElementAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cOwnedRelatedElementFeatureElementParserRuleCall_2_0 = (RuleCall)cOwnedRelatedElementAssignment_2.eContents().get(0);
		
		//TypeFeatureMember returns SysML::OwningMembership :
		//    MemberPrefix 'member' ownedRelatedElement += FeatureElement
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//MemberPrefix 'member' ownedRelatedElement += FeatureElement
		public Group getGroup() { return cGroup; }
		
		//MemberPrefix
		public RuleCall getMemberPrefixParserRuleCall_0() { return cMemberPrefixParserRuleCall_0; }
		
		//'member'
		public Keyword getMemberKeyword_1() { return cMemberKeyword_1; }
		
		//ownedRelatedElement += FeatureElement
		public Assignment getOwnedRelatedElementAssignment_2() { return cOwnedRelatedElementAssignment_2; }
		
		//FeatureElement
		public RuleCall getOwnedRelatedElementFeatureElementParserRuleCall_2_0() { return cOwnedRelatedElementFeatureElementParserRuleCall_2_0; }
	}
	public class OwnedFeatureMemberElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.xtext.KerML.OwnedFeatureMember");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cMemberPrefixParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Assignment cOwnedRelatedElementAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cOwnedRelatedElementFeatureElementParserRuleCall_1_0 = (RuleCall)cOwnedRelatedElementAssignment_1.eContents().get(0);
		
		//OwnedFeatureMember returns SysML::FeatureMembership :
		//    MemberPrefix ownedRelatedElement += FeatureElement
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//MemberPrefix ownedRelatedElement += FeatureElement
		public Group getGroup() { return cGroup; }
		
		//MemberPrefix
		public RuleCall getMemberPrefixParserRuleCall_0() { return cMemberPrefixParserRuleCall_0; }
		
		//ownedRelatedElement += FeatureElement
		public Assignment getOwnedRelatedElementAssignment_1() { return cOwnedRelatedElementAssignment_1; }
		
		//FeatureElement
		public RuleCall getOwnedRelatedElementFeatureElementParserRuleCall_1_0() { return cOwnedRelatedElementFeatureElementParserRuleCall_1_0; }
	}
	public class SpecializationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.xtext.KerML.Specialization");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final Keyword cSpecializationKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final RuleCall cIdentificationParserRuleCall_0_1 = (RuleCall)cGroup_0.eContents().get(1);
		private final Keyword cSubtypeKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Assignment cSpecificAssignment_2_0 = (Assignment)cAlternatives_2.eContents().get(0);
		private final CrossReference cSpecificTypeCrossReference_2_0_0 = (CrossReference)cSpecificAssignment_2_0.eContents().get(0);
		private final RuleCall cSpecificTypeQualifiedNameParserRuleCall_2_0_0_1 = (RuleCall)cSpecificTypeCrossReference_2_0_0.eContents().get(1);
		private final Assignment cOwnedRelatedElementAssignment_2_1 = (Assignment)cAlternatives_2.eContents().get(1);
		private final RuleCall cOwnedRelatedElementOwnedFeatureChainParserRuleCall_2_1_0 = (RuleCall)cOwnedRelatedElementAssignment_2_1.eContents().get(0);
		private final Alternatives cAlternatives_3 = (Alternatives)cGroup.eContents().get(3);
		private final Keyword cColonGreaterThanSignKeyword_3_0 = (Keyword)cAlternatives_3.eContents().get(0);
		private final Keyword cSpecializesKeyword_3_1 = (Keyword)cAlternatives_3.eContents().get(1);
		private final Alternatives cAlternatives_4 = (Alternatives)cGroup.eContents().get(4);
		private final Assignment cGeneralAssignment_4_0 = (Assignment)cAlternatives_4.eContents().get(0);
		private final CrossReference cGeneralTypeCrossReference_4_0_0 = (CrossReference)cGeneralAssignment_4_0.eContents().get(0);
		private final RuleCall cGeneralTypeQualifiedNameParserRuleCall_4_0_0_1 = (RuleCall)cGeneralTypeCrossReference_4_0_0.eContents().get(1);
		private final Assignment cOwnedRelatedElementAssignment_4_1 = (Assignment)cAlternatives_4.eContents().get(1);
		private final RuleCall cOwnedRelatedElementOwnedFeatureChainParserRuleCall_4_1_0 = (RuleCall)cOwnedRelatedElementAssignment_4_1.eContents().get(0);
		private final RuleCall cRelationshipBodyParserRuleCall_5 = (RuleCall)cGroup.eContents().get(5);
		
		///* Specialization */
		//Specialization returns SysML::Specialization :
		//    ( 'specialization' Identification? )?
		//    'subtype'
		//    ( specific = [SysML::Type | QualifiedName]
		//    | ownedRelatedElement += OwnedFeatureChain )
		//    ( ':>' | 'specializes')
		//    ( general = [SysML::Type | QualifiedName]
		//    | ownedRelatedElement += OwnedFeatureChain )
		//    RelationshipBody
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//( 'specialization' Identification? )?
		//'subtype'
		//( specific = [SysML::Type | QualifiedName]
		//| ownedRelatedElement += OwnedFeatureChain )
		//( ':>' | 'specializes')
		//( general = [SysML::Type | QualifiedName]
		//| ownedRelatedElement += OwnedFeatureChain )
		//RelationshipBody
		public Group getGroup() { return cGroup; }
		
		//( 'specialization' Identification? )?
		public Group getGroup_0() { return cGroup_0; }
		
		//'specialization'
		public Keyword getSpecializationKeyword_0_0() { return cSpecializationKeyword_0_0; }
		
		//Identification?
		public RuleCall getIdentificationParserRuleCall_0_1() { return cIdentificationParserRuleCall_0_1; }
		
		//'subtype'
		public Keyword getSubtypeKeyword_1() { return cSubtypeKeyword_1; }
		
		//( specific = [SysML::Type | QualifiedName]
		//| ownedRelatedElement += OwnedFeatureChain )
		public Alternatives getAlternatives_2() { return cAlternatives_2; }
		
		//specific = [SysML::Type | QualifiedName]
		public Assignment getSpecificAssignment_2_0() { return cSpecificAssignment_2_0; }
		
		//[SysML::Type | QualifiedName]
		public CrossReference getSpecificTypeCrossReference_2_0_0() { return cSpecificTypeCrossReference_2_0_0; }
		
		//QualifiedName
		public RuleCall getSpecificTypeQualifiedNameParserRuleCall_2_0_0_1() { return cSpecificTypeQualifiedNameParserRuleCall_2_0_0_1; }
		
		//ownedRelatedElement += OwnedFeatureChain
		public Assignment getOwnedRelatedElementAssignment_2_1() { return cOwnedRelatedElementAssignment_2_1; }
		
		//OwnedFeatureChain
		public RuleCall getOwnedRelatedElementOwnedFeatureChainParserRuleCall_2_1_0() { return cOwnedRelatedElementOwnedFeatureChainParserRuleCall_2_1_0; }
		
		//( ':>' | 'specializes')
		public Alternatives getAlternatives_3() { return cAlternatives_3; }
		
		//':>'
		public Keyword getColonGreaterThanSignKeyword_3_0() { return cColonGreaterThanSignKeyword_3_0; }
		
		//'specializes'
		public Keyword getSpecializesKeyword_3_1() { return cSpecializesKeyword_3_1; }
		
		//( general = [SysML::Type | QualifiedName]
		//| ownedRelatedElement += OwnedFeatureChain )
		public Alternatives getAlternatives_4() { return cAlternatives_4; }
		
		//general = [SysML::Type | QualifiedName]
		public Assignment getGeneralAssignment_4_0() { return cGeneralAssignment_4_0; }
		
		//[SysML::Type | QualifiedName]
		public CrossReference getGeneralTypeCrossReference_4_0_0() { return cGeneralTypeCrossReference_4_0_0; }
		
		//QualifiedName
		public RuleCall getGeneralTypeQualifiedNameParserRuleCall_4_0_0_1() { return cGeneralTypeQualifiedNameParserRuleCall_4_0_0_1; }
		
		//ownedRelatedElement += OwnedFeatureChain
		public Assignment getOwnedRelatedElementAssignment_4_1() { return cOwnedRelatedElementAssignment_4_1; }
		
		//OwnedFeatureChain
		public RuleCall getOwnedRelatedElementOwnedFeatureChainParserRuleCall_4_1_0() { return cOwnedRelatedElementOwnedFeatureChainParserRuleCall_4_1_0; }
		
		//RelationshipBody
		public RuleCall getRelationshipBodyParserRuleCall_5() { return cRelationshipBodyParserRuleCall_5; }
	}
	public class OwnedSpecializationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.xtext.KerML.OwnedSpecialization");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cGeneralAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final CrossReference cGeneralTypeCrossReference_0_0 = (CrossReference)cGeneralAssignment_0.eContents().get(0);
		private final RuleCall cGeneralTypeQualifiedNameParserRuleCall_0_0_1 = (RuleCall)cGeneralTypeCrossReference_0_0.eContents().get(1);
		private final Assignment cOwnedRelatedElementAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cOwnedRelatedElementOwnedFeatureChainParserRuleCall_1_0 = (RuleCall)cOwnedRelatedElementAssignment_1.eContents().get(0);
		
		//OwnedSpecialization returns SysML::Specialization :
		//      general = [SysML::Type | QualifiedName]
		//    | ownedRelatedElement += OwnedFeatureChain
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//  general = [SysML::Type | QualifiedName]
		//| ownedRelatedElement += OwnedFeatureChain
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//general = [SysML::Type | QualifiedName]
		public Assignment getGeneralAssignment_0() { return cGeneralAssignment_0; }
		
		//[SysML::Type | QualifiedName]
		public CrossReference getGeneralTypeCrossReference_0_0() { return cGeneralTypeCrossReference_0_0; }
		
		//QualifiedName
		public RuleCall getGeneralTypeQualifiedNameParserRuleCall_0_0_1() { return cGeneralTypeQualifiedNameParserRuleCall_0_0_1; }
		
		//ownedRelatedElement += OwnedFeatureChain
		public Assignment getOwnedRelatedElementAssignment_1() { return cOwnedRelatedElementAssignment_1; }
		
		//OwnedFeatureChain
		public RuleCall getOwnedRelatedElementOwnedFeatureChainParserRuleCall_1_0() { return cOwnedRelatedElementOwnedFeatureChainParserRuleCall_1_0; }
	}
	public class ConjugationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.xtext.KerML.Conjugation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final Keyword cConjugationKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final RuleCall cIdentificationParserRuleCall_0_1 = (RuleCall)cGroup_0.eContents().get(1);
		private final Keyword cConjugateKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Assignment cConjugatedTypeAssignment_2_0 = (Assignment)cAlternatives_2.eContents().get(0);
		private final CrossReference cConjugatedTypeTypeCrossReference_2_0_0 = (CrossReference)cConjugatedTypeAssignment_2_0.eContents().get(0);
		private final RuleCall cConjugatedTypeTypeQualifiedNameParserRuleCall_2_0_0_1 = (RuleCall)cConjugatedTypeTypeCrossReference_2_0_0.eContents().get(1);
		private final Assignment cOwnedRelatedElementAssignment_2_1 = (Assignment)cAlternatives_2.eContents().get(1);
		private final RuleCall cOwnedRelatedElementOwnedFeatureChainParserRuleCall_2_1_0 = (RuleCall)cOwnedRelatedElementAssignment_2_1.eContents().get(0);
		private final Alternatives cAlternatives_3 = (Alternatives)cGroup.eContents().get(3);
		private final Keyword cTildeKeyword_3_0 = (Keyword)cAlternatives_3.eContents().get(0);
		private final Keyword cConjugatesKeyword_3_1 = (Keyword)cAlternatives_3.eContents().get(1);
		private final Alternatives cAlternatives_4 = (Alternatives)cGroup.eContents().get(4);
		private final Assignment cOriginalTypeAssignment_4_0 = (Assignment)cAlternatives_4.eContents().get(0);
		private final CrossReference cOriginalTypeTypeCrossReference_4_0_0 = (CrossReference)cOriginalTypeAssignment_4_0.eContents().get(0);
		private final RuleCall cOriginalTypeTypeQualifiedNameParserRuleCall_4_0_0_1 = (RuleCall)cOriginalTypeTypeCrossReference_4_0_0.eContents().get(1);
		private final Assignment cOwnedRelatedElementAssignment_4_1 = (Assignment)cAlternatives_4.eContents().get(1);
		private final RuleCall cOwnedRelatedElementOwnedFeatureChainParserRuleCall_4_1_0 = (RuleCall)cOwnedRelatedElementAssignment_4_1.eContents().get(0);
		private final RuleCall cRelationshipBodyParserRuleCall_5 = (RuleCall)cGroup.eContents().get(5);
		
		///* Conjugation */
		//Conjugation returns SysML::Conjugation :
		//    ( 'conjugation' Identification? )?
		//    'conjugate'
		//    ( conjugatedType = [SysML::Type | QualifiedName]
		//    | ownedRelatedElement += OwnedFeatureChain )
		//    ( '~' | 'conjugates')
		//    ( originalType = [SysML::Type | QualifiedName]
		//    | ownedRelatedElement += OwnedFeatureChain )
		//    RelationshipBody
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//( 'conjugation' Identification? )?
		//'conjugate'
		//( conjugatedType = [SysML::Type | QualifiedName]
		//| ownedRelatedElement += OwnedFeatureChain )
		//( '~' | 'conjugates')
		//( originalType = [SysML::Type | QualifiedName]
		//| ownedRelatedElement += OwnedFeatureChain )
		//RelationshipBody
		public Group getGroup() { return cGroup; }
		
		//( 'conjugation' Identification? )?
		public Group getGroup_0() { return cGroup_0; }
		
		//'conjugation'
		public Keyword getConjugationKeyword_0_0() { return cConjugationKeyword_0_0; }
		
		//Identification?
		public RuleCall getIdentificationParserRuleCall_0_1() { return cIdentificationParserRuleCall_0_1; }
		
		//'conjugate'
		public Keyword getConjugateKeyword_1() { return cConjugateKeyword_1; }
		
		//( conjugatedType = [SysML::Type | QualifiedName]
		//| ownedRelatedElement += OwnedFeatureChain )
		public Alternatives getAlternatives_2() { return cAlternatives_2; }
		
		//conjugatedType = [SysML::Type | QualifiedName]
		public Assignment getConjugatedTypeAssignment_2_0() { return cConjugatedTypeAssignment_2_0; }
		
		//[SysML::Type | QualifiedName]
		public CrossReference getConjugatedTypeTypeCrossReference_2_0_0() { return cConjugatedTypeTypeCrossReference_2_0_0; }
		
		//QualifiedName
		public RuleCall getConjugatedTypeTypeQualifiedNameParserRuleCall_2_0_0_1() { return cConjugatedTypeTypeQualifiedNameParserRuleCall_2_0_0_1; }
		
		//ownedRelatedElement += OwnedFeatureChain
		public Assignment getOwnedRelatedElementAssignment_2_1() { return cOwnedRelatedElementAssignment_2_1; }
		
		//OwnedFeatureChain
		public RuleCall getOwnedRelatedElementOwnedFeatureChainParserRuleCall_2_1_0() { return cOwnedRelatedElementOwnedFeatureChainParserRuleCall_2_1_0; }
		
		//( '~' | 'conjugates')
		public Alternatives getAlternatives_3() { return cAlternatives_3; }
		
		//'~'
		public Keyword getTildeKeyword_3_0() { return cTildeKeyword_3_0; }
		
		//'conjugates'
		public Keyword getConjugatesKeyword_3_1() { return cConjugatesKeyword_3_1; }
		
		//( originalType = [SysML::Type | QualifiedName]
		//| ownedRelatedElement += OwnedFeatureChain )
		public Alternatives getAlternatives_4() { return cAlternatives_4; }
		
		//originalType = [SysML::Type | QualifiedName]
		public Assignment getOriginalTypeAssignment_4_0() { return cOriginalTypeAssignment_4_0; }
		
		//[SysML::Type | QualifiedName]
		public CrossReference getOriginalTypeTypeCrossReference_4_0_0() { return cOriginalTypeTypeCrossReference_4_0_0; }
		
		//QualifiedName
		public RuleCall getOriginalTypeTypeQualifiedNameParserRuleCall_4_0_0_1() { return cOriginalTypeTypeQualifiedNameParserRuleCall_4_0_0_1; }
		
		//ownedRelatedElement += OwnedFeatureChain
		public Assignment getOwnedRelatedElementAssignment_4_1() { return cOwnedRelatedElementAssignment_4_1; }
		
		//OwnedFeatureChain
		public RuleCall getOwnedRelatedElementOwnedFeatureChainParserRuleCall_4_1_0() { return cOwnedRelatedElementOwnedFeatureChainParserRuleCall_4_1_0; }
		
		//RelationshipBody
		public RuleCall getRelationshipBodyParserRuleCall_5() { return cRelationshipBodyParserRuleCall_5; }
	}
	public class OwnedConjugationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.xtext.KerML.OwnedConjugation");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cOriginalTypeAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final CrossReference cOriginalTypeTypeCrossReference_0_0 = (CrossReference)cOriginalTypeAssignment_0.eContents().get(0);
		private final RuleCall cOriginalTypeTypeQualifiedNameParserRuleCall_0_0_1 = (RuleCall)cOriginalTypeTypeCrossReference_0_0.eContents().get(1);
		private final Assignment cOwnedRelatedElementAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cOwnedRelatedElementOwnedFeatureChainParserRuleCall_1_0 = (RuleCall)cOwnedRelatedElementAssignment_1.eContents().get(0);
		
		//OwnedConjugation returns SysML::Conjugation :
		//      originalType = [SysML::Type | QualifiedName]
		//    | ownedRelatedElement += OwnedFeatureChain
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//  originalType = [SysML::Type | QualifiedName]
		//| ownedRelatedElement += OwnedFeatureChain
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//originalType = [SysML::Type | QualifiedName]
		public Assignment getOriginalTypeAssignment_0() { return cOriginalTypeAssignment_0; }
		
		//[SysML::Type | QualifiedName]
		public CrossReference getOriginalTypeTypeCrossReference_0_0() { return cOriginalTypeTypeCrossReference_0_0; }
		
		//QualifiedName
		public RuleCall getOriginalTypeTypeQualifiedNameParserRuleCall_0_0_1() { return cOriginalTypeTypeQualifiedNameParserRuleCall_0_0_1; }
		
		//ownedRelatedElement += OwnedFeatureChain
		public Assignment getOwnedRelatedElementAssignment_1() { return cOwnedRelatedElementAssignment_1; }
		
		//OwnedFeatureChain
		public RuleCall getOwnedRelatedElementOwnedFeatureChainParserRuleCall_1_0() { return cOwnedRelatedElementOwnedFeatureChainParserRuleCall_1_0; }
	}
	public class DisjoiningElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.xtext.KerML.Disjoining");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final Keyword cDisjoiningKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final RuleCall cIdentificationParserRuleCall_0_1 = (RuleCall)cGroup_0.eContents().get(1);
		private final Keyword cDisjointKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Assignment cTypeDisjoinedAssignment_2_0 = (Assignment)cAlternatives_2.eContents().get(0);
		private final CrossReference cTypeDisjoinedTypeCrossReference_2_0_0 = (CrossReference)cTypeDisjoinedAssignment_2_0.eContents().get(0);
		private final RuleCall cTypeDisjoinedTypeQualifiedNameParserRuleCall_2_0_0_1 = (RuleCall)cTypeDisjoinedTypeCrossReference_2_0_0.eContents().get(1);
		private final Assignment cOwnedRelatedElementAssignment_2_1 = (Assignment)cAlternatives_2.eContents().get(1);
		private final RuleCall cOwnedRelatedElementOwnedFeatureChainParserRuleCall_2_1_0 = (RuleCall)cOwnedRelatedElementAssignment_2_1.eContents().get(0);
		private final Keyword cFromKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Alternatives cAlternatives_4 = (Alternatives)cGroup.eContents().get(4);
		private final Assignment cDisjoiningTypeAssignment_4_0 = (Assignment)cAlternatives_4.eContents().get(0);
		private final CrossReference cDisjoiningTypeTypeCrossReference_4_0_0 = (CrossReference)cDisjoiningTypeAssignment_4_0.eContents().get(0);
		private final RuleCall cDisjoiningTypeTypeQualifiedNameParserRuleCall_4_0_0_1 = (RuleCall)cDisjoiningTypeTypeCrossReference_4_0_0.eContents().get(1);
		private final Assignment cOwnedRelatedElementAssignment_4_1 = (Assignment)cAlternatives_4.eContents().get(1);
		private final RuleCall cOwnedRelatedElementOwnedFeatureChainParserRuleCall_4_1_0 = (RuleCall)cOwnedRelatedElementAssignment_4_1.eContents().get(0);
		private final RuleCall cRelationshipBodyParserRuleCall_5 = (RuleCall)cGroup.eContents().get(5);
		
		///* Disjoining */
		//Disjoining returns SysML::Disjoining :
		//    ( 'disjoining' Identification? )?
		//    'disjoint'
		//    ( typeDisjoined = [SysML::Type | QualifiedName]
		//    | ownedRelatedElement += OwnedFeatureChain )
		//    'from'
		//    ( disjoiningType = [SysML::Type | QualifiedName]
		//    | ownedRelatedElement += OwnedFeatureChain )
		//    RelationshipBody
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//( 'disjoining' Identification? )?
		//'disjoint'
		//( typeDisjoined = [SysML::Type | QualifiedName]
		//| ownedRelatedElement += OwnedFeatureChain )
		//'from'
		//( disjoiningType = [SysML::Type | QualifiedName]
		//| ownedRelatedElement += OwnedFeatureChain )
		//RelationshipBody
		public Group getGroup() { return cGroup; }
		
		//( 'disjoining' Identification? )?
		public Group getGroup_0() { return cGroup_0; }
		
		//'disjoining'
		public Keyword getDisjoiningKeyword_0_0() { return cDisjoiningKeyword_0_0; }
		
		//Identification?
		public RuleCall getIdentificationParserRuleCall_0_1() { return cIdentificationParserRuleCall_0_1; }
		
		//'disjoint'
		public Keyword getDisjointKeyword_1() { return cDisjointKeyword_1; }
		
		//( typeDisjoined = [SysML::Type | QualifiedName]
		//| ownedRelatedElement += OwnedFeatureChain )
		public Alternatives getAlternatives_2() { return cAlternatives_2; }
		
		//typeDisjoined = [SysML::Type | QualifiedName]
		public Assignment getTypeDisjoinedAssignment_2_0() { return cTypeDisjoinedAssignment_2_0; }
		
		//[SysML::Type | QualifiedName]
		public CrossReference getTypeDisjoinedTypeCrossReference_2_0_0() { return cTypeDisjoinedTypeCrossReference_2_0_0; }
		
		//QualifiedName
		public RuleCall getTypeDisjoinedTypeQualifiedNameParserRuleCall_2_0_0_1() { return cTypeDisjoinedTypeQualifiedNameParserRuleCall_2_0_0_1; }
		
		//ownedRelatedElement += OwnedFeatureChain
		public Assignment getOwnedRelatedElementAssignment_2_1() { return cOwnedRelatedElementAssignment_2_1; }
		
		//OwnedFeatureChain
		public RuleCall getOwnedRelatedElementOwnedFeatureChainParserRuleCall_2_1_0() { return cOwnedRelatedElementOwnedFeatureChainParserRuleCall_2_1_0; }
		
		//'from'
		public Keyword getFromKeyword_3() { return cFromKeyword_3; }
		
		//( disjoiningType = [SysML::Type | QualifiedName]
		//| ownedRelatedElement += OwnedFeatureChain )
		public Alternatives getAlternatives_4() { return cAlternatives_4; }
		
		//disjoiningType = [SysML::Type | QualifiedName]
		public Assignment getDisjoiningTypeAssignment_4_0() { return cDisjoiningTypeAssignment_4_0; }
		
		//[SysML::Type | QualifiedName]
		public CrossReference getDisjoiningTypeTypeCrossReference_4_0_0() { return cDisjoiningTypeTypeCrossReference_4_0_0; }
		
		//QualifiedName
		public RuleCall getDisjoiningTypeTypeQualifiedNameParserRuleCall_4_0_0_1() { return cDisjoiningTypeTypeQualifiedNameParserRuleCall_4_0_0_1; }
		
		//ownedRelatedElement += OwnedFeatureChain
		public Assignment getOwnedRelatedElementAssignment_4_1() { return cOwnedRelatedElementAssignment_4_1; }
		
		//OwnedFeatureChain
		public RuleCall getOwnedRelatedElementOwnedFeatureChainParserRuleCall_4_1_0() { return cOwnedRelatedElementOwnedFeatureChainParserRuleCall_4_1_0; }
		
		//RelationshipBody
		public RuleCall getRelationshipBodyParserRuleCall_5() { return cRelationshipBodyParserRuleCall_5; }
	}
	public class OwnedDisjoiningElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.xtext.KerML.OwnedDisjoining");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cDisjoiningTypeAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final CrossReference cDisjoiningTypeTypeCrossReference_0_0 = (CrossReference)cDisjoiningTypeAssignment_0.eContents().get(0);
		private final RuleCall cDisjoiningTypeTypeQualifiedNameParserRuleCall_0_0_1 = (RuleCall)cDisjoiningTypeTypeCrossReference_0_0.eContents().get(1);
		private final Assignment cOwnedRelatedElementAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cOwnedRelatedElementOwnedFeatureChainParserRuleCall_1_0 = (RuleCall)cOwnedRelatedElementAssignment_1.eContents().get(0);
		
		//OwnedDisjoining returns SysML::Disjoining :
		//      disjoiningType = [SysML::Type | QualifiedName]
		//    | ownedRelatedElement += OwnedFeatureChain
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//  disjoiningType = [SysML::Type | QualifiedName]
		//| ownedRelatedElement += OwnedFeatureChain
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//disjoiningType = [SysML::Type | QualifiedName]
		public Assignment getDisjoiningTypeAssignment_0() { return cDisjoiningTypeAssignment_0; }
		
		//[SysML::Type | QualifiedName]
		public CrossReference getDisjoiningTypeTypeCrossReference_0_0() { return cDisjoiningTypeTypeCrossReference_0_0; }
		
		//QualifiedName
		public RuleCall getDisjoiningTypeTypeQualifiedNameParserRuleCall_0_0_1() { return cDisjoiningTypeTypeQualifiedNameParserRuleCall_0_0_1; }
		
		//ownedRelatedElement += OwnedFeatureChain
		public Assignment getOwnedRelatedElementAssignment_1() { return cOwnedRelatedElementAssignment_1; }
		
		//OwnedFeatureChain
		public RuleCall getOwnedRelatedElementOwnedFeatureChainParserRuleCall_1_0() { return cOwnedRelatedElementOwnedFeatureChainParserRuleCall_1_0; }
	}
	public class UnioningElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.xtext.KerML.Unioning");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cUnioningTypeAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final CrossReference cUnioningTypeTypeCrossReference_0_0 = (CrossReference)cUnioningTypeAssignment_0.eContents().get(0);
		private final RuleCall cUnioningTypeTypeQualifiedNameParserRuleCall_0_0_1 = (RuleCall)cUnioningTypeTypeCrossReference_0_0.eContents().get(1);
		private final Assignment cOwnedRelatedElementAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cOwnedRelatedElementOwnedFeatureChainParserRuleCall_1_0 = (RuleCall)cOwnedRelatedElementAssignment_1.eContents().get(0);
		
		///* Unioning, Intersecting and Differencing */
		//Unioning returns SysML::Unioning :
		//      unioningType = [SysML::Type | QualifiedName]
		//    | ownedRelatedElement += OwnedFeatureChain
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//  unioningType = [SysML::Type | QualifiedName]
		//| ownedRelatedElement += OwnedFeatureChain
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//unioningType = [SysML::Type | QualifiedName]
		public Assignment getUnioningTypeAssignment_0() { return cUnioningTypeAssignment_0; }
		
		//[SysML::Type | QualifiedName]
		public CrossReference getUnioningTypeTypeCrossReference_0_0() { return cUnioningTypeTypeCrossReference_0_0; }
		
		//QualifiedName
		public RuleCall getUnioningTypeTypeQualifiedNameParserRuleCall_0_0_1() { return cUnioningTypeTypeQualifiedNameParserRuleCall_0_0_1; }
		
		//ownedRelatedElement += OwnedFeatureChain
		public Assignment getOwnedRelatedElementAssignment_1() { return cOwnedRelatedElementAssignment_1; }
		
		//OwnedFeatureChain
		public RuleCall getOwnedRelatedElementOwnedFeatureChainParserRuleCall_1_0() { return cOwnedRelatedElementOwnedFeatureChainParserRuleCall_1_0; }
	}
	public class IntersectingElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.xtext.KerML.Intersecting");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cIntersectingTypeAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final CrossReference cIntersectingTypeTypeCrossReference_0_0 = (CrossReference)cIntersectingTypeAssignment_0.eContents().get(0);
		private final RuleCall cIntersectingTypeTypeQualifiedNameParserRuleCall_0_0_1 = (RuleCall)cIntersectingTypeTypeCrossReference_0_0.eContents().get(1);
		private final Assignment cOwnedRelatedElementAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cOwnedRelatedElementOwnedFeatureChainParserRuleCall_1_0 = (RuleCall)cOwnedRelatedElementAssignment_1.eContents().get(0);
		
		//Intersecting returns SysML::Intersecting :
		//      intersectingType = [SysML::Type | QualifiedName]
		//    | ownedRelatedElement += OwnedFeatureChain
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//  intersectingType = [SysML::Type | QualifiedName]
		//| ownedRelatedElement += OwnedFeatureChain
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//intersectingType = [SysML::Type | QualifiedName]
		public Assignment getIntersectingTypeAssignment_0() { return cIntersectingTypeAssignment_0; }
		
		//[SysML::Type | QualifiedName]
		public CrossReference getIntersectingTypeTypeCrossReference_0_0() { return cIntersectingTypeTypeCrossReference_0_0; }
		
		//QualifiedName
		public RuleCall getIntersectingTypeTypeQualifiedNameParserRuleCall_0_0_1() { return cIntersectingTypeTypeQualifiedNameParserRuleCall_0_0_1; }
		
		//ownedRelatedElement += OwnedFeatureChain
		public Assignment getOwnedRelatedElementAssignment_1() { return cOwnedRelatedElementAssignment_1; }
		
		//OwnedFeatureChain
		public RuleCall getOwnedRelatedElementOwnedFeatureChainParserRuleCall_1_0() { return cOwnedRelatedElementOwnedFeatureChainParserRuleCall_1_0; }
	}
	public class DifferencingElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.xtext.KerML.Differencing");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cDifferencingTypeAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final CrossReference cDifferencingTypeTypeCrossReference_0_0 = (CrossReference)cDifferencingTypeAssignment_0.eContents().get(0);
		private final RuleCall cDifferencingTypeTypeQualifiedNameParserRuleCall_0_0_1 = (RuleCall)cDifferencingTypeTypeCrossReference_0_0.eContents().get(1);
		private final Assignment cOwnedRelatedElementAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cOwnedRelatedElementOwnedFeatureChainParserRuleCall_1_0 = (RuleCall)cOwnedRelatedElementAssignment_1.eContents().get(0);
		
		//Differencing returns SysML::Differencing :
		//      differencingType = [SysML::Type | QualifiedName]
		//    | ownedRelatedElement += OwnedFeatureChain
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//  differencingType = [SysML::Type | QualifiedName]
		//| ownedRelatedElement += OwnedFeatureChain
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//differencingType = [SysML::Type | QualifiedName]
		public Assignment getDifferencingTypeAssignment_0() { return cDifferencingTypeAssignment_0; }
		
		//[SysML::Type | QualifiedName]
		public CrossReference getDifferencingTypeTypeCrossReference_0_0() { return cDifferencingTypeTypeCrossReference_0_0; }
		
		//QualifiedName
		public RuleCall getDifferencingTypeTypeQualifiedNameParserRuleCall_0_0_1() { return cDifferencingTypeTypeQualifiedNameParserRuleCall_0_0_1; }
		
		//ownedRelatedElement += OwnedFeatureChain
		public Assignment getOwnedRelatedElementAssignment_1() { return cOwnedRelatedElementAssignment_1; }
		
		//OwnedFeatureChain
		public RuleCall getOwnedRelatedElementOwnedFeatureChainParserRuleCall_1_0() { return cOwnedRelatedElementOwnedFeatureChainParserRuleCall_1_0; }
	}
	public class ClassifierElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.xtext.KerML.Classifier");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cTypePrefixParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cClassifierKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final RuleCall cClassifierDeclarationParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final RuleCall cTypeBodyParserRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		
		///* CLASSIFIERS */
		///* Classifiers */
		//Classifier returns SysML::Classifier :
		//    TypePrefix 'classifier'
		//    ClassifierDeclaration TypeBody
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//TypePrefix 'classifier'
		//ClassifierDeclaration TypeBody
		public Group getGroup() { return cGroup; }
		
		//TypePrefix
		public RuleCall getTypePrefixParserRuleCall_0() { return cTypePrefixParserRuleCall_0; }
		
		//'classifier'
		public Keyword getClassifierKeyword_1() { return cClassifierKeyword_1; }
		
		//ClassifierDeclaration
		public RuleCall getClassifierDeclarationParserRuleCall_2() { return cClassifierDeclarationParserRuleCall_2; }
		
		//TypeBody
		public RuleCall getTypeBodyParserRuleCall_3() { return cTypeBodyParserRuleCall_3; }
	}
	public class ClassifierDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.xtext.KerML.ClassifierDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cIsSufficientAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cIsSufficientAllKeyword_0_0 = (Keyword)cIsSufficientAssignment_0.eContents().get(0);
		private final RuleCall cIdentificationParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Assignment cOwnedRelationshipAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cOwnedRelationshipOwnedMultiplicityParserRuleCall_2_0 = (RuleCall)cOwnedRelationshipAssignment_2.eContents().get(0);
		private final Alternatives cAlternatives_3 = (Alternatives)cGroup.eContents().get(3);
		private final RuleCall cSuperclassingPartParserRuleCall_3_0 = (RuleCall)cAlternatives_3.eContents().get(0);
		private final RuleCall cClassifierConjugationPartParserRuleCall_3_1 = (RuleCall)cAlternatives_3.eContents().get(1);
		private final RuleCall cTypeRelationshipPartParserRuleCall_4 = (RuleCall)cGroup.eContents().get(4);
		
		//fragment ClassifierDeclaration returns SysML::Classifier :
		//    (isSufficient ?= 'all' )? Identification?
		//    ( ownedRelationship += OwnedMultiplicity )?
		//    ( SuperclassingPart | ClassifierConjugationPart )?
		//    TypeRelationshipPart*
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//(isSufficient ?= 'all' )? Identification?
		//( ownedRelationship += OwnedMultiplicity )?
		//( SuperclassingPart | ClassifierConjugationPart )?
		//TypeRelationshipPart*
		public Group getGroup() { return cGroup; }
		
		//(isSufficient ?= 'all' )?
		public Assignment getIsSufficientAssignment_0() { return cIsSufficientAssignment_0; }
		
		//'all'
		public Keyword getIsSufficientAllKeyword_0_0() { return cIsSufficientAllKeyword_0_0; }
		
		//Identification?
		public RuleCall getIdentificationParserRuleCall_1() { return cIdentificationParserRuleCall_1; }
		
		//( ownedRelationship += OwnedMultiplicity )?
		public Assignment getOwnedRelationshipAssignment_2() { return cOwnedRelationshipAssignment_2; }
		
		//OwnedMultiplicity
		public RuleCall getOwnedRelationshipOwnedMultiplicityParserRuleCall_2_0() { return cOwnedRelationshipOwnedMultiplicityParserRuleCall_2_0; }
		
		//( SuperclassingPart | ClassifierConjugationPart )?
		public Alternatives getAlternatives_3() { return cAlternatives_3; }
		
		//SuperclassingPart
		public RuleCall getSuperclassingPartParserRuleCall_3_0() { return cSuperclassingPartParserRuleCall_3_0; }
		
		//ClassifierConjugationPart
		public RuleCall getClassifierConjugationPartParserRuleCall_3_1() { return cClassifierConjugationPartParserRuleCall_3_1; }
		
		//TypeRelationshipPart*
		public RuleCall getTypeRelationshipPartParserRuleCall_4() { return cTypeRelationshipPartParserRuleCall_4; }
	}
	public class SuperclassingPartElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.xtext.KerML.SuperclassingPart");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Keyword cColonGreaterThanSignKeyword_0_0 = (Keyword)cAlternatives_0.eContents().get(0);
		private final Keyword cSpecializesKeyword_0_1 = (Keyword)cAlternatives_0.eContents().get(1);
		private final Assignment cOwnedRelationshipAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cOwnedRelationshipOwnedsubclassificationParserRuleCall_1_0 = (RuleCall)cOwnedRelationshipAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cCommaKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cOwnedRelationshipAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cOwnedRelationshipOwnedsubclassificationParserRuleCall_2_1_0 = (RuleCall)cOwnedRelationshipAssignment_2_1.eContents().get(0);
		
		//fragment SuperclassingPart returns SysML::Classifier :
		//    ( ':>' | 'specializes' ) ownedRelationship += Ownedsubclassification
		//    ( ',' ownedRelationship += Ownedsubclassification )*
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//( ':>' | 'specializes' ) ownedRelationship += Ownedsubclassification
		//( ',' ownedRelationship += Ownedsubclassification )*
		public Group getGroup() { return cGroup; }
		
		//( ':>' | 'specializes' )
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//':>'
		public Keyword getColonGreaterThanSignKeyword_0_0() { return cColonGreaterThanSignKeyword_0_0; }
		
		//'specializes'
		public Keyword getSpecializesKeyword_0_1() { return cSpecializesKeyword_0_1; }
		
		//ownedRelationship += Ownedsubclassification
		public Assignment getOwnedRelationshipAssignment_1() { return cOwnedRelationshipAssignment_1; }
		
		//Ownedsubclassification
		public RuleCall getOwnedRelationshipOwnedsubclassificationParserRuleCall_1_0() { return cOwnedRelationshipOwnedsubclassificationParserRuleCall_1_0; }
		
		//( ',' ownedRelationship += Ownedsubclassification )*
		public Group getGroup_2() { return cGroup_2; }
		
		//','
		public Keyword getCommaKeyword_2_0() { return cCommaKeyword_2_0; }
		
		//ownedRelationship += Ownedsubclassification
		public Assignment getOwnedRelationshipAssignment_2_1() { return cOwnedRelationshipAssignment_2_1; }
		
		//Ownedsubclassification
		public RuleCall getOwnedRelationshipOwnedsubclassificationParserRuleCall_2_1_0() { return cOwnedRelationshipOwnedsubclassificationParserRuleCall_2_1_0; }
	}
	public class ClassifierConjugationPartElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.xtext.KerML.ClassifierConjugationPart");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Keyword cTildeKeyword_0_0 = (Keyword)cAlternatives_0.eContents().get(0);
		private final Keyword cConjugatesKeyword_0_1 = (Keyword)cAlternatives_0.eContents().get(1);
		private final Assignment cOwnedRelationshipAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cOwnedRelationshipClassifierConjugationParserRuleCall_1_0 = (RuleCall)cOwnedRelationshipAssignment_1.eContents().get(0);
		
		//fragment ClassifierConjugationPart returns SysML::Classifier :
		//    ( '~' | 'conjugates' ) ownedRelationship += ClassifierConjugation
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//( '~' | 'conjugates' ) ownedRelationship += ClassifierConjugation
		public Group getGroup() { return cGroup; }
		
		//( '~' | 'conjugates' )
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//'~'
		public Keyword getTildeKeyword_0_0() { return cTildeKeyword_0_0; }
		
		//'conjugates'
		public Keyword getConjugatesKeyword_0_1() { return cConjugatesKeyword_0_1; }
		
		//ownedRelationship += ClassifierConjugation
		public Assignment getOwnedRelationshipAssignment_1() { return cOwnedRelationshipAssignment_1; }
		
		//ClassifierConjugation
		public RuleCall getOwnedRelationshipClassifierConjugationParserRuleCall_1_0() { return cOwnedRelationshipClassifierConjugationParserRuleCall_1_0; }
	}
	public class SubclassificationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.xtext.KerML.Subclassification");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final Keyword cSpecializationKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final RuleCall cIdentificationParserRuleCall_0_1 = (RuleCall)cGroup_0.eContents().get(1);
		private final Keyword cSubclassifierKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cSubclassifierAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cSubclassifierClassifierCrossReference_2_0 = (CrossReference)cSubclassifierAssignment_2.eContents().get(0);
		private final RuleCall cSubclassifierClassifierQualifiedNameParserRuleCall_2_0_1 = (RuleCall)cSubclassifierClassifierCrossReference_2_0.eContents().get(1);
		private final Alternatives cAlternatives_3 = (Alternatives)cGroup.eContents().get(3);
		private final Keyword cColonGreaterThanSignKeyword_3_0 = (Keyword)cAlternatives_3.eContents().get(0);
		private final Keyword cSpecializesKeyword_3_1 = (Keyword)cAlternatives_3.eContents().get(1);
		private final Assignment cSuperclassifierAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final CrossReference cSuperclassifierClassifierCrossReference_4_0 = (CrossReference)cSuperclassifierAssignment_4.eContents().get(0);
		private final RuleCall cSuperclassifierClassifierQualifiedNameParserRuleCall_4_0_1 = (RuleCall)cSuperclassifierClassifierCrossReference_4_0.eContents().get(1);
		private final RuleCall cRelationshipBodyParserRuleCall_5 = (RuleCall)cGroup.eContents().get(5);
		
		///* Subclassification */
		//Subclassification returns SysML::Subclassification :
		//    ( 'specialization' Identification? )?
		//    'subclassifier' subclassifier = [SysML::Classifier | QualifiedName]
		//    ( ':>' | 'specializes') superclassifier = [SysML::Classifier | QualifiedName]
		//    RelationshipBody
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//( 'specialization' Identification? )?
		//'subclassifier' subclassifier = [SysML::Classifier | QualifiedName]
		//( ':>' | 'specializes') superclassifier = [SysML::Classifier | QualifiedName]
		//RelationshipBody
		public Group getGroup() { return cGroup; }
		
		//( 'specialization' Identification? )?
		public Group getGroup_0() { return cGroup_0; }
		
		//'specialization'
		public Keyword getSpecializationKeyword_0_0() { return cSpecializationKeyword_0_0; }
		
		//Identification?
		public RuleCall getIdentificationParserRuleCall_0_1() { return cIdentificationParserRuleCall_0_1; }
		
		//'subclassifier'
		public Keyword getSubclassifierKeyword_1() { return cSubclassifierKeyword_1; }
		
		//subclassifier = [SysML::Classifier | QualifiedName]
		public Assignment getSubclassifierAssignment_2() { return cSubclassifierAssignment_2; }
		
		//[SysML::Classifier | QualifiedName]
		public CrossReference getSubclassifierClassifierCrossReference_2_0() { return cSubclassifierClassifierCrossReference_2_0; }
		
		//QualifiedName
		public RuleCall getSubclassifierClassifierQualifiedNameParserRuleCall_2_0_1() { return cSubclassifierClassifierQualifiedNameParserRuleCall_2_0_1; }
		
		//( ':>' | 'specializes')
		public Alternatives getAlternatives_3() { return cAlternatives_3; }
		
		//':>'
		public Keyword getColonGreaterThanSignKeyword_3_0() { return cColonGreaterThanSignKeyword_3_0; }
		
		//'specializes'
		public Keyword getSpecializesKeyword_3_1() { return cSpecializesKeyword_3_1; }
		
		//superclassifier = [SysML::Classifier | QualifiedName]
		public Assignment getSuperclassifierAssignment_4() { return cSuperclassifierAssignment_4; }
		
		//[SysML::Classifier | QualifiedName]
		public CrossReference getSuperclassifierClassifierCrossReference_4_0() { return cSuperclassifierClassifierCrossReference_4_0; }
		
		//QualifiedName
		public RuleCall getSuperclassifierClassifierQualifiedNameParserRuleCall_4_0_1() { return cSuperclassifierClassifierQualifiedNameParserRuleCall_4_0_1; }
		
		//RelationshipBody
		public RuleCall getRelationshipBodyParserRuleCall_5() { return cRelationshipBodyParserRuleCall_5; }
	}
	public class OwnedsubclassificationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.xtext.KerML.Ownedsubclassification");
		private final Assignment cSuperclassifierAssignment = (Assignment)rule.eContents().get(1);
		private final CrossReference cSuperclassifierClassifierCrossReference_0 = (CrossReference)cSuperclassifierAssignment.eContents().get(0);
		private final RuleCall cSuperclassifierClassifierQualifiedNameParserRuleCall_0_1 = (RuleCall)cSuperclassifierClassifierCrossReference_0.eContents().get(1);
		
		//Ownedsubclassification returns SysML::Subclassification :
		//    superclassifier = [SysML::Classifier | QualifiedName]
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//superclassifier = [SysML::Classifier | QualifiedName]
		public Assignment getSuperclassifierAssignment() { return cSuperclassifierAssignment; }
		
		//[SysML::Classifier | QualifiedName]
		public CrossReference getSuperclassifierClassifierCrossReference_0() { return cSuperclassifierClassifierCrossReference_0; }
		
		//QualifiedName
		public RuleCall getSuperclassifierClassifierQualifiedNameParserRuleCall_0_1() { return cSuperclassifierClassifierQualifiedNameParserRuleCall_0_1; }
	}
	public class ClassifierConjugationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.xtext.KerML.ClassifierConjugation");
		private final Assignment cOriginalTypeAssignment = (Assignment)rule.eContents().get(1);
		private final CrossReference cOriginalTypeClassifierCrossReference_0 = (CrossReference)cOriginalTypeAssignment.eContents().get(0);
		private final RuleCall cOriginalTypeClassifierQualifiedNameParserRuleCall_0_1 = (RuleCall)cOriginalTypeClassifierCrossReference_0.eContents().get(1);
		
		///* Classifier Conjugation */
		//ClassifierConjugation returns SysML::Conjugation :
		//    originalType = [SysML::Classifier | QualifiedName]
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//originalType = [SysML::Classifier | QualifiedName]
		public Assignment getOriginalTypeAssignment() { return cOriginalTypeAssignment; }
		
		//[SysML::Classifier | QualifiedName]
		public CrossReference getOriginalTypeClassifierCrossReference_0() { return cOriginalTypeClassifierCrossReference_0; }
		
		//QualifiedName
		public RuleCall getOriginalTypeClassifierQualifiedNameParserRuleCall_0_1() { return cOriginalTypeClassifierQualifiedNameParserRuleCall_0_1; }
	}
	public class FeaturePrefixElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.xtext.KerML.FeaturePrefix");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cDirectionAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cDirectionFeatureDirectionEnumRuleCall_0_0 = (RuleCall)cDirectionAssignment_0.eContents().get(0);
		private final Assignment cIsAbstractAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cIsAbstractAbstractKeyword_1_0 = (Keyword)cIsAbstractAssignment_1.eContents().get(0);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Assignment cIsCompositeAssignment_2_0 = (Assignment)cAlternatives_2.eContents().get(0);
		private final Keyword cIsCompositeCompositeKeyword_2_0_0 = (Keyword)cIsCompositeAssignment_2_0.eContents().get(0);
		private final Assignment cIsPortionAssignment_2_1 = (Assignment)cAlternatives_2.eContents().get(1);
		private final Keyword cIsPortionPortionKeyword_2_1_0 = (Keyword)cIsPortionAssignment_2_1.eContents().get(0);
		private final Assignment cIsReadOnlyAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final Keyword cIsReadOnlyReadonlyKeyword_3_0 = (Keyword)cIsReadOnlyAssignment_3.eContents().get(0);
		private final Assignment cIsDerivedAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final Keyword cIsDerivedDerivedKeyword_4_0 = (Keyword)cIsDerivedAssignment_4.eContents().get(0);
		private final Assignment cIsEndAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final Keyword cIsEndEndKeyword_5_0 = (Keyword)cIsEndAssignment_5.eContents().get(0);
		private final Assignment cOwnedRelationshipAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cOwnedRelationshipPrefixMetadataMemberParserRuleCall_6_0 = (RuleCall)cOwnedRelationshipAssignment_6.eContents().get(0);
		
		//fragment FeaturePrefix returns SysML::Feature :
		//    ( direction = FeatureDirection )?
		//    ( isAbstract ?= 'abstract' )?
		//    ( isComposite ?= 'composite' | isPortion ?= 'portion' )?
		//    ( isReadOnly ?= 'readonly' )?
		//    ( isDerived ?= 'derived' )?
		//    ( isEnd ?= 'end' )?
		//    ( ownedRelationship += PrefixMetadataMember )*
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//( direction = FeatureDirection )?
		//( isAbstract ?= 'abstract' )?
		//( isComposite ?= 'composite' | isPortion ?= 'portion' )?
		//( isReadOnly ?= 'readonly' )?
		//( isDerived ?= 'derived' )?
		//( isEnd ?= 'end' )?
		//( ownedRelationship += PrefixMetadataMember )*
		public Group getGroup() { return cGroup; }
		
		//( direction = FeatureDirection )?
		public Assignment getDirectionAssignment_0() { return cDirectionAssignment_0; }
		
		//FeatureDirection
		public RuleCall getDirectionFeatureDirectionEnumRuleCall_0_0() { return cDirectionFeatureDirectionEnumRuleCall_0_0; }
		
		//( isAbstract ?= 'abstract' )?
		public Assignment getIsAbstractAssignment_1() { return cIsAbstractAssignment_1; }
		
		//'abstract'
		public Keyword getIsAbstractAbstractKeyword_1_0() { return cIsAbstractAbstractKeyword_1_0; }
		
		//( isComposite ?= 'composite' | isPortion ?= 'portion' )?
		public Alternatives getAlternatives_2() { return cAlternatives_2; }
		
		//isComposite ?= 'composite'
		public Assignment getIsCompositeAssignment_2_0() { return cIsCompositeAssignment_2_0; }
		
		//'composite'
		public Keyword getIsCompositeCompositeKeyword_2_0_0() { return cIsCompositeCompositeKeyword_2_0_0; }
		
		//isPortion ?= 'portion'
		public Assignment getIsPortionAssignment_2_1() { return cIsPortionAssignment_2_1; }
		
		//'portion'
		public Keyword getIsPortionPortionKeyword_2_1_0() { return cIsPortionPortionKeyword_2_1_0; }
		
		//( isReadOnly ?= 'readonly' )?
		public Assignment getIsReadOnlyAssignment_3() { return cIsReadOnlyAssignment_3; }
		
		//'readonly'
		public Keyword getIsReadOnlyReadonlyKeyword_3_0() { return cIsReadOnlyReadonlyKeyword_3_0; }
		
		//( isDerived ?= 'derived' )?
		public Assignment getIsDerivedAssignment_4() { return cIsDerivedAssignment_4; }
		
		//'derived'
		public Keyword getIsDerivedDerivedKeyword_4_0() { return cIsDerivedDerivedKeyword_4_0; }
		
		//( isEnd ?= 'end' )?
		public Assignment getIsEndAssignment_5() { return cIsEndAssignment_5; }
		
		//'end'
		public Keyword getIsEndEndKeyword_5_0() { return cIsEndEndKeyword_5_0; }
		
		//( ownedRelationship += PrefixMetadataMember )*
		public Assignment getOwnedRelationshipAssignment_6() { return cOwnedRelationshipAssignment_6; }
		
		//PrefixMetadataMember
		public RuleCall getOwnedRelationshipPrefixMetadataMemberParserRuleCall_6_0() { return cOwnedRelationshipPrefixMetadataMemberParserRuleCall_6_0; }
	}
	public class FeatureElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.xtext.KerML.Feature");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cFeaturePrefixParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final Keyword cFeatureKeyword_1_0_0 = (Keyword)cGroup_1_0.eContents().get(0);
		private final RuleCall cFeatureDeclarationParserRuleCall_1_0_1 = (RuleCall)cGroup_1_0.eContents().get(1);
		private final Assignment cOwnedRelationshipAssignment_1_1 = (Assignment)cAlternatives_1.eContents().get(1);
		private final RuleCall cOwnedRelationshipPrefixMetadataMemberParserRuleCall_1_1_0 = (RuleCall)cOwnedRelationshipAssignment_1_1.eContents().get(0);
		private final Keyword cFeatureKeyword_1_2 = (Keyword)cAlternatives_1.eContents().get(2);
		private final RuleCall cValuePartParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final RuleCall cTypeBodyParserRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		
		//Feature returns SysML::Feature :
		//    FeaturePrefix
		//    ( 'feature'? FeatureDeclaration
		//    | ownedRelationship += PrefixMetadataMember
		//    | 'feature'
		//    )
		//    ValuePart? TypeBody
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//FeaturePrefix
		//( 'feature'? FeatureDeclaration
		//| ownedRelationship += PrefixMetadataMember
		//| 'feature'
		//)
		//ValuePart? TypeBody
		public Group getGroup() { return cGroup; }
		
		//FeaturePrefix
		public RuleCall getFeaturePrefixParserRuleCall_0() { return cFeaturePrefixParserRuleCall_0; }
		
		//( 'feature'? FeatureDeclaration
		//| ownedRelationship += PrefixMetadataMember
		//| 'feature'
		//)
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//'feature'? FeatureDeclaration
		public Group getGroup_1_0() { return cGroup_1_0; }
		
		//'feature'?
		public Keyword getFeatureKeyword_1_0_0() { return cFeatureKeyword_1_0_0; }
		
		//FeatureDeclaration
		public RuleCall getFeatureDeclarationParserRuleCall_1_0_1() { return cFeatureDeclarationParserRuleCall_1_0_1; }
		
		//ownedRelationship += PrefixMetadataMember
		public Assignment getOwnedRelationshipAssignment_1_1() { return cOwnedRelationshipAssignment_1_1; }
		
		//PrefixMetadataMember
		public RuleCall getOwnedRelationshipPrefixMetadataMemberParserRuleCall_1_1_0() { return cOwnedRelationshipPrefixMetadataMemberParserRuleCall_1_1_0; }
		
		//'feature'
		public Keyword getFeatureKeyword_1_2() { return cFeatureKeyword_1_2; }
		
		//ValuePart?
		public RuleCall getValuePartParserRuleCall_2() { return cValuePartParserRuleCall_2; }
		
		//TypeBody
		public RuleCall getTypeBodyParserRuleCall_3() { return cTypeBodyParserRuleCall_3; }
	}
	public class FeatureDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.xtext.KerML.FeatureDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cIsSufficientAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cIsSufficientAllKeyword_0_0 = (Keyword)cIsSufficientAssignment_0.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final RuleCall cIdentificationParserRuleCall_1_0_0 = (RuleCall)cGroup_1_0.eContents().get(0);
		private final Alternatives cAlternatives_1_0_1 = (Alternatives)cGroup_1_0.eContents().get(1);
		private final RuleCall cFeatureSpecializationPartParserRuleCall_1_0_1_0 = (RuleCall)cAlternatives_1_0_1.eContents().get(0);
		private final RuleCall cFeatureConjugationPartParserRuleCall_1_0_1_1 = (RuleCall)cAlternatives_1_0_1.eContents().get(1);
		private final RuleCall cFeatureSpecializationPartParserRuleCall_1_1 = (RuleCall)cAlternatives_1.eContents().get(1);
		private final RuleCall cFeatureConjugationPartParserRuleCall_1_2 = (RuleCall)cAlternatives_1.eContents().get(2);
		private final RuleCall cFeatureRelationshipPartParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		//fragment FeatureDeclaration returns SysML::Feature :
		//    ( isSufficient ?= 'all' )?
		//    ( Identification ( FeatureSpecializationPart | FeatureConjugationPart )?
		//    | FeatureSpecializationPart
		//    | FeatureConjugationPart
		//    )
		//    FeatureRelationshipPart*
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//( isSufficient ?= 'all' )?
		//( Identification ( FeatureSpecializationPart | FeatureConjugationPart )?
		//| FeatureSpecializationPart
		//| FeatureConjugationPart
		//)
		//FeatureRelationshipPart*
		public Group getGroup() { return cGroup; }
		
		//( isSufficient ?= 'all' )?
		public Assignment getIsSufficientAssignment_0() { return cIsSufficientAssignment_0; }
		
		//'all'
		public Keyword getIsSufficientAllKeyword_0_0() { return cIsSufficientAllKeyword_0_0; }
		
		//( Identification ( FeatureSpecializationPart | FeatureConjugationPart )?
		//| FeatureSpecializationPart
		//| FeatureConjugationPart
		//)
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//Identification ( FeatureSpecializationPart | FeatureConjugationPart )?
		public Group getGroup_1_0() { return cGroup_1_0; }
		
		//Identification
		public RuleCall getIdentificationParserRuleCall_1_0_0() { return cIdentificationParserRuleCall_1_0_0; }
		
		//( FeatureSpecializationPart | FeatureConjugationPart )?
		public Alternatives getAlternatives_1_0_1() { return cAlternatives_1_0_1; }
		
		//FeatureSpecializationPart
		public RuleCall getFeatureSpecializationPartParserRuleCall_1_0_1_0() { return cFeatureSpecializationPartParserRuleCall_1_0_1_0; }
		
		//FeatureConjugationPart
		public RuleCall getFeatureConjugationPartParserRuleCall_1_0_1_1() { return cFeatureConjugationPartParserRuleCall_1_0_1_1; }
		
		//FeatureSpecializationPart
		public RuleCall getFeatureSpecializationPartParserRuleCall_1_1() { return cFeatureSpecializationPartParserRuleCall_1_1; }
		
		//FeatureConjugationPart
		public RuleCall getFeatureConjugationPartParserRuleCall_1_2() { return cFeatureConjugationPartParserRuleCall_1_2; }
		
		//FeatureRelationshipPart*
		public RuleCall getFeatureRelationshipPartParserRuleCall_2() { return cFeatureRelationshipPartParserRuleCall_2; }
	}
	public class FeatureRelationshipPartElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.xtext.KerML.FeatureRelationshipPart");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cTypeRelationshipPartParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cChainingPartParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cInvertingPartParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cTypeFeaturingPartParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//fragment FeatureRelationshipPart returns SysML::Feature :
		//    TypeRelationshipPart | ChainingPart | InvertingPart | TypeFeaturingPart
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//TypeRelationshipPart | ChainingPart | InvertingPart | TypeFeaturingPart
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//TypeRelationshipPart
		public RuleCall getTypeRelationshipPartParserRuleCall_0() { return cTypeRelationshipPartParserRuleCall_0; }
		
		//ChainingPart
		public RuleCall getChainingPartParserRuleCall_1() { return cChainingPartParserRuleCall_1; }
		
		//InvertingPart
		public RuleCall getInvertingPartParserRuleCall_2() { return cInvertingPartParserRuleCall_2; }
		
		//TypeFeaturingPart
		public RuleCall getTypeFeaturingPartParserRuleCall_3() { return cTypeFeaturingPartParserRuleCall_3; }
	}
	public class ChainingPartElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.xtext.KerML.ChainingPart");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cChainsKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Assignment cOwnedRelationshipAssignment_1_0 = (Assignment)cAlternatives_1.eContents().get(0);
		private final RuleCall cOwnedRelationshipOwnedFeatureChainingParserRuleCall_1_0_0 = (RuleCall)cOwnedRelationshipAssignment_1_0.eContents().get(0);
		private final RuleCall cFeatureChainParserRuleCall_1_1 = (RuleCall)cAlternatives_1.eContents().get(1);
		
		//fragment ChainingPart returns SysML::Feature :
		//    'chains' ( ownedRelationship += OwnedFeatureChaining | FeatureChain )
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'chains' ( ownedRelationship += OwnedFeatureChaining | FeatureChain )
		public Group getGroup() { return cGroup; }
		
		//'chains'
		public Keyword getChainsKeyword_0() { return cChainsKeyword_0; }
		
		//( ownedRelationship += OwnedFeatureChaining | FeatureChain )
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//ownedRelationship += OwnedFeatureChaining
		public Assignment getOwnedRelationshipAssignment_1_0() { return cOwnedRelationshipAssignment_1_0; }
		
		//OwnedFeatureChaining
		public RuleCall getOwnedRelationshipOwnedFeatureChainingParserRuleCall_1_0_0() { return cOwnedRelationshipOwnedFeatureChainingParserRuleCall_1_0_0; }
		
		//FeatureChain
		public RuleCall getFeatureChainParserRuleCall_1_1() { return cFeatureChainParserRuleCall_1_1; }
	}
	public class InvertingPartElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.xtext.KerML.InvertingPart");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cInverseKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cOfKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cOwnedRelationshipAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cOwnedRelationshipOwnedFeatureInvertingParserRuleCall_2_0 = (RuleCall)cOwnedRelationshipAssignment_2.eContents().get(0);
		
		//fragment InvertingPart returns SysML::Feature :
		//    'inverse' 'of' ownedRelationship += OwnedFeatureInverting
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'inverse' 'of' ownedRelationship += OwnedFeatureInverting
		public Group getGroup() { return cGroup; }
		
		//'inverse'
		public Keyword getInverseKeyword_0() { return cInverseKeyword_0; }
		
		//'of'
		public Keyword getOfKeyword_1() { return cOfKeyword_1; }
		
		//ownedRelationship += OwnedFeatureInverting
		public Assignment getOwnedRelationshipAssignment_2() { return cOwnedRelationshipAssignment_2; }
		
		//OwnedFeatureInverting
		public RuleCall getOwnedRelationshipOwnedFeatureInvertingParserRuleCall_2_0() { return cOwnedRelationshipOwnedFeatureInvertingParserRuleCall_2_0; }
	}
	public class TypeFeaturingPartElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.xtext.KerML.TypeFeaturingPart");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFeaturedKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cByKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cOwnedRelationshipAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cOwnedRelationshipOwnedTypeFeaturingParserRuleCall_2_0 = (RuleCall)cOwnedRelationshipAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cCommaKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cOwnedRelationshipAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cOwnedRelationshipOwnedTypeFeaturingParserRuleCall_3_1_0 = (RuleCall)cOwnedRelationshipAssignment_3_1.eContents().get(0);
		
		//fragment TypeFeaturingPart returns SysML::Feature :
		//    'featured' 'by' ownedRelationship += OwnedTypeFeaturing
		//    ( ',' ownedRelationship += OwnedTypeFeaturing )*
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'featured' 'by' ownedRelationship += OwnedTypeFeaturing
		//( ',' ownedRelationship += OwnedTypeFeaturing )*
		public Group getGroup() { return cGroup; }
		
		//'featured'
		public Keyword getFeaturedKeyword_0() { return cFeaturedKeyword_0; }
		
		//'by'
		public Keyword getByKeyword_1() { return cByKeyword_1; }
		
		//ownedRelationship += OwnedTypeFeaturing
		public Assignment getOwnedRelationshipAssignment_2() { return cOwnedRelationshipAssignment_2; }
		
		//OwnedTypeFeaturing
		public RuleCall getOwnedRelationshipOwnedTypeFeaturingParserRuleCall_2_0() { return cOwnedRelationshipOwnedTypeFeaturingParserRuleCall_2_0; }
		
		//( ',' ownedRelationship += OwnedTypeFeaturing )*
		public Group getGroup_3() { return cGroup_3; }
		
		//','
		public Keyword getCommaKeyword_3_0() { return cCommaKeyword_3_0; }
		
		//ownedRelationship += OwnedTypeFeaturing
		public Assignment getOwnedRelationshipAssignment_3_1() { return cOwnedRelationshipAssignment_3_1; }
		
		//OwnedTypeFeaturing
		public RuleCall getOwnedRelationshipOwnedTypeFeaturingParserRuleCall_3_1_0() { return cOwnedRelationshipOwnedTypeFeaturingParserRuleCall_3_1_0; }
	}
	public class FeatureSpecializationPartElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.xtext.KerML.FeatureSpecializationPart");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final RuleCall cFeatureSpecializationParserRuleCall_0_0 = (RuleCall)cGroup_0.eContents().get(0);
		private final RuleCall cMultiplicityPartParserRuleCall_0_1 = (RuleCall)cGroup_0.eContents().get(1);
		private final RuleCall cFeatureSpecializationParserRuleCall_0_2 = (RuleCall)cGroup_0.eContents().get(2);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final RuleCall cMultiplicityPartParserRuleCall_1_0 = (RuleCall)cGroup_1.eContents().get(0);
		private final RuleCall cFeatureSpecializationParserRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//fragment FeatureSpecializationPart returns SysML::Feature :
		//      ( -> FeatureSpecialization )+ MultiplicityPart? FeatureSpecialization*
		//    | MultiplicityPart FeatureSpecialization*
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//  ( -> FeatureSpecialization )+ MultiplicityPart? FeatureSpecialization*
		//| MultiplicityPart FeatureSpecialization*
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//( -> FeatureSpecialization )+ MultiplicityPart? FeatureSpecialization*
		public Group getGroup_0() { return cGroup_0; }
		
		//( -> FeatureSpecialization )+
		public RuleCall getFeatureSpecializationParserRuleCall_0_0() { return cFeatureSpecializationParserRuleCall_0_0; }
		
		//MultiplicityPart?
		public RuleCall getMultiplicityPartParserRuleCall_0_1() { return cMultiplicityPartParserRuleCall_0_1; }
		
		//FeatureSpecialization*
		public RuleCall getFeatureSpecializationParserRuleCall_0_2() { return cFeatureSpecializationParserRuleCall_0_2; }
		
		//MultiplicityPart FeatureSpecialization*
		public Group getGroup_1() { return cGroup_1; }
		
		//MultiplicityPart
		public RuleCall getMultiplicityPartParserRuleCall_1_0() { return cMultiplicityPartParserRuleCall_1_0; }
		
		//FeatureSpecialization*
		public RuleCall getFeatureSpecializationParserRuleCall_1_1() { return cFeatureSpecializationParserRuleCall_1_1; }
	}
	public class MultiplicityPartElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.xtext.KerML.MultiplicityPart");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cOwnedRelationshipAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cOwnedRelationshipOwnedMultiplicityParserRuleCall_0_0 = (RuleCall)cOwnedRelationshipAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Assignment cOwnedRelationshipAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cOwnedRelationshipOwnedMultiplicityParserRuleCall_1_0_0 = (RuleCall)cOwnedRelationshipAssignment_1_0.eContents().get(0);
		private final Alternatives cAlternatives_1_1 = (Alternatives)cGroup_1.eContents().get(1);
		private final Group cGroup_1_1_0 = (Group)cAlternatives_1_1.eContents().get(0);
		private final Assignment cIsOrderedAssignment_1_1_0_0 = (Assignment)cGroup_1_1_0.eContents().get(0);
		private final Keyword cIsOrderedOrderedKeyword_1_1_0_0_0 = (Keyword)cIsOrderedAssignment_1_1_0_0.eContents().get(0);
		private final Assignment cIsNonuniqueAssignment_1_1_0_1 = (Assignment)cGroup_1_1_0.eContents().get(1);
		private final Keyword cIsNonuniqueNonuniqueKeyword_1_1_0_1_0 = (Keyword)cIsNonuniqueAssignment_1_1_0_1.eContents().get(0);
		private final Group cGroup_1_1_1 = (Group)cAlternatives_1_1.eContents().get(1);
		private final Assignment cIsNonuniqueAssignment_1_1_1_0 = (Assignment)cGroup_1_1_1.eContents().get(0);
		private final Keyword cIsNonuniqueNonuniqueKeyword_1_1_1_0_0 = (Keyword)cIsNonuniqueAssignment_1_1_1_0.eContents().get(0);
		private final Assignment cIsOrderedAssignment_1_1_1_1 = (Assignment)cGroup_1_1_1.eContents().get(1);
		private final Keyword cIsOrderedOrderedKeyword_1_1_1_1_0 = (Keyword)cIsOrderedAssignment_1_1_1_1.eContents().get(0);
		
		//fragment MultiplicityPart returns SysML::Feature :
		//      ownedRelationship += OwnedMultiplicity
		//    | ( ownedRelationship += OwnedMultiplicity )?
		//      ( isOrdered ?= 'ordered' isNonunique ?= 'nonunique'?
		//      | isNonunique ?= 'nonunique' isOrdered ?= 'ordered'?
		//      )
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//  ownedRelationship += OwnedMultiplicity
		//| ( ownedRelationship += OwnedMultiplicity )?
		//  ( isOrdered ?= 'ordered' isNonunique ?= 'nonunique'?
		//  | isNonunique ?= 'nonunique' isOrdered ?= 'ordered'?
		//  )
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//ownedRelationship += OwnedMultiplicity
		public Assignment getOwnedRelationshipAssignment_0() { return cOwnedRelationshipAssignment_0; }
		
		//OwnedMultiplicity
		public RuleCall getOwnedRelationshipOwnedMultiplicityParserRuleCall_0_0() { return cOwnedRelationshipOwnedMultiplicityParserRuleCall_0_0; }
		
		//( ownedRelationship += OwnedMultiplicity )?
		//     ( isOrdered ?= 'ordered' isNonunique ?= 'nonunique'?
		//     | isNonunique ?= 'nonunique' isOrdered ?= 'ordered'?
		//     )
		public Group getGroup_1() { return cGroup_1; }
		
		//( ownedRelationship += OwnedMultiplicity )?
		public Assignment getOwnedRelationshipAssignment_1_0() { return cOwnedRelationshipAssignment_1_0; }
		
		//OwnedMultiplicity
		public RuleCall getOwnedRelationshipOwnedMultiplicityParserRuleCall_1_0_0() { return cOwnedRelationshipOwnedMultiplicityParserRuleCall_1_0_0; }
		
		//( isOrdered ?= 'ordered' isNonunique ?= 'nonunique'?
		//| isNonunique ?= 'nonunique' isOrdered ?= 'ordered'?
		//)
		public Alternatives getAlternatives_1_1() { return cAlternatives_1_1; }
		
		//isOrdered ?= 'ordered' isNonunique ?= 'nonunique'?
		public Group getGroup_1_1_0() { return cGroup_1_1_0; }
		
		//isOrdered ?= 'ordered'
		public Assignment getIsOrderedAssignment_1_1_0_0() { return cIsOrderedAssignment_1_1_0_0; }
		
		//'ordered'
		public Keyword getIsOrderedOrderedKeyword_1_1_0_0_0() { return cIsOrderedOrderedKeyword_1_1_0_0_0; }
		
		//isNonunique ?= 'nonunique'?
		public Assignment getIsNonuniqueAssignment_1_1_0_1() { return cIsNonuniqueAssignment_1_1_0_1; }
		
		//'nonunique'
		public Keyword getIsNonuniqueNonuniqueKeyword_1_1_0_1_0() { return cIsNonuniqueNonuniqueKeyword_1_1_0_1_0; }
		
		//isNonunique ?= 'nonunique' isOrdered ?= 'ordered'?
		public Group getGroup_1_1_1() { return cGroup_1_1_1; }
		
		//isNonunique ?= 'nonunique'
		public Assignment getIsNonuniqueAssignment_1_1_1_0() { return cIsNonuniqueAssignment_1_1_1_0; }
		
		//'nonunique'
		public Keyword getIsNonuniqueNonuniqueKeyword_1_1_1_0_0() { return cIsNonuniqueNonuniqueKeyword_1_1_1_0_0; }
		
		//isOrdered ?= 'ordered'?
		public Assignment getIsOrderedAssignment_1_1_1_1() { return cIsOrderedAssignment_1_1_1_1; }
		
		//'ordered'
		public Keyword getIsOrderedOrderedKeyword_1_1_1_1_0() { return cIsOrderedOrderedKeyword_1_1_1_1_0; }
	}
	public class FeatureSpecializationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.xtext.KerML.FeatureSpecialization");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cTypingsParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cSubsettingsParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cReferencesParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cRedefinitionsParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//fragment FeatureSpecialization returns SysML::Feature :
		//    Typings | Subsettings | References | Redefinitions
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//Typings | Subsettings | References | Redefinitions
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Typings
		public RuleCall getTypingsParserRuleCall_0() { return cTypingsParserRuleCall_0; }
		
		//Subsettings
		public RuleCall getSubsettingsParserRuleCall_1() { return cSubsettingsParserRuleCall_1; }
		
		//References
		public RuleCall getReferencesParserRuleCall_2() { return cReferencesParserRuleCall_2; }
		
		//Redefinitions
		public RuleCall getRedefinitionsParserRuleCall_3() { return cRedefinitionsParserRuleCall_3; }
	}
	public class TypingsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.xtext.KerML.Typings");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cTypedByParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cOwnedRelationshipAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cOwnedRelationshipOwnedFeatureTypingParserRuleCall_1_1_0 = (RuleCall)cOwnedRelationshipAssignment_1_1.eContents().get(0);
		
		//fragment Typings returns SysML::Feature :
		//    TypedBy ( ',' ownedRelationship += OwnedFeatureTyping )*
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//TypedBy ( ',' ownedRelationship += OwnedFeatureTyping )*
		public Group getGroup() { return cGroup; }
		
		//TypedBy
		public RuleCall getTypedByParserRuleCall_0() { return cTypedByParserRuleCall_0; }
		
		//( ',' ownedRelationship += OwnedFeatureTyping )*
		public Group getGroup_1() { return cGroup_1; }
		
		//','
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }
		
		//ownedRelationship += OwnedFeatureTyping
		public Assignment getOwnedRelationshipAssignment_1_1() { return cOwnedRelationshipAssignment_1_1; }
		
		//OwnedFeatureTyping
		public RuleCall getOwnedRelationshipOwnedFeatureTypingParserRuleCall_1_1_0() { return cOwnedRelationshipOwnedFeatureTypingParserRuleCall_1_1_0; }
	}
	public class TypedByElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.xtext.KerML.TypedBy");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Keyword cColonKeyword_0_0 = (Keyword)cAlternatives_0.eContents().get(0);
		private final Group cGroup_0_1 = (Group)cAlternatives_0.eContents().get(1);
		private final Keyword cTypedKeyword_0_1_0 = (Keyword)cGroup_0_1.eContents().get(0);
		private final Keyword cByKeyword_0_1_1 = (Keyword)cGroup_0_1.eContents().get(1);
		private final Assignment cOwnedRelationshipAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cOwnedRelationshipOwnedFeatureTypingParserRuleCall_1_0 = (RuleCall)cOwnedRelationshipAssignment_1.eContents().get(0);
		
		//fragment TypedBy returns SysML::Feature :
		//    ( ':' | 'typed' 'by' ) ownedRelationship += OwnedFeatureTyping
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//( ':' | 'typed' 'by' ) ownedRelationship += OwnedFeatureTyping
		public Group getGroup() { return cGroup; }
		
		//( ':' | 'typed' 'by' )
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//':'
		public Keyword getColonKeyword_0_0() { return cColonKeyword_0_0; }
		
		//'typed' 'by'
		public Group getGroup_0_1() { return cGroup_0_1; }
		
		//'typed'
		public Keyword getTypedKeyword_0_1_0() { return cTypedKeyword_0_1_0; }
		
		//'by'
		public Keyword getByKeyword_0_1_1() { return cByKeyword_0_1_1; }
		
		//ownedRelationship += OwnedFeatureTyping
		public Assignment getOwnedRelationshipAssignment_1() { return cOwnedRelationshipAssignment_1; }
		
		//OwnedFeatureTyping
		public RuleCall getOwnedRelationshipOwnedFeatureTypingParserRuleCall_1_0() { return cOwnedRelationshipOwnedFeatureTypingParserRuleCall_1_0; }
	}
	public class SubsettingsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.xtext.KerML.Subsettings");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cSubsetsParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cOwnedRelationshipAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cOwnedRelationshipOwnedSubsettingParserRuleCall_1_1_0 = (RuleCall)cOwnedRelationshipAssignment_1_1.eContents().get(0);
		
		//fragment Subsettings returns SysML::Feature :
		//    Subsets ( ',' ownedRelationship += OwnedSubsetting )*
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//Subsets ( ',' ownedRelationship += OwnedSubsetting )*
		public Group getGroup() { return cGroup; }
		
		//Subsets
		public RuleCall getSubsetsParserRuleCall_0() { return cSubsetsParserRuleCall_0; }
		
		//( ',' ownedRelationship += OwnedSubsetting )*
		public Group getGroup_1() { return cGroup_1; }
		
		//','
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }
		
		//ownedRelationship += OwnedSubsetting
		public Assignment getOwnedRelationshipAssignment_1_1() { return cOwnedRelationshipAssignment_1_1; }
		
		//OwnedSubsetting
		public RuleCall getOwnedRelationshipOwnedSubsettingParserRuleCall_1_1_0() { return cOwnedRelationshipOwnedSubsettingParserRuleCall_1_1_0; }
	}
	public class SubsetsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.xtext.KerML.Subsets");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Keyword cColonGreaterThanSignKeyword_0_0 = (Keyword)cAlternatives_0.eContents().get(0);
		private final Keyword cSubsetsKeyword_0_1 = (Keyword)cAlternatives_0.eContents().get(1);
		private final Assignment cOwnedRelationshipAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cOwnedRelationshipOwnedSubsettingParserRuleCall_1_0 = (RuleCall)cOwnedRelationshipAssignment_1.eContents().get(0);
		
		//fragment Subsets returns SysML::Feature :
		//    ( ':>' | 'subsets' ) ownedRelationship += OwnedSubsetting
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//( ':>' | 'subsets' ) ownedRelationship += OwnedSubsetting
		public Group getGroup() { return cGroup; }
		
		//( ':>' | 'subsets' )
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//':>'
		public Keyword getColonGreaterThanSignKeyword_0_0() { return cColonGreaterThanSignKeyword_0_0; }
		
		//'subsets'
		public Keyword getSubsetsKeyword_0_1() { return cSubsetsKeyword_0_1; }
		
		//ownedRelationship += OwnedSubsetting
		public Assignment getOwnedRelationshipAssignment_1() { return cOwnedRelationshipAssignment_1; }
		
		//OwnedSubsetting
		public RuleCall getOwnedRelationshipOwnedSubsettingParserRuleCall_1_0() { return cOwnedRelationshipOwnedSubsettingParserRuleCall_1_0; }
	}
	public class ReferencesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.xtext.KerML.References");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cReferencesKeywordParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Assignment cOwnedRelationshipAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cOwnedRelationshipOwnedReferenceSubsettingParserRuleCall_1_0 = (RuleCall)cOwnedRelationshipAssignment_1.eContents().get(0);
		
		//fragment References returns SysML::Feature :
		//    ReferencesKeyword ownedRelationship += OwnedReferenceSubsetting
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//ReferencesKeyword ownedRelationship += OwnedReferenceSubsetting
		public Group getGroup() { return cGroup; }
		
		//ReferencesKeyword
		public RuleCall getReferencesKeywordParserRuleCall_0() { return cReferencesKeywordParserRuleCall_0; }
		
		//ownedRelationship += OwnedReferenceSubsetting
		public Assignment getOwnedRelationshipAssignment_1() { return cOwnedRelationshipAssignment_1; }
		
		//OwnedReferenceSubsetting
		public RuleCall getOwnedRelationshipOwnedReferenceSubsettingParserRuleCall_1_0() { return cOwnedRelationshipOwnedReferenceSubsettingParserRuleCall_1_0; }
	}
	public class ReferencesKeywordElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.xtext.KerML.ReferencesKeyword");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cColonColonGreaterThanSignKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cReferencesKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//ReferencesKeyword :
		//    '::>' | 'references'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'::>' | 'references'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'::>'
		public Keyword getColonColonGreaterThanSignKeyword_0() { return cColonColonGreaterThanSignKeyword_0; }
		
		//'references'
		public Keyword getReferencesKeyword_1() { return cReferencesKeyword_1; }
	}
	public class RedefinitionsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.xtext.KerML.Redefinitions");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cRedefinesParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cOwnedRelationshipAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cOwnedRelationshipOwnedRedefinitionParserRuleCall_1_1_0 = (RuleCall)cOwnedRelationshipAssignment_1_1.eContents().get(0);
		
		//fragment Redefinitions returns SysML::Feature :
		//    Redefines ( ',' ownedRelationship += OwnedRedefinition )*
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//Redefines ( ',' ownedRelationship += OwnedRedefinition )*
		public Group getGroup() { return cGroup; }
		
		//Redefines
		public RuleCall getRedefinesParserRuleCall_0() { return cRedefinesParserRuleCall_0; }
		
		//( ',' ownedRelationship += OwnedRedefinition )*
		public Group getGroup_1() { return cGroup_1; }
		
		//','
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }
		
		//ownedRelationship += OwnedRedefinition
		public Assignment getOwnedRelationshipAssignment_1_1() { return cOwnedRelationshipAssignment_1_1; }
		
		//OwnedRedefinition
		public RuleCall getOwnedRelationshipOwnedRedefinitionParserRuleCall_1_1_0() { return cOwnedRelationshipOwnedRedefinitionParserRuleCall_1_1_0; }
	}
	public class RedefinesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.xtext.KerML.Redefines");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Keyword cColonGreaterThanSignGreaterThanSignKeyword_0_0 = (Keyword)cAlternatives_0.eContents().get(0);
		private final Keyword cRedefinesKeyword_0_1 = (Keyword)cAlternatives_0.eContents().get(1);
		private final Assignment cOwnedRelationshipAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cOwnedRelationshipOwnedRedefinitionParserRuleCall_1_0 = (RuleCall)cOwnedRelationshipAssignment_1.eContents().get(0);
		
		//fragment Redefines returns SysML::Feature :
		//    ( ':>>' | 'redefines' ) ownedRelationship += OwnedRedefinition
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//( ':>>' | 'redefines' ) ownedRelationship += OwnedRedefinition
		public Group getGroup() { return cGroup; }
		
		//( ':>>' | 'redefines' )
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//':>>'
		public Keyword getColonGreaterThanSignGreaterThanSignKeyword_0_0() { return cColonGreaterThanSignGreaterThanSignKeyword_0_0; }
		
		//'redefines'
		public Keyword getRedefinesKeyword_0_1() { return cRedefinesKeyword_0_1; }
		
		//ownedRelationship += OwnedRedefinition
		public Assignment getOwnedRelationshipAssignment_1() { return cOwnedRelationshipAssignment_1; }
		
		//OwnedRedefinition
		public RuleCall getOwnedRelationshipOwnedRedefinitionParserRuleCall_1_0() { return cOwnedRelationshipOwnedRedefinitionParserRuleCall_1_0; }
	}
	public class FeatureInvertingElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.xtext.KerML.FeatureInverting");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final Keyword cInvertingKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final RuleCall cIdentificationParserRuleCall_0_1 = (RuleCall)cGroup_0.eContents().get(1);
		private final Keyword cInverseKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Assignment cFeatureInvertedAssignment_2_0 = (Assignment)cAlternatives_2.eContents().get(0);
		private final CrossReference cFeatureInvertedFeatureCrossReference_2_0_0 = (CrossReference)cFeatureInvertedAssignment_2_0.eContents().get(0);
		private final RuleCall cFeatureInvertedFeatureQualifiedNameParserRuleCall_2_0_0_1 = (RuleCall)cFeatureInvertedFeatureCrossReference_2_0_0.eContents().get(1);
		private final Assignment cOwnedRelatedElementAssignment_2_1 = (Assignment)cAlternatives_2.eContents().get(1);
		private final RuleCall cOwnedRelatedElementOwnedFeatureChainParserRuleCall_2_1_0 = (RuleCall)cOwnedRelatedElementAssignment_2_1.eContents().get(0);
		private final Keyword cOfKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Alternatives cAlternatives_4 = (Alternatives)cGroup.eContents().get(4);
		private final Assignment cInvertingFeatureAssignment_4_0 = (Assignment)cAlternatives_4.eContents().get(0);
		private final CrossReference cInvertingFeatureFeatureCrossReference_4_0_0 = (CrossReference)cInvertingFeatureAssignment_4_0.eContents().get(0);
		private final RuleCall cInvertingFeatureFeatureQualifiedNameParserRuleCall_4_0_0_1 = (RuleCall)cInvertingFeatureFeatureCrossReference_4_0_0.eContents().get(1);
		private final Assignment cOwnedRelatedElementAssignment_4_1 = (Assignment)cAlternatives_4.eContents().get(1);
		private final RuleCall cOwnedRelatedElementOwnedFeatureChainParserRuleCall_4_1_0 = (RuleCall)cOwnedRelatedElementAssignment_4_1.eContents().get(0);
		private final RuleCall cRelationshipBodyParserRuleCall_5 = (RuleCall)cGroup.eContents().get(5);
		
		///* Feature Inverting */
		//FeatureInverting returns SysML::FeatureInverting :
		//    ( 'inverting' Identification? )?
		//    'inverse'
		//    ( featureInverted = [SysML::Feature| QualifiedName]
		//    | ownedRelatedElement += OwnedFeatureChain )
		//    'of'
		//    ( invertingFeature = [SysML::Feature | QualifiedName]
		//    | ownedRelatedElement += OwnedFeatureChain )
		//    RelationshipBody
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//( 'inverting' Identification? )?
		//'inverse'
		//( featureInverted = [SysML::Feature| QualifiedName]
		//| ownedRelatedElement += OwnedFeatureChain )
		//'of'
		//( invertingFeature = [SysML::Feature | QualifiedName]
		//| ownedRelatedElement += OwnedFeatureChain )
		//RelationshipBody
		public Group getGroup() { return cGroup; }
		
		//( 'inverting' Identification? )?
		public Group getGroup_0() { return cGroup_0; }
		
		//'inverting'
		public Keyword getInvertingKeyword_0_0() { return cInvertingKeyword_0_0; }
		
		//Identification?
		public RuleCall getIdentificationParserRuleCall_0_1() { return cIdentificationParserRuleCall_0_1; }
		
		//'inverse'
		public Keyword getInverseKeyword_1() { return cInverseKeyword_1; }
		
		//( featureInverted = [SysML::Feature| QualifiedName]
		//| ownedRelatedElement += OwnedFeatureChain )
		public Alternatives getAlternatives_2() { return cAlternatives_2; }
		
		//featureInverted = [SysML::Feature| QualifiedName]
		public Assignment getFeatureInvertedAssignment_2_0() { return cFeatureInvertedAssignment_2_0; }
		
		//[SysML::Feature| QualifiedName]
		public CrossReference getFeatureInvertedFeatureCrossReference_2_0_0() { return cFeatureInvertedFeatureCrossReference_2_0_0; }
		
		//QualifiedName
		public RuleCall getFeatureInvertedFeatureQualifiedNameParserRuleCall_2_0_0_1() { return cFeatureInvertedFeatureQualifiedNameParserRuleCall_2_0_0_1; }
		
		//ownedRelatedElement += OwnedFeatureChain
		public Assignment getOwnedRelatedElementAssignment_2_1() { return cOwnedRelatedElementAssignment_2_1; }
		
		//OwnedFeatureChain
		public RuleCall getOwnedRelatedElementOwnedFeatureChainParserRuleCall_2_1_0() { return cOwnedRelatedElementOwnedFeatureChainParserRuleCall_2_1_0; }
		
		//'of'
		public Keyword getOfKeyword_3() { return cOfKeyword_3; }
		
		//( invertingFeature = [SysML::Feature | QualifiedName]
		//| ownedRelatedElement += OwnedFeatureChain )
		public Alternatives getAlternatives_4() { return cAlternatives_4; }
		
		//invertingFeature = [SysML::Feature | QualifiedName]
		public Assignment getInvertingFeatureAssignment_4_0() { return cInvertingFeatureAssignment_4_0; }
		
		//[SysML::Feature | QualifiedName]
		public CrossReference getInvertingFeatureFeatureCrossReference_4_0_0() { return cInvertingFeatureFeatureCrossReference_4_0_0; }
		
		//QualifiedName
		public RuleCall getInvertingFeatureFeatureQualifiedNameParserRuleCall_4_0_0_1() { return cInvertingFeatureFeatureQualifiedNameParserRuleCall_4_0_0_1; }
		
		//ownedRelatedElement += OwnedFeatureChain
		public Assignment getOwnedRelatedElementAssignment_4_1() { return cOwnedRelatedElementAssignment_4_1; }
		
		//OwnedFeatureChain
		public RuleCall getOwnedRelatedElementOwnedFeatureChainParserRuleCall_4_1_0() { return cOwnedRelatedElementOwnedFeatureChainParserRuleCall_4_1_0; }
		
		//RelationshipBody
		public RuleCall getRelationshipBodyParserRuleCall_5() { return cRelationshipBodyParserRuleCall_5; }
	}
	public class OwnedFeatureInvertingElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.xtext.KerML.OwnedFeatureInverting");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cInvertingFeatureAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final CrossReference cInvertingFeatureFeatureCrossReference_0_0 = (CrossReference)cInvertingFeatureAssignment_0.eContents().get(0);
		private final RuleCall cInvertingFeatureFeatureQualifiedNameParserRuleCall_0_0_1 = (RuleCall)cInvertingFeatureFeatureCrossReference_0_0.eContents().get(1);
		private final Assignment cOwnedRelatedElementAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cOwnedRelatedElementOwnedFeatureChainParserRuleCall_1_0 = (RuleCall)cOwnedRelatedElementAssignment_1.eContents().get(0);
		
		//OwnedFeatureInverting returns SysML::FeatureInverting :
		//      invertingFeature = [SysML::Feature | QualifiedName]
		//    | ownedRelatedElement += OwnedFeatureChain
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//  invertingFeature = [SysML::Feature | QualifiedName]
		//| ownedRelatedElement += OwnedFeatureChain
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//invertingFeature = [SysML::Feature | QualifiedName]
		public Assignment getInvertingFeatureAssignment_0() { return cInvertingFeatureAssignment_0; }
		
		//[SysML::Feature | QualifiedName]
		public CrossReference getInvertingFeatureFeatureCrossReference_0_0() { return cInvertingFeatureFeatureCrossReference_0_0; }
		
		//QualifiedName
		public RuleCall getInvertingFeatureFeatureQualifiedNameParserRuleCall_0_0_1() { return cInvertingFeatureFeatureQualifiedNameParserRuleCall_0_0_1; }
		
		//ownedRelatedElement += OwnedFeatureChain
		public Assignment getOwnedRelatedElementAssignment_1() { return cOwnedRelatedElementAssignment_1; }
		
		//OwnedFeatureChain
		public RuleCall getOwnedRelatedElementOwnedFeatureChainParserRuleCall_1_0() { return cOwnedRelatedElementOwnedFeatureChainParserRuleCall_1_0; }
	}
	public class TypeFeaturingElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.xtext.KerML.TypeFeaturing");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFeaturingKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final RuleCall cIdentificationParserRuleCall_1_0 = (RuleCall)cGroup_1.eContents().get(0);
		private final Keyword cOfKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cFeatureOfTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cFeatureOfTypeFeatureCrossReference_2_0 = (CrossReference)cFeatureOfTypeAssignment_2.eContents().get(0);
		private final RuleCall cFeatureOfTypeFeatureQualifiedNameParserRuleCall_2_0_1 = (RuleCall)cFeatureOfTypeFeatureCrossReference_2_0.eContents().get(1);
		private final Keyword cByKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cFeaturingTypeAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final CrossReference cFeaturingTypeFeatureCrossReference_4_0 = (CrossReference)cFeaturingTypeAssignment_4.eContents().get(0);
		private final RuleCall cFeaturingTypeFeatureQualifiedNameParserRuleCall_4_0_1 = (RuleCall)cFeaturingTypeFeatureCrossReference_4_0.eContents().get(1);
		private final RuleCall cRelationshipBodyParserRuleCall_5 = (RuleCall)cGroup.eContents().get(5);
		
		///* Type Featuring */
		//TypeFeaturing returns SysML::TypeFeaturing :
		//    'featuring' ( Identification? 'of')?
		//    featureOfType = [SysML::Feature | QualifiedName]
		//    'by' featuringType = [SysML::Feature | QualifiedName]
		//    RelationshipBody
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'featuring' ( Identification? 'of')?
		//featureOfType = [SysML::Feature | QualifiedName]
		//'by' featuringType = [SysML::Feature | QualifiedName]
		//RelationshipBody
		public Group getGroup() { return cGroup; }
		
		//'featuring'
		public Keyword getFeaturingKeyword_0() { return cFeaturingKeyword_0; }
		
		//( Identification? 'of')?
		public Group getGroup_1() { return cGroup_1; }
		
		//Identification?
		public RuleCall getIdentificationParserRuleCall_1_0() { return cIdentificationParserRuleCall_1_0; }
		
		//'of'
		public Keyword getOfKeyword_1_1() { return cOfKeyword_1_1; }
		
		//featureOfType = [SysML::Feature | QualifiedName]
		public Assignment getFeatureOfTypeAssignment_2() { return cFeatureOfTypeAssignment_2; }
		
		//[SysML::Feature | QualifiedName]
		public CrossReference getFeatureOfTypeFeatureCrossReference_2_0() { return cFeatureOfTypeFeatureCrossReference_2_0; }
		
		//QualifiedName
		public RuleCall getFeatureOfTypeFeatureQualifiedNameParserRuleCall_2_0_1() { return cFeatureOfTypeFeatureQualifiedNameParserRuleCall_2_0_1; }
		
		//'by'
		public Keyword getByKeyword_3() { return cByKeyword_3; }
		
		//featuringType = [SysML::Feature | QualifiedName]
		public Assignment getFeaturingTypeAssignment_4() { return cFeaturingTypeAssignment_4; }
		
		//[SysML::Feature | QualifiedName]
		public CrossReference getFeaturingTypeFeatureCrossReference_4_0() { return cFeaturingTypeFeatureCrossReference_4_0; }
		
		//QualifiedName
		public RuleCall getFeaturingTypeFeatureQualifiedNameParserRuleCall_4_0_1() { return cFeaturingTypeFeatureQualifiedNameParserRuleCall_4_0_1; }
		
		//RelationshipBody
		public RuleCall getRelationshipBodyParserRuleCall_5() { return cRelationshipBodyParserRuleCall_5; }
	}
	public class OwnedTypeFeaturingElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.xtext.KerML.OwnedTypeFeaturing");
		private final Assignment cFeaturingTypeAssignment = (Assignment)rule.eContents().get(1);
		private final CrossReference cFeaturingTypeTypeCrossReference_0 = (CrossReference)cFeaturingTypeAssignment.eContents().get(0);
		private final RuleCall cFeaturingTypeTypeQualifiedNameParserRuleCall_0_1 = (RuleCall)cFeaturingTypeTypeCrossReference_0.eContents().get(1);
		
		//OwnedTypeFeaturing returns SysML::TypeFeaturing :
		//    featuringType = [SysML::Type | QualifiedName]
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//featuringType = [SysML::Type | QualifiedName]
		public Assignment getFeaturingTypeAssignment() { return cFeaturingTypeAssignment; }
		
		//[SysML::Type | QualifiedName]
		public CrossReference getFeaturingTypeTypeCrossReference_0() { return cFeaturingTypeTypeCrossReference_0; }
		
		//QualifiedName
		public RuleCall getFeaturingTypeTypeQualifiedNameParserRuleCall_0_1() { return cFeaturingTypeTypeQualifiedNameParserRuleCall_0_1; }
	}
	public class FeatureTypingElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.xtext.KerML.FeatureTyping");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final Keyword cSpecializationKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final RuleCall cIdentificationParserRuleCall_0_1 = (RuleCall)cGroup_0.eContents().get(1);
		private final Keyword cTypingKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTypedFeatureAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cTypedFeatureFeatureCrossReference_2_0 = (CrossReference)cTypedFeatureAssignment_2.eContents().get(0);
		private final RuleCall cTypedFeatureFeatureQualifiedNameParserRuleCall_2_0_1 = (RuleCall)cTypedFeatureFeatureCrossReference_2_0.eContents().get(1);
		private final Alternatives cAlternatives_3 = (Alternatives)cGroup.eContents().get(3);
		private final Keyword cColonKeyword_3_0 = (Keyword)cAlternatives_3.eContents().get(0);
		private final Group cGroup_3_1 = (Group)cAlternatives_3.eContents().get(1);
		private final Keyword cTypedKeyword_3_1_0 = (Keyword)cGroup_3_1.eContents().get(0);
		private final Keyword cByKeyword_3_1_1 = (Keyword)cGroup_3_1.eContents().get(1);
		private final RuleCall cFeatureTypeParserRuleCall_4 = (RuleCall)cGroup.eContents().get(4);
		private final RuleCall cRelationshipBodyParserRuleCall_5 = (RuleCall)cGroup.eContents().get(5);
		
		///* Feature Typing */
		//FeatureTyping returns SysML::FeatureTyping :
		//    ( 'specialization' Identification? )?
		//    'typing' typedFeature = [SysML::Feature | QualifiedName]
		//    (':' | 'typed' 'by') FeatureType
		//    RelationshipBody
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//( 'specialization' Identification? )?
		//'typing' typedFeature = [SysML::Feature | QualifiedName]
		//(':' | 'typed' 'by') FeatureType
		//RelationshipBody
		public Group getGroup() { return cGroup; }
		
		//( 'specialization' Identification? )?
		public Group getGroup_0() { return cGroup_0; }
		
		//'specialization'
		public Keyword getSpecializationKeyword_0_0() { return cSpecializationKeyword_0_0; }
		
		//Identification?
		public RuleCall getIdentificationParserRuleCall_0_1() { return cIdentificationParserRuleCall_0_1; }
		
		//'typing'
		public Keyword getTypingKeyword_1() { return cTypingKeyword_1; }
		
		//typedFeature = [SysML::Feature | QualifiedName]
		public Assignment getTypedFeatureAssignment_2() { return cTypedFeatureAssignment_2; }
		
		//[SysML::Feature | QualifiedName]
		public CrossReference getTypedFeatureFeatureCrossReference_2_0() { return cTypedFeatureFeatureCrossReference_2_0; }
		
		//QualifiedName
		public RuleCall getTypedFeatureFeatureQualifiedNameParserRuleCall_2_0_1() { return cTypedFeatureFeatureQualifiedNameParserRuleCall_2_0_1; }
		
		//(':' | 'typed' 'by')
		public Alternatives getAlternatives_3() { return cAlternatives_3; }
		
		//':'
		public Keyword getColonKeyword_3_0() { return cColonKeyword_3_0; }
		
		//'typed' 'by'
		public Group getGroup_3_1() { return cGroup_3_1; }
		
		//'typed'
		public Keyword getTypedKeyword_3_1_0() { return cTypedKeyword_3_1_0; }
		
		//'by'
		public Keyword getByKeyword_3_1_1() { return cByKeyword_3_1_1; }
		
		//FeatureType
		public RuleCall getFeatureTypeParserRuleCall_4() { return cFeatureTypeParserRuleCall_4; }
		
		//RelationshipBody
		public RuleCall getRelationshipBodyParserRuleCall_5() { return cRelationshipBodyParserRuleCall_5; }
	}
	public class OwnedFeatureTypingElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.xtext.KerML.OwnedFeatureTyping");
		private final RuleCall cFeatureTypeParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//@Override
		//OwnedFeatureTyping returns SysML::FeatureTyping :
		//    FeatureType
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//FeatureType
		public RuleCall getFeatureTypeParserRuleCall() { return cFeatureTypeParserRuleCall; }
	}
	public class FeatureTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.xtext.KerML.FeatureType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cTypeAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final CrossReference cTypeTypeCrossReference_0_0 = (CrossReference)cTypeAssignment_0.eContents().get(0);
		private final RuleCall cTypeTypeQualifiedNameParserRuleCall_0_0_1 = (RuleCall)cTypeTypeCrossReference_0_0.eContents().get(1);
		private final Assignment cOwnedRelatedElementAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cOwnedRelatedElementOwnedFeatureChainParserRuleCall_1_0 = (RuleCall)cOwnedRelatedElementAssignment_1.eContents().get(0);
		
		//fragment FeatureType returns SysML::FeatureTyping :
		//      type = [SysML::Type | QualifiedName]
		//    | ownedRelatedElement += OwnedFeatureChain
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//  type = [SysML::Type | QualifiedName]
		//| ownedRelatedElement += OwnedFeatureChain
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//type = [SysML::Type | QualifiedName]
		public Assignment getTypeAssignment_0() { return cTypeAssignment_0; }
		
		//[SysML::Type | QualifiedName]
		public CrossReference getTypeTypeCrossReference_0_0() { return cTypeTypeCrossReference_0_0; }
		
		//QualifiedName
		public RuleCall getTypeTypeQualifiedNameParserRuleCall_0_0_1() { return cTypeTypeQualifiedNameParserRuleCall_0_0_1; }
		
		//ownedRelatedElement += OwnedFeatureChain
		public Assignment getOwnedRelatedElementAssignment_1() { return cOwnedRelatedElementAssignment_1; }
		
		//OwnedFeatureChain
		public RuleCall getOwnedRelatedElementOwnedFeatureChainParserRuleCall_1_0() { return cOwnedRelatedElementOwnedFeatureChainParserRuleCall_1_0; }
	}
	public class SubsettingElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.xtext.KerML.Subsetting");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final Keyword cSpecializationKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final RuleCall cIdentificationParserRuleCall_0_1 = (RuleCall)cGroup_0.eContents().get(1);
		private final Keyword cSubsetKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Assignment cSubsettingFeatureAssignment_2_0 = (Assignment)cAlternatives_2.eContents().get(0);
		private final CrossReference cSubsettingFeatureFeatureCrossReference_2_0_0 = (CrossReference)cSubsettingFeatureAssignment_2_0.eContents().get(0);
		private final RuleCall cSubsettingFeatureFeatureQualifiedNameParserRuleCall_2_0_0_1 = (RuleCall)cSubsettingFeatureFeatureCrossReference_2_0_0.eContents().get(1);
		private final Assignment cOwnedRelatedElementAssignment_2_1 = (Assignment)cAlternatives_2.eContents().get(1);
		private final RuleCall cOwnedRelatedElementOwnedFeatureChainParserRuleCall_2_1_0 = (RuleCall)cOwnedRelatedElementAssignment_2_1.eContents().get(0);
		private final Alternatives cAlternatives_3 = (Alternatives)cGroup.eContents().get(3);
		private final Keyword cColonGreaterThanSignKeyword_3_0 = (Keyword)cAlternatives_3.eContents().get(0);
		private final Keyword cSubsetsKeyword_3_1 = (Keyword)cAlternatives_3.eContents().get(1);
		private final Alternatives cAlternatives_4 = (Alternatives)cGroup.eContents().get(4);
		private final Assignment cSubsettedFeatureAssignment_4_0 = (Assignment)cAlternatives_4.eContents().get(0);
		private final CrossReference cSubsettedFeatureFeatureCrossReference_4_0_0 = (CrossReference)cSubsettedFeatureAssignment_4_0.eContents().get(0);
		private final RuleCall cSubsettedFeatureFeatureQualifiedNameParserRuleCall_4_0_0_1 = (RuleCall)cSubsettedFeatureFeatureCrossReference_4_0_0.eContents().get(1);
		private final Assignment cOwnedRelatedElementAssignment_4_1 = (Assignment)cAlternatives_4.eContents().get(1);
		private final RuleCall cOwnedRelatedElementOwnedFeatureChainParserRuleCall_4_1_0 = (RuleCall)cOwnedRelatedElementAssignment_4_1.eContents().get(0);
		private final RuleCall cRelationshipBodyParserRuleCall_5 = (RuleCall)cGroup.eContents().get(5);
		
		///* Subsetting */
		//Subsetting returns SysML::Subsetting :
		//    ( 'specialization' Identification? )?
		//    'subset'
		//    ( subsettingFeature = [SysML::Feature | QualifiedName]
		//    | ownedRelatedElement += OwnedFeatureChain )
		//    ( ':>' | 'subsets' )
		//    ( subsettedFeature = [SysML::Feature | QualifiedName]
		//    | ownedRelatedElement += OwnedFeatureChain )
		//    RelationshipBody
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//( 'specialization' Identification? )?
		//'subset'
		//( subsettingFeature = [SysML::Feature | QualifiedName]
		//| ownedRelatedElement += OwnedFeatureChain )
		//( ':>' | 'subsets' )
		//( subsettedFeature = [SysML::Feature | QualifiedName]
		//| ownedRelatedElement += OwnedFeatureChain )
		//RelationshipBody
		public Group getGroup() { return cGroup; }
		
		//( 'specialization' Identification? )?
		public Group getGroup_0() { return cGroup_0; }
		
		//'specialization'
		public Keyword getSpecializationKeyword_0_0() { return cSpecializationKeyword_0_0; }
		
		//Identification?
		public RuleCall getIdentificationParserRuleCall_0_1() { return cIdentificationParserRuleCall_0_1; }
		
		//'subset'
		public Keyword getSubsetKeyword_1() { return cSubsetKeyword_1; }
		
		//( subsettingFeature = [SysML::Feature | QualifiedName]
		//| ownedRelatedElement += OwnedFeatureChain )
		public Alternatives getAlternatives_2() { return cAlternatives_2; }
		
		//subsettingFeature = [SysML::Feature | QualifiedName]
		public Assignment getSubsettingFeatureAssignment_2_0() { return cSubsettingFeatureAssignment_2_0; }
		
		//[SysML::Feature | QualifiedName]
		public CrossReference getSubsettingFeatureFeatureCrossReference_2_0_0() { return cSubsettingFeatureFeatureCrossReference_2_0_0; }
		
		//QualifiedName
		public RuleCall getSubsettingFeatureFeatureQualifiedNameParserRuleCall_2_0_0_1() { return cSubsettingFeatureFeatureQualifiedNameParserRuleCall_2_0_0_1; }
		
		//ownedRelatedElement += OwnedFeatureChain
		public Assignment getOwnedRelatedElementAssignment_2_1() { return cOwnedRelatedElementAssignment_2_1; }
		
		//OwnedFeatureChain
		public RuleCall getOwnedRelatedElementOwnedFeatureChainParserRuleCall_2_1_0() { return cOwnedRelatedElementOwnedFeatureChainParserRuleCall_2_1_0; }
		
		//( ':>' | 'subsets' )
		public Alternatives getAlternatives_3() { return cAlternatives_3; }
		
		//':>'
		public Keyword getColonGreaterThanSignKeyword_3_0() { return cColonGreaterThanSignKeyword_3_0; }
		
		//'subsets'
		public Keyword getSubsetsKeyword_3_1() { return cSubsetsKeyword_3_1; }
		
		//( subsettedFeature = [SysML::Feature | QualifiedName]
		//| ownedRelatedElement += OwnedFeatureChain )
		public Alternatives getAlternatives_4() { return cAlternatives_4; }
		
		//subsettedFeature = [SysML::Feature | QualifiedName]
		public Assignment getSubsettedFeatureAssignment_4_0() { return cSubsettedFeatureAssignment_4_0; }
		
		//[SysML::Feature | QualifiedName]
		public CrossReference getSubsettedFeatureFeatureCrossReference_4_0_0() { return cSubsettedFeatureFeatureCrossReference_4_0_0; }
		
		//QualifiedName
		public RuleCall getSubsettedFeatureFeatureQualifiedNameParserRuleCall_4_0_0_1() { return cSubsettedFeatureFeatureQualifiedNameParserRuleCall_4_0_0_1; }
		
		//ownedRelatedElement += OwnedFeatureChain
		public Assignment getOwnedRelatedElementAssignment_4_1() { return cOwnedRelatedElementAssignment_4_1; }
		
		//OwnedFeatureChain
		public RuleCall getOwnedRelatedElementOwnedFeatureChainParserRuleCall_4_1_0() { return cOwnedRelatedElementOwnedFeatureChainParserRuleCall_4_1_0; }
		
		//RelationshipBody
		public RuleCall getRelationshipBodyParserRuleCall_5() { return cRelationshipBodyParserRuleCall_5; }
	}
	public class OwnedSubsettingElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.xtext.KerML.OwnedSubsetting");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cSubsettedFeatureAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final CrossReference cSubsettedFeatureFeatureCrossReference_0_0 = (CrossReference)cSubsettedFeatureAssignment_0.eContents().get(0);
		private final RuleCall cSubsettedFeatureFeatureQualifiedNameParserRuleCall_0_0_1 = (RuleCall)cSubsettedFeatureFeatureCrossReference_0_0.eContents().get(1);
		private final Assignment cOwnedRelatedElementAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cOwnedRelatedElementOwnedFeatureChainParserRuleCall_1_0 = (RuleCall)cOwnedRelatedElementAssignment_1.eContents().get(0);
		
		//OwnedSubsetting returns SysML::Subsetting:
		//      subsettedFeature = [SysML::Feature | QualifiedName]
		//    | ownedRelatedElement += OwnedFeatureChain
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//  subsettedFeature = [SysML::Feature | QualifiedName]
		//| ownedRelatedElement += OwnedFeatureChain
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//subsettedFeature = [SysML::Feature | QualifiedName]
		public Assignment getSubsettedFeatureAssignment_0() { return cSubsettedFeatureAssignment_0; }
		
		//[SysML::Feature | QualifiedName]
		public CrossReference getSubsettedFeatureFeatureCrossReference_0_0() { return cSubsettedFeatureFeatureCrossReference_0_0; }
		
		//QualifiedName
		public RuleCall getSubsettedFeatureFeatureQualifiedNameParserRuleCall_0_0_1() { return cSubsettedFeatureFeatureQualifiedNameParserRuleCall_0_0_1; }
		
		//ownedRelatedElement += OwnedFeatureChain
		public Assignment getOwnedRelatedElementAssignment_1() { return cOwnedRelatedElementAssignment_1; }
		
		//OwnedFeatureChain
		public RuleCall getOwnedRelatedElementOwnedFeatureChainParserRuleCall_1_0() { return cOwnedRelatedElementOwnedFeatureChainParserRuleCall_1_0; }
	}
	public class OwnedReferenceSubsettingElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.xtext.KerML.OwnedReferenceSubsetting");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cReferencedFeatureAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final CrossReference cReferencedFeatureFeatureCrossReference_0_0 = (CrossReference)cReferencedFeatureAssignment_0.eContents().get(0);
		private final RuleCall cReferencedFeatureFeatureQualifiedNameParserRuleCall_0_0_1 = (RuleCall)cReferencedFeatureFeatureCrossReference_0_0.eContents().get(1);
		private final Assignment cOwnedRelatedElementAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cOwnedRelatedElementOwnedFeatureChainParserRuleCall_1_0 = (RuleCall)cOwnedRelatedElementAssignment_1.eContents().get(0);
		
		//OwnedReferenceSubsetting returns SysML::ReferenceSubsetting:
		//      referencedFeature = [SysML::Feature | QualifiedName]
		//    | ownedRelatedElement += OwnedFeatureChain
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//  referencedFeature = [SysML::Feature | QualifiedName]
		//| ownedRelatedElement += OwnedFeatureChain
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//referencedFeature = [SysML::Feature | QualifiedName]
		public Assignment getReferencedFeatureAssignment_0() { return cReferencedFeatureAssignment_0; }
		
		//[SysML::Feature | QualifiedName]
		public CrossReference getReferencedFeatureFeatureCrossReference_0_0() { return cReferencedFeatureFeatureCrossReference_0_0; }
		
		//QualifiedName
		public RuleCall getReferencedFeatureFeatureQualifiedNameParserRuleCall_0_0_1() { return cReferencedFeatureFeatureQualifiedNameParserRuleCall_0_0_1; }
		
		//ownedRelatedElement += OwnedFeatureChain
		public Assignment getOwnedRelatedElementAssignment_1() { return cOwnedRelatedElementAssignment_1; }
		
		//OwnedFeatureChain
		public RuleCall getOwnedRelatedElementOwnedFeatureChainParserRuleCall_1_0() { return cOwnedRelatedElementOwnedFeatureChainParserRuleCall_1_0; }
	}
	public class RedefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.xtext.KerML.Redefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final Keyword cSpecializationKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final RuleCall cIdentificationParserRuleCall_0_1 = (RuleCall)cGroup_0.eContents().get(1);
		private final Keyword cRedefinitionKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Assignment cRedefiningFeatureAssignment_2_0 = (Assignment)cAlternatives_2.eContents().get(0);
		private final CrossReference cRedefiningFeatureFeatureCrossReference_2_0_0 = (CrossReference)cRedefiningFeatureAssignment_2_0.eContents().get(0);
		private final RuleCall cRedefiningFeatureFeatureQualifiedNameParserRuleCall_2_0_0_1 = (RuleCall)cRedefiningFeatureFeatureCrossReference_2_0_0.eContents().get(1);
		private final Assignment cOwnedRelatedElementAssignment_2_1 = (Assignment)cAlternatives_2.eContents().get(1);
		private final RuleCall cOwnedRelatedElementOwnedFeatureChainParserRuleCall_2_1_0 = (RuleCall)cOwnedRelatedElementAssignment_2_1.eContents().get(0);
		private final Alternatives cAlternatives_3 = (Alternatives)cGroup.eContents().get(3);
		private final Keyword cColonGreaterThanSignGreaterThanSignKeyword_3_0 = (Keyword)cAlternatives_3.eContents().get(0);
		private final Keyword cRedefinesKeyword_3_1 = (Keyword)cAlternatives_3.eContents().get(1);
		private final Alternatives cAlternatives_4 = (Alternatives)cGroup.eContents().get(4);
		private final Assignment cRedefinedFeatureAssignment_4_0 = (Assignment)cAlternatives_4.eContents().get(0);
		private final CrossReference cRedefinedFeatureFeatureCrossReference_4_0_0 = (CrossReference)cRedefinedFeatureAssignment_4_0.eContents().get(0);
		private final RuleCall cRedefinedFeatureFeatureQualifiedNameParserRuleCall_4_0_0_1 = (RuleCall)cRedefinedFeatureFeatureCrossReference_4_0_0.eContents().get(1);
		private final Assignment cOwnedRelatedElementAssignment_4_1 = (Assignment)cAlternatives_4.eContents().get(1);
		private final RuleCall cOwnedRelatedElementOwnedFeatureChainParserRuleCall_4_1_0 = (RuleCall)cOwnedRelatedElementAssignment_4_1.eContents().get(0);
		private final RuleCall cRelationshipBodyParserRuleCall_5 = (RuleCall)cGroup.eContents().get(5);
		
		///* Redefinition */
		//Redefinition returns SysML::Redefinition :
		//    ( 'specialization' Identification? )?
		//    'redefinition'
		//    ( redefiningFeature = [SysML::Feature | QualifiedName]
		//    | ownedRelatedElement += OwnedFeatureChain )
		//    ( ':>>' | 'redefines' )
		//    ( redefinedFeature = [SysML::Feature | QualifiedName]
		//    | ownedRelatedElement += OwnedFeatureChain )
		//    RelationshipBody
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//( 'specialization' Identification? )?
		//'redefinition'
		//( redefiningFeature = [SysML::Feature | QualifiedName]
		//| ownedRelatedElement += OwnedFeatureChain )
		//( ':>>' | 'redefines' )
		//( redefinedFeature = [SysML::Feature | QualifiedName]
		//| ownedRelatedElement += OwnedFeatureChain )
		//RelationshipBody
		public Group getGroup() { return cGroup; }
		
		//( 'specialization' Identification? )?
		public Group getGroup_0() { return cGroup_0; }
		
		//'specialization'
		public Keyword getSpecializationKeyword_0_0() { return cSpecializationKeyword_0_0; }
		
		//Identification?
		public RuleCall getIdentificationParserRuleCall_0_1() { return cIdentificationParserRuleCall_0_1; }
		
		//'redefinition'
		public Keyword getRedefinitionKeyword_1() { return cRedefinitionKeyword_1; }
		
		//( redefiningFeature = [SysML::Feature | QualifiedName]
		//| ownedRelatedElement += OwnedFeatureChain )
		public Alternatives getAlternatives_2() { return cAlternatives_2; }
		
		//redefiningFeature = [SysML::Feature | QualifiedName]
		public Assignment getRedefiningFeatureAssignment_2_0() { return cRedefiningFeatureAssignment_2_0; }
		
		//[SysML::Feature | QualifiedName]
		public CrossReference getRedefiningFeatureFeatureCrossReference_2_0_0() { return cRedefiningFeatureFeatureCrossReference_2_0_0; }
		
		//QualifiedName
		public RuleCall getRedefiningFeatureFeatureQualifiedNameParserRuleCall_2_0_0_1() { return cRedefiningFeatureFeatureQualifiedNameParserRuleCall_2_0_0_1; }
		
		//ownedRelatedElement += OwnedFeatureChain
		public Assignment getOwnedRelatedElementAssignment_2_1() { return cOwnedRelatedElementAssignment_2_1; }
		
		//OwnedFeatureChain
		public RuleCall getOwnedRelatedElementOwnedFeatureChainParserRuleCall_2_1_0() { return cOwnedRelatedElementOwnedFeatureChainParserRuleCall_2_1_0; }
		
		//( ':>>' | 'redefines' )
		public Alternatives getAlternatives_3() { return cAlternatives_3; }
		
		//':>>'
		public Keyword getColonGreaterThanSignGreaterThanSignKeyword_3_0() { return cColonGreaterThanSignGreaterThanSignKeyword_3_0; }
		
		//'redefines'
		public Keyword getRedefinesKeyword_3_1() { return cRedefinesKeyword_3_1; }
		
		//( redefinedFeature = [SysML::Feature | QualifiedName]
		//| ownedRelatedElement += OwnedFeatureChain )
		public Alternatives getAlternatives_4() { return cAlternatives_4; }
		
		//redefinedFeature = [SysML::Feature | QualifiedName]
		public Assignment getRedefinedFeatureAssignment_4_0() { return cRedefinedFeatureAssignment_4_0; }
		
		//[SysML::Feature | QualifiedName]
		public CrossReference getRedefinedFeatureFeatureCrossReference_4_0_0() { return cRedefinedFeatureFeatureCrossReference_4_0_0; }
		
		//QualifiedName
		public RuleCall getRedefinedFeatureFeatureQualifiedNameParserRuleCall_4_0_0_1() { return cRedefinedFeatureFeatureQualifiedNameParserRuleCall_4_0_0_1; }
		
		//ownedRelatedElement += OwnedFeatureChain
		public Assignment getOwnedRelatedElementAssignment_4_1() { return cOwnedRelatedElementAssignment_4_1; }
		
		//OwnedFeatureChain
		public RuleCall getOwnedRelatedElementOwnedFeatureChainParserRuleCall_4_1_0() { return cOwnedRelatedElementOwnedFeatureChainParserRuleCall_4_1_0; }
		
		//RelationshipBody
		public RuleCall getRelationshipBodyParserRuleCall_5() { return cRelationshipBodyParserRuleCall_5; }
	}
	public class OwnedRedefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.xtext.KerML.OwnedRedefinition");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cRedefinedFeatureAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final CrossReference cRedefinedFeatureFeatureCrossReference_0_0 = (CrossReference)cRedefinedFeatureAssignment_0.eContents().get(0);
		private final RuleCall cRedefinedFeatureFeatureQualifiedNameParserRuleCall_0_0_1 = (RuleCall)cRedefinedFeatureFeatureCrossReference_0_0.eContents().get(1);
		private final Assignment cOwnedRelatedElementAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cOwnedRelatedElementOwnedFeatureChainParserRuleCall_1_0 = (RuleCall)cOwnedRelatedElementAssignment_1.eContents().get(0);
		
		//OwnedRedefinition returns SysML::Redefinition:
		//      redefinedFeature = [SysML::Feature | QualifiedName]
		//    | ownedRelatedElement += OwnedFeatureChain
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//  redefinedFeature = [SysML::Feature | QualifiedName]
		//| ownedRelatedElement += OwnedFeatureChain
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//redefinedFeature = [SysML::Feature | QualifiedName]
		public Assignment getRedefinedFeatureAssignment_0() { return cRedefinedFeatureAssignment_0; }
		
		//[SysML::Feature | QualifiedName]
		public CrossReference getRedefinedFeatureFeatureCrossReference_0_0() { return cRedefinedFeatureFeatureCrossReference_0_0; }
		
		//QualifiedName
		public RuleCall getRedefinedFeatureFeatureQualifiedNameParserRuleCall_0_0_1() { return cRedefinedFeatureFeatureQualifiedNameParserRuleCall_0_0_1; }
		
		//ownedRelatedElement += OwnedFeatureChain
		public Assignment getOwnedRelatedElementAssignment_1() { return cOwnedRelatedElementAssignment_1; }
		
		//OwnedFeatureChain
		public RuleCall getOwnedRelatedElementOwnedFeatureChainParserRuleCall_1_0() { return cOwnedRelatedElementOwnedFeatureChainParserRuleCall_1_0; }
	}
	public class FeatureConjugationPartElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.xtext.KerML.FeatureConjugationPart");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Keyword cTildeKeyword_0_0 = (Keyword)cAlternatives_0.eContents().get(0);
		private final Keyword cConjugatesKeyword_0_1 = (Keyword)cAlternatives_0.eContents().get(1);
		private final Assignment cOwnedRelationshipAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cOwnedRelationshipFeatureConjugationParserRuleCall_1_0 = (RuleCall)cOwnedRelationshipAssignment_1.eContents().get(0);
		
		///* Feature Conjugation */
		//fragment FeatureConjugationPart returns SysML::Feature :
		//    ( '~' | 'conjugates' ) ownedRelationship += FeatureConjugation
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//( '~' | 'conjugates' ) ownedRelationship += FeatureConjugation
		public Group getGroup() { return cGroup; }
		
		//( '~' | 'conjugates' )
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//'~'
		public Keyword getTildeKeyword_0_0() { return cTildeKeyword_0_0; }
		
		//'conjugates'
		public Keyword getConjugatesKeyword_0_1() { return cConjugatesKeyword_0_1; }
		
		//ownedRelationship += FeatureConjugation
		public Assignment getOwnedRelationshipAssignment_1() { return cOwnedRelationshipAssignment_1; }
		
		//FeatureConjugation
		public RuleCall getOwnedRelationshipFeatureConjugationParserRuleCall_1_0() { return cOwnedRelationshipFeatureConjugationParserRuleCall_1_0; }
	}
	public class FeatureConjugationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.xtext.KerML.FeatureConjugation");
		private final Assignment cOriginalTypeAssignment = (Assignment)rule.eContents().get(1);
		private final CrossReference cOriginalTypeFeatureCrossReference_0 = (CrossReference)cOriginalTypeAssignment.eContents().get(0);
		private final RuleCall cOriginalTypeFeatureQualifiedNameParserRuleCall_0_1 = (RuleCall)cOriginalTypeFeatureCrossReference_0.eContents().get(1);
		
		//FeatureConjugation returns SysML::Conjugation :
		//    originalType = [SysML::Feature | QualifiedName ]
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//originalType = [SysML::Feature | QualifiedName ]
		public Assignment getOriginalTypeAssignment() { return cOriginalTypeAssignment; }
		
		//[SysML::Feature | QualifiedName ]
		public CrossReference getOriginalTypeFeatureCrossReference_0() { return cOriginalTypeFeatureCrossReference_0; }
		
		//QualifiedName
		public RuleCall getOriginalTypeFeatureQualifiedNameParserRuleCall_0_1() { return cOriginalTypeFeatureQualifiedNameParserRuleCall_0_1; }
	}
	public class ValuePartElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.xtext.KerML.ValuePart");
		private final Assignment cOwnedRelationshipAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cOwnedRelationshipFeatureValueParserRuleCall_0 = (RuleCall)cOwnedRelationshipAssignment.eContents().get(0);
		
		///* FEATURE VALUES */
		//fragment ValuePart returns SysML::Feature :
		//      ownedRelationship += FeatureValue
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//ownedRelationship += FeatureValue
		public Assignment getOwnedRelationshipAssignment() { return cOwnedRelationshipAssignment; }
		
		//FeatureValue
		public RuleCall getOwnedRelationshipFeatureValueParserRuleCall_0() { return cOwnedRelationshipFeatureValueParserRuleCall_0; }
	}
	public class FeatureValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.xtext.KerML.FeatureValue");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Keyword cEqualsSignKeyword_0_0 = (Keyword)cAlternatives_0.eContents().get(0);
		private final Assignment cIsInitialAssignment_0_1 = (Assignment)cAlternatives_0.eContents().get(1);
		private final Keyword cIsInitialColonEqualsSignKeyword_0_1_0 = (Keyword)cIsInitialAssignment_0_1.eContents().get(0);
		private final Group cGroup_0_2 = (Group)cAlternatives_0.eContents().get(2);
		private final Assignment cIsDefaultAssignment_0_2_0 = (Assignment)cGroup_0_2.eContents().get(0);
		private final Keyword cIsDefaultDefaultKeyword_0_2_0_0 = (Keyword)cIsDefaultAssignment_0_2_0.eContents().get(0);
		private final Alternatives cAlternatives_0_2_1 = (Alternatives)cGroup_0_2.eContents().get(1);
		private final Keyword cEqualsSignKeyword_0_2_1_0 = (Keyword)cAlternatives_0_2_1.eContents().get(0);
		private final Assignment cIsInitialAssignment_0_2_1_1 = (Assignment)cAlternatives_0_2_1.eContents().get(1);
		private final Keyword cIsInitialColonEqualsSignKeyword_0_2_1_1_0 = (Keyword)cIsInitialAssignment_0_2_1_1.eContents().get(0);
		private final Assignment cOwnedRelatedElementAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cOwnedRelatedElementOwnedExpressionParserRuleCall_1_0 = (RuleCall)cOwnedRelatedElementAssignment_1.eContents().get(0);
		
		//FeatureValue returns SysML::FeatureValue :
		//    ( '='
		//    | isInitial ?= ':='
		//    | isDefault ?= 'default' ( '=' | isInitial ?= ':=' )?
		//    )
		//    ownedRelatedElement += OwnedExpression
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//( '='
		//| isInitial ?= ':='
		//| isDefault ?= 'default' ( '=' | isInitial ?= ':=' )?
		//)
		//ownedRelatedElement += OwnedExpression
		public Group getGroup() { return cGroup; }
		
		//( '='
		//| isInitial ?= ':='
		//| isDefault ?= 'default' ( '=' | isInitial ?= ':=' )?
		//)
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_0_0() { return cEqualsSignKeyword_0_0; }
		
		//isInitial ?= ':='
		public Assignment getIsInitialAssignment_0_1() { return cIsInitialAssignment_0_1; }
		
		//':='
		public Keyword getIsInitialColonEqualsSignKeyword_0_1_0() { return cIsInitialColonEqualsSignKeyword_0_1_0; }
		
		//isDefault ?= 'default' ( '=' | isInitial ?= ':=' )?
		public Group getGroup_0_2() { return cGroup_0_2; }
		
		//isDefault ?= 'default'
		public Assignment getIsDefaultAssignment_0_2_0() { return cIsDefaultAssignment_0_2_0; }
		
		//'default'
		public Keyword getIsDefaultDefaultKeyword_0_2_0_0() { return cIsDefaultDefaultKeyword_0_2_0_0; }
		
		//( '=' | isInitial ?= ':=' )?
		public Alternatives getAlternatives_0_2_1() { return cAlternatives_0_2_1; }
		
		//'='
		public Keyword getEqualsSignKeyword_0_2_1_0() { return cEqualsSignKeyword_0_2_1_0; }
		
		//isInitial ?= ':='
		public Assignment getIsInitialAssignment_0_2_1_1() { return cIsInitialAssignment_0_2_1_1; }
		
		//':='
		public Keyword getIsInitialColonEqualsSignKeyword_0_2_1_1_0() { return cIsInitialColonEqualsSignKeyword_0_2_1_1_0; }
		
		//ownedRelatedElement += OwnedExpression
		public Assignment getOwnedRelatedElementAssignment_1() { return cOwnedRelatedElementAssignment_1; }
		
		//OwnedExpression
		public RuleCall getOwnedRelatedElementOwnedExpressionParserRuleCall_1_0() { return cOwnedRelatedElementOwnedExpressionParserRuleCall_1_0; }
	}
	public class MultiplicityElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.xtext.KerML.Multiplicity");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cMultiplicitySubsetParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cMultiplicityRangeParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		///* MULTIPLICITIES */
		//Multiplicity returns SysML::Multiplicity :
		//    MultiplicitySubset | MultiplicityRange
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//MultiplicitySubset | MultiplicityRange
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//MultiplicitySubset
		public RuleCall getMultiplicitySubsetParserRuleCall_0() { return cMultiplicitySubsetParserRuleCall_0; }
		
		//MultiplicityRange
		public RuleCall getMultiplicityRangeParserRuleCall_1() { return cMultiplicityRangeParserRuleCall_1; }
	}
	public class MultiplicitySubsetElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.xtext.KerML.MultiplicitySubset");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cMultiplicityKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cIdentificationParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final RuleCall cSubsetsParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final RuleCall cTypeBodyParserRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		
		//MultiplicitySubset returns SysML::Multiplicity :
		//    'multiplicity' Identification? Subsets TypeBody
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'multiplicity' Identification? Subsets TypeBody
		public Group getGroup() { return cGroup; }
		
		//'multiplicity'
		public Keyword getMultiplicityKeyword_0() { return cMultiplicityKeyword_0; }
		
		//Identification?
		public RuleCall getIdentificationParserRuleCall_1() { return cIdentificationParserRuleCall_1; }
		
		//Subsets
		public RuleCall getSubsetsParserRuleCall_2() { return cSubsetsParserRuleCall_2; }
		
		//TypeBody
		public RuleCall getTypeBodyParserRuleCall_3() { return cTypeBodyParserRuleCall_3; }
	}
	public class MultiplicityRangeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.xtext.KerML.MultiplicityRange");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cMultiplicityKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cIdentificationParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final RuleCall cMultiplicityBoundsParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final RuleCall cTypeBodyParserRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		
		//MultiplicityRange returns SysML::MultiplicityRange :
		//    'multiplicity' Identification? MultiplicityBounds TypeBody
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'multiplicity' Identification? MultiplicityBounds TypeBody
		public Group getGroup() { return cGroup; }
		
		//'multiplicity'
		public Keyword getMultiplicityKeyword_0() { return cMultiplicityKeyword_0; }
		
		//Identification?
		public RuleCall getIdentificationParserRuleCall_1() { return cIdentificationParserRuleCall_1; }
		
		//MultiplicityBounds
		public RuleCall getMultiplicityBoundsParserRuleCall_2() { return cMultiplicityBoundsParserRuleCall_2; }
		
		//TypeBody
		public RuleCall getTypeBodyParserRuleCall_3() { return cTypeBodyParserRuleCall_3; }
	}
	public class OwnedMultiplicityElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.xtext.KerML.OwnedMultiplicity");
		private final Assignment cOwnedRelatedElementAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cOwnedRelatedElementOwnedMultiplicityRangeParserRuleCall_0 = (RuleCall)cOwnedRelatedElementAssignment.eContents().get(0);
		
		//OwnedMultiplicity returns SysML::OwningMembership :
		//    ownedRelatedElement += OwnedMultiplicityRange
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//ownedRelatedElement += OwnedMultiplicityRange
		public Assignment getOwnedRelatedElementAssignment() { return cOwnedRelatedElementAssignment; }
		
		//OwnedMultiplicityRange
		public RuleCall getOwnedRelatedElementOwnedMultiplicityRangeParserRuleCall_0() { return cOwnedRelatedElementOwnedMultiplicityRangeParserRuleCall_0; }
	}
	public class OwnedMultiplicityRangeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.xtext.KerML.OwnedMultiplicityRange");
		private final RuleCall cMultiplicityBoundsParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//OwnedMultiplicityRange returns SysML::MultiplicityRange :
		//    MultiplicityBounds
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//MultiplicityBounds
		public RuleCall getMultiplicityBoundsParserRuleCall() { return cMultiplicityBoundsParserRuleCall; }
	}
	public class MultiplicityBoundsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.xtext.KerML.MultiplicityBounds");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cOwnedRelationshipAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cOwnedRelationshipMultiplicityExpressionMemberParserRuleCall_1_0 = (RuleCall)cOwnedRelationshipAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cFullStopFullStopKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cOwnedRelationshipAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cOwnedRelationshipMultiplicityExpressionMemberParserRuleCall_2_1_0 = (RuleCall)cOwnedRelationshipAssignment_2_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//fragment MultiplicityBounds returns SysML::MultiplicityRange :
		//    // TODO: Allow general expressions for bounds. (Causes LL parsing issues.)
		//    '[' ownedRelationship += MultiplicityExpressionMember
		//          ( '..' ownedRelationship += MultiplicityExpressionMember )? ']'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//// TODO: Allow general expressions for bounds. (Causes LL parsing issues.)
		//'[' ownedRelationship += MultiplicityExpressionMember
		//      ( '..' ownedRelationship += MultiplicityExpressionMember )? ']'
		public Group getGroup() { return cGroup; }
		
		//// TODO: Allow general expressions for bounds. (Causes LL parsing issues.)
		//'['
		public Keyword getLeftSquareBracketKeyword_0() { return cLeftSquareBracketKeyword_0; }
		
		//ownedRelationship += MultiplicityExpressionMember
		public Assignment getOwnedRelationshipAssignment_1() { return cOwnedRelationshipAssignment_1; }
		
		//MultiplicityExpressionMember
		public RuleCall getOwnedRelationshipMultiplicityExpressionMemberParserRuleCall_1_0() { return cOwnedRelationshipMultiplicityExpressionMemberParserRuleCall_1_0; }
		
		//( '..' ownedRelationship += MultiplicityExpressionMember )?
		public Group getGroup_2() { return cGroup_2; }
		
		//'..'
		public Keyword getFullStopFullStopKeyword_2_0() { return cFullStopFullStopKeyword_2_0; }
		
		//ownedRelationship += MultiplicityExpressionMember
		public Assignment getOwnedRelationshipAssignment_2_1() { return cOwnedRelationshipAssignment_2_1; }
		
		//MultiplicityExpressionMember
		public RuleCall getOwnedRelationshipMultiplicityExpressionMemberParserRuleCall_2_1_0() { return cOwnedRelationshipMultiplicityExpressionMemberParserRuleCall_2_1_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_3() { return cRightSquareBracketKeyword_3; }
	}
	public class MultiplicityExpressionMemberElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.xtext.KerML.MultiplicityExpressionMember");
		private final Assignment cOwnedRelatedElementAssignment = (Assignment)rule.eContents().get(1);
		private final Alternatives cOwnedRelatedElementAlternatives_0 = (Alternatives)cOwnedRelatedElementAssignment.eContents().get(0);
		private final RuleCall cOwnedRelatedElementLiteralExpressionParserRuleCall_0_0 = (RuleCall)cOwnedRelatedElementAlternatives_0.eContents().get(0);
		private final RuleCall cOwnedRelatedElementFeatureReferenceExpressionParserRuleCall_0_1 = (RuleCall)cOwnedRelatedElementAlternatives_0.eContents().get(1);
		
		//MultiplicityExpressionMember returns SysML::OwningMembership :
		//    ownedRelatedElement += ( LiteralExpression | FeatureReferenceExpression )
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//ownedRelatedElement += ( LiteralExpression | FeatureReferenceExpression )
		public Assignment getOwnedRelatedElementAssignment() { return cOwnedRelatedElementAssignment; }
		
		//( LiteralExpression | FeatureReferenceExpression )
		public Alternatives getOwnedRelatedElementAlternatives_0() { return cOwnedRelatedElementAlternatives_0; }
		
		//LiteralExpression
		public RuleCall getOwnedRelatedElementLiteralExpressionParserRuleCall_0_0() { return cOwnedRelatedElementLiteralExpressionParserRuleCall_0_0; }
		
		//FeatureReferenceExpression
		public RuleCall getOwnedRelatedElementFeatureReferenceExpressionParserRuleCall_0_1() { return cOwnedRelatedElementFeatureReferenceExpressionParserRuleCall_0_1; }
	}
	public class DataTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.xtext.KerML.DataType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cTypePrefixParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cDatatypeKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final RuleCall cClassifierDeclarationParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final RuleCall cTypeBodyParserRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		
		///* CLASSIFICATION */
		///* Data Types */
		//DataType returns SysML::DataType :
		//    TypePrefix 'datatype'
		//    ClassifierDeclaration TypeBody
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//TypePrefix 'datatype'
		//ClassifierDeclaration TypeBody
		public Group getGroup() { return cGroup; }
		
		//TypePrefix
		public RuleCall getTypePrefixParserRuleCall_0() { return cTypePrefixParserRuleCall_0; }
		
		//'datatype'
		public Keyword getDatatypeKeyword_1() { return cDatatypeKeyword_1; }
		
		//ClassifierDeclaration
		public RuleCall getClassifierDeclarationParserRuleCall_2() { return cClassifierDeclarationParserRuleCall_2; }
		
		//TypeBody
		public RuleCall getTypeBodyParserRuleCall_3() { return cTypeBodyParserRuleCall_3; }
	}
	public class ClassElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.xtext.KerML.Class");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cTypePrefixParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cClassKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final RuleCall cClassifierDeclarationParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final RuleCall cTypeBodyParserRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		
		///* Classes */
		//Class returns SysML::Class :
		//    TypePrefix 'class'
		//    ClassifierDeclaration TypeBody
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//TypePrefix 'class'
		//ClassifierDeclaration TypeBody
		public Group getGroup() { return cGroup; }
		
		//TypePrefix
		public RuleCall getTypePrefixParserRuleCall_0() { return cTypePrefixParserRuleCall_0; }
		
		//'class'
		public Keyword getClassKeyword_1() { return cClassKeyword_1; }
		
		//ClassifierDeclaration
		public RuleCall getClassifierDeclarationParserRuleCall_2() { return cClassifierDeclarationParserRuleCall_2; }
		
		//TypeBody
		public RuleCall getTypeBodyParserRuleCall_3() { return cTypeBodyParserRuleCall_3; }
	}
	public class StructureElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.xtext.KerML.Structure");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cTypePrefixParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cStructKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final RuleCall cClassifierDeclarationParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final RuleCall cTypeBodyParserRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		
		///* STRUCTURES */
		//Structure returns SysML::Structure :
		//    TypePrefix 'struct'
		//    ClassifierDeclaration TypeBody
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//TypePrefix 'struct'
		//ClassifierDeclaration TypeBody
		public Group getGroup() { return cGroup; }
		
		//TypePrefix
		public RuleCall getTypePrefixParserRuleCall_0() { return cTypePrefixParserRuleCall_0; }
		
		//'struct'
		public Keyword getStructKeyword_1() { return cStructKeyword_1; }
		
		//ClassifierDeclaration
		public RuleCall getClassifierDeclarationParserRuleCall_2() { return cClassifierDeclarationParserRuleCall_2; }
		
		//TypeBody
		public RuleCall getTypeBodyParserRuleCall_3() { return cTypeBodyParserRuleCall_3; }
	}
	public class AssociationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.xtext.KerML.Association");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cTypePrefixParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cAssocKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final RuleCall cClassifierDeclarationParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final RuleCall cTypeBodyParserRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		
		///* ASSOCIATIONS */
		//Association returns SysML::Association :
		//    TypePrefix 'assoc'
		//    ClassifierDeclaration TypeBody
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//TypePrefix 'assoc'
		//ClassifierDeclaration TypeBody
		public Group getGroup() { return cGroup; }
		
		//TypePrefix
		public RuleCall getTypePrefixParserRuleCall_0() { return cTypePrefixParserRuleCall_0; }
		
		//'assoc'
		public Keyword getAssocKeyword_1() { return cAssocKeyword_1; }
		
		//ClassifierDeclaration
		public RuleCall getClassifierDeclarationParserRuleCall_2() { return cClassifierDeclarationParserRuleCall_2; }
		
		//TypeBody
		public RuleCall getTypeBodyParserRuleCall_3() { return cTypeBodyParserRuleCall_3; }
	}
	public class AssociationStructureElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.xtext.KerML.AssociationStructure");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cTypePrefixParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cAssocKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cStructKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final RuleCall cClassifierDeclarationParserRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		private final RuleCall cTypeBodyParserRuleCall_4 = (RuleCall)cGroup.eContents().get(4);
		
		//AssociationStructure returns SysML::AssociationStructure :
		//    TypePrefix 'assoc' 'struct'
		//    ClassifierDeclaration TypeBody
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//TypePrefix 'assoc' 'struct'
		//ClassifierDeclaration TypeBody
		public Group getGroup() { return cGroup; }
		
		//TypePrefix
		public RuleCall getTypePrefixParserRuleCall_0() { return cTypePrefixParserRuleCall_0; }
		
		//'assoc'
		public Keyword getAssocKeyword_1() { return cAssocKeyword_1; }
		
		//'struct'
		public Keyword getStructKeyword_2() { return cStructKeyword_2; }
		
		//ClassifierDeclaration
		public RuleCall getClassifierDeclarationParserRuleCall_3() { return cClassifierDeclarationParserRuleCall_3; }
		
		//TypeBody
		public RuleCall getTypeBodyParserRuleCall_4() { return cTypeBodyParserRuleCall_4; }
	}
	public class ConnectorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.xtext.KerML.Connector");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cFeaturePrefixParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cConnectorKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Group cGroup_2_0 = (Group)cAlternatives_2.eContents().get(0);
		private final RuleCall cFeatureDeclarationParserRuleCall_2_0_0 = (RuleCall)cGroup_2_0.eContents().get(0);
		private final RuleCall cValuePartParserRuleCall_2_0_1 = (RuleCall)cGroup_2_0.eContents().get(1);
		private final RuleCall cConnectorDeclarationParserRuleCall_2_1 = (RuleCall)cAlternatives_2.eContents().get(1);
		private final RuleCall cTypeBodyParserRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		
		///* CONNECTORS */
		///* Connectors */
		//Connector returns SysML::Connector :
		//    FeaturePrefix 'connector'
		//    ( FeatureDeclaration? ValuePart?
		//    | ConnectorDeclaration
		//    )
		//    TypeBody
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//FeaturePrefix 'connector'
		//( FeatureDeclaration? ValuePart?
		//| ConnectorDeclaration
		//)
		//TypeBody
		public Group getGroup() { return cGroup; }
		
		//FeaturePrefix
		public RuleCall getFeaturePrefixParserRuleCall_0() { return cFeaturePrefixParserRuleCall_0; }
		
		//'connector'
		public Keyword getConnectorKeyword_1() { return cConnectorKeyword_1; }
		
		//( FeatureDeclaration? ValuePart?
		//| ConnectorDeclaration
		//)
		public Alternatives getAlternatives_2() { return cAlternatives_2; }
		
		//FeatureDeclaration? ValuePart?
		public Group getGroup_2_0() { return cGroup_2_0; }
		
		//FeatureDeclaration?
		public RuleCall getFeatureDeclarationParserRuleCall_2_0_0() { return cFeatureDeclarationParserRuleCall_2_0_0; }
		
		//ValuePart?
		public RuleCall getValuePartParserRuleCall_2_0_1() { return cValuePartParserRuleCall_2_0_1; }
		
		//ConnectorDeclaration
		public RuleCall getConnectorDeclarationParserRuleCall_2_1() { return cConnectorDeclarationParserRuleCall_2_1; }
		
		//TypeBody
		public RuleCall getTypeBodyParserRuleCall_3() { return cTypeBodyParserRuleCall_3; }
	}
	public class ConnectorDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.xtext.KerML.ConnectorDeclaration");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cBinaryConnectorDeclarationParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cNaryConnectorDeclarationParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//fragment ConnectorDeclaration returns SysML::Connector :
		//    BinaryConnectorDeclaration | NaryConnectorDeclaration
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//BinaryConnectorDeclaration | NaryConnectorDeclaration
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//BinaryConnectorDeclaration
		public RuleCall getBinaryConnectorDeclarationParserRuleCall_0() { return cBinaryConnectorDeclarationParserRuleCall_0; }
		
		//NaryConnectorDeclaration
		public RuleCall getNaryConnectorDeclarationParserRuleCall_1() { return cNaryConnectorDeclarationParserRuleCall_1; }
	}
	public class BinaryConnectorDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.xtext.KerML.BinaryConnectorDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Group cGroup_0_0 = (Group)cAlternatives_0.eContents().get(0);
		private final RuleCall cFeatureDeclarationParserRuleCall_0_0_0 = (RuleCall)cGroup_0_0.eContents().get(0);
		private final Keyword cFromKeyword_0_0_1 = (Keyword)cGroup_0_0.eContents().get(1);
		private final Group cGroup_0_1 = (Group)cAlternatives_0.eContents().get(1);
		private final Assignment cIsSufficientAssignment_0_1_0 = (Assignment)cGroup_0_1.eContents().get(0);
		private final Keyword cIsSufficientAllKeyword_0_1_0_0 = (Keyword)cIsSufficientAssignment_0_1_0.eContents().get(0);
		private final Keyword cFromKeyword_0_1_1 = (Keyword)cGroup_0_1.eContents().get(1);
		private final Assignment cOwnedRelationshipAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cOwnedRelationshipConnectorEndMemberParserRuleCall_1_0 = (RuleCall)cOwnedRelationshipAssignment_1.eContents().get(0);
		private final Keyword cToKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cOwnedRelationshipAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cOwnedRelationshipConnectorEndMemberParserRuleCall_3_0 = (RuleCall)cOwnedRelationshipAssignment_3.eContents().get(0);
		
		//fragment BinaryConnectorDeclaration returns SysML::Connector :
		//    ( FeatureDeclaration? 'from' | isSufficient ?= 'all' 'from'? )?
		//    ownedRelationship += ConnectorEndMember 'to'
		//    ownedRelationship += ConnectorEndMember
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//( FeatureDeclaration? 'from' | isSufficient ?= 'all' 'from'? )?
		//ownedRelationship += ConnectorEndMember 'to'
		//ownedRelationship += ConnectorEndMember
		public Group getGroup() { return cGroup; }
		
		//( FeatureDeclaration? 'from' | isSufficient ?= 'all' 'from'? )?
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//FeatureDeclaration? 'from'
		public Group getGroup_0_0() { return cGroup_0_0; }
		
		//FeatureDeclaration?
		public RuleCall getFeatureDeclarationParserRuleCall_0_0_0() { return cFeatureDeclarationParserRuleCall_0_0_0; }
		
		//'from'
		public Keyword getFromKeyword_0_0_1() { return cFromKeyword_0_0_1; }
		
		//isSufficient ?= 'all' 'from'?
		public Group getGroup_0_1() { return cGroup_0_1; }
		
		//isSufficient ?= 'all'
		public Assignment getIsSufficientAssignment_0_1_0() { return cIsSufficientAssignment_0_1_0; }
		
		//'all'
		public Keyword getIsSufficientAllKeyword_0_1_0_0() { return cIsSufficientAllKeyword_0_1_0_0; }
		
		//'from'?
		public Keyword getFromKeyword_0_1_1() { return cFromKeyword_0_1_1; }
		
		//ownedRelationship += ConnectorEndMember
		public Assignment getOwnedRelationshipAssignment_1() { return cOwnedRelationshipAssignment_1; }
		
		//ConnectorEndMember
		public RuleCall getOwnedRelationshipConnectorEndMemberParserRuleCall_1_0() { return cOwnedRelationshipConnectorEndMemberParserRuleCall_1_0; }
		
		//'to'
		public Keyword getToKeyword_2() { return cToKeyword_2; }
		
		//ownedRelationship += ConnectorEndMember
		public Assignment getOwnedRelationshipAssignment_3() { return cOwnedRelationshipAssignment_3; }
		
		//ConnectorEndMember
		public RuleCall getOwnedRelationshipConnectorEndMemberParserRuleCall_3_0() { return cOwnedRelationshipConnectorEndMemberParserRuleCall_3_0; }
	}
	public class NaryConnectorDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.xtext.KerML.NaryConnectorDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cFeatureDeclarationParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cOwnedRelationshipAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cOwnedRelationshipConnectorEndMemberParserRuleCall_2_0 = (RuleCall)cOwnedRelationshipAssignment_2.eContents().get(0);
		private final Keyword cCommaKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cOwnedRelationshipAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cOwnedRelationshipConnectorEndMemberParserRuleCall_4_0 = (RuleCall)cOwnedRelationshipAssignment_4.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cCommaKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cOwnedRelationshipAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cOwnedRelationshipConnectorEndMemberParserRuleCall_5_1_0 = (RuleCall)cOwnedRelationshipAssignment_5_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//fragment NaryConnectorDeclaration returns SysML::Connector :
		//    FeatureDeclaration?
		//    '(' ownedRelationship += ConnectorEndMember ','
		//        ownedRelationship += ConnectorEndMember
		//        ( ',' ownedRelationship += ConnectorEndMember )*
		//    ')'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//FeatureDeclaration?
		//'(' ownedRelationship += ConnectorEndMember ','
		//    ownedRelationship += ConnectorEndMember
		//    ( ',' ownedRelationship += ConnectorEndMember )*
		//')'
		public Group getGroup() { return cGroup; }
		
		//FeatureDeclaration?
		public RuleCall getFeatureDeclarationParserRuleCall_0() { return cFeatureDeclarationParserRuleCall_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//ownedRelationship += ConnectorEndMember
		public Assignment getOwnedRelationshipAssignment_2() { return cOwnedRelationshipAssignment_2; }
		
		//ConnectorEndMember
		public RuleCall getOwnedRelationshipConnectorEndMemberParserRuleCall_2_0() { return cOwnedRelationshipConnectorEndMemberParserRuleCall_2_0; }
		
		//','
		public Keyword getCommaKeyword_3() { return cCommaKeyword_3; }
		
		//ownedRelationship += ConnectorEndMember
		public Assignment getOwnedRelationshipAssignment_4() { return cOwnedRelationshipAssignment_4; }
		
		//ConnectorEndMember
		public RuleCall getOwnedRelationshipConnectorEndMemberParserRuleCall_4_0() { return cOwnedRelationshipConnectorEndMemberParserRuleCall_4_0; }
		
		//( ',' ownedRelationship += ConnectorEndMember )*
		public Group getGroup_5() { return cGroup_5; }
		
		//','
		public Keyword getCommaKeyword_5_0() { return cCommaKeyword_5_0; }
		
		//ownedRelationship += ConnectorEndMember
		public Assignment getOwnedRelationshipAssignment_5_1() { return cOwnedRelationshipAssignment_5_1; }
		
		//ConnectorEndMember
		public RuleCall getOwnedRelationshipConnectorEndMemberParserRuleCall_5_1_0() { return cOwnedRelationshipConnectorEndMemberParserRuleCall_5_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_6() { return cRightParenthesisKeyword_6; }
	}
	public class ConnectorEndMemberElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.xtext.KerML.ConnectorEndMember");
		private final Assignment cOwnedRelatedElementAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cOwnedRelatedElementConnectorEndParserRuleCall_0 = (RuleCall)cOwnedRelatedElementAssignment.eContents().get(0);
		
		//ConnectorEndMember returns SysML::EndFeatureMembership :
		//    ownedRelatedElement += ConnectorEnd
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//ownedRelatedElement += ConnectorEnd
		public Assignment getOwnedRelatedElementAssignment() { return cOwnedRelatedElementAssignment; }
		
		//ConnectorEnd
		public RuleCall getOwnedRelatedElementConnectorEndParserRuleCall_0() { return cOwnedRelatedElementConnectorEndParserRuleCall_0; }
	}
	public class ConnectorEndElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.xtext.KerML.ConnectorEnd");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final Assignment cDeclaredNameAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cDeclaredNameNameParserRuleCall_0_0_0 = (RuleCall)cDeclaredNameAssignment_0_0.eContents().get(0);
		private final RuleCall cReferencesKeywordParserRuleCall_0_1 = (RuleCall)cGroup_0.eContents().get(1);
		private final Assignment cOwnedRelationshipAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cOwnedRelationshipOwnedReferenceSubsettingParserRuleCall_1_0 = (RuleCall)cOwnedRelationshipAssignment_1.eContents().get(0);
		private final Assignment cOwnedRelationshipAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cOwnedRelationshipOwnedMultiplicityParserRuleCall_2_0 = (RuleCall)cOwnedRelationshipAssignment_2.eContents().get(0);
		
		//ConnectorEnd returns SysML::Feature :
		//    ( declaredName = Name ReferencesKeyword )?
		//    ownedRelationship += OwnedReferenceSubsetting
		//    ( ownedRelationship += OwnedMultiplicity )?
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//( declaredName = Name ReferencesKeyword )?
		//ownedRelationship += OwnedReferenceSubsetting
		//( ownedRelationship += OwnedMultiplicity )?
		public Group getGroup() { return cGroup; }
		
		//( declaredName = Name ReferencesKeyword )?
		public Group getGroup_0() { return cGroup_0; }
		
		//declaredName = Name
		public Assignment getDeclaredNameAssignment_0_0() { return cDeclaredNameAssignment_0_0; }
		
		//Name
		public RuleCall getDeclaredNameNameParserRuleCall_0_0_0() { return cDeclaredNameNameParserRuleCall_0_0_0; }
		
		//ReferencesKeyword
		public RuleCall getReferencesKeywordParserRuleCall_0_1() { return cReferencesKeywordParserRuleCall_0_1; }
		
		//ownedRelationship += OwnedReferenceSubsetting
		public Assignment getOwnedRelationshipAssignment_1() { return cOwnedRelationshipAssignment_1; }
		
		//OwnedReferenceSubsetting
		public RuleCall getOwnedRelationshipOwnedReferenceSubsettingParserRuleCall_1_0() { return cOwnedRelationshipOwnedReferenceSubsettingParserRuleCall_1_0; }
		
		//( ownedRelationship += OwnedMultiplicity )?
		public Assignment getOwnedRelationshipAssignment_2() { return cOwnedRelationshipAssignment_2; }
		
		//OwnedMultiplicity
		public RuleCall getOwnedRelationshipOwnedMultiplicityParserRuleCall_2_0() { return cOwnedRelationshipOwnedMultiplicityParserRuleCall_2_0; }
	}
	public class BindingConnectorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.xtext.KerML.BindingConnector");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cFeaturePrefixParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cBindingKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final RuleCall cBindingConnectorDeclarationParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final RuleCall cTypeBodyParserRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		
		///* Binding Connectors */
		//BindingConnector returns SysML::BindingConnector :
		//    FeaturePrefix 'binding'
		//    BindingConnectorDeclaration TypeBody
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//FeaturePrefix 'binding'
		//BindingConnectorDeclaration TypeBody
		public Group getGroup() { return cGroup; }
		
		//FeaturePrefix
		public RuleCall getFeaturePrefixParserRuleCall_0() { return cFeaturePrefixParserRuleCall_0; }
		
		//'binding'
		public Keyword getBindingKeyword_1() { return cBindingKeyword_1; }
		
		//BindingConnectorDeclaration
		public RuleCall getBindingConnectorDeclarationParserRuleCall_2() { return cBindingConnectorDeclarationParserRuleCall_2; }
		
		//TypeBody
		public RuleCall getTypeBodyParserRuleCall_3() { return cTypeBodyParserRuleCall_3; }
	}
	public class BindingConnectorDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.xtext.KerML.BindingConnectorDeclaration");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final RuleCall cFeatureDeclarationParserRuleCall_0_0 = (RuleCall)cGroup_0.eContents().get(0);
		private final Group cGroup_0_1 = (Group)cGroup_0.eContents().get(1);
		private final Keyword cOfKeyword_0_1_0 = (Keyword)cGroup_0_1.eContents().get(0);
		private final Assignment cOwnedRelationshipAssignment_0_1_1 = (Assignment)cGroup_0_1.eContents().get(1);
		private final RuleCall cOwnedRelationshipConnectorEndMemberParserRuleCall_0_1_1_0 = (RuleCall)cOwnedRelationshipAssignment_0_1_1.eContents().get(0);
		private final Keyword cEqualsSignKeyword_0_1_2 = (Keyword)cGroup_0_1.eContents().get(2);
		private final Assignment cOwnedRelationshipAssignment_0_1_3 = (Assignment)cGroup_0_1.eContents().get(3);
		private final RuleCall cOwnedRelationshipConnectorEndMemberParserRuleCall_0_1_3_0 = (RuleCall)cOwnedRelationshipAssignment_0_1_3.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Assignment cIsSufficientAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final Keyword cIsSufficientAllKeyword_1_0_0 = (Keyword)cIsSufficientAssignment_1_0.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cGroup_1.eContents().get(1);
		private final Keyword cOfKeyword_1_1_0 = (Keyword)cGroup_1_1.eContents().get(0);
		private final Assignment cOwnedRelationshipAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final RuleCall cOwnedRelationshipConnectorEndMemberParserRuleCall_1_1_1_0 = (RuleCall)cOwnedRelationshipAssignment_1_1_1.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1_1_2 = (Keyword)cGroup_1_1.eContents().get(2);
		private final Assignment cOwnedRelationshipAssignment_1_1_3 = (Assignment)cGroup_1_1.eContents().get(3);
		private final RuleCall cOwnedRelationshipConnectorEndMemberParserRuleCall_1_1_3_0 = (RuleCall)cOwnedRelationshipAssignment_1_1_3.eContents().get(0);
		
		//fragment BindingConnectorDeclaration returns SysML::BindingConnector :
		//      FeatureDeclaration
		//      ( 'of' ownedRelationship += ConnectorEndMember
		//        '=' ownedRelationship += ConnectorEndMember )?
		//    | ( isSufficient ?= 'all' )?
		//      ( 'of'? ownedRelationship += ConnectorEndMember
		//        '=' ownedRelationship += ConnectorEndMember )?
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//  FeatureDeclaration
		//  ( 'of' ownedRelationship += ConnectorEndMember
		//    '=' ownedRelationship += ConnectorEndMember )?
		//| ( isSufficient ?= 'all' )?
		//  ( 'of'? ownedRelationship += ConnectorEndMember
		//    '=' ownedRelationship += ConnectorEndMember )?
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//FeatureDeclaration
		//( 'of' ownedRelationship += ConnectorEndMember
		//  '=' ownedRelationship += ConnectorEndMember )?
		public Group getGroup_0() { return cGroup_0; }
		
		//FeatureDeclaration
		public RuleCall getFeatureDeclarationParserRuleCall_0_0() { return cFeatureDeclarationParserRuleCall_0_0; }
		
		//( 'of' ownedRelationship += ConnectorEndMember
		//  '=' ownedRelationship += ConnectorEndMember )?
		public Group getGroup_0_1() { return cGroup_0_1; }
		
		//'of'
		public Keyword getOfKeyword_0_1_0() { return cOfKeyword_0_1_0; }
		
		//ownedRelationship += ConnectorEndMember
		public Assignment getOwnedRelationshipAssignment_0_1_1() { return cOwnedRelationshipAssignment_0_1_1; }
		
		//ConnectorEndMember
		public RuleCall getOwnedRelationshipConnectorEndMemberParserRuleCall_0_1_1_0() { return cOwnedRelationshipConnectorEndMemberParserRuleCall_0_1_1_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_0_1_2() { return cEqualsSignKeyword_0_1_2; }
		
		//ownedRelationship += ConnectorEndMember
		public Assignment getOwnedRelationshipAssignment_0_1_3() { return cOwnedRelationshipAssignment_0_1_3; }
		
		//ConnectorEndMember
		public RuleCall getOwnedRelationshipConnectorEndMemberParserRuleCall_0_1_3_0() { return cOwnedRelationshipConnectorEndMemberParserRuleCall_0_1_3_0; }
		
		//( isSufficient ?= 'all' )?
		//     ( 'of'? ownedRelationship += ConnectorEndMember
		//       '=' ownedRelationship += ConnectorEndMember )?
		public Group getGroup_1() { return cGroup_1; }
		
		//( isSufficient ?= 'all' )?
		public Assignment getIsSufficientAssignment_1_0() { return cIsSufficientAssignment_1_0; }
		
		//'all'
		public Keyword getIsSufficientAllKeyword_1_0_0() { return cIsSufficientAllKeyword_1_0_0; }
		
		//( 'of'? ownedRelationship += ConnectorEndMember
		//  '=' ownedRelationship += ConnectorEndMember )?
		public Group getGroup_1_1() { return cGroup_1_1; }
		
		//'of'?
		public Keyword getOfKeyword_1_1_0() { return cOfKeyword_1_1_0; }
		
		//ownedRelationship += ConnectorEndMember
		public Assignment getOwnedRelationshipAssignment_1_1_1() { return cOwnedRelationshipAssignment_1_1_1; }
		
		//ConnectorEndMember
		public RuleCall getOwnedRelationshipConnectorEndMemberParserRuleCall_1_1_1_0() { return cOwnedRelationshipConnectorEndMemberParserRuleCall_1_1_1_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_1_1_2() { return cEqualsSignKeyword_1_1_2; }
		
		//ownedRelationship += ConnectorEndMember
		public Assignment getOwnedRelationshipAssignment_1_1_3() { return cOwnedRelationshipAssignment_1_1_3; }
		
		//ConnectorEndMember
		public RuleCall getOwnedRelationshipConnectorEndMemberParserRuleCall_1_1_3_0() { return cOwnedRelationshipConnectorEndMemberParserRuleCall_1_1_3_0; }
	}
	public class SuccessionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.xtext.KerML.Succession");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cFeaturePrefixParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cSuccessionKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final RuleCall cSuccessionDeclarationParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final RuleCall cTypeBodyParserRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		
		///* Successions */
		//Succession returns SysML::Succession :
		//    FeaturePrefix 'succession'
		//    SuccessionDeclaration TypeBody
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//FeaturePrefix 'succession'
		//SuccessionDeclaration TypeBody
		public Group getGroup() { return cGroup; }
		
		//FeaturePrefix
		public RuleCall getFeaturePrefixParserRuleCall_0() { return cFeaturePrefixParserRuleCall_0; }
		
		//'succession'
		public Keyword getSuccessionKeyword_1() { return cSuccessionKeyword_1; }
		
		//SuccessionDeclaration
		public RuleCall getSuccessionDeclarationParserRuleCall_2() { return cSuccessionDeclarationParserRuleCall_2; }
		
		//TypeBody
		public RuleCall getTypeBodyParserRuleCall_3() { return cTypeBodyParserRuleCall_3; }
	}
	public class SuccessionDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.xtext.KerML.SuccessionDeclaration");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final RuleCall cFeatureDeclarationParserRuleCall_0_0 = (RuleCall)cGroup_0.eContents().get(0);
		private final Group cGroup_0_1 = (Group)cGroup_0.eContents().get(1);
		private final Keyword cFirstKeyword_0_1_0 = (Keyword)cGroup_0_1.eContents().get(0);
		private final Assignment cOwnedRelationshipAssignment_0_1_1 = (Assignment)cGroup_0_1.eContents().get(1);
		private final RuleCall cOwnedRelationshipConnectorEndMemberParserRuleCall_0_1_1_0 = (RuleCall)cOwnedRelationshipAssignment_0_1_1.eContents().get(0);
		private final Keyword cThenKeyword_0_1_2 = (Keyword)cGroup_0_1.eContents().get(2);
		private final Assignment cOwnedRelationshipAssignment_0_1_3 = (Assignment)cGroup_0_1.eContents().get(3);
		private final RuleCall cOwnedRelationshipConnectorEndMemberParserRuleCall_0_1_3_0 = (RuleCall)cOwnedRelationshipAssignment_0_1_3.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Assignment cIsSufficientAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final Keyword cIsSufficientAllKeyword_1_0_0 = (Keyword)cIsSufficientAssignment_1_0.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cGroup_1.eContents().get(1);
		private final Keyword cFirstKeyword_1_1_0 = (Keyword)cGroup_1_1.eContents().get(0);
		private final Assignment cOwnedRelationshipAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final RuleCall cOwnedRelationshipConnectorEndMemberParserRuleCall_1_1_1_0 = (RuleCall)cOwnedRelationshipAssignment_1_1_1.eContents().get(0);
		private final Keyword cThenKeyword_1_1_2 = (Keyword)cGroup_1_1.eContents().get(2);
		private final Assignment cOwnedRelationshipAssignment_1_1_3 = (Assignment)cGroup_1_1.eContents().get(3);
		private final RuleCall cOwnedRelationshipConnectorEndMemberParserRuleCall_1_1_3_0 = (RuleCall)cOwnedRelationshipAssignment_1_1_3.eContents().get(0);
		
		//fragment SuccessionDeclaration returns SysML::Succession :
		//      FeatureDeclaration
		//      ( 'first' ownedRelationship += ConnectorEndMember
		//        'then' ownedRelationship += ConnectorEndMember )?
		//    | ( isSufficient ?= 'all' )?
		//      ( 'first'? ownedRelationship += ConnectorEndMember
		//        'then' ownedRelationship += ConnectorEndMember )?
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//  FeatureDeclaration
		//  ( 'first' ownedRelationship += ConnectorEndMember
		//    'then' ownedRelationship += ConnectorEndMember )?
		//| ( isSufficient ?= 'all' )?
		//  ( 'first'? ownedRelationship += ConnectorEndMember
		//    'then' ownedRelationship += ConnectorEndMember )?
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//FeatureDeclaration
		//( 'first' ownedRelationship += ConnectorEndMember
		//  'then' ownedRelationship += ConnectorEndMember )?
		public Group getGroup_0() { return cGroup_0; }
		
		//FeatureDeclaration
		public RuleCall getFeatureDeclarationParserRuleCall_0_0() { return cFeatureDeclarationParserRuleCall_0_0; }
		
		//( 'first' ownedRelationship += ConnectorEndMember
		//  'then' ownedRelationship += ConnectorEndMember )?
		public Group getGroup_0_1() { return cGroup_0_1; }
		
		//'first'
		public Keyword getFirstKeyword_0_1_0() { return cFirstKeyword_0_1_0; }
		
		//ownedRelationship += ConnectorEndMember
		public Assignment getOwnedRelationshipAssignment_0_1_1() { return cOwnedRelationshipAssignment_0_1_1; }
		
		//ConnectorEndMember
		public RuleCall getOwnedRelationshipConnectorEndMemberParserRuleCall_0_1_1_0() { return cOwnedRelationshipConnectorEndMemberParserRuleCall_0_1_1_0; }
		
		//'then'
		public Keyword getThenKeyword_0_1_2() { return cThenKeyword_0_1_2; }
		
		//ownedRelationship += ConnectorEndMember
		public Assignment getOwnedRelationshipAssignment_0_1_3() { return cOwnedRelationshipAssignment_0_1_3; }
		
		//ConnectorEndMember
		public RuleCall getOwnedRelationshipConnectorEndMemberParserRuleCall_0_1_3_0() { return cOwnedRelationshipConnectorEndMemberParserRuleCall_0_1_3_0; }
		
		//( isSufficient ?= 'all' )?
		//     ( 'first'? ownedRelationship += ConnectorEndMember
		//       'then' ownedRelationship += ConnectorEndMember )?
		public Group getGroup_1() { return cGroup_1; }
		
		//( isSufficient ?= 'all' )?
		public Assignment getIsSufficientAssignment_1_0() { return cIsSufficientAssignment_1_0; }
		
		//'all'
		public Keyword getIsSufficientAllKeyword_1_0_0() { return cIsSufficientAllKeyword_1_0_0; }
		
		//( 'first'? ownedRelationship += ConnectorEndMember
		//  'then' ownedRelationship += ConnectorEndMember )?
		public Group getGroup_1_1() { return cGroup_1_1; }
		
		//'first'?
		public Keyword getFirstKeyword_1_1_0() { return cFirstKeyword_1_1_0; }
		
		//ownedRelationship += ConnectorEndMember
		public Assignment getOwnedRelationshipAssignment_1_1_1() { return cOwnedRelationshipAssignment_1_1_1; }
		
		//ConnectorEndMember
		public RuleCall getOwnedRelationshipConnectorEndMemberParserRuleCall_1_1_1_0() { return cOwnedRelationshipConnectorEndMemberParserRuleCall_1_1_1_0; }
		
		//'then'
		public Keyword getThenKeyword_1_1_2() { return cThenKeyword_1_1_2; }
		
		//ownedRelationship += ConnectorEndMember
		public Assignment getOwnedRelationshipAssignment_1_1_3() { return cOwnedRelationshipAssignment_1_1_3; }
		
		//ConnectorEndMember
		public RuleCall getOwnedRelationshipConnectorEndMemberParserRuleCall_1_1_3_0() { return cOwnedRelationshipConnectorEndMemberParserRuleCall_1_1_3_0; }
	}
	public class BehaviorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.xtext.KerML.Behavior");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cTypePrefixParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cBehaviorKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final RuleCall cClassifierDeclarationParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final RuleCall cTypeBodyParserRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		
		///* BEHAVIORS */
		///* Behaviors */
		//Behavior returns SysML::Behavior :
		//    TypePrefix 'behavior'
		//    ClassifierDeclaration TypeBody
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//TypePrefix 'behavior'
		//ClassifierDeclaration TypeBody
		public Group getGroup() { return cGroup; }
		
		//TypePrefix
		public RuleCall getTypePrefixParserRuleCall_0() { return cTypePrefixParserRuleCall_0; }
		
		//'behavior'
		public Keyword getBehaviorKeyword_1() { return cBehaviorKeyword_1; }
		
		//ClassifierDeclaration
		public RuleCall getClassifierDeclarationParserRuleCall_2() { return cClassifierDeclarationParserRuleCall_2; }
		
		//TypeBody
		public RuleCall getTypeBodyParserRuleCall_3() { return cTypeBodyParserRuleCall_3; }
	}
	public class StepElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.xtext.KerML.Step");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cFeaturePrefixParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cStepKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final RuleCall cStepDeclarationParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final RuleCall cTypeBodyParserRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		
		///* Steps */
		//Step returns SysML::Step :
		//    FeaturePrefix 'step'
		//    StepDeclaration TypeBody
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//FeaturePrefix 'step'
		//StepDeclaration TypeBody
		public Group getGroup() { return cGroup; }
		
		//FeaturePrefix
		public RuleCall getFeaturePrefixParserRuleCall_0() { return cFeaturePrefixParserRuleCall_0; }
		
		//'step'
		public Keyword getStepKeyword_1() { return cStepKeyword_1; }
		
		//StepDeclaration
		public RuleCall getStepDeclarationParserRuleCall_2() { return cStepDeclarationParserRuleCall_2; }
		
		//TypeBody
		public RuleCall getTypeBodyParserRuleCall_3() { return cTypeBodyParserRuleCall_3; }
	}
	public class StepDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.xtext.KerML.StepDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cFeatureDeclarationParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final RuleCall cValuePartParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//fragment StepDeclaration returns SysML::Step :
		//    FeatureDeclaration? ValuePart?
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//FeatureDeclaration? ValuePart?
		public Group getGroup() { return cGroup; }
		
		//FeatureDeclaration?
		public RuleCall getFeatureDeclarationParserRuleCall_0() { return cFeatureDeclarationParserRuleCall_0; }
		
		//ValuePart?
		public RuleCall getValuePartParserRuleCall_1() { return cValuePartParserRuleCall_1; }
	}
	public class FunctionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.xtext.KerML.Function");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cTypePrefixParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cFunctionKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final RuleCall cClassifierDeclarationParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final RuleCall cFunctionBodyParserRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		
		///* FUNCTIONS */
		///* Functions */
		//Function returns SysML::Function :
		//    TypePrefix 'function'
		//    ClassifierDeclaration FunctionBody
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//TypePrefix 'function'
		//ClassifierDeclaration FunctionBody
		public Group getGroup() { return cGroup; }
		
		//TypePrefix
		public RuleCall getTypePrefixParserRuleCall_0() { return cTypePrefixParserRuleCall_0; }
		
		//'function'
		public Keyword getFunctionKeyword_1() { return cFunctionKeyword_1; }
		
		//ClassifierDeclaration
		public RuleCall getClassifierDeclarationParserRuleCall_2() { return cClassifierDeclarationParserRuleCall_2; }
		
		//FunctionBody
		public RuleCall getFunctionBodyParserRuleCall_3() { return cFunctionBodyParserRuleCall_3; }
	}
	public class FunctionBodyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.xtext.KerML.FunctionBody");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cSemicolonKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cFunctionBodyPartParserRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		private final Keyword cRightCurlyBracketKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		
		//fragment FunctionBody returns SysML::Type :
		//    ';' | '{' FunctionBodyPart '}'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//';' | '{' FunctionBodyPart '}'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//';'
		public Keyword getSemicolonKeyword_0() { return cSemicolonKeyword_0; }
		
		//'{' FunctionBodyPart '}'
		public Group getGroup_1() { return cGroup_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1_0() { return cLeftCurlyBracketKeyword_1_0; }
		
		//FunctionBodyPart
		public RuleCall getFunctionBodyPartParserRuleCall_1_1() { return cFunctionBodyPartParserRuleCall_1_1; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_1_2() { return cRightCurlyBracketKeyword_1_2; }
	}
	public class FunctionBodyPartElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.xtext.KerML.FunctionBodyPart");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Assignment cOwnedRelationshipAssignment_0_0 = (Assignment)cAlternatives_0.eContents().get(0);
		private final RuleCall cOwnedRelationshipNonFeatureMemberParserRuleCall_0_0_0 = (RuleCall)cOwnedRelationshipAssignment_0_0.eContents().get(0);
		private final Assignment cOwnedRelationshipAssignment_0_1 = (Assignment)cAlternatives_0.eContents().get(1);
		private final RuleCall cOwnedRelationshipFeatureMemberParserRuleCall_0_1_0 = (RuleCall)cOwnedRelationshipAssignment_0_1.eContents().get(0);
		private final Assignment cOwnedRelationshipAssignment_0_2 = (Assignment)cAlternatives_0.eContents().get(2);
		private final RuleCall cOwnedRelationshipAliasMemberParserRuleCall_0_2_0 = (RuleCall)cOwnedRelationshipAssignment_0_2.eContents().get(0);
		private final Assignment cOwnedRelationshipAssignment_0_3 = (Assignment)cAlternatives_0.eContents().get(3);
		private final RuleCall cOwnedRelationshipImportParserRuleCall_0_3_0 = (RuleCall)cOwnedRelationshipAssignment_0_3.eContents().get(0);
		private final Assignment cOwnedRelationshipAssignment_0_4 = (Assignment)cAlternatives_0.eContents().get(4);
		private final RuleCall cOwnedRelationshipReturnFeatureMemberParserRuleCall_0_4_0 = (RuleCall)cOwnedRelationshipAssignment_0_4.eContents().get(0);
		private final Assignment cOwnedRelationshipAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cOwnedRelationshipResultExpressionMemberParserRuleCall_1_0 = (RuleCall)cOwnedRelationshipAssignment_1.eContents().get(0);
		
		//fragment FunctionBodyPart returns SysML::Type :
		//    ( ownedRelationship += NonFeatureMember
		//    | ownedRelationship += FeatureMember
		//    | ownedRelationship += AliasMember
		//    | ownedRelationship += Import
		//    | ownedRelationship += ReturnFeatureMember
		//    )*
		//    ( ownedRelationship += ResultExpressionMember )?
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//( ownedRelationship += NonFeatureMember
		//| ownedRelationship += FeatureMember
		//| ownedRelationship += AliasMember
		//| ownedRelationship += Import
		//| ownedRelationship += ReturnFeatureMember
		//)*
		//( ownedRelationship += ResultExpressionMember )?
		public Group getGroup() { return cGroup; }
		
		//( ownedRelationship += NonFeatureMember
		//| ownedRelationship += FeatureMember
		//| ownedRelationship += AliasMember
		//| ownedRelationship += Import
		//| ownedRelationship += ReturnFeatureMember
		//)*
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//ownedRelationship += NonFeatureMember
		public Assignment getOwnedRelationshipAssignment_0_0() { return cOwnedRelationshipAssignment_0_0; }
		
		//NonFeatureMember
		public RuleCall getOwnedRelationshipNonFeatureMemberParserRuleCall_0_0_0() { return cOwnedRelationshipNonFeatureMemberParserRuleCall_0_0_0; }
		
		//ownedRelationship += FeatureMember
		public Assignment getOwnedRelationshipAssignment_0_1() { return cOwnedRelationshipAssignment_0_1; }
		
		//FeatureMember
		public RuleCall getOwnedRelationshipFeatureMemberParserRuleCall_0_1_0() { return cOwnedRelationshipFeatureMemberParserRuleCall_0_1_0; }
		
		//ownedRelationship += AliasMember
		public Assignment getOwnedRelationshipAssignment_0_2() { return cOwnedRelationshipAssignment_0_2; }
		
		//AliasMember
		public RuleCall getOwnedRelationshipAliasMemberParserRuleCall_0_2_0() { return cOwnedRelationshipAliasMemberParserRuleCall_0_2_0; }
		
		//ownedRelationship += Import
		public Assignment getOwnedRelationshipAssignment_0_3() { return cOwnedRelationshipAssignment_0_3; }
		
		//Import
		public RuleCall getOwnedRelationshipImportParserRuleCall_0_3_0() { return cOwnedRelationshipImportParserRuleCall_0_3_0; }
		
		//ownedRelationship += ReturnFeatureMember
		public Assignment getOwnedRelationshipAssignment_0_4() { return cOwnedRelationshipAssignment_0_4; }
		
		//ReturnFeatureMember
		public RuleCall getOwnedRelationshipReturnFeatureMemberParserRuleCall_0_4_0() { return cOwnedRelationshipReturnFeatureMemberParserRuleCall_0_4_0; }
		
		//( ownedRelationship += ResultExpressionMember )?
		public Assignment getOwnedRelationshipAssignment_1() { return cOwnedRelationshipAssignment_1; }
		
		//ResultExpressionMember
		public RuleCall getOwnedRelationshipResultExpressionMemberParserRuleCall_1_0() { return cOwnedRelationshipResultExpressionMemberParserRuleCall_1_0; }
	}
	public class ReturnFeatureMemberElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.xtext.KerML.ReturnFeatureMember");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cMemberPrefixParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cReturnKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cOwnedRelatedElementAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cOwnedRelatedElementFeatureElementParserRuleCall_2_0 = (RuleCall)cOwnedRelatedElementAssignment_2.eContents().get(0);
		
		//ReturnFeatureMember returns SysML::ReturnParameterMembership :
		//    MemberPrefix 'return'
		//    ownedRelatedElement += FeatureElement
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//MemberPrefix 'return'
		//ownedRelatedElement += FeatureElement
		public Group getGroup() { return cGroup; }
		
		//MemberPrefix
		public RuleCall getMemberPrefixParserRuleCall_0() { return cMemberPrefixParserRuleCall_0; }
		
		//'return'
		public Keyword getReturnKeyword_1() { return cReturnKeyword_1; }
		
		//ownedRelatedElement += FeatureElement
		public Assignment getOwnedRelatedElementAssignment_2() { return cOwnedRelatedElementAssignment_2; }
		
		//FeatureElement
		public RuleCall getOwnedRelatedElementFeatureElementParserRuleCall_2_0() { return cOwnedRelatedElementFeatureElementParserRuleCall_2_0; }
	}
	public class ResultExpressionMemberElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.xtext.KerML.ResultExpressionMember");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cMemberPrefixParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Assignment cOwnedRelatedElementAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cOwnedRelatedElementOwnedExpressionParserRuleCall_1_0 = (RuleCall)cOwnedRelatedElementAssignment_1.eContents().get(0);
		
		//@Override
		//ResultExpressionMember returns SysML::ResultExpressionMembership :
		//    MemberPrefix ownedRelatedElement += OwnedExpression
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//MemberPrefix ownedRelatedElement += OwnedExpression
		public Group getGroup() { return cGroup; }
		
		//MemberPrefix
		public RuleCall getMemberPrefixParserRuleCall_0() { return cMemberPrefixParserRuleCall_0; }
		
		//ownedRelatedElement += OwnedExpression
		public Assignment getOwnedRelatedElementAssignment_1() { return cOwnedRelatedElementAssignment_1; }
		
		//OwnedExpression
		public RuleCall getOwnedRelatedElementOwnedExpressionParserRuleCall_1_0() { return cOwnedRelatedElementOwnedExpressionParserRuleCall_1_0; }
	}
	public class ExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.xtext.KerML.Expression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cFeaturePrefixParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cExprKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final RuleCall cExpressionDeclarationParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final RuleCall cFunctionBodyParserRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		
		///* Expressions */
		//Expression returns SysML::Expression :
		//    FeaturePrefix 'expr'
		//    ExpressionDeclaration FunctionBody
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//FeaturePrefix 'expr'
		//ExpressionDeclaration FunctionBody
		public Group getGroup() { return cGroup; }
		
		//FeaturePrefix
		public RuleCall getFeaturePrefixParserRuleCall_0() { return cFeaturePrefixParserRuleCall_0; }
		
		//'expr'
		public Keyword getExprKeyword_1() { return cExprKeyword_1; }
		
		//ExpressionDeclaration
		public RuleCall getExpressionDeclarationParserRuleCall_2() { return cExpressionDeclarationParserRuleCall_2; }
		
		//FunctionBody
		public RuleCall getFunctionBodyParserRuleCall_3() { return cFunctionBodyParserRuleCall_3; }
	}
	public class ExpressionDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.xtext.KerML.ExpressionDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cFeatureDeclarationParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final RuleCall cValuePartParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//fragment ExpressionDeclaration returns SysML::Expression :
		//    FeatureDeclaration? ValuePart?
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//FeatureDeclaration? ValuePart?
		public Group getGroup() { return cGroup; }
		
		//FeatureDeclaration?
		public RuleCall getFeatureDeclarationParserRuleCall_0() { return cFeatureDeclarationParserRuleCall_0; }
		
		//ValuePart?
		public RuleCall getValuePartParserRuleCall_1() { return cValuePartParserRuleCall_1; }
	}
	public class PredicateElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.xtext.KerML.Predicate");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cTypePrefixParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cPredicateKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final RuleCall cClassifierDeclarationParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final RuleCall cFunctionBodyParserRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		
		///* Predicates */
		//Predicate returns SysML::Predicate :
		//    TypePrefix 'predicate'
		//    ClassifierDeclaration FunctionBody
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//TypePrefix 'predicate'
		//ClassifierDeclaration FunctionBody
		public Group getGroup() { return cGroup; }
		
		//TypePrefix
		public RuleCall getTypePrefixParserRuleCall_0() { return cTypePrefixParserRuleCall_0; }
		
		//'predicate'
		public Keyword getPredicateKeyword_1() { return cPredicateKeyword_1; }
		
		//ClassifierDeclaration
		public RuleCall getClassifierDeclarationParserRuleCall_2() { return cClassifierDeclarationParserRuleCall_2; }
		
		//FunctionBody
		public RuleCall getFunctionBodyParserRuleCall_3() { return cFunctionBodyParserRuleCall_3; }
	}
	public class BooleanExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.xtext.KerML.BooleanExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cFeaturePrefixParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cBoolKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final RuleCall cExpressionDeclarationParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final RuleCall cFunctionBodyParserRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		
		///* Boolean Expressions */
		//BooleanExpression returns SysML::BooleanExpression :
		//    FeaturePrefix 'bool'
		//    ExpressionDeclaration FunctionBody
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//FeaturePrefix 'bool'
		//ExpressionDeclaration FunctionBody
		public Group getGroup() { return cGroup; }
		
		//FeaturePrefix
		public RuleCall getFeaturePrefixParserRuleCall_0() { return cFeaturePrefixParserRuleCall_0; }
		
		//'bool'
		public Keyword getBoolKeyword_1() { return cBoolKeyword_1; }
		
		//ExpressionDeclaration
		public RuleCall getExpressionDeclarationParserRuleCall_2() { return cExpressionDeclarationParserRuleCall_2; }
		
		//FunctionBody
		public RuleCall getFunctionBodyParserRuleCall_3() { return cFunctionBodyParserRuleCall_3; }
	}
	public class InvariantElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.xtext.KerML.Invariant");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cFeaturePrefixParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cInvKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Keyword cTrueKeyword_2_0 = (Keyword)cAlternatives_2.eContents().get(0);
		private final Assignment cIsNegatedAssignment_2_1 = (Assignment)cAlternatives_2.eContents().get(1);
		private final Keyword cIsNegatedFalseKeyword_2_1_0 = (Keyword)cIsNegatedAssignment_2_1.eContents().get(0);
		private final RuleCall cExpressionDeclarationParserRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		private final RuleCall cFunctionBodyParserRuleCall_4 = (RuleCall)cGroup.eContents().get(4);
		
		///* Invariants */
		//Invariant returns SysML::Invariant :
		//    FeaturePrefix 'inv' ( 'true' | isNegated ?= 'false' )?
		//    ExpressionDeclaration FunctionBody
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//FeaturePrefix 'inv' ( 'true' | isNegated ?= 'false' )?
		//ExpressionDeclaration FunctionBody
		public Group getGroup() { return cGroup; }
		
		//FeaturePrefix
		public RuleCall getFeaturePrefixParserRuleCall_0() { return cFeaturePrefixParserRuleCall_0; }
		
		//'inv'
		public Keyword getInvKeyword_1() { return cInvKeyword_1; }
		
		//( 'true' | isNegated ?= 'false' )?
		public Alternatives getAlternatives_2() { return cAlternatives_2; }
		
		//'true'
		public Keyword getTrueKeyword_2_0() { return cTrueKeyword_2_0; }
		
		//isNegated ?= 'false'
		public Assignment getIsNegatedAssignment_2_1() { return cIsNegatedAssignment_2_1; }
		
		//'false'
		public Keyword getIsNegatedFalseKeyword_2_1_0() { return cIsNegatedFalseKeyword_2_1_0; }
		
		//ExpressionDeclaration
		public RuleCall getExpressionDeclarationParserRuleCall_3() { return cExpressionDeclarationParserRuleCall_3; }
		
		//FunctionBody
		public RuleCall getFunctionBodyParserRuleCall_4() { return cFunctionBodyParserRuleCall_4; }
	}
	public class InteractionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.xtext.KerML.Interaction");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cTypePrefixParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cInteractionKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final RuleCall cClassifierDeclarationParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final RuleCall cTypeBodyParserRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		
		///* INTERACTIONS */
		///* Interactions */
		//Interaction returns SysML::Interaction :
		//    TypePrefix 'interaction'
		//    ClassifierDeclaration TypeBody
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//TypePrefix 'interaction'
		//ClassifierDeclaration TypeBody
		public Group getGroup() { return cGroup; }
		
		//TypePrefix
		public RuleCall getTypePrefixParserRuleCall_0() { return cTypePrefixParserRuleCall_0; }
		
		//'interaction'
		public Keyword getInteractionKeyword_1() { return cInteractionKeyword_1; }
		
		//ClassifierDeclaration
		public RuleCall getClassifierDeclarationParserRuleCall_2() { return cClassifierDeclarationParserRuleCall_2; }
		
		//TypeBody
		public RuleCall getTypeBodyParserRuleCall_3() { return cTypeBodyParserRuleCall_3; }
	}
	public class ItemFlowElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.xtext.KerML.ItemFlow");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cFeaturePrefixParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cFlowKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final RuleCall cItemFlowDeclarationParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final RuleCall cTypeBodyParserRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		
		///* Item Flows */
		//ItemFlow returns SysML::ItemFlow :
		//    FeaturePrefix 'flow'
		//    ItemFlowDeclaration TypeBody
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//FeaturePrefix 'flow'
		//ItemFlowDeclaration TypeBody
		public Group getGroup() { return cGroup; }
		
		//FeaturePrefix
		public RuleCall getFeaturePrefixParserRuleCall_0() { return cFeaturePrefixParserRuleCall_0; }
		
		//'flow'
		public Keyword getFlowKeyword_1() { return cFlowKeyword_1; }
		
		//ItemFlowDeclaration
		public RuleCall getItemFlowDeclarationParserRuleCall_2() { return cItemFlowDeclarationParserRuleCall_2; }
		
		//TypeBody
		public RuleCall getTypeBodyParserRuleCall_3() { return cTypeBodyParserRuleCall_3; }
	}
	public class SuccessionItemFlowElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.xtext.KerML.SuccessionItemFlow");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cFeaturePrefixParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cSuccessionKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cFlowKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final RuleCall cItemFlowDeclarationParserRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		private final RuleCall cTypeBodyParserRuleCall_4 = (RuleCall)cGroup.eContents().get(4);
		
		//SuccessionItemFlow returns SysML::SuccessionItemFlow :
		//    FeaturePrefix 'succession' 'flow' ItemFlowDeclaration TypeBody
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//FeaturePrefix 'succession' 'flow' ItemFlowDeclaration TypeBody
		public Group getGroup() { return cGroup; }
		
		//FeaturePrefix
		public RuleCall getFeaturePrefixParserRuleCall_0() { return cFeaturePrefixParserRuleCall_0; }
		
		//'succession'
		public Keyword getSuccessionKeyword_1() { return cSuccessionKeyword_1; }
		
		//'flow'
		public Keyword getFlowKeyword_2() { return cFlowKeyword_2; }
		
		//ItemFlowDeclaration
		public RuleCall getItemFlowDeclarationParserRuleCall_3() { return cItemFlowDeclarationParserRuleCall_3; }
		
		//TypeBody
		public RuleCall getTypeBodyParserRuleCall_4() { return cTypeBodyParserRuleCall_4; }
	}
	public class ItemFlowDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.xtext.KerML.ItemFlowDeclaration");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final RuleCall cFeatureDeclarationParserRuleCall_0_0 = (RuleCall)cGroup_0.eContents().get(0);
		private final RuleCall cValuePartParserRuleCall_0_1 = (RuleCall)cGroup_0.eContents().get(1);
		private final Group cGroup_0_2 = (Group)cGroup_0.eContents().get(2);
		private final Keyword cOfKeyword_0_2_0 = (Keyword)cGroup_0_2.eContents().get(0);
		private final Assignment cOwnedRelationshipAssignment_0_2_1 = (Assignment)cGroup_0_2.eContents().get(1);
		private final RuleCall cOwnedRelationshipItemFeatureMemberParserRuleCall_0_2_1_0 = (RuleCall)cOwnedRelationshipAssignment_0_2_1.eContents().get(0);
		private final Group cGroup_0_3 = (Group)cGroup_0.eContents().get(3);
		private final Keyword cFromKeyword_0_3_0 = (Keyword)cGroup_0_3.eContents().get(0);
		private final Assignment cOwnedRelationshipAssignment_0_3_1 = (Assignment)cGroup_0_3.eContents().get(1);
		private final RuleCall cOwnedRelationshipItemFlowEndMemberParserRuleCall_0_3_1_0 = (RuleCall)cOwnedRelationshipAssignment_0_3_1.eContents().get(0);
		private final Keyword cToKeyword_0_3_2 = (Keyword)cGroup_0_3.eContents().get(2);
		private final Assignment cOwnedRelationshipAssignment_0_3_3 = (Assignment)cGroup_0_3.eContents().get(3);
		private final RuleCall cOwnedRelationshipItemFlowEndMemberParserRuleCall_0_3_3_0 = (RuleCall)cOwnedRelationshipAssignment_0_3_3.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Assignment cIsSufficientAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final Keyword cIsSufficientAllKeyword_1_0_0 = (Keyword)cIsSufficientAssignment_1_0.eContents().get(0);
		private final Assignment cOwnedRelationshipAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cOwnedRelationshipItemFlowEndMemberParserRuleCall_1_1_0 = (RuleCall)cOwnedRelationshipAssignment_1_1.eContents().get(0);
		private final Keyword cToKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final Assignment cOwnedRelationshipAssignment_1_3 = (Assignment)cGroup_1.eContents().get(3);
		private final RuleCall cOwnedRelationshipItemFlowEndMemberParserRuleCall_1_3_0 = (RuleCall)cOwnedRelationshipAssignment_1_3.eContents().get(0);
		
		//fragment ItemFlowDeclaration returns SysML::ItemFlow :
		//      FeatureDeclaration? ValuePart?
		//      ( 'of'  ownedRelationship += ItemFeatureMember )?
		//      ( 'from' ownedRelationship += ItemFlowEndMember
		//        'to' ownedRelationship += ItemFlowEndMember )?
		//    | ( isSufficient ?= 'all' )?
		//      ownedRelationship += ItemFlowEndMember 'to'
		//      ownedRelationship += ItemFlowEndMember
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//  FeatureDeclaration? ValuePart?
		//  ( 'of'  ownedRelationship += ItemFeatureMember )?
		//  ( 'from' ownedRelationship += ItemFlowEndMember
		//    'to' ownedRelationship += ItemFlowEndMember )?
		//| ( isSufficient ?= 'all' )?
		//  ownedRelationship += ItemFlowEndMember 'to'
		//  ownedRelationship += ItemFlowEndMember
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//FeatureDeclaration? ValuePart?
		//( 'of'  ownedRelationship += ItemFeatureMember )?
		//( 'from' ownedRelationship += ItemFlowEndMember
		//  'to' ownedRelationship += ItemFlowEndMember )?
		public Group getGroup_0() { return cGroup_0; }
		
		//FeatureDeclaration?
		public RuleCall getFeatureDeclarationParserRuleCall_0_0() { return cFeatureDeclarationParserRuleCall_0_0; }
		
		//ValuePart?
		public RuleCall getValuePartParserRuleCall_0_1() { return cValuePartParserRuleCall_0_1; }
		
		//( 'of'  ownedRelationship += ItemFeatureMember )?
		public Group getGroup_0_2() { return cGroup_0_2; }
		
		//'of'
		public Keyword getOfKeyword_0_2_0() { return cOfKeyword_0_2_0; }
		
		//ownedRelationship += ItemFeatureMember
		public Assignment getOwnedRelationshipAssignment_0_2_1() { return cOwnedRelationshipAssignment_0_2_1; }
		
		//ItemFeatureMember
		public RuleCall getOwnedRelationshipItemFeatureMemberParserRuleCall_0_2_1_0() { return cOwnedRelationshipItemFeatureMemberParserRuleCall_0_2_1_0; }
		
		//( 'from' ownedRelationship += ItemFlowEndMember
		//  'to' ownedRelationship += ItemFlowEndMember )?
		public Group getGroup_0_3() { return cGroup_0_3; }
		
		//'from'
		public Keyword getFromKeyword_0_3_0() { return cFromKeyword_0_3_0; }
		
		//ownedRelationship += ItemFlowEndMember
		public Assignment getOwnedRelationshipAssignment_0_3_1() { return cOwnedRelationshipAssignment_0_3_1; }
		
		//ItemFlowEndMember
		public RuleCall getOwnedRelationshipItemFlowEndMemberParserRuleCall_0_3_1_0() { return cOwnedRelationshipItemFlowEndMemberParserRuleCall_0_3_1_0; }
		
		//'to'
		public Keyword getToKeyword_0_3_2() { return cToKeyword_0_3_2; }
		
		//ownedRelationship += ItemFlowEndMember
		public Assignment getOwnedRelationshipAssignment_0_3_3() { return cOwnedRelationshipAssignment_0_3_3; }
		
		//ItemFlowEndMember
		public RuleCall getOwnedRelationshipItemFlowEndMemberParserRuleCall_0_3_3_0() { return cOwnedRelationshipItemFlowEndMemberParserRuleCall_0_3_3_0; }
		
		//( isSufficient ?= 'all' )?
		//     ownedRelationship += ItemFlowEndMember 'to'
		//     ownedRelationship += ItemFlowEndMember
		public Group getGroup_1() { return cGroup_1; }
		
		//( isSufficient ?= 'all' )?
		public Assignment getIsSufficientAssignment_1_0() { return cIsSufficientAssignment_1_0; }
		
		//'all'
		public Keyword getIsSufficientAllKeyword_1_0_0() { return cIsSufficientAllKeyword_1_0_0; }
		
		//ownedRelationship += ItemFlowEndMember
		public Assignment getOwnedRelationshipAssignment_1_1() { return cOwnedRelationshipAssignment_1_1; }
		
		//ItemFlowEndMember
		public RuleCall getOwnedRelationshipItemFlowEndMemberParserRuleCall_1_1_0() { return cOwnedRelationshipItemFlowEndMemberParserRuleCall_1_1_0; }
		
		//'to'
		public Keyword getToKeyword_1_2() { return cToKeyword_1_2; }
		
		//ownedRelationship += ItemFlowEndMember
		public Assignment getOwnedRelationshipAssignment_1_3() { return cOwnedRelationshipAssignment_1_3; }
		
		//ItemFlowEndMember
		public RuleCall getOwnedRelationshipItemFlowEndMemberParserRuleCall_1_3_0() { return cOwnedRelationshipItemFlowEndMemberParserRuleCall_1_3_0; }
	}
	public class ItemFeatureMemberElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.xtext.KerML.ItemFeatureMember");
		private final Assignment cOwnedRelatedElementAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cOwnedRelatedElementItemFeatureParserRuleCall_0 = (RuleCall)cOwnedRelatedElementAssignment.eContents().get(0);
		
		//ItemFeatureMember returns SysML::FeatureMembership :
		//    ownedRelatedElement += ItemFeature
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//ownedRelatedElement += ItemFeature
		public Assignment getOwnedRelatedElementAssignment() { return cOwnedRelatedElementAssignment; }
		
		//ItemFeature
		public RuleCall getOwnedRelatedElementItemFeatureParserRuleCall_0() { return cOwnedRelatedElementItemFeatureParserRuleCall_0; }
	}
	public class ItemFeatureElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.xtext.KerML.ItemFeature");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final RuleCall cIdentificationParserRuleCall_0_0 = (RuleCall)cGroup_0.eContents().get(0);
		private final RuleCall cItemFeatureSpecializationPartParserRuleCall_0_1 = (RuleCall)cGroup_0.eContents().get(1);
		private final RuleCall cValuePartParserRuleCall_0_2 = (RuleCall)cGroup_0.eContents().get(2);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final RuleCall cIdentificationParserRuleCall_1_0 = (RuleCall)cGroup_1.eContents().get(0);
		private final RuleCall cValuePartParserRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Assignment cOwnedRelationshipAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cOwnedRelationshipOwnedFeatureTypingParserRuleCall_2_0_0 = (RuleCall)cOwnedRelationshipAssignment_2_0.eContents().get(0);
		private final Assignment cOwnedRelationshipAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cOwnedRelationshipOwnedMultiplicityParserRuleCall_2_1_0 = (RuleCall)cOwnedRelationshipAssignment_2_1.eContents().get(0);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Assignment cOwnedRelationshipAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final RuleCall cOwnedRelationshipOwnedMultiplicityParserRuleCall_3_0_0 = (RuleCall)cOwnedRelationshipAssignment_3_0.eContents().get(0);
		private final Assignment cOwnedRelationshipAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cOwnedRelationshipOwnedFeatureTypingParserRuleCall_3_1_0 = (RuleCall)cOwnedRelationshipAssignment_3_1.eContents().get(0);
		
		//ItemFeature returns SysML::ItemFeature :
		//      Identification? ItemFeatureSpecializationPart ValuePart?
		//    | Identification? ValuePart
		//    | ownedRelationship += OwnedFeatureTyping ( ownedRelationship += OwnedMultiplicity )?
		//    | ownedRelationship += OwnedMultiplicity ownedRelationship += OwnedFeatureTyping
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//  Identification? ItemFeatureSpecializationPart ValuePart?
		//| Identification? ValuePart
		//| ownedRelationship += OwnedFeatureTyping ( ownedRelationship += OwnedMultiplicity )?
		//| ownedRelationship += OwnedMultiplicity ownedRelationship += OwnedFeatureTyping
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Identification? ItemFeatureSpecializationPart ValuePart?
		public Group getGroup_0() { return cGroup_0; }
		
		//Identification?
		public RuleCall getIdentificationParserRuleCall_0_0() { return cIdentificationParserRuleCall_0_0; }
		
		//ItemFeatureSpecializationPart
		public RuleCall getItemFeatureSpecializationPartParserRuleCall_0_1() { return cItemFeatureSpecializationPartParserRuleCall_0_1; }
		
		//ValuePart?
		public RuleCall getValuePartParserRuleCall_0_2() { return cValuePartParserRuleCall_0_2; }
		
		//Identification? ValuePart
		public Group getGroup_1() { return cGroup_1; }
		
		//Identification?
		public RuleCall getIdentificationParserRuleCall_1_0() { return cIdentificationParserRuleCall_1_0; }
		
		//ValuePart
		public RuleCall getValuePartParserRuleCall_1_1() { return cValuePartParserRuleCall_1_1; }
		
		//ownedRelationship += OwnedFeatureTyping ( ownedRelationship += OwnedMultiplicity )?
		public Group getGroup_2() { return cGroup_2; }
		
		//ownedRelationship += OwnedFeatureTyping
		public Assignment getOwnedRelationshipAssignment_2_0() { return cOwnedRelationshipAssignment_2_0; }
		
		//OwnedFeatureTyping
		public RuleCall getOwnedRelationshipOwnedFeatureTypingParserRuleCall_2_0_0() { return cOwnedRelationshipOwnedFeatureTypingParserRuleCall_2_0_0; }
		
		//( ownedRelationship += OwnedMultiplicity )?
		public Assignment getOwnedRelationshipAssignment_2_1() { return cOwnedRelationshipAssignment_2_1; }
		
		//OwnedMultiplicity
		public RuleCall getOwnedRelationshipOwnedMultiplicityParserRuleCall_2_1_0() { return cOwnedRelationshipOwnedMultiplicityParserRuleCall_2_1_0; }
		
		//ownedRelationship += OwnedMultiplicity ownedRelationship += OwnedFeatureTyping
		public Group getGroup_3() { return cGroup_3; }
		
		//ownedRelationship += OwnedMultiplicity
		public Assignment getOwnedRelationshipAssignment_3_0() { return cOwnedRelationshipAssignment_3_0; }
		
		//OwnedMultiplicity
		public RuleCall getOwnedRelationshipOwnedMultiplicityParserRuleCall_3_0_0() { return cOwnedRelationshipOwnedMultiplicityParserRuleCall_3_0_0; }
		
		//ownedRelationship += OwnedFeatureTyping
		public Assignment getOwnedRelationshipAssignment_3_1() { return cOwnedRelationshipAssignment_3_1; }
		
		//OwnedFeatureTyping
		public RuleCall getOwnedRelationshipOwnedFeatureTypingParserRuleCall_3_1_0() { return cOwnedRelationshipOwnedFeatureTypingParserRuleCall_3_1_0; }
	}
	public class ItemFeatureSpecializationPartElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.xtext.KerML.ItemFeatureSpecializationPart");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final RuleCall cFeatureSpecializationParserRuleCall_0_0 = (RuleCall)cGroup_0.eContents().get(0);
		private final RuleCall cMultiplicityPartParserRuleCall_0_1 = (RuleCall)cGroup_0.eContents().get(1);
		private final RuleCall cFeatureSpecializationParserRuleCall_0_2 = (RuleCall)cGroup_0.eContents().get(2);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final RuleCall cMultiplicityPartParserRuleCall_1_0 = (RuleCall)cGroup_1.eContents().get(0);
		private final RuleCall cFeatureSpecializationParserRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//fragment ItemFeatureSpecializationPart returns SysML::Feature :
		//      ( -> FeatureSpecialization )+ MultiplicityPart? FeatureSpecialization*
		//    | MultiplicityPart FeatureSpecialization+
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//  ( -> FeatureSpecialization )+ MultiplicityPart? FeatureSpecialization*
		//| MultiplicityPart FeatureSpecialization+
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//( -> FeatureSpecialization )+ MultiplicityPart? FeatureSpecialization*
		public Group getGroup_0() { return cGroup_0; }
		
		//( -> FeatureSpecialization )+
		public RuleCall getFeatureSpecializationParserRuleCall_0_0() { return cFeatureSpecializationParserRuleCall_0_0; }
		
		//MultiplicityPart?
		public RuleCall getMultiplicityPartParserRuleCall_0_1() { return cMultiplicityPartParserRuleCall_0_1; }
		
		//FeatureSpecialization*
		public RuleCall getFeatureSpecializationParserRuleCall_0_2() { return cFeatureSpecializationParserRuleCall_0_2; }
		
		//MultiplicityPart FeatureSpecialization+
		public Group getGroup_1() { return cGroup_1; }
		
		//MultiplicityPart
		public RuleCall getMultiplicityPartParserRuleCall_1_0() { return cMultiplicityPartParserRuleCall_1_0; }
		
		//FeatureSpecialization+
		public RuleCall getFeatureSpecializationParserRuleCall_1_1() { return cFeatureSpecializationParserRuleCall_1_1; }
	}
	public class ItemFlowEndMemberElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.xtext.KerML.ItemFlowEndMember");
		private final Assignment cOwnedRelatedElementAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cOwnedRelatedElementItemFlowEndParserRuleCall_0 = (RuleCall)cOwnedRelatedElementAssignment.eContents().get(0);
		
		//ItemFlowEndMember returns SysML::EndFeatureMembership :
		//    ownedRelatedElement += ItemFlowEnd
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//ownedRelatedElement += ItemFlowEnd
		public Assignment getOwnedRelatedElementAssignment() { return cOwnedRelatedElementAssignment; }
		
		//ItemFlowEnd
		public RuleCall getOwnedRelatedElementItemFlowEndParserRuleCall_0() { return cOwnedRelatedElementItemFlowEndParserRuleCall_0; }
	}
	public class ItemFlowEndElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.xtext.KerML.ItemFlowEnd");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cOwnedRelationshipAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cOwnedRelationshipItemFlowEndSubsettingParserRuleCall_0_0 = (RuleCall)cOwnedRelationshipAssignment_0.eContents().get(0);
		private final Assignment cOwnedRelationshipAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cOwnedRelationshipItemFlowFeatureMemberParserRuleCall_1_0 = (RuleCall)cOwnedRelationshipAssignment_1.eContents().get(0);
		
		//ItemFlowEnd returns SysML::ItemFlowEnd :
		//    ( ownedRelationship += ItemFlowEndSubsetting )?
		//    ownedRelationship += ItemFlowFeatureMember
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//( ownedRelationship += ItemFlowEndSubsetting )?
		//ownedRelationship += ItemFlowFeatureMember
		public Group getGroup() { return cGroup; }
		
		//( ownedRelationship += ItemFlowEndSubsetting )?
		public Assignment getOwnedRelationshipAssignment_0() { return cOwnedRelationshipAssignment_0; }
		
		//ItemFlowEndSubsetting
		public RuleCall getOwnedRelationshipItemFlowEndSubsettingParserRuleCall_0_0() { return cOwnedRelationshipItemFlowEndSubsettingParserRuleCall_0_0; }
		
		//ownedRelationship += ItemFlowFeatureMember
		public Assignment getOwnedRelationshipAssignment_1() { return cOwnedRelationshipAssignment_1; }
		
		//ItemFlowFeatureMember
		public RuleCall getOwnedRelationshipItemFlowFeatureMemberParserRuleCall_1_0() { return cOwnedRelationshipItemFlowFeatureMemberParserRuleCall_1_0; }
	}
	public class ItemFlowEndSubsettingElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.xtext.KerML.ItemFlowEndSubsetting");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Assignment cReferencedFeatureAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final CrossReference cReferencedFeatureFeatureCrossReference_0_0_0 = (CrossReference)cReferencedFeatureAssignment_0_0.eContents().get(0);
		private final RuleCall cReferencedFeatureFeatureQualifiedNameParserRuleCall_0_0_0_1 = (RuleCall)cReferencedFeatureFeatureCrossReference_0_0_0.eContents().get(1);
		private final Keyword cFullStopKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Assignment cOwnedRelatedElementAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cOwnedRelatedElementFeatureChainPrefixParserRuleCall_1_0 = (RuleCall)cOwnedRelatedElementAssignment_1.eContents().get(0);
		
		//ItemFlowEndSubsetting returns SysML::ReferenceSubsetting :
		//      referencedFeature = [SysML::Feature | QualifiedName] '.'
		//    | ownedRelatedElement += FeatureChainPrefix
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//  referencedFeature = [SysML::Feature | QualifiedName] '.'
		//| ownedRelatedElement += FeatureChainPrefix
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//referencedFeature = [SysML::Feature | QualifiedName] '.'
		public Group getGroup_0() { return cGroup_0; }
		
		//referencedFeature = [SysML::Feature | QualifiedName]
		public Assignment getReferencedFeatureAssignment_0_0() { return cReferencedFeatureAssignment_0_0; }
		
		//[SysML::Feature | QualifiedName]
		public CrossReference getReferencedFeatureFeatureCrossReference_0_0_0() { return cReferencedFeatureFeatureCrossReference_0_0_0; }
		
		//QualifiedName
		public RuleCall getReferencedFeatureFeatureQualifiedNameParserRuleCall_0_0_0_1() { return cReferencedFeatureFeatureQualifiedNameParserRuleCall_0_0_0_1; }
		
		//'.'
		public Keyword getFullStopKeyword_0_1() { return cFullStopKeyword_0_1; }
		
		//ownedRelatedElement += FeatureChainPrefix
		public Assignment getOwnedRelatedElementAssignment_1() { return cOwnedRelatedElementAssignment_1; }
		
		//FeatureChainPrefix
		public RuleCall getOwnedRelatedElementFeatureChainPrefixParserRuleCall_1_0() { return cOwnedRelatedElementFeatureChainPrefixParserRuleCall_1_0; }
	}
	public class FeatureChainPrefixElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.xtext.KerML.FeatureChainPrefix");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final Assignment cOwnedRelationshipAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cOwnedRelationshipOwnedFeatureChainingParserRuleCall_0_0_0 = (RuleCall)cOwnedRelationshipAssignment_0_0.eContents().get(0);
		private final Keyword cFullStopKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Assignment cOwnedRelationshipAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cOwnedRelationshipOwnedFeatureChainingParserRuleCall_1_0 = (RuleCall)cOwnedRelationshipAssignment_1.eContents().get(0);
		private final Keyword cFullStopKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//FeatureChainPrefix returns SysML::Feature :
		//    ( ownedRelationship += OwnedFeatureChaining '.' )+
		//    ownedRelationship += OwnedFeatureChaining '.'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//( ownedRelationship += OwnedFeatureChaining '.' )+
		//ownedRelationship += OwnedFeatureChaining '.'
		public Group getGroup() { return cGroup; }
		
		//( ownedRelationship += OwnedFeatureChaining '.' )+
		public Group getGroup_0() { return cGroup_0; }
		
		//ownedRelationship += OwnedFeatureChaining
		public Assignment getOwnedRelationshipAssignment_0_0() { return cOwnedRelationshipAssignment_0_0; }
		
		//OwnedFeatureChaining
		public RuleCall getOwnedRelationshipOwnedFeatureChainingParserRuleCall_0_0_0() { return cOwnedRelationshipOwnedFeatureChainingParserRuleCall_0_0_0; }
		
		//'.'
		public Keyword getFullStopKeyword_0_1() { return cFullStopKeyword_0_1; }
		
		//ownedRelationship += OwnedFeatureChaining
		public Assignment getOwnedRelationshipAssignment_1() { return cOwnedRelationshipAssignment_1; }
		
		//OwnedFeatureChaining
		public RuleCall getOwnedRelationshipOwnedFeatureChainingParserRuleCall_1_0() { return cOwnedRelationshipOwnedFeatureChainingParserRuleCall_1_0; }
		
		//'.'
		public Keyword getFullStopKeyword_2() { return cFullStopKeyword_2; }
	}
	public class ItemFlowFeatureMemberElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.xtext.KerML.ItemFlowFeatureMember");
		private final Assignment cOwnedRelatedElementAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cOwnedRelatedElementItemFlowFeatureParserRuleCall_0 = (RuleCall)cOwnedRelatedElementAssignment.eContents().get(0);
		
		//ItemFlowFeatureMember returns SysML::FeatureMembership :
		//    ownedRelatedElement += ItemFlowFeature
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//ownedRelatedElement += ItemFlowFeature
		public Assignment getOwnedRelatedElementAssignment() { return cOwnedRelatedElementAssignment; }
		
		//ItemFlowFeature
		public RuleCall getOwnedRelatedElementItemFlowFeatureParserRuleCall_0() { return cOwnedRelatedElementItemFlowFeatureParserRuleCall_0; }
	}
	public class ItemFlowFeatureElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.xtext.KerML.ItemFlowFeature");
		private final Assignment cOwnedRelationshipAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cOwnedRelationshipItemFlowRedefinitionParserRuleCall_0 = (RuleCall)cOwnedRelationshipAssignment.eContents().get(0);
		
		//ItemFlowFeature returns SysML::Feature :
		//    ownedRelationship += ItemFlowRedefinition
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//ownedRelationship += ItemFlowRedefinition
		public Assignment getOwnedRelationshipAssignment() { return cOwnedRelationshipAssignment; }
		
		//ItemFlowRedefinition
		public RuleCall getOwnedRelationshipItemFlowRedefinitionParserRuleCall_0() { return cOwnedRelationshipItemFlowRedefinitionParserRuleCall_0; }
	}
	public class ItemFlowRedefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.xtext.KerML.ItemFlowRedefinition");
		private final Assignment cRedefinedFeatureAssignment = (Assignment)rule.eContents().get(1);
		private final CrossReference cRedefinedFeatureFeatureCrossReference_0 = (CrossReference)cRedefinedFeatureAssignment.eContents().get(0);
		private final RuleCall cRedefinedFeatureFeatureQualifiedNameParserRuleCall_0_1 = (RuleCall)cRedefinedFeatureFeatureCrossReference_0.eContents().get(1);
		
		//ItemFlowRedefinition returns SysML::Redefinition :
		//    redefinedFeature = [SysML::Feature|QualifiedName]
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//redefinedFeature = [SysML::Feature|QualifiedName]
		public Assignment getRedefinedFeatureAssignment() { return cRedefinedFeatureAssignment; }
		
		//[SysML::Feature|QualifiedName]
		public CrossReference getRedefinedFeatureFeatureCrossReference_0() { return cRedefinedFeatureFeatureCrossReference_0; }
		
		//QualifiedName
		public RuleCall getRedefinedFeatureFeatureQualifiedNameParserRuleCall_0_1() { return cRedefinedFeatureFeatureQualifiedNameParserRuleCall_0_1; }
	}
	public class MetaclassElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.xtext.KerML.Metaclass");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cTypePrefixParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cMetaclassKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final RuleCall cClassifierDeclarationParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final RuleCall cTypeBodyParserRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		
		///* METADATA */
		//Metaclass returns SysML::Metaclass :
		//    TypePrefix 'metaclass'
		//    ClassifierDeclaration TypeBody
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//TypePrefix 'metaclass'
		//ClassifierDeclaration TypeBody
		public Group getGroup() { return cGroup; }
		
		//TypePrefix
		public RuleCall getTypePrefixParserRuleCall_0() { return cTypePrefixParserRuleCall_0; }
		
		//'metaclass'
		public Keyword getMetaclassKeyword_1() { return cMetaclassKeyword_1; }
		
		//ClassifierDeclaration
		public RuleCall getClassifierDeclarationParserRuleCall_2() { return cClassifierDeclarationParserRuleCall_2; }
		
		//TypeBody
		public RuleCall getTypeBodyParserRuleCall_3() { return cTypeBodyParserRuleCall_3; }
	}
	public class PrefixMetadataAnnotationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.xtext.KerML.PrefixMetadataAnnotation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cNumberSignKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cOwnedRelatedElementAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cOwnedRelatedElementPrefixMetadataFeatureParserRuleCall_1_0 = (RuleCall)cOwnedRelatedElementAssignment_1.eContents().get(0);
		
		//PrefixMetadataAnnotation returns SysML::Annotation :
		//    '#' ownedRelatedElement += PrefixMetadataFeature
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'#' ownedRelatedElement += PrefixMetadataFeature
		public Group getGroup() { return cGroup; }
		
		//'#'
		public Keyword getNumberSignKeyword_0() { return cNumberSignKeyword_0; }
		
		//ownedRelatedElement += PrefixMetadataFeature
		public Assignment getOwnedRelatedElementAssignment_1() { return cOwnedRelatedElementAssignment_1; }
		
		//PrefixMetadataFeature
		public RuleCall getOwnedRelatedElementPrefixMetadataFeatureParserRuleCall_1_0() { return cOwnedRelatedElementPrefixMetadataFeatureParserRuleCall_1_0; }
	}
	public class PrefixMetadataMemberElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.xtext.KerML.PrefixMetadataMember");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cNumberSignKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cOwnedRelatedElementAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cOwnedRelatedElementPrefixMetadataFeatureParserRuleCall_1_0 = (RuleCall)cOwnedRelatedElementAssignment_1.eContents().get(0);
		
		//PrefixMetadataMember returns SysML::OwningMembership :
		//    '#' ownedRelatedElement += PrefixMetadataFeature
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'#' ownedRelatedElement += PrefixMetadataFeature
		public Group getGroup() { return cGroup; }
		
		//'#'
		public Keyword getNumberSignKeyword_0() { return cNumberSignKeyword_0; }
		
		//ownedRelatedElement += PrefixMetadataFeature
		public Assignment getOwnedRelatedElementAssignment_1() { return cOwnedRelatedElementAssignment_1; }
		
		//PrefixMetadataFeature
		public RuleCall getOwnedRelatedElementPrefixMetadataFeatureParserRuleCall_1_0() { return cOwnedRelatedElementPrefixMetadataFeatureParserRuleCall_1_0; }
	}
	public class PrefixMetadataFeatureElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.xtext.KerML.PrefixMetadataFeature");
		private final Assignment cOwnedRelationshipAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cOwnedRelationshipMetadataTypingParserRuleCall_0 = (RuleCall)cOwnedRelationshipAssignment.eContents().get(0);
		
		//PrefixMetadataFeature returns SysML::MetadataFeature :
		//    ownedRelationship += MetadataTyping
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//ownedRelationship += MetadataTyping
		public Assignment getOwnedRelationshipAssignment() { return cOwnedRelationshipAssignment; }
		
		//MetadataTyping
		public RuleCall getOwnedRelationshipMetadataTypingParserRuleCall_0() { return cOwnedRelationshipMetadataTypingParserRuleCall_0; }
	}
	public class MetadataFeatureElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.xtext.KerML.MetadataFeature");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cOwnedRelationshipAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cOwnedRelationshipPrefixMetadataMemberParserRuleCall_0_0 = (RuleCall)cOwnedRelationshipAssignment_0.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Keyword cCommercialAtKeyword_1_0 = (Keyword)cAlternatives_1.eContents().get(0);
		private final Keyword cMetadataKeyword_1_1 = (Keyword)cAlternatives_1.eContents().get(1);
		private final RuleCall cMetadataFeatureDeclarationParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cAboutKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cOwnedRelationshipAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cOwnedRelationshipAnnotationParserRuleCall_3_1_0 = (RuleCall)cOwnedRelationshipAssignment_3_1.eContents().get(0);
		private final Group cGroup_3_2 = (Group)cGroup_3.eContents().get(2);
		private final Keyword cCommaKeyword_3_2_0 = (Keyword)cGroup_3_2.eContents().get(0);
		private final Assignment cOwnedRelationshipAssignment_3_2_1 = (Assignment)cGroup_3_2.eContents().get(1);
		private final RuleCall cOwnedRelationshipAnnotationParserRuleCall_3_2_1_0 = (RuleCall)cOwnedRelationshipAssignment_3_2_1.eContents().get(0);
		private final RuleCall cMetadataBodyParserRuleCall_4 = (RuleCall)cGroup.eContents().get(4);
		
		//MetadataFeature returns SysML::MetadataFeature :
		//    ( ownedRelationship += PrefixMetadataMember )*
		//    ( '@' | 'metadata' ) MetadataFeatureDeclaration
		//    ( 'about' ownedRelationship += Annotation
		//        ( ',' ownedRelationship += Annotation )*
		//    )?
		//    MetadataBody
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//( ownedRelationship += PrefixMetadataMember )*
		//( '@' | 'metadata' ) MetadataFeatureDeclaration
		//( 'about' ownedRelationship += Annotation
		//    ( ',' ownedRelationship += Annotation )*
		//)?
		//MetadataBody
		public Group getGroup() { return cGroup; }
		
		//( ownedRelationship += PrefixMetadataMember )*
		public Assignment getOwnedRelationshipAssignment_0() { return cOwnedRelationshipAssignment_0; }
		
		//PrefixMetadataMember
		public RuleCall getOwnedRelationshipPrefixMetadataMemberParserRuleCall_0_0() { return cOwnedRelationshipPrefixMetadataMemberParserRuleCall_0_0; }
		
		//( '@' | 'metadata' )
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//'@'
		public Keyword getCommercialAtKeyword_1_0() { return cCommercialAtKeyword_1_0; }
		
		//'metadata'
		public Keyword getMetadataKeyword_1_1() { return cMetadataKeyword_1_1; }
		
		//MetadataFeatureDeclaration
		public RuleCall getMetadataFeatureDeclarationParserRuleCall_2() { return cMetadataFeatureDeclarationParserRuleCall_2; }
		
		//( 'about' ownedRelationship += Annotation
		//    ( ',' ownedRelationship += Annotation )*
		//)?
		public Group getGroup_3() { return cGroup_3; }
		
		//'about'
		public Keyword getAboutKeyword_3_0() { return cAboutKeyword_3_0; }
		
		//ownedRelationship += Annotation
		public Assignment getOwnedRelationshipAssignment_3_1() { return cOwnedRelationshipAssignment_3_1; }
		
		//Annotation
		public RuleCall getOwnedRelationshipAnnotationParserRuleCall_3_1_0() { return cOwnedRelationshipAnnotationParserRuleCall_3_1_0; }
		
		//( ',' ownedRelationship += Annotation )*
		public Group getGroup_3_2() { return cGroup_3_2; }
		
		//','
		public Keyword getCommaKeyword_3_2_0() { return cCommaKeyword_3_2_0; }
		
		//ownedRelationship += Annotation
		public Assignment getOwnedRelationshipAssignment_3_2_1() { return cOwnedRelationshipAssignment_3_2_1; }
		
		//Annotation
		public RuleCall getOwnedRelationshipAnnotationParserRuleCall_3_2_1_0() { return cOwnedRelationshipAnnotationParserRuleCall_3_2_1_0; }
		
		//MetadataBody
		public RuleCall getMetadataBodyParserRuleCall_4() { return cMetadataBodyParserRuleCall_4; }
	}
	public class MetadataFeatureDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.xtext.KerML.MetadataFeatureDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final RuleCall cIdentificationParserRuleCall_0_0 = (RuleCall)cGroup_0.eContents().get(0);
		private final Alternatives cAlternatives_0_1 = (Alternatives)cGroup_0.eContents().get(1);
		private final Keyword cColonKeyword_0_1_0 = (Keyword)cAlternatives_0_1.eContents().get(0);
		private final Group cGroup_0_1_1 = (Group)cAlternatives_0_1.eContents().get(1);
		private final Keyword cTypedKeyword_0_1_1_0 = (Keyword)cGroup_0_1_1.eContents().get(0);
		private final Keyword cByKeyword_0_1_1_1 = (Keyword)cGroup_0_1_1.eContents().get(1);
		private final Assignment cOwnedRelationshipAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cOwnedRelationshipMetadataTypingParserRuleCall_1_0 = (RuleCall)cOwnedRelationshipAssignment_1.eContents().get(0);
		
		//fragment MetadataFeatureDeclaration returns SysML::MetadataFeature :
		//    ( Identification ( ':' | 'typed' 'by' ) )? ownedRelationship += MetadataTyping
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//( Identification ( ':' | 'typed' 'by' ) )? ownedRelationship += MetadataTyping
		public Group getGroup() { return cGroup; }
		
		//( Identification ( ':' | 'typed' 'by' ) )?
		public Group getGroup_0() { return cGroup_0; }
		
		//Identification
		public RuleCall getIdentificationParserRuleCall_0_0() { return cIdentificationParserRuleCall_0_0; }
		
		//( ':' | 'typed' 'by' )
		public Alternatives getAlternatives_0_1() { return cAlternatives_0_1; }
		
		//':'
		public Keyword getColonKeyword_0_1_0() { return cColonKeyword_0_1_0; }
		
		//'typed' 'by'
		public Group getGroup_0_1_1() { return cGroup_0_1_1; }
		
		//'typed'
		public Keyword getTypedKeyword_0_1_1_0() { return cTypedKeyword_0_1_1_0; }
		
		//'by'
		public Keyword getByKeyword_0_1_1_1() { return cByKeyword_0_1_1_1; }
		
		//ownedRelationship += MetadataTyping
		public Assignment getOwnedRelationshipAssignment_1() { return cOwnedRelationshipAssignment_1; }
		
		//MetadataTyping
		public RuleCall getOwnedRelationshipMetadataTypingParserRuleCall_1_0() { return cOwnedRelationshipMetadataTypingParserRuleCall_1_0; }
	}
	public class MetadataTypingElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.xtext.KerML.MetadataTyping");
		private final Assignment cTypeAssignment = (Assignment)rule.eContents().get(1);
		private final CrossReference cTypeMetaclassCrossReference_0 = (CrossReference)cTypeAssignment.eContents().get(0);
		private final RuleCall cTypeMetaclassQualifiedNameParserRuleCall_0_1 = (RuleCall)cTypeMetaclassCrossReference_0.eContents().get(1);
		
		//MetadataTyping returns SysML::FeatureTyping :
		//    type = [SysML::Metaclass | QualifiedName]
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//type = [SysML::Metaclass | QualifiedName]
		public Assignment getTypeAssignment() { return cTypeAssignment; }
		
		//[SysML::Metaclass | QualifiedName]
		public CrossReference getTypeMetaclassCrossReference_0() { return cTypeMetaclassCrossReference_0; }
		
		//QualifiedName
		public RuleCall getTypeMetaclassQualifiedNameParserRuleCall_0_1() { return cTypeMetaclassQualifiedNameParserRuleCall_0_1; }
	}
	public class MetadataBodyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.xtext.KerML.MetadataBody");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cSemicolonKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Alternatives cAlternatives_1_1 = (Alternatives)cGroup_1.eContents().get(1);
		private final Assignment cOwnedRelationshipAssignment_1_1_0 = (Assignment)cAlternatives_1_1.eContents().get(0);
		private final RuleCall cOwnedRelationshipNonFeatureMemberParserRuleCall_1_1_0_0 = (RuleCall)cOwnedRelationshipAssignment_1_1_0.eContents().get(0);
		private final Assignment cOwnedRelationshipAssignment_1_1_1 = (Assignment)cAlternatives_1_1.eContents().get(1);
		private final RuleCall cOwnedRelationshipMetadataBodyFeatureMemberParserRuleCall_1_1_1_0 = (RuleCall)cOwnedRelationshipAssignment_1_1_1.eContents().get(0);
		private final Assignment cOwnedRelationshipAssignment_1_1_2 = (Assignment)cAlternatives_1_1.eContents().get(2);
		private final RuleCall cOwnedRelationshipAliasMemberParserRuleCall_1_1_2_0 = (RuleCall)cOwnedRelationshipAssignment_1_1_2.eContents().get(0);
		private final Assignment cOwnedRelationshipAssignment_1_1_3 = (Assignment)cAlternatives_1_1.eContents().get(3);
		private final RuleCall cOwnedRelationshipImportParserRuleCall_1_1_3_0 = (RuleCall)cOwnedRelationshipAssignment_1_1_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		
		//fragment MetadataBody returns SysML::Feature :
		//      ';'
		//    | '{' ( ownedRelationship += NonFeatureMember
		//          | ownedRelationship += MetadataBodyFeatureMember
		//          | ownedRelationship += AliasMember
		//          | ownedRelationship += Import
		//          )*
		//      '}'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//  ';'
		//| '{' ( ownedRelationship += NonFeatureMember
		//      | ownedRelationship += MetadataBodyFeatureMember
		//      | ownedRelationship += AliasMember
		//      | ownedRelationship += Import
		//      )*
		//  '}'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//';'
		public Keyword getSemicolonKeyword_0() { return cSemicolonKeyword_0; }
		
		//'{' ( ownedRelationship += NonFeatureMember
		//         | ownedRelationship += MetadataBodyFeatureMember
		//         | ownedRelationship += AliasMember
		//         | ownedRelationship += Import
		//         )*
		//     '}'
		public Group getGroup_1() { return cGroup_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1_0() { return cLeftCurlyBracketKeyword_1_0; }
		
		//( ownedRelationship += NonFeatureMember
		//         | ownedRelationship += MetadataBodyFeatureMember
		//         | ownedRelationship += AliasMember
		//         | ownedRelationship += Import
		//         )*
		public Alternatives getAlternatives_1_1() { return cAlternatives_1_1; }
		
		//ownedRelationship += NonFeatureMember
		public Assignment getOwnedRelationshipAssignment_1_1_0() { return cOwnedRelationshipAssignment_1_1_0; }
		
		//NonFeatureMember
		public RuleCall getOwnedRelationshipNonFeatureMemberParserRuleCall_1_1_0_0() { return cOwnedRelationshipNonFeatureMemberParserRuleCall_1_1_0_0; }
		
		//ownedRelationship += MetadataBodyFeatureMember
		public Assignment getOwnedRelationshipAssignment_1_1_1() { return cOwnedRelationshipAssignment_1_1_1; }
		
		//MetadataBodyFeatureMember
		public RuleCall getOwnedRelationshipMetadataBodyFeatureMemberParserRuleCall_1_1_1_0() { return cOwnedRelationshipMetadataBodyFeatureMemberParserRuleCall_1_1_1_0; }
		
		//ownedRelationship += AliasMember
		public Assignment getOwnedRelationshipAssignment_1_1_2() { return cOwnedRelationshipAssignment_1_1_2; }
		
		//AliasMember
		public RuleCall getOwnedRelationshipAliasMemberParserRuleCall_1_1_2_0() { return cOwnedRelationshipAliasMemberParserRuleCall_1_1_2_0; }
		
		//ownedRelationship += Import
		public Assignment getOwnedRelationshipAssignment_1_1_3() { return cOwnedRelationshipAssignment_1_1_3; }
		
		//Import
		public RuleCall getOwnedRelationshipImportParserRuleCall_1_1_3_0() { return cOwnedRelationshipImportParserRuleCall_1_1_3_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_1_2() { return cRightCurlyBracketKeyword_1_2; }
	}
	public class MetadataBodyFeatureMemberElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.xtext.KerML.MetadataBodyFeatureMember");
		private final Assignment cOwnedRelatedElementAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cOwnedRelatedElementMetadataBodyFeatureParserRuleCall_0 = (RuleCall)cOwnedRelatedElementAssignment.eContents().get(0);
		
		//MetadataBodyFeatureMember returns SysML::FeatureMembership :
		//    ownedRelatedElement += MetadataBodyFeature
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//ownedRelatedElement += MetadataBodyFeature
		public Assignment getOwnedRelatedElementAssignment() { return cOwnedRelatedElementAssignment; }
		
		//MetadataBodyFeature
		public RuleCall getOwnedRelatedElementMetadataBodyFeatureParserRuleCall_0() { return cOwnedRelatedElementMetadataBodyFeatureParserRuleCall_0; }
	}
	public class MetadataBodyFeatureElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.xtext.KerML.MetadataBodyFeature");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFeatureKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Keyword cColonGreaterThanSignGreaterThanSignKeyword_1_0 = (Keyword)cAlternatives_1.eContents().get(0);
		private final Keyword cRedefinesKeyword_1_1 = (Keyword)cAlternatives_1.eContents().get(1);
		private final Assignment cOwnedRelationshipAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cOwnedRelationshipOwnedRedefinitionParserRuleCall_2_0 = (RuleCall)cOwnedRelationshipAssignment_2.eContents().get(0);
		private final RuleCall cFeatureSpecializationPartParserRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		private final RuleCall cValuePartParserRuleCall_4 = (RuleCall)cGroup.eContents().get(4);
		private final RuleCall cMetadataBodyParserRuleCall_5 = (RuleCall)cGroup.eContents().get(5);
		
		//MetadataBodyFeature returns SysML::Feature :
		//    'feature'? ( ':>>' | 'redefines' )? ownedRelationship += OwnedRedefinition
		//    FeatureSpecializationPart? ValuePart?
		//    MetadataBody
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'feature'? ( ':>>' | 'redefines' )? ownedRelationship += OwnedRedefinition
		//FeatureSpecializationPart? ValuePart?
		//MetadataBody
		public Group getGroup() { return cGroup; }
		
		//'feature'?
		public Keyword getFeatureKeyword_0() { return cFeatureKeyword_0; }
		
		//( ':>>' | 'redefines' )?
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//':>>'
		public Keyword getColonGreaterThanSignGreaterThanSignKeyword_1_0() { return cColonGreaterThanSignGreaterThanSignKeyword_1_0; }
		
		//'redefines'
		public Keyword getRedefinesKeyword_1_1() { return cRedefinesKeyword_1_1; }
		
		//ownedRelationship += OwnedRedefinition
		public Assignment getOwnedRelationshipAssignment_2() { return cOwnedRelationshipAssignment_2; }
		
		//OwnedRedefinition
		public RuleCall getOwnedRelationshipOwnedRedefinitionParserRuleCall_2_0() { return cOwnedRelationshipOwnedRedefinitionParserRuleCall_2_0; }
		
		//FeatureSpecializationPart?
		public RuleCall getFeatureSpecializationPartParserRuleCall_3() { return cFeatureSpecializationPartParserRuleCall_3; }
		
		//ValuePart?
		public RuleCall getValuePartParserRuleCall_4() { return cValuePartParserRuleCall_4; }
		
		//MetadataBody
		public RuleCall getMetadataBodyParserRuleCall_5() { return cMetadataBodyParserRuleCall_5; }
	}
	public class ExpressionBodyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.xtext.KerML.ExpressionBody");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cFunctionBodyPartParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Keyword cRightCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		///* EXPRESSIONS */
		//@Override
		//ExpressionBody returns SysML::Expression :
		//    '{' FunctionBodyPart '}'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'{' FunctionBodyPart '}'
		public Group getGroup() { return cGroup; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_0() { return cLeftCurlyBracketKeyword_0; }
		
		//FunctionBodyPart
		public RuleCall getFunctionBodyPartParserRuleCall_1() { return cFunctionBodyPartParserRuleCall_1; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_2() { return cRightCurlyBracketKeyword_2; }
	}
	
	public class FilterPackageMemberVisibilityElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.xtext.KerML.FilterPackageMemberVisibility");
		private final EnumLiteralDeclaration cPrivateEnumLiteralDeclaration = (EnumLiteralDeclaration)rule.eContents().get(1);
		private final Keyword cPrivateLeftSquareBracketKeyword_0 = (Keyword)cPrivateEnumLiteralDeclaration.eContents().get(0);
		
		//enum FilterPackageMemberVisibility returns SysML::VisibilityKind :
		//    private = '['
		//;
		public EnumRule getRule() { return rule; }
		
		//private = '['
		public EnumLiteralDeclaration getPrivateEnumLiteralDeclaration() { return cPrivateEnumLiteralDeclaration; }
		
		//'['
		public Keyword getPrivateLeftSquareBracketKeyword_0() { return cPrivateLeftSquareBracketKeyword_0; }
	}
	public class VisibilityIndicatorElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.xtext.KerML.VisibilityIndicator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cPublicEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cPublicPublicKeyword_0_0 = (Keyword)cPublicEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cPrivateEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cPrivatePrivateKeyword_1_0 = (Keyword)cPrivateEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cProtectedEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cProtectedProtectedKeyword_2_0 = (Keyword)cProtectedEnumLiteralDeclaration_2.eContents().get(0);
		
		//enum VisibilityIndicator returns SysML::VisibilityKind :
		//    public = 'public' | private = 'private' | protected = 'protected'
		//;
		public EnumRule getRule() { return rule; }
		
		//public = 'public' | private = 'private' | protected = 'protected'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//public = 'public'
		public EnumLiteralDeclaration getPublicEnumLiteralDeclaration_0() { return cPublicEnumLiteralDeclaration_0; }
		
		//'public'
		public Keyword getPublicPublicKeyword_0_0() { return cPublicPublicKeyword_0_0; }
		
		//private = 'private'
		public EnumLiteralDeclaration getPrivateEnumLiteralDeclaration_1() { return cPrivateEnumLiteralDeclaration_1; }
		
		//'private'
		public Keyword getPrivatePrivateKeyword_1_0() { return cPrivatePrivateKeyword_1_0; }
		
		//protected = 'protected'
		public EnumLiteralDeclaration getProtectedEnumLiteralDeclaration_2() { return cProtectedEnumLiteralDeclaration_2; }
		
		//'protected'
		public Keyword getProtectedProtectedKeyword_2_0() { return cProtectedProtectedKeyword_2_0; }
	}
	public class FeatureDirectionElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.xtext.KerML.FeatureDirection");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cInEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cInInKeyword_0_0 = (Keyword)cInEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cOutEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cOutOutKeyword_1_0 = (Keyword)cOutEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cInoutEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cInoutInoutKeyword_2_0 = (Keyword)cInoutEnumLiteralDeclaration_2.eContents().get(0);
		
		///* FEATURES */
		///* Features */
		//enum FeatureDirection returns SysML::FeatureDirectionKind:
		//    in = 'in' | out = 'out' | inout = 'inout'
		//;
		public EnumRule getRule() { return rule; }
		
		//in = 'in' | out = 'out' | inout = 'inout'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//in = 'in'
		public EnumLiteralDeclaration getInEnumLiteralDeclaration_0() { return cInEnumLiteralDeclaration_0; }
		
		//'in'
		public Keyword getInInKeyword_0_0() { return cInInKeyword_0_0; }
		
		//out = 'out'
		public EnumLiteralDeclaration getOutEnumLiteralDeclaration_1() { return cOutEnumLiteralDeclaration_1; }
		
		//'out'
		public Keyword getOutOutKeyword_1_0() { return cOutOutKeyword_1_0; }
		
		//inout = 'inout'
		public EnumLiteralDeclaration getInoutEnumLiteralDeclaration_2() { return cInoutEnumLiteralDeclaration_2; }
		
		//'inout'
		public Keyword getInoutInoutKeyword_2_0() { return cInoutInoutKeyword_2_0; }
	}
	
	private final RootNamespaceElements pRootNamespace;
	private final IdentificationElements pIdentification;
	private final RelationshipBodyElements pRelationshipBody;
	private final RelationshipOwnedElementElements pRelationshipOwnedElement;
	private final OwnedRelatedElementElements pOwnedRelatedElement;
	private final DependencyElements pDependency;
	private final AnnotationElements pAnnotation;
	private final OwnedAnnotationElements pOwnedAnnotation;
	private final AnnotatingElementElements pAnnotatingElement;
	private final CommentElements pComment;
	private final DocumentationElements pDocumentation;
	private final TextualRepresentationElements pTextualRepresentation;
	private final NamespaceElements pNamespace;
	private final NamespaceDeclarationElements pNamespaceDeclaration;
	private final NamespaceBodyElements pNamespaceBody;
	private final NamespaceBodyElementElements pNamespaceBodyElement;
	private final MemberPrefixElements pMemberPrefix;
	private final NamespaceMemberElements pNamespaceMember;
	private final NonFeatureMemberElements pNonFeatureMember;
	private final NamespaceFeatureMemberElements pNamespaceFeatureMember;
	private final AliasMemberElements pAliasMember;
	private final ImportPrefixElements pImportPrefix;
	private final ImportElements pImport;
	private final MembershipImportElements pMembershipImport;
	private final ImportedMembershipElements pImportedMembership;
	private final NamespaceImportElements pNamespaceImport;
	private final ImportedNamespaceElements pImportedNamespace;
	private final FilterPackageElements pFilterPackage;
	private final FilterPackageImportElements pFilterPackageImport;
	private final FilterPackageMembershipImportElements pFilterPackageMembershipImport;
	private final FilterPackageNamespaceImportElements pFilterPackageNamespaceImport;
	private final FilterPackageMemberElements pFilterPackageMember;
	private final FilterPackageMemberVisibilityElements eFilterPackageMemberVisibility;
	private final VisibilityIndicatorElements eVisibilityIndicator;
	private final MemberElementElements pMemberElement;
	private final NonFeatureElementElements pNonFeatureElement;
	private final FeatureElementElements pFeatureElement;
	private final PackageElements pPackage;
	private final LibraryPackageElements pLibraryPackage;
	private final PackageDeclarationElements pPackageDeclaration;
	private final PackageBodyElements pPackageBody;
	private final ElementFilterMemberElements pElementFilterMember;
	private final TypePrefixElements pTypePrefix;
	private final TypeElements pType;
	private final TypeDeclarationElements pTypeDeclaration;
	private final SpecializationPartElements pSpecializationPart;
	private final ConjugationPartElements pConjugationPart;
	private final TypeRelationshipPartElements pTypeRelationshipPart;
	private final DisjoiningPartElements pDisjoiningPart;
	private final UnioningPartElements pUnioningPart;
	private final IntersectingPartElements pIntersectingPart;
	private final DifferencingPartElements pDifferencingPart;
	private final TypeBodyElements pTypeBody;
	private final FeatureMemberElements pFeatureMember;
	private final TypeFeatureMemberElements pTypeFeatureMember;
	private final OwnedFeatureMemberElements pOwnedFeatureMember;
	private final SpecializationElements pSpecialization;
	private final OwnedSpecializationElements pOwnedSpecialization;
	private final ConjugationElements pConjugation;
	private final OwnedConjugationElements pOwnedConjugation;
	private final DisjoiningElements pDisjoining;
	private final OwnedDisjoiningElements pOwnedDisjoining;
	private final UnioningElements pUnioning;
	private final IntersectingElements pIntersecting;
	private final DifferencingElements pDifferencing;
	private final ClassifierElements pClassifier;
	private final ClassifierDeclarationElements pClassifierDeclaration;
	private final SuperclassingPartElements pSuperclassingPart;
	private final ClassifierConjugationPartElements pClassifierConjugationPart;
	private final SubclassificationElements pSubclassification;
	private final OwnedsubclassificationElements pOwnedsubclassification;
	private final ClassifierConjugationElements pClassifierConjugation;
	private final FeatureDirectionElements eFeatureDirection;
	private final FeaturePrefixElements pFeaturePrefix;
	private final FeatureElements pFeature;
	private final FeatureDeclarationElements pFeatureDeclaration;
	private final FeatureRelationshipPartElements pFeatureRelationshipPart;
	private final ChainingPartElements pChainingPart;
	private final InvertingPartElements pInvertingPart;
	private final TypeFeaturingPartElements pTypeFeaturingPart;
	private final FeatureSpecializationPartElements pFeatureSpecializationPart;
	private final MultiplicityPartElements pMultiplicityPart;
	private final FeatureSpecializationElements pFeatureSpecialization;
	private final TypingsElements pTypings;
	private final TypedByElements pTypedBy;
	private final SubsettingsElements pSubsettings;
	private final SubsetsElements pSubsets;
	private final ReferencesElements pReferences;
	private final ReferencesKeywordElements pReferencesKeyword;
	private final RedefinitionsElements pRedefinitions;
	private final RedefinesElements pRedefines;
	private final FeatureInvertingElements pFeatureInverting;
	private final OwnedFeatureInvertingElements pOwnedFeatureInverting;
	private final TypeFeaturingElements pTypeFeaturing;
	private final OwnedTypeFeaturingElements pOwnedTypeFeaturing;
	private final FeatureTypingElements pFeatureTyping;
	private final OwnedFeatureTypingElements pOwnedFeatureTyping;
	private final FeatureTypeElements pFeatureType;
	private final SubsettingElements pSubsetting;
	private final OwnedSubsettingElements pOwnedSubsetting;
	private final OwnedReferenceSubsettingElements pOwnedReferenceSubsetting;
	private final RedefinitionElements pRedefinition;
	private final OwnedRedefinitionElements pOwnedRedefinition;
	private final FeatureConjugationPartElements pFeatureConjugationPart;
	private final FeatureConjugationElements pFeatureConjugation;
	private final ValuePartElements pValuePart;
	private final FeatureValueElements pFeatureValue;
	private final MultiplicityElements pMultiplicity;
	private final MultiplicitySubsetElements pMultiplicitySubset;
	private final MultiplicityRangeElements pMultiplicityRange;
	private final OwnedMultiplicityElements pOwnedMultiplicity;
	private final OwnedMultiplicityRangeElements pOwnedMultiplicityRange;
	private final MultiplicityBoundsElements pMultiplicityBounds;
	private final MultiplicityExpressionMemberElements pMultiplicityExpressionMember;
	private final DataTypeElements pDataType;
	private final ClassElements pClass;
	private final StructureElements pStructure;
	private final AssociationElements pAssociation;
	private final AssociationStructureElements pAssociationStructure;
	private final ConnectorElements pConnector;
	private final ConnectorDeclarationElements pConnectorDeclaration;
	private final BinaryConnectorDeclarationElements pBinaryConnectorDeclaration;
	private final NaryConnectorDeclarationElements pNaryConnectorDeclaration;
	private final ConnectorEndMemberElements pConnectorEndMember;
	private final ConnectorEndElements pConnectorEnd;
	private final BindingConnectorElements pBindingConnector;
	private final BindingConnectorDeclarationElements pBindingConnectorDeclaration;
	private final SuccessionElements pSuccession;
	private final SuccessionDeclarationElements pSuccessionDeclaration;
	private final BehaviorElements pBehavior;
	private final StepElements pStep;
	private final StepDeclarationElements pStepDeclaration;
	private final FunctionElements pFunction;
	private final FunctionBodyElements pFunctionBody;
	private final FunctionBodyPartElements pFunctionBodyPart;
	private final ReturnFeatureMemberElements pReturnFeatureMember;
	private final ResultExpressionMemberElements pResultExpressionMember;
	private final ExpressionElements pExpression;
	private final ExpressionDeclarationElements pExpressionDeclaration;
	private final PredicateElements pPredicate;
	private final BooleanExpressionElements pBooleanExpression;
	private final InvariantElements pInvariant;
	private final InteractionElements pInteraction;
	private final ItemFlowElements pItemFlow;
	private final SuccessionItemFlowElements pSuccessionItemFlow;
	private final ItemFlowDeclarationElements pItemFlowDeclaration;
	private final ItemFeatureMemberElements pItemFeatureMember;
	private final ItemFeatureElements pItemFeature;
	private final ItemFeatureSpecializationPartElements pItemFeatureSpecializationPart;
	private final ItemFlowEndMemberElements pItemFlowEndMember;
	private final ItemFlowEndElements pItemFlowEnd;
	private final ItemFlowEndSubsettingElements pItemFlowEndSubsetting;
	private final FeatureChainPrefixElements pFeatureChainPrefix;
	private final ItemFlowFeatureMemberElements pItemFlowFeatureMember;
	private final ItemFlowFeatureElements pItemFlowFeature;
	private final ItemFlowRedefinitionElements pItemFlowRedefinition;
	private final MetaclassElements pMetaclass;
	private final PrefixMetadataAnnotationElements pPrefixMetadataAnnotation;
	private final PrefixMetadataMemberElements pPrefixMetadataMember;
	private final PrefixMetadataFeatureElements pPrefixMetadataFeature;
	private final MetadataFeatureElements pMetadataFeature;
	private final MetadataFeatureDeclarationElements pMetadataFeatureDeclaration;
	private final MetadataTypingElements pMetadataTyping;
	private final MetadataBodyElements pMetadataBody;
	private final MetadataBodyFeatureMemberElements pMetadataBodyFeatureMember;
	private final MetadataBodyFeatureElements pMetadataBodyFeature;
	private final ExpressionBodyElements pExpressionBody;
	
	private final Grammar grammar;
	
	private final KerMLExpressionsGrammarAccess gaKerMLExpressions;

	@Inject
	public KerMLGrammarAccess(GrammarProvider grammarProvider,
			KerMLExpressionsGrammarAccess gaKerMLExpressions) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaKerMLExpressions = gaKerMLExpressions;
		this.pRootNamespace = new RootNamespaceElements();
		this.pIdentification = new IdentificationElements();
		this.pRelationshipBody = new RelationshipBodyElements();
		this.pRelationshipOwnedElement = new RelationshipOwnedElementElements();
		this.pOwnedRelatedElement = new OwnedRelatedElementElements();
		this.pDependency = new DependencyElements();
		this.pAnnotation = new AnnotationElements();
		this.pOwnedAnnotation = new OwnedAnnotationElements();
		this.pAnnotatingElement = new AnnotatingElementElements();
		this.pComment = new CommentElements();
		this.pDocumentation = new DocumentationElements();
		this.pTextualRepresentation = new TextualRepresentationElements();
		this.pNamespace = new NamespaceElements();
		this.pNamespaceDeclaration = new NamespaceDeclarationElements();
		this.pNamespaceBody = new NamespaceBodyElements();
		this.pNamespaceBodyElement = new NamespaceBodyElementElements();
		this.pMemberPrefix = new MemberPrefixElements();
		this.pNamespaceMember = new NamespaceMemberElements();
		this.pNonFeatureMember = new NonFeatureMemberElements();
		this.pNamespaceFeatureMember = new NamespaceFeatureMemberElements();
		this.pAliasMember = new AliasMemberElements();
		this.pImportPrefix = new ImportPrefixElements();
		this.pImport = new ImportElements();
		this.pMembershipImport = new MembershipImportElements();
		this.pImportedMembership = new ImportedMembershipElements();
		this.pNamespaceImport = new NamespaceImportElements();
		this.pImportedNamespace = new ImportedNamespaceElements();
		this.pFilterPackage = new FilterPackageElements();
		this.pFilterPackageImport = new FilterPackageImportElements();
		this.pFilterPackageMembershipImport = new FilterPackageMembershipImportElements();
		this.pFilterPackageNamespaceImport = new FilterPackageNamespaceImportElements();
		this.pFilterPackageMember = new FilterPackageMemberElements();
		this.eFilterPackageMemberVisibility = new FilterPackageMemberVisibilityElements();
		this.eVisibilityIndicator = new VisibilityIndicatorElements();
		this.pMemberElement = new MemberElementElements();
		this.pNonFeatureElement = new NonFeatureElementElements();
		this.pFeatureElement = new FeatureElementElements();
		this.pPackage = new PackageElements();
		this.pLibraryPackage = new LibraryPackageElements();
		this.pPackageDeclaration = new PackageDeclarationElements();
		this.pPackageBody = new PackageBodyElements();
		this.pElementFilterMember = new ElementFilterMemberElements();
		this.pTypePrefix = new TypePrefixElements();
		this.pType = new TypeElements();
		this.pTypeDeclaration = new TypeDeclarationElements();
		this.pSpecializationPart = new SpecializationPartElements();
		this.pConjugationPart = new ConjugationPartElements();
		this.pTypeRelationshipPart = new TypeRelationshipPartElements();
		this.pDisjoiningPart = new DisjoiningPartElements();
		this.pUnioningPart = new UnioningPartElements();
		this.pIntersectingPart = new IntersectingPartElements();
		this.pDifferencingPart = new DifferencingPartElements();
		this.pTypeBody = new TypeBodyElements();
		this.pFeatureMember = new FeatureMemberElements();
		this.pTypeFeatureMember = new TypeFeatureMemberElements();
		this.pOwnedFeatureMember = new OwnedFeatureMemberElements();
		this.pSpecialization = new SpecializationElements();
		this.pOwnedSpecialization = new OwnedSpecializationElements();
		this.pConjugation = new ConjugationElements();
		this.pOwnedConjugation = new OwnedConjugationElements();
		this.pDisjoining = new DisjoiningElements();
		this.pOwnedDisjoining = new OwnedDisjoiningElements();
		this.pUnioning = new UnioningElements();
		this.pIntersecting = new IntersectingElements();
		this.pDifferencing = new DifferencingElements();
		this.pClassifier = new ClassifierElements();
		this.pClassifierDeclaration = new ClassifierDeclarationElements();
		this.pSuperclassingPart = new SuperclassingPartElements();
		this.pClassifierConjugationPart = new ClassifierConjugationPartElements();
		this.pSubclassification = new SubclassificationElements();
		this.pOwnedsubclassification = new OwnedsubclassificationElements();
		this.pClassifierConjugation = new ClassifierConjugationElements();
		this.eFeatureDirection = new FeatureDirectionElements();
		this.pFeaturePrefix = new FeaturePrefixElements();
		this.pFeature = new FeatureElements();
		this.pFeatureDeclaration = new FeatureDeclarationElements();
		this.pFeatureRelationshipPart = new FeatureRelationshipPartElements();
		this.pChainingPart = new ChainingPartElements();
		this.pInvertingPart = new InvertingPartElements();
		this.pTypeFeaturingPart = new TypeFeaturingPartElements();
		this.pFeatureSpecializationPart = new FeatureSpecializationPartElements();
		this.pMultiplicityPart = new MultiplicityPartElements();
		this.pFeatureSpecialization = new FeatureSpecializationElements();
		this.pTypings = new TypingsElements();
		this.pTypedBy = new TypedByElements();
		this.pSubsettings = new SubsettingsElements();
		this.pSubsets = new SubsetsElements();
		this.pReferences = new ReferencesElements();
		this.pReferencesKeyword = new ReferencesKeywordElements();
		this.pRedefinitions = new RedefinitionsElements();
		this.pRedefines = new RedefinesElements();
		this.pFeatureInverting = new FeatureInvertingElements();
		this.pOwnedFeatureInverting = new OwnedFeatureInvertingElements();
		this.pTypeFeaturing = new TypeFeaturingElements();
		this.pOwnedTypeFeaturing = new OwnedTypeFeaturingElements();
		this.pFeatureTyping = new FeatureTypingElements();
		this.pOwnedFeatureTyping = new OwnedFeatureTypingElements();
		this.pFeatureType = new FeatureTypeElements();
		this.pSubsetting = new SubsettingElements();
		this.pOwnedSubsetting = new OwnedSubsettingElements();
		this.pOwnedReferenceSubsetting = new OwnedReferenceSubsettingElements();
		this.pRedefinition = new RedefinitionElements();
		this.pOwnedRedefinition = new OwnedRedefinitionElements();
		this.pFeatureConjugationPart = new FeatureConjugationPartElements();
		this.pFeatureConjugation = new FeatureConjugationElements();
		this.pValuePart = new ValuePartElements();
		this.pFeatureValue = new FeatureValueElements();
		this.pMultiplicity = new MultiplicityElements();
		this.pMultiplicitySubset = new MultiplicitySubsetElements();
		this.pMultiplicityRange = new MultiplicityRangeElements();
		this.pOwnedMultiplicity = new OwnedMultiplicityElements();
		this.pOwnedMultiplicityRange = new OwnedMultiplicityRangeElements();
		this.pMultiplicityBounds = new MultiplicityBoundsElements();
		this.pMultiplicityExpressionMember = new MultiplicityExpressionMemberElements();
		this.pDataType = new DataTypeElements();
		this.pClass = new ClassElements();
		this.pStructure = new StructureElements();
		this.pAssociation = new AssociationElements();
		this.pAssociationStructure = new AssociationStructureElements();
		this.pConnector = new ConnectorElements();
		this.pConnectorDeclaration = new ConnectorDeclarationElements();
		this.pBinaryConnectorDeclaration = new BinaryConnectorDeclarationElements();
		this.pNaryConnectorDeclaration = new NaryConnectorDeclarationElements();
		this.pConnectorEndMember = new ConnectorEndMemberElements();
		this.pConnectorEnd = new ConnectorEndElements();
		this.pBindingConnector = new BindingConnectorElements();
		this.pBindingConnectorDeclaration = new BindingConnectorDeclarationElements();
		this.pSuccession = new SuccessionElements();
		this.pSuccessionDeclaration = new SuccessionDeclarationElements();
		this.pBehavior = new BehaviorElements();
		this.pStep = new StepElements();
		this.pStepDeclaration = new StepDeclarationElements();
		this.pFunction = new FunctionElements();
		this.pFunctionBody = new FunctionBodyElements();
		this.pFunctionBodyPart = new FunctionBodyPartElements();
		this.pReturnFeatureMember = new ReturnFeatureMemberElements();
		this.pResultExpressionMember = new ResultExpressionMemberElements();
		this.pExpression = new ExpressionElements();
		this.pExpressionDeclaration = new ExpressionDeclarationElements();
		this.pPredicate = new PredicateElements();
		this.pBooleanExpression = new BooleanExpressionElements();
		this.pInvariant = new InvariantElements();
		this.pInteraction = new InteractionElements();
		this.pItemFlow = new ItemFlowElements();
		this.pSuccessionItemFlow = new SuccessionItemFlowElements();
		this.pItemFlowDeclaration = new ItemFlowDeclarationElements();
		this.pItemFeatureMember = new ItemFeatureMemberElements();
		this.pItemFeature = new ItemFeatureElements();
		this.pItemFeatureSpecializationPart = new ItemFeatureSpecializationPartElements();
		this.pItemFlowEndMember = new ItemFlowEndMemberElements();
		this.pItemFlowEnd = new ItemFlowEndElements();
		this.pItemFlowEndSubsetting = new ItemFlowEndSubsettingElements();
		this.pFeatureChainPrefix = new FeatureChainPrefixElements();
		this.pItemFlowFeatureMember = new ItemFlowFeatureMemberElements();
		this.pItemFlowFeature = new ItemFlowFeatureElements();
		this.pItemFlowRedefinition = new ItemFlowRedefinitionElements();
		this.pMetaclass = new MetaclassElements();
		this.pPrefixMetadataAnnotation = new PrefixMetadataAnnotationElements();
		this.pPrefixMetadataMember = new PrefixMetadataMemberElements();
		this.pPrefixMetadataFeature = new PrefixMetadataFeatureElements();
		this.pMetadataFeature = new MetadataFeatureElements();
		this.pMetadataFeatureDeclaration = new MetadataFeatureDeclarationElements();
		this.pMetadataTyping = new MetadataTypingElements();
		this.pMetadataBody = new MetadataBodyElements();
		this.pMetadataBodyFeatureMember = new MetadataBodyFeatureMemberElements();
		this.pMetadataBodyFeature = new MetadataBodyFeatureElements();
		this.pExpressionBody = new ExpressionBodyElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.omg.kerml.xtext.KerML".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public KerMLExpressionsGrammarAccess getKerMLExpressionsGrammarAccess() {
		return gaKerMLExpressions;
	}

	
	///* ROOT NAMESPACE */
	//RootNamespace returns SysML::Namespace :
	//    {SysML::Namespace}NamespaceBodyElement*
	//;
	public RootNamespaceElements getRootNamespaceAccess() {
		return pRootNamespace;
	}
	
	public ParserRule getRootNamespaceRule() {
		return getRootNamespaceAccess().getRule();
	}
	
	///* ELEMENTS */
	///* Elements */
	//fragment Identification returns SysML::Element :
	//      '<' declaredShortName = Name '>' ( declaredName = Name )?
	//    | declaredName = Name
	//;
	public IdentificationElements getIdentificationAccess() {
		return pIdentification;
	}
	
	public ParserRule getIdentificationRule() {
		return getIdentificationAccess().getRule();
	}
	
	///* Relationships */
	//fragment RelationshipBody returns SysML::Relationship :
	//    ';' | '{' RelationshipOwnedElement* '}'
	//;
	public RelationshipBodyElements getRelationshipBodyAccess() {
		return pRelationshipBody;
	}
	
	public ParserRule getRelationshipBodyRule() {
		return getRelationshipBodyAccess().getRule();
	}
	
	//fragment RelationshipOwnedElement returns SysML::Relationship:
	//      ownedRelatedElement += OwnedRelatedElement
	//    | ownedRelationship += OwnedAnnotation
	//;
	public RelationshipOwnedElementElements getRelationshipOwnedElementAccess() {
		return pRelationshipOwnedElement;
	}
	
	public ParserRule getRelationshipOwnedElementRule() {
		return getRelationshipOwnedElementAccess().getRule();
	}
	
	//OwnedRelatedElement returns SysML::Element :
	//    NonFeatureElement | FeatureElement
	//;
	public OwnedRelatedElementElements getOwnedRelatedElementAccess() {
		return pOwnedRelatedElement;
	}
	
	public ParserRule getOwnedRelatedElementRule() {
		return getOwnedRelatedElementAccess().getRule();
	}
	
	///* DEPENDENCIES */
	//Dependency returns SysML::Dependency :
	//    ( ownedRelationship += PrefixMetadataAnnotation )*
	//    'dependency' ( Identification? 'from' )?
	//    client += [SysML::Element|QualifiedName] ( ',' client += [SysML::Element|QualifiedName] )* 'to'
	//    supplier += [SysML::Element|QualifiedName] ( ',' supplier += [SysML::Element|QualifiedName] )*
	//    RelationshipBody
	//;
	public DependencyElements getDependencyAccess() {
		return pDependency;
	}
	
	public ParserRule getDependencyRule() {
		return getDependencyAccess().getRule();
	}
	
	///* ANNOTATIONS */
	//Annotation returns SysML::Annotation :
	//    annotatedElement = [SysML::Element|QualifiedName]
	//;
	public AnnotationElements getAnnotationAccess() {
		return pAnnotation;
	}
	
	public ParserRule getAnnotationRule() {
		return getAnnotationAccess().getRule();
	}
	
	//OwnedAnnotation returns SysML::Annotation :
	//    ownedRelatedElement += AnnotatingElement
	//;
	public OwnedAnnotationElements getOwnedAnnotationAccess() {
		return pOwnedAnnotation;
	}
	
	public ParserRule getOwnedAnnotationRule() {
		return getOwnedAnnotationAccess().getRule();
	}
	
	//AnnotatingElement returns SysML::AnnotatingElement :
	//      Comment
	//    | Documentation
	//    | TextualRepresentation
	//    | MetadataFeature
	//;
	public AnnotatingElementElements getAnnotatingElementAccess() {
		return pAnnotatingElement;
	}
	
	public ParserRule getAnnotatingElementRule() {
		return getAnnotatingElementAccess().getRule();
	}
	
	///* Comments */
	//Comment returns SysML::Comment :
	//    ( 'comment' Identification?
	//      ('about' ownedRelationship += Annotation
	//         ( ',' ownedRelationship += Annotation )* )?
	//    )?
	//    ( 'locale' locale = STRING_VALUE )?
	//    body = REGULAR_COMMENT
	//;
	public CommentElements getCommentAccess() {
		return pComment;
	}
	
	public ParserRule getCommentRule() {
		return getCommentAccess().getRule();
	}
	
	//Documentation returns SysML::Documentation :
	//    'doc' Identification?
	//    ( 'locale' locale = STRING_VALUE )?
	//    body = REGULAR_COMMENT
	//;
	public DocumentationElements getDocumentationAccess() {
		return pDocumentation;
	}
	
	public ParserRule getDocumentationRule() {
		return getDocumentationAccess().getRule();
	}
	
	///* Textual Representation */
	//TextualRepresentation returns SysML::TextualRepresentation :
	//    ( 'rep' Identification? )?
	//    'language' language = STRING_VALUE
	//    body = REGULAR_COMMENT
	//;
	public TextualRepresentationElements getTextualRepresentationAccess() {
		return pTextualRepresentation;
	}
	
	public ParserRule getTextualRepresentationRule() {
		return getTextualRepresentationAccess().getRule();
	}
	
	///* NAMESPACES */
	//Namespace returns SysML::Namespace :
	//    ( ownedRelationship += PrefixMetadataMember )*
	//    NamespaceDeclaration NamespaceBody
	//;
	public NamespaceElements getNamespaceAccess() {
		return pNamespace;
	}
	
	public ParserRule getNamespaceRule() {
		return getNamespaceAccess().getRule();
	}
	
	//fragment NamespaceDeclaration returns SysML::Namespace :
	//    'namespace' Identification?
	//;
	public NamespaceDeclarationElements getNamespaceDeclarationAccess() {
		return pNamespaceDeclaration;
	}
	
	public ParserRule getNamespaceDeclarationRule() {
		return getNamespaceDeclarationAccess().getRule();
	}
	
	//fragment NamespaceBody returns SysML::Namespace :
	//      ';'
	//    | '{' ( // Note: PackageBodyElement is expanded here to avoid
	//            // infinite loops in the incremental parser.
	//            ownedRelationship += NamespaceMember
	//          | ownedRelationship += AliasMember
	//          | ownedRelationship += Import )*
	//      '}'
	//;
	public NamespaceBodyElements getNamespaceBodyAccess() {
		return pNamespaceBody;
	}
	
	public ParserRule getNamespaceBodyRule() {
		return getNamespaceBodyAccess().getRule();
	}
	
	///* Namespace Bodies */
	//fragment NamespaceBodyElement returns SysML::Namespace :
	//      ownedRelationship += NamespaceMember
	//    | ownedRelationship += AliasMember
	//    | ownedRelationship += Import
	//;
	public NamespaceBodyElementElements getNamespaceBodyElementAccess() {
		return pNamespaceBodyElement;
	}
	
	public ParserRule getNamespaceBodyElementRule() {
		return getNamespaceBodyElementAccess().getRule();
	}
	
	//fragment MemberPrefix returns SysML::Membership :
	//    ( visibility = VisibilityIndicator )?
	//;
	public MemberPrefixElements getMemberPrefixAccess() {
		return pMemberPrefix;
	}
	
	public ParserRule getMemberPrefixRule() {
		return getMemberPrefixAccess().getRule();
	}
	
	//NamespaceMember returns SysML::OwningMembership :
	//      NonFeatureMember | NamespaceFeatureMember
	//;
	public NamespaceMemberElements getNamespaceMemberAccess() {
		return pNamespaceMember;
	}
	
	public ParserRule getNamespaceMemberRule() {
		return getNamespaceMemberAccess().getRule();
	}
	
	//NonFeatureMember returns SysML::OwningMembership :
	//    MemberPrefix ownedRelatedElement += MemberElement
	//;
	public NonFeatureMemberElements getNonFeatureMemberAccess() {
		return pNonFeatureMember;
	}
	
	public ParserRule getNonFeatureMemberRule() {
		return getNonFeatureMemberAccess().getRule();
	}
	
	//NamespaceFeatureMember returns SysML::OwningMembership :
	//    MemberPrefix ownedRelatedElement += FeatureElement
	//;
	public NamespaceFeatureMemberElements getNamespaceFeatureMemberAccess() {
		return pNamespaceFeatureMember;
	}
	
	public ParserRule getNamespaceFeatureMemberRule() {
		return getNamespaceFeatureMemberAccess().getRule();
	}
	
	//AliasMember returns SysML::Membership :
	//    MemberPrefix
	//    'alias' ( '<' memberShortName = Name '>' )? ( memberName = Name )?
	//    'for' memberElement = [SysML::Element|QualifiedName]
	//    RelationshipBody
	//;
	public AliasMemberElements getAliasMemberAccess() {
		return pAliasMember;
	}
	
	public ParserRule getAliasMemberRule() {
		return getAliasMemberAccess().getRule();
	}
	
	//fragment ImportPrefix returns SysML::Import :
	//    visibility = VisibilityIndicator
	//    'import' ( isImportAll ?= 'all' )?
	//;
	public ImportPrefixElements getImportPrefixAccess() {
		return pImportPrefix;
	}
	
	public ParserRule getImportPrefixRule() {
		return getImportPrefixAccess().getRule();
	}
	
	//Import returns SysML::Import :
	//    ( MembershipImport | NamespaceImport )
	//    RelationshipBody
	//;
	public ImportElements getImportAccess() {
		return pImport;
	}
	
	public ParserRule getImportRule() {
		return getImportAccess().getRule();
	}
	
	//MembershipImport returns SysML::MembershipImport :
	//    ImportPrefix ImportedMembership
	//;
	public MembershipImportElements getMembershipImportAccess() {
		return pMembershipImport;
	}
	
	public ParserRule getMembershipImportRule() {
		return getMembershipImportAccess().getRule();
	}
	
	//fragment ImportedMembership returns SysML::MembershipImport :
	//    importedMembership = [SysML::Membership|QualifiedName]
	//    ( '::' isRecursive ?= '**' )?
	//;
	public ImportedMembershipElements getImportedMembershipAccess() {
		return pImportedMembership;
	}
	
	public ParserRule getImportedMembershipRule() {
		return getImportedMembershipAccess().getRule();
	}
	
	//NamespaceImport returns SysML::NamespaceImport :
	//    ImportPrefix
	//    ( ImportedNamespace
	//    | ownedRelatedElement += FilterPackage
	//    )
	//;
	public NamespaceImportElements getNamespaceImportAccess() {
		return pNamespaceImport;
	}
	
	public ParserRule getNamespaceImportRule() {
		return getNamespaceImportAccess().getRule();
	}
	
	//fragment ImportedNamespace returns SysML::NamespaceImport :
	//    importedNamespace = [SysML::Namespace|QualifiedName] '::' '*'
	//    ( '::' isRecursive ?= '**' )?
	//;
	public ImportedNamespaceElements getImportedNamespaceAccess() {
		return pImportedNamespace;
	}
	
	public ParserRule getImportedNamespaceRule() {
		return getImportedNamespaceAccess().getRule();
	}
	
	//FilterPackage returns SysML::Package :
	//    ownedRelationship += FilterPackageImport
	//    ( ownedRelationship += FilterPackageMember )+
	//;
	public FilterPackageElements getFilterPackageAccess() {
		return pFilterPackage;
	}
	
	public ParserRule getFilterPackageRule() {
		return getFilterPackageAccess().getRule();
	}
	
	//FilterPackageImport returns SysML::Import :
	//     FilterPackageMembershipImport | FilterPackageNamespaceImport
	//;
	public FilterPackageImportElements getFilterPackageImportAccess() {
		return pFilterPackageImport;
	}
	
	public ParserRule getFilterPackageImportRule() {
		return getFilterPackageImportAccess().getRule();
	}
	
	//FilterPackageMembershipImport returns SysML::MembershipImport :
	//    ImportedMembership
	//;
	public FilterPackageMembershipImportElements getFilterPackageMembershipImportAccess() {
		return pFilterPackageMembershipImport;
	}
	
	public ParserRule getFilterPackageMembershipImportRule() {
		return getFilterPackageMembershipImportAccess().getRule();
	}
	
	//FilterPackageNamespaceImport returns SysML::NamespaceImport :
	//    ImportedNamespace
	//;
	public FilterPackageNamespaceImportElements getFilterPackageNamespaceImportAccess() {
		return pFilterPackageNamespaceImport;
	}
	
	public ParserRule getFilterPackageNamespaceImportRule() {
		return getFilterPackageNamespaceImportAccess().getRule();
	}
	
	//FilterPackageMember returns SysML::ElementFilterMembership :
	//    visibility = FilterPackageMemberVisibility ownedRelatedElement += OwnedExpression ']'
	//;
	public FilterPackageMemberElements getFilterPackageMemberAccess() {
		return pFilterPackageMember;
	}
	
	public ParserRule getFilterPackageMemberRule() {
		return getFilterPackageMemberAccess().getRule();
	}
	
	//enum FilterPackageMemberVisibility returns SysML::VisibilityKind :
	//    private = '['
	//;
	public FilterPackageMemberVisibilityElements getFilterPackageMemberVisibilityAccess() {
		return eFilterPackageMemberVisibility;
	}
	
	public EnumRule getFilterPackageMemberVisibilityRule() {
		return getFilterPackageMemberVisibilityAccess().getRule();
	}
	
	//enum VisibilityIndicator returns SysML::VisibilityKind :
	//    public = 'public' | private = 'private' | protected = 'protected'
	//;
	public VisibilityIndicatorElements getVisibilityIndicatorAccess() {
		return eVisibilityIndicator;
	}
	
	public EnumRule getVisibilityIndicatorRule() {
		return getVisibilityIndicatorAccess().getRule();
	}
	
	///* Namespace Elements */
	//MemberElement returns SysML::Element :
	//    AnnotatingElement | NonFeatureElement
	//;
	public MemberElementElements getMemberElementAccess() {
		return pMemberElement;
	}
	
	public ParserRule getMemberElementRule() {
		return getMemberElementAccess().getRule();
	}
	
	//NonFeatureElement returns SysML::Element :
	//      Dependency
	//    | Namespace
	//    | Package
	//    | LibraryPackage
	//    | Multiplicity
	//    | Type
	//    | Classifier
	//    | Class
	//    | Structure
	//    | Metaclass
	//    | DataType
	//    | Association
	//    | AssociationStructure
	//    | Interaction
	//    | Behavior
	//    | Function
	//    | Predicate
	//    | Specialization
	//    | Conjugation
	//    | FeatureTyping
	//    | Subclassification
	//    | Disjoining
	//    | FeatureInverting
	//    | Subsetting
	//    | Redefinition
	//    | TypeFeaturing
	//;
	public NonFeatureElementElements getNonFeatureElementAccess() {
		return pNonFeatureElement;
	}
	
	public ParserRule getNonFeatureElementRule() {
		return getNonFeatureElementAccess().getRule();
	}
	
	//FeatureElement returns SysML::Feature :
	//      Feature
	//    | Step
	//    | Expression
	//    | BooleanExpression
	//    | Invariant
	//    | Connector
	//    | BindingConnector
	//    | Succession
	//    | ItemFlow
	//    | SuccessionItemFlow
	//;
	public FeatureElementElements getFeatureElementAccess() {
		return pFeatureElement;
	}
	
	public ParserRule getFeatureElementRule() {
		return getFeatureElementAccess().getRule();
	}
	
	///* PACKAGES */
	//Package returns SysML::Package :
	//    ( ownedRelationship += PrefixMetadataMember )*
	//    PackageDeclaration PackageBody
	//;
	public PackageElements getPackageAccess() {
		return pPackage;
	}
	
	public ParserRule getPackageRule() {
		return getPackageAccess().getRule();
	}
	
	//LibraryPackage returns SysML::LibraryPackage :
	//    ( isStandard ?= 'standard' )? 'library'
	//    ( ownedRelationship += PrefixMetadataMember )*
	//    PackageDeclaration PackageBody
	//;
	public LibraryPackageElements getLibraryPackageAccess() {
		return pLibraryPackage;
	}
	
	public ParserRule getLibraryPackageRule() {
		return getLibraryPackageAccess().getRule();
	}
	
	//fragment PackageDeclaration returns SysML::Package :
	//    'package' Identification?
	//;
	public PackageDeclarationElements getPackageDeclarationAccess() {
		return pPackageDeclaration;
	}
	
	public ParserRule getPackageDeclarationRule() {
		return getPackageDeclarationAccess().getRule();
	}
	
	//fragment PackageBody returns SysML::Namespace :
	//      ';'
	//    | '{' ( // Note: PackageBodyElement is expanded here to avoid
	//            // infinite loops in the incremental parser.
	//            ownedRelationship += NamespaceMember
	//          | ownedRelationship += ElementFilterMember
	//          | ownedRelationship += AliasMember
	//          | ownedRelationship += Import )*
	//      '}'
	//;
	public PackageBodyElements getPackageBodyAccess() {
		return pPackageBody;
	}
	
	public ParserRule getPackageBodyRule() {
		return getPackageBodyAccess().getRule();
	}
	
	//ElementFilterMember returns SysML::ElementFilterMembership :
	//    MemberPrefix
	//    'filter' ownedRelatedElement += OwnedExpression ';'
	//;
	public ElementFilterMemberElements getElementFilterMemberAccess() {
		return pElementFilterMember;
	}
	
	public ParserRule getElementFilterMemberRule() {
		return getElementFilterMemberAccess().getRule();
	}
	
	///* TYPES */
	///* Types */
	//fragment TypePrefix returns SysML::Type :
	//    ( isAbstract ?= 'abstract' )?
	//    ( ownedRelationship += PrefixMetadataMember )*
	//;
	public TypePrefixElements getTypePrefixAccess() {
		return pTypePrefix;
	}
	
	public ParserRule getTypePrefixRule() {
		return getTypePrefixAccess().getRule();
	}
	
	//Type returns SysML::Type :
	//    TypePrefix 'type'
	//    TypeDeclaration TypeBody
	//;
	public TypeElements getTypeAccess() {
		return pType;
	}
	
	public ParserRule getTypeRule() {
		return getTypeAccess().getRule();
	}
	
	//fragment TypeDeclaration returns SysML::Type :
	//    ( isSufficient ?= 'all' )? Identification?
	//    ( ownedRelationship += OwnedMultiplicity )?
	//    ( SpecializationPart | ConjugationPart )
	//    TypeRelationshipPart*
	//;
	public TypeDeclarationElements getTypeDeclarationAccess() {
		return pTypeDeclaration;
	}
	
	public ParserRule getTypeDeclarationRule() {
		return getTypeDeclarationAccess().getRule();
	}
	
	//fragment SpecializationPart returns SysML::Type :
	//      ( ':>' | 'specializes' ) ownedRelationship += OwnedSpecialization
	//      ( ',' ownedRelationship += OwnedSpecialization )*
	//;
	public SpecializationPartElements getSpecializationPartAccess() {
		return pSpecializationPart;
	}
	
	public ParserRule getSpecializationPartRule() {
		return getSpecializationPartAccess().getRule();
	}
	
	//fragment ConjugationPart returns SysML::Type :
	//    ( '~' | 'conjugates' ) ownedRelationship += OwnedConjugation
	//;
	public ConjugationPartElements getConjugationPartAccess() {
		return pConjugationPart;
	}
	
	public ParserRule getConjugationPartRule() {
		return getConjugationPartAccess().getRule();
	}
	
	//fragment TypeRelationshipPart returns SysML::Type :
	//    DisjoiningPart | UnioningPart | IntersectingPart | DifferencingPart
	//;
	public TypeRelationshipPartElements getTypeRelationshipPartAccess() {
		return pTypeRelationshipPart;
	}
	
	public ParserRule getTypeRelationshipPartRule() {
		return getTypeRelationshipPartAccess().getRule();
	}
	
	//fragment DisjoiningPart returns SysML::Type :
	//    'disjoint' 'from' ownedRelationship += OwnedDisjoining
	//    ( ',' ownedRelationship += OwnedDisjoining )*
	//;
	public DisjoiningPartElements getDisjoiningPartAccess() {
		return pDisjoiningPart;
	}
	
	public ParserRule getDisjoiningPartRule() {
		return getDisjoiningPartAccess().getRule();
	}
	
	//fragment UnioningPart returns SysML::Type :
	//    'unions' ownedRelationship += Unioning
	//    ( ',' ownedRelationship += Unioning )*
	//;
	public UnioningPartElements getUnioningPartAccess() {
		return pUnioningPart;
	}
	
	public ParserRule getUnioningPartRule() {
		return getUnioningPartAccess().getRule();
	}
	
	//fragment IntersectingPart returns SysML::Type :
	//    'intersects' ownedRelationship += Intersecting
	//    ( ',' ownedRelationship += Intersecting )*
	//;
	public IntersectingPartElements getIntersectingPartAccess() {
		return pIntersectingPart;
	}
	
	public ParserRule getIntersectingPartRule() {
		return getIntersectingPartAccess().getRule();
	}
	
	//fragment DifferencingPart returns SysML::Type :
	//    'differences' ownedRelationship += Differencing
	//    ( ',' ownedRelationship += Differencing )*
	//;
	public DifferencingPartElements getDifferencingPartAccess() {
		return pDifferencingPart;
	}
	
	public ParserRule getDifferencingPartRule() {
		return getDifferencingPartAccess().getRule();
	}
	
	//fragment TypeBody returns SysML::Type :
	//     ';'
	//    | '{' ( ownedRelationship += NonFeatureMember
	//          | ownedRelationship += FeatureMember
	//          | ownedRelationship += AliasMember
	//          | ownedRelationship += Import
	//          )*
	//      '}'
	//;
	public TypeBodyElements getTypeBodyAccess() {
		return pTypeBody;
	}
	
	public ParserRule getTypeBodyRule() {
		return getTypeBodyAccess().getRule();
	}
	
	///* Feature Membership */
	//FeatureMember returns SysML::OwningMembership :
	//    TypeFeatureMember | OwnedFeatureMember
	//;
	public FeatureMemberElements getFeatureMemberAccess() {
		return pFeatureMember;
	}
	
	public ParserRule getFeatureMemberRule() {
		return getFeatureMemberAccess().getRule();
	}
	
	//TypeFeatureMember returns SysML::OwningMembership :
	//    MemberPrefix 'member' ownedRelatedElement += FeatureElement
	//;
	public TypeFeatureMemberElements getTypeFeatureMemberAccess() {
		return pTypeFeatureMember;
	}
	
	public ParserRule getTypeFeatureMemberRule() {
		return getTypeFeatureMemberAccess().getRule();
	}
	
	//OwnedFeatureMember returns SysML::FeatureMembership :
	//    MemberPrefix ownedRelatedElement += FeatureElement
	//;
	public OwnedFeatureMemberElements getOwnedFeatureMemberAccess() {
		return pOwnedFeatureMember;
	}
	
	public ParserRule getOwnedFeatureMemberRule() {
		return getOwnedFeatureMemberAccess().getRule();
	}
	
	///* Specialization */
	//Specialization returns SysML::Specialization :
	//    ( 'specialization' Identification? )?
	//    'subtype'
	//    ( specific = [SysML::Type | QualifiedName]
	//    | ownedRelatedElement += OwnedFeatureChain )
	//    ( ':>' | 'specializes')
	//    ( general = [SysML::Type | QualifiedName]
	//    | ownedRelatedElement += OwnedFeatureChain )
	//    RelationshipBody
	//;
	public SpecializationElements getSpecializationAccess() {
		return pSpecialization;
	}
	
	public ParserRule getSpecializationRule() {
		return getSpecializationAccess().getRule();
	}
	
	//OwnedSpecialization returns SysML::Specialization :
	//      general = [SysML::Type | QualifiedName]
	//    | ownedRelatedElement += OwnedFeatureChain
	//;
	public OwnedSpecializationElements getOwnedSpecializationAccess() {
		return pOwnedSpecialization;
	}
	
	public ParserRule getOwnedSpecializationRule() {
		return getOwnedSpecializationAccess().getRule();
	}
	
	///* Conjugation */
	//Conjugation returns SysML::Conjugation :
	//    ( 'conjugation' Identification? )?
	//    'conjugate'
	//    ( conjugatedType = [SysML::Type | QualifiedName]
	//    | ownedRelatedElement += OwnedFeatureChain )
	//    ( '~' | 'conjugates')
	//    ( originalType = [SysML::Type | QualifiedName]
	//    | ownedRelatedElement += OwnedFeatureChain )
	//    RelationshipBody
	//;
	public ConjugationElements getConjugationAccess() {
		return pConjugation;
	}
	
	public ParserRule getConjugationRule() {
		return getConjugationAccess().getRule();
	}
	
	//OwnedConjugation returns SysML::Conjugation :
	//      originalType = [SysML::Type | QualifiedName]
	//    | ownedRelatedElement += OwnedFeatureChain
	//;
	public OwnedConjugationElements getOwnedConjugationAccess() {
		return pOwnedConjugation;
	}
	
	public ParserRule getOwnedConjugationRule() {
		return getOwnedConjugationAccess().getRule();
	}
	
	///* Disjoining */
	//Disjoining returns SysML::Disjoining :
	//    ( 'disjoining' Identification? )?
	//    'disjoint'
	//    ( typeDisjoined = [SysML::Type | QualifiedName]
	//    | ownedRelatedElement += OwnedFeatureChain )
	//    'from'
	//    ( disjoiningType = [SysML::Type | QualifiedName]
	//    | ownedRelatedElement += OwnedFeatureChain )
	//    RelationshipBody
	//;
	public DisjoiningElements getDisjoiningAccess() {
		return pDisjoining;
	}
	
	public ParserRule getDisjoiningRule() {
		return getDisjoiningAccess().getRule();
	}
	
	//OwnedDisjoining returns SysML::Disjoining :
	//      disjoiningType = [SysML::Type | QualifiedName]
	//    | ownedRelatedElement += OwnedFeatureChain
	//;
	public OwnedDisjoiningElements getOwnedDisjoiningAccess() {
		return pOwnedDisjoining;
	}
	
	public ParserRule getOwnedDisjoiningRule() {
		return getOwnedDisjoiningAccess().getRule();
	}
	
	///* Unioning, Intersecting and Differencing */
	//Unioning returns SysML::Unioning :
	//      unioningType = [SysML::Type | QualifiedName]
	//    | ownedRelatedElement += OwnedFeatureChain
	//;
	public UnioningElements getUnioningAccess() {
		return pUnioning;
	}
	
	public ParserRule getUnioningRule() {
		return getUnioningAccess().getRule();
	}
	
	//Intersecting returns SysML::Intersecting :
	//      intersectingType = [SysML::Type | QualifiedName]
	//    | ownedRelatedElement += OwnedFeatureChain
	//;
	public IntersectingElements getIntersectingAccess() {
		return pIntersecting;
	}
	
	public ParserRule getIntersectingRule() {
		return getIntersectingAccess().getRule();
	}
	
	//Differencing returns SysML::Differencing :
	//      differencingType = [SysML::Type | QualifiedName]
	//    | ownedRelatedElement += OwnedFeatureChain
	//;
	public DifferencingElements getDifferencingAccess() {
		return pDifferencing;
	}
	
	public ParserRule getDifferencingRule() {
		return getDifferencingAccess().getRule();
	}
	
	///* CLASSIFIERS */
	///* Classifiers */
	//Classifier returns SysML::Classifier :
	//    TypePrefix 'classifier'
	//    ClassifierDeclaration TypeBody
	//;
	public ClassifierElements getClassifierAccess() {
		return pClassifier;
	}
	
	public ParserRule getClassifierRule() {
		return getClassifierAccess().getRule();
	}
	
	//fragment ClassifierDeclaration returns SysML::Classifier :
	//    (isSufficient ?= 'all' )? Identification?
	//    ( ownedRelationship += OwnedMultiplicity )?
	//    ( SuperclassingPart | ClassifierConjugationPart )?
	//    TypeRelationshipPart*
	//;
	public ClassifierDeclarationElements getClassifierDeclarationAccess() {
		return pClassifierDeclaration;
	}
	
	public ParserRule getClassifierDeclarationRule() {
		return getClassifierDeclarationAccess().getRule();
	}
	
	//fragment SuperclassingPart returns SysML::Classifier :
	//    ( ':>' | 'specializes' ) ownedRelationship += Ownedsubclassification
	//    ( ',' ownedRelationship += Ownedsubclassification )*
	//;
	public SuperclassingPartElements getSuperclassingPartAccess() {
		return pSuperclassingPart;
	}
	
	public ParserRule getSuperclassingPartRule() {
		return getSuperclassingPartAccess().getRule();
	}
	
	//fragment ClassifierConjugationPart returns SysML::Classifier :
	//    ( '~' | 'conjugates' ) ownedRelationship += ClassifierConjugation
	//;
	public ClassifierConjugationPartElements getClassifierConjugationPartAccess() {
		return pClassifierConjugationPart;
	}
	
	public ParserRule getClassifierConjugationPartRule() {
		return getClassifierConjugationPartAccess().getRule();
	}
	
	///* Subclassification */
	//Subclassification returns SysML::Subclassification :
	//    ( 'specialization' Identification? )?
	//    'subclassifier' subclassifier = [SysML::Classifier | QualifiedName]
	//    ( ':>' | 'specializes') superclassifier = [SysML::Classifier | QualifiedName]
	//    RelationshipBody
	//;
	public SubclassificationElements getSubclassificationAccess() {
		return pSubclassification;
	}
	
	public ParserRule getSubclassificationRule() {
		return getSubclassificationAccess().getRule();
	}
	
	//Ownedsubclassification returns SysML::Subclassification :
	//    superclassifier = [SysML::Classifier | QualifiedName]
	//;
	public OwnedsubclassificationElements getOwnedsubclassificationAccess() {
		return pOwnedsubclassification;
	}
	
	public ParserRule getOwnedsubclassificationRule() {
		return getOwnedsubclassificationAccess().getRule();
	}
	
	///* Classifier Conjugation */
	//ClassifierConjugation returns SysML::Conjugation :
	//    originalType = [SysML::Classifier | QualifiedName]
	//;
	public ClassifierConjugationElements getClassifierConjugationAccess() {
		return pClassifierConjugation;
	}
	
	public ParserRule getClassifierConjugationRule() {
		return getClassifierConjugationAccess().getRule();
	}
	
	///* FEATURES */
	///* Features */
	//enum FeatureDirection returns SysML::FeatureDirectionKind:
	//    in = 'in' | out = 'out' | inout = 'inout'
	//;
	public FeatureDirectionElements getFeatureDirectionAccess() {
		return eFeatureDirection;
	}
	
	public EnumRule getFeatureDirectionRule() {
		return getFeatureDirectionAccess().getRule();
	}
	
	//fragment FeaturePrefix returns SysML::Feature :
	//    ( direction = FeatureDirection )?
	//    ( isAbstract ?= 'abstract' )?
	//    ( isComposite ?= 'composite' | isPortion ?= 'portion' )?
	//    ( isReadOnly ?= 'readonly' )?
	//    ( isDerived ?= 'derived' )?
	//    ( isEnd ?= 'end' )?
	//    ( ownedRelationship += PrefixMetadataMember )*
	//;
	public FeaturePrefixElements getFeaturePrefixAccess() {
		return pFeaturePrefix;
	}
	
	public ParserRule getFeaturePrefixRule() {
		return getFeaturePrefixAccess().getRule();
	}
	
	//Feature returns SysML::Feature :
	//    FeaturePrefix
	//    ( 'feature'? FeatureDeclaration
	//    | ownedRelationship += PrefixMetadataMember
	//    | 'feature'
	//    )
	//    ValuePart? TypeBody
	//;
	public FeatureElements getFeatureAccess() {
		return pFeature;
	}
	
	public ParserRule getFeatureRule() {
		return getFeatureAccess().getRule();
	}
	
	//fragment FeatureDeclaration returns SysML::Feature :
	//    ( isSufficient ?= 'all' )?
	//    ( Identification ( FeatureSpecializationPart | FeatureConjugationPart )?
	//    | FeatureSpecializationPart
	//    | FeatureConjugationPart
	//    )
	//    FeatureRelationshipPart*
	//;
	public FeatureDeclarationElements getFeatureDeclarationAccess() {
		return pFeatureDeclaration;
	}
	
	public ParserRule getFeatureDeclarationRule() {
		return getFeatureDeclarationAccess().getRule();
	}
	
	//fragment FeatureRelationshipPart returns SysML::Feature :
	//    TypeRelationshipPart | ChainingPart | InvertingPart | TypeFeaturingPart
	//;
	public FeatureRelationshipPartElements getFeatureRelationshipPartAccess() {
		return pFeatureRelationshipPart;
	}
	
	public ParserRule getFeatureRelationshipPartRule() {
		return getFeatureRelationshipPartAccess().getRule();
	}
	
	//fragment ChainingPart returns SysML::Feature :
	//    'chains' ( ownedRelationship += OwnedFeatureChaining | FeatureChain )
	//;
	public ChainingPartElements getChainingPartAccess() {
		return pChainingPart;
	}
	
	public ParserRule getChainingPartRule() {
		return getChainingPartAccess().getRule();
	}
	
	//fragment InvertingPart returns SysML::Feature :
	//    'inverse' 'of' ownedRelationship += OwnedFeatureInverting
	//;
	public InvertingPartElements getInvertingPartAccess() {
		return pInvertingPart;
	}
	
	public ParserRule getInvertingPartRule() {
		return getInvertingPartAccess().getRule();
	}
	
	//fragment TypeFeaturingPart returns SysML::Feature :
	//    'featured' 'by' ownedRelationship += OwnedTypeFeaturing
	//    ( ',' ownedRelationship += OwnedTypeFeaturing )*
	//;
	public TypeFeaturingPartElements getTypeFeaturingPartAccess() {
		return pTypeFeaturingPart;
	}
	
	public ParserRule getTypeFeaturingPartRule() {
		return getTypeFeaturingPartAccess().getRule();
	}
	
	//fragment FeatureSpecializationPart returns SysML::Feature :
	//      ( -> FeatureSpecialization )+ MultiplicityPart? FeatureSpecialization*
	//    | MultiplicityPart FeatureSpecialization*
	//;
	public FeatureSpecializationPartElements getFeatureSpecializationPartAccess() {
		return pFeatureSpecializationPart;
	}
	
	public ParserRule getFeatureSpecializationPartRule() {
		return getFeatureSpecializationPartAccess().getRule();
	}
	
	//fragment MultiplicityPart returns SysML::Feature :
	//      ownedRelationship += OwnedMultiplicity
	//    | ( ownedRelationship += OwnedMultiplicity )?
	//      ( isOrdered ?= 'ordered' isNonunique ?= 'nonunique'?
	//      | isNonunique ?= 'nonunique' isOrdered ?= 'ordered'?
	//      )
	//;
	public MultiplicityPartElements getMultiplicityPartAccess() {
		return pMultiplicityPart;
	}
	
	public ParserRule getMultiplicityPartRule() {
		return getMultiplicityPartAccess().getRule();
	}
	
	//fragment FeatureSpecialization returns SysML::Feature :
	//    Typings | Subsettings | References | Redefinitions
	//;
	public FeatureSpecializationElements getFeatureSpecializationAccess() {
		return pFeatureSpecialization;
	}
	
	public ParserRule getFeatureSpecializationRule() {
		return getFeatureSpecializationAccess().getRule();
	}
	
	//fragment Typings returns SysML::Feature :
	//    TypedBy ( ',' ownedRelationship += OwnedFeatureTyping )*
	//;
	public TypingsElements getTypingsAccess() {
		return pTypings;
	}
	
	public ParserRule getTypingsRule() {
		return getTypingsAccess().getRule();
	}
	
	//fragment TypedBy returns SysML::Feature :
	//    ( ':' | 'typed' 'by' ) ownedRelationship += OwnedFeatureTyping
	//;
	public TypedByElements getTypedByAccess() {
		return pTypedBy;
	}
	
	public ParserRule getTypedByRule() {
		return getTypedByAccess().getRule();
	}
	
	//fragment Subsettings returns SysML::Feature :
	//    Subsets ( ',' ownedRelationship += OwnedSubsetting )*
	//;
	public SubsettingsElements getSubsettingsAccess() {
		return pSubsettings;
	}
	
	public ParserRule getSubsettingsRule() {
		return getSubsettingsAccess().getRule();
	}
	
	//fragment Subsets returns SysML::Feature :
	//    ( ':>' | 'subsets' ) ownedRelationship += OwnedSubsetting
	//;
	public SubsetsElements getSubsetsAccess() {
		return pSubsets;
	}
	
	public ParserRule getSubsetsRule() {
		return getSubsetsAccess().getRule();
	}
	
	//fragment References returns SysML::Feature :
	//    ReferencesKeyword ownedRelationship += OwnedReferenceSubsetting
	//;
	public ReferencesElements getReferencesAccess() {
		return pReferences;
	}
	
	public ParserRule getReferencesRule() {
		return getReferencesAccess().getRule();
	}
	
	//ReferencesKeyword :
	//    '::>' | 'references'
	//;
	public ReferencesKeywordElements getReferencesKeywordAccess() {
		return pReferencesKeyword;
	}
	
	public ParserRule getReferencesKeywordRule() {
		return getReferencesKeywordAccess().getRule();
	}
	
	//fragment Redefinitions returns SysML::Feature :
	//    Redefines ( ',' ownedRelationship += OwnedRedefinition )*
	//;
	public RedefinitionsElements getRedefinitionsAccess() {
		return pRedefinitions;
	}
	
	public ParserRule getRedefinitionsRule() {
		return getRedefinitionsAccess().getRule();
	}
	
	//fragment Redefines returns SysML::Feature :
	//    ( ':>>' | 'redefines' ) ownedRelationship += OwnedRedefinition
	//;
	public RedefinesElements getRedefinesAccess() {
		return pRedefines;
	}
	
	public ParserRule getRedefinesRule() {
		return getRedefinesAccess().getRule();
	}
	
	///* Feature Inverting */
	//FeatureInverting returns SysML::FeatureInverting :
	//    ( 'inverting' Identification? )?
	//    'inverse'
	//    ( featureInverted = [SysML::Feature| QualifiedName]
	//    | ownedRelatedElement += OwnedFeatureChain )
	//    'of'
	//    ( invertingFeature = [SysML::Feature | QualifiedName]
	//    | ownedRelatedElement += OwnedFeatureChain )
	//    RelationshipBody
	//;
	public FeatureInvertingElements getFeatureInvertingAccess() {
		return pFeatureInverting;
	}
	
	public ParserRule getFeatureInvertingRule() {
		return getFeatureInvertingAccess().getRule();
	}
	
	//OwnedFeatureInverting returns SysML::FeatureInverting :
	//      invertingFeature = [SysML::Feature | QualifiedName]
	//    | ownedRelatedElement += OwnedFeatureChain
	//;
	public OwnedFeatureInvertingElements getOwnedFeatureInvertingAccess() {
		return pOwnedFeatureInverting;
	}
	
	public ParserRule getOwnedFeatureInvertingRule() {
		return getOwnedFeatureInvertingAccess().getRule();
	}
	
	///* Type Featuring */
	//TypeFeaturing returns SysML::TypeFeaturing :
	//    'featuring' ( Identification? 'of')?
	//    featureOfType = [SysML::Feature | QualifiedName]
	//    'by' featuringType = [SysML::Feature | QualifiedName]
	//    RelationshipBody
	//;
	public TypeFeaturingElements getTypeFeaturingAccess() {
		return pTypeFeaturing;
	}
	
	public ParserRule getTypeFeaturingRule() {
		return getTypeFeaturingAccess().getRule();
	}
	
	//OwnedTypeFeaturing returns SysML::TypeFeaturing :
	//    featuringType = [SysML::Type | QualifiedName]
	//;
	public OwnedTypeFeaturingElements getOwnedTypeFeaturingAccess() {
		return pOwnedTypeFeaturing;
	}
	
	public ParserRule getOwnedTypeFeaturingRule() {
		return getOwnedTypeFeaturingAccess().getRule();
	}
	
	///* Feature Typing */
	//FeatureTyping returns SysML::FeatureTyping :
	//    ( 'specialization' Identification? )?
	//    'typing' typedFeature = [SysML::Feature | QualifiedName]
	//    (':' | 'typed' 'by') FeatureType
	//    RelationshipBody
	//;
	public FeatureTypingElements getFeatureTypingAccess() {
		return pFeatureTyping;
	}
	
	public ParserRule getFeatureTypingRule() {
		return getFeatureTypingAccess().getRule();
	}
	
	//@Override
	//OwnedFeatureTyping returns SysML::FeatureTyping :
	//    FeatureType
	//;
	public OwnedFeatureTypingElements getOwnedFeatureTypingAccess() {
		return pOwnedFeatureTyping;
	}
	
	public ParserRule getOwnedFeatureTypingRule() {
		return getOwnedFeatureTypingAccess().getRule();
	}
	
	//fragment FeatureType returns SysML::FeatureTyping :
	//      type = [SysML::Type | QualifiedName]
	//    | ownedRelatedElement += OwnedFeatureChain
	//;
	public FeatureTypeElements getFeatureTypeAccess() {
		return pFeatureType;
	}
	
	public ParserRule getFeatureTypeRule() {
		return getFeatureTypeAccess().getRule();
	}
	
	///* Subsetting */
	//Subsetting returns SysML::Subsetting :
	//    ( 'specialization' Identification? )?
	//    'subset'
	//    ( subsettingFeature = [SysML::Feature | QualifiedName]
	//    | ownedRelatedElement += OwnedFeatureChain )
	//    ( ':>' | 'subsets' )
	//    ( subsettedFeature = [SysML::Feature | QualifiedName]
	//    | ownedRelatedElement += OwnedFeatureChain )
	//    RelationshipBody
	//;
	public SubsettingElements getSubsettingAccess() {
		return pSubsetting;
	}
	
	public ParserRule getSubsettingRule() {
		return getSubsettingAccess().getRule();
	}
	
	//OwnedSubsetting returns SysML::Subsetting:
	//      subsettedFeature = [SysML::Feature | QualifiedName]
	//    | ownedRelatedElement += OwnedFeatureChain
	//;
	public OwnedSubsettingElements getOwnedSubsettingAccess() {
		return pOwnedSubsetting;
	}
	
	public ParserRule getOwnedSubsettingRule() {
		return getOwnedSubsettingAccess().getRule();
	}
	
	//OwnedReferenceSubsetting returns SysML::ReferenceSubsetting:
	//      referencedFeature = [SysML::Feature | QualifiedName]
	//    | ownedRelatedElement += OwnedFeatureChain
	//;
	public OwnedReferenceSubsettingElements getOwnedReferenceSubsettingAccess() {
		return pOwnedReferenceSubsetting;
	}
	
	public ParserRule getOwnedReferenceSubsettingRule() {
		return getOwnedReferenceSubsettingAccess().getRule();
	}
	
	///* Redefinition */
	//Redefinition returns SysML::Redefinition :
	//    ( 'specialization' Identification? )?
	//    'redefinition'
	//    ( redefiningFeature = [SysML::Feature | QualifiedName]
	//    | ownedRelatedElement += OwnedFeatureChain )
	//    ( ':>>' | 'redefines' )
	//    ( redefinedFeature = [SysML::Feature | QualifiedName]
	//    | ownedRelatedElement += OwnedFeatureChain )
	//    RelationshipBody
	//;
	public RedefinitionElements getRedefinitionAccess() {
		return pRedefinition;
	}
	
	public ParserRule getRedefinitionRule() {
		return getRedefinitionAccess().getRule();
	}
	
	//OwnedRedefinition returns SysML::Redefinition:
	//      redefinedFeature = [SysML::Feature | QualifiedName]
	//    | ownedRelatedElement += OwnedFeatureChain
	//;
	public OwnedRedefinitionElements getOwnedRedefinitionAccess() {
		return pOwnedRedefinition;
	}
	
	public ParserRule getOwnedRedefinitionRule() {
		return getOwnedRedefinitionAccess().getRule();
	}
	
	///* Feature Conjugation */
	//fragment FeatureConjugationPart returns SysML::Feature :
	//    ( '~' | 'conjugates' ) ownedRelationship += FeatureConjugation
	//;
	public FeatureConjugationPartElements getFeatureConjugationPartAccess() {
		return pFeatureConjugationPart;
	}
	
	public ParserRule getFeatureConjugationPartRule() {
		return getFeatureConjugationPartAccess().getRule();
	}
	
	//FeatureConjugation returns SysML::Conjugation :
	//    originalType = [SysML::Feature | QualifiedName ]
	//;
	public FeatureConjugationElements getFeatureConjugationAccess() {
		return pFeatureConjugation;
	}
	
	public ParserRule getFeatureConjugationRule() {
		return getFeatureConjugationAccess().getRule();
	}
	
	///* FEATURE VALUES */
	//fragment ValuePart returns SysML::Feature :
	//      ownedRelationship += FeatureValue
	//;
	public ValuePartElements getValuePartAccess() {
		return pValuePart;
	}
	
	public ParserRule getValuePartRule() {
		return getValuePartAccess().getRule();
	}
	
	//FeatureValue returns SysML::FeatureValue :
	//    ( '='
	//    | isInitial ?= ':='
	//    | isDefault ?= 'default' ( '=' | isInitial ?= ':=' )?
	//    )
	//    ownedRelatedElement += OwnedExpression
	//;
	public FeatureValueElements getFeatureValueAccess() {
		return pFeatureValue;
	}
	
	public ParserRule getFeatureValueRule() {
		return getFeatureValueAccess().getRule();
	}
	
	///* MULTIPLICITIES */
	//Multiplicity returns SysML::Multiplicity :
	//    MultiplicitySubset | MultiplicityRange
	//;
	public MultiplicityElements getMultiplicityAccess() {
		return pMultiplicity;
	}
	
	public ParserRule getMultiplicityRule() {
		return getMultiplicityAccess().getRule();
	}
	
	//MultiplicitySubset returns SysML::Multiplicity :
	//    'multiplicity' Identification? Subsets TypeBody
	//;
	public MultiplicitySubsetElements getMultiplicitySubsetAccess() {
		return pMultiplicitySubset;
	}
	
	public ParserRule getMultiplicitySubsetRule() {
		return getMultiplicitySubsetAccess().getRule();
	}
	
	//MultiplicityRange returns SysML::MultiplicityRange :
	//    'multiplicity' Identification? MultiplicityBounds TypeBody
	//;
	public MultiplicityRangeElements getMultiplicityRangeAccess() {
		return pMultiplicityRange;
	}
	
	public ParserRule getMultiplicityRangeRule() {
		return getMultiplicityRangeAccess().getRule();
	}
	
	//OwnedMultiplicity returns SysML::OwningMembership :
	//    ownedRelatedElement += OwnedMultiplicityRange
	//;
	public OwnedMultiplicityElements getOwnedMultiplicityAccess() {
		return pOwnedMultiplicity;
	}
	
	public ParserRule getOwnedMultiplicityRule() {
		return getOwnedMultiplicityAccess().getRule();
	}
	
	//OwnedMultiplicityRange returns SysML::MultiplicityRange :
	//    MultiplicityBounds
	//;
	public OwnedMultiplicityRangeElements getOwnedMultiplicityRangeAccess() {
		return pOwnedMultiplicityRange;
	}
	
	public ParserRule getOwnedMultiplicityRangeRule() {
		return getOwnedMultiplicityRangeAccess().getRule();
	}
	
	//fragment MultiplicityBounds returns SysML::MultiplicityRange :
	//    // TODO: Allow general expressions for bounds. (Causes LL parsing issues.)
	//    '[' ownedRelationship += MultiplicityExpressionMember
	//          ( '..' ownedRelationship += MultiplicityExpressionMember )? ']'
	//;
	public MultiplicityBoundsElements getMultiplicityBoundsAccess() {
		return pMultiplicityBounds;
	}
	
	public ParserRule getMultiplicityBoundsRule() {
		return getMultiplicityBoundsAccess().getRule();
	}
	
	//MultiplicityExpressionMember returns SysML::OwningMembership :
	//    ownedRelatedElement += ( LiteralExpression | FeatureReferenceExpression )
	//;
	public MultiplicityExpressionMemberElements getMultiplicityExpressionMemberAccess() {
		return pMultiplicityExpressionMember;
	}
	
	public ParserRule getMultiplicityExpressionMemberRule() {
		return getMultiplicityExpressionMemberAccess().getRule();
	}
	
	///* CLASSIFICATION */
	///* Data Types */
	//DataType returns SysML::DataType :
	//    TypePrefix 'datatype'
	//    ClassifierDeclaration TypeBody
	//;
	public DataTypeElements getDataTypeAccess() {
		return pDataType;
	}
	
	public ParserRule getDataTypeRule() {
		return getDataTypeAccess().getRule();
	}
	
	///* Classes */
	//Class returns SysML::Class :
	//    TypePrefix 'class'
	//    ClassifierDeclaration TypeBody
	//;
	public ClassElements getClassAccess() {
		return pClass;
	}
	
	public ParserRule getClassRule() {
		return getClassAccess().getRule();
	}
	
	///* STRUCTURES */
	//Structure returns SysML::Structure :
	//    TypePrefix 'struct'
	//    ClassifierDeclaration TypeBody
	//;
	public StructureElements getStructureAccess() {
		return pStructure;
	}
	
	public ParserRule getStructureRule() {
		return getStructureAccess().getRule();
	}
	
	///* ASSOCIATIONS */
	//Association returns SysML::Association :
	//    TypePrefix 'assoc'
	//    ClassifierDeclaration TypeBody
	//;
	public AssociationElements getAssociationAccess() {
		return pAssociation;
	}
	
	public ParserRule getAssociationRule() {
		return getAssociationAccess().getRule();
	}
	
	//AssociationStructure returns SysML::AssociationStructure :
	//    TypePrefix 'assoc' 'struct'
	//    ClassifierDeclaration TypeBody
	//;
	public AssociationStructureElements getAssociationStructureAccess() {
		return pAssociationStructure;
	}
	
	public ParserRule getAssociationStructureRule() {
		return getAssociationStructureAccess().getRule();
	}
	
	///* CONNECTORS */
	///* Connectors */
	//Connector returns SysML::Connector :
	//    FeaturePrefix 'connector'
	//    ( FeatureDeclaration? ValuePart?
	//    | ConnectorDeclaration
	//    )
	//    TypeBody
	//;
	public ConnectorElements getConnectorAccess() {
		return pConnector;
	}
	
	public ParserRule getConnectorRule() {
		return getConnectorAccess().getRule();
	}
	
	//fragment ConnectorDeclaration returns SysML::Connector :
	//    BinaryConnectorDeclaration | NaryConnectorDeclaration
	//;
	public ConnectorDeclarationElements getConnectorDeclarationAccess() {
		return pConnectorDeclaration;
	}
	
	public ParserRule getConnectorDeclarationRule() {
		return getConnectorDeclarationAccess().getRule();
	}
	
	//fragment BinaryConnectorDeclaration returns SysML::Connector :
	//    ( FeatureDeclaration? 'from' | isSufficient ?= 'all' 'from'? )?
	//    ownedRelationship += ConnectorEndMember 'to'
	//    ownedRelationship += ConnectorEndMember
	//;
	public BinaryConnectorDeclarationElements getBinaryConnectorDeclarationAccess() {
		return pBinaryConnectorDeclaration;
	}
	
	public ParserRule getBinaryConnectorDeclarationRule() {
		return getBinaryConnectorDeclarationAccess().getRule();
	}
	
	//fragment NaryConnectorDeclaration returns SysML::Connector :
	//    FeatureDeclaration?
	//    '(' ownedRelationship += ConnectorEndMember ','
	//        ownedRelationship += ConnectorEndMember
	//        ( ',' ownedRelationship += ConnectorEndMember )*
	//    ')'
	//;
	public NaryConnectorDeclarationElements getNaryConnectorDeclarationAccess() {
		return pNaryConnectorDeclaration;
	}
	
	public ParserRule getNaryConnectorDeclarationRule() {
		return getNaryConnectorDeclarationAccess().getRule();
	}
	
	//ConnectorEndMember returns SysML::EndFeatureMembership :
	//    ownedRelatedElement += ConnectorEnd
	//;
	public ConnectorEndMemberElements getConnectorEndMemberAccess() {
		return pConnectorEndMember;
	}
	
	public ParserRule getConnectorEndMemberRule() {
		return getConnectorEndMemberAccess().getRule();
	}
	
	//ConnectorEnd returns SysML::Feature :
	//    ( declaredName = Name ReferencesKeyword )?
	//    ownedRelationship += OwnedReferenceSubsetting
	//    ( ownedRelationship += OwnedMultiplicity )?
	//;
	public ConnectorEndElements getConnectorEndAccess() {
		return pConnectorEnd;
	}
	
	public ParserRule getConnectorEndRule() {
		return getConnectorEndAccess().getRule();
	}
	
	///* Binding Connectors */
	//BindingConnector returns SysML::BindingConnector :
	//    FeaturePrefix 'binding'
	//    BindingConnectorDeclaration TypeBody
	//;
	public BindingConnectorElements getBindingConnectorAccess() {
		return pBindingConnector;
	}
	
	public ParserRule getBindingConnectorRule() {
		return getBindingConnectorAccess().getRule();
	}
	
	//fragment BindingConnectorDeclaration returns SysML::BindingConnector :
	//      FeatureDeclaration
	//      ( 'of' ownedRelationship += ConnectorEndMember
	//        '=' ownedRelationship += ConnectorEndMember )?
	//    | ( isSufficient ?= 'all' )?
	//      ( 'of'? ownedRelationship += ConnectorEndMember
	//        '=' ownedRelationship += ConnectorEndMember )?
	//;
	public BindingConnectorDeclarationElements getBindingConnectorDeclarationAccess() {
		return pBindingConnectorDeclaration;
	}
	
	public ParserRule getBindingConnectorDeclarationRule() {
		return getBindingConnectorDeclarationAccess().getRule();
	}
	
	///* Successions */
	//Succession returns SysML::Succession :
	//    FeaturePrefix 'succession'
	//    SuccessionDeclaration TypeBody
	//;
	public SuccessionElements getSuccessionAccess() {
		return pSuccession;
	}
	
	public ParserRule getSuccessionRule() {
		return getSuccessionAccess().getRule();
	}
	
	//fragment SuccessionDeclaration returns SysML::Succession :
	//      FeatureDeclaration
	//      ( 'first' ownedRelationship += ConnectorEndMember
	//        'then' ownedRelationship += ConnectorEndMember )?
	//    | ( isSufficient ?= 'all' )?
	//      ( 'first'? ownedRelationship += ConnectorEndMember
	//        'then' ownedRelationship += ConnectorEndMember )?
	//;
	public SuccessionDeclarationElements getSuccessionDeclarationAccess() {
		return pSuccessionDeclaration;
	}
	
	public ParserRule getSuccessionDeclarationRule() {
		return getSuccessionDeclarationAccess().getRule();
	}
	
	///* BEHAVIORS */
	///* Behaviors */
	//Behavior returns SysML::Behavior :
	//    TypePrefix 'behavior'
	//    ClassifierDeclaration TypeBody
	//;
	public BehaviorElements getBehaviorAccess() {
		return pBehavior;
	}
	
	public ParserRule getBehaviorRule() {
		return getBehaviorAccess().getRule();
	}
	
	///* Steps */
	//Step returns SysML::Step :
	//    FeaturePrefix 'step'
	//    StepDeclaration TypeBody
	//;
	public StepElements getStepAccess() {
		return pStep;
	}
	
	public ParserRule getStepRule() {
		return getStepAccess().getRule();
	}
	
	//fragment StepDeclaration returns SysML::Step :
	//    FeatureDeclaration? ValuePart?
	//;
	public StepDeclarationElements getStepDeclarationAccess() {
		return pStepDeclaration;
	}
	
	public ParserRule getStepDeclarationRule() {
		return getStepDeclarationAccess().getRule();
	}
	
	///* FUNCTIONS */
	///* Functions */
	//Function returns SysML::Function :
	//    TypePrefix 'function'
	//    ClassifierDeclaration FunctionBody
	//;
	public FunctionElements getFunctionAccess() {
		return pFunction;
	}
	
	public ParserRule getFunctionRule() {
		return getFunctionAccess().getRule();
	}
	
	//fragment FunctionBody returns SysML::Type :
	//    ';' | '{' FunctionBodyPart '}'
	//;
	public FunctionBodyElements getFunctionBodyAccess() {
		return pFunctionBody;
	}
	
	public ParserRule getFunctionBodyRule() {
		return getFunctionBodyAccess().getRule();
	}
	
	//fragment FunctionBodyPart returns SysML::Type :
	//    ( ownedRelationship += NonFeatureMember
	//    | ownedRelationship += FeatureMember
	//    | ownedRelationship += AliasMember
	//    | ownedRelationship += Import
	//    | ownedRelationship += ReturnFeatureMember
	//    )*
	//    ( ownedRelationship += ResultExpressionMember )?
	//;
	public FunctionBodyPartElements getFunctionBodyPartAccess() {
		return pFunctionBodyPart;
	}
	
	public ParserRule getFunctionBodyPartRule() {
		return getFunctionBodyPartAccess().getRule();
	}
	
	//ReturnFeatureMember returns SysML::ReturnParameterMembership :
	//    MemberPrefix 'return'
	//    ownedRelatedElement += FeatureElement
	//;
	public ReturnFeatureMemberElements getReturnFeatureMemberAccess() {
		return pReturnFeatureMember;
	}
	
	public ParserRule getReturnFeatureMemberRule() {
		return getReturnFeatureMemberAccess().getRule();
	}
	
	//@Override
	//ResultExpressionMember returns SysML::ResultExpressionMembership :
	//    MemberPrefix ownedRelatedElement += OwnedExpression
	//;
	public ResultExpressionMemberElements getResultExpressionMemberAccess() {
		return pResultExpressionMember;
	}
	
	public ParserRule getResultExpressionMemberRule() {
		return getResultExpressionMemberAccess().getRule();
	}
	
	///* Expressions */
	//Expression returns SysML::Expression :
	//    FeaturePrefix 'expr'
	//    ExpressionDeclaration FunctionBody
	//;
	public ExpressionElements getExpressionAccess() {
		return pExpression;
	}
	
	public ParserRule getExpressionRule() {
		return getExpressionAccess().getRule();
	}
	
	//fragment ExpressionDeclaration returns SysML::Expression :
	//    FeatureDeclaration? ValuePart?
	//;
	public ExpressionDeclarationElements getExpressionDeclarationAccess() {
		return pExpressionDeclaration;
	}
	
	public ParserRule getExpressionDeclarationRule() {
		return getExpressionDeclarationAccess().getRule();
	}
	
	///* Predicates */
	//Predicate returns SysML::Predicate :
	//    TypePrefix 'predicate'
	//    ClassifierDeclaration FunctionBody
	//;
	public PredicateElements getPredicateAccess() {
		return pPredicate;
	}
	
	public ParserRule getPredicateRule() {
		return getPredicateAccess().getRule();
	}
	
	///* Boolean Expressions */
	//BooleanExpression returns SysML::BooleanExpression :
	//    FeaturePrefix 'bool'
	//    ExpressionDeclaration FunctionBody
	//;
	public BooleanExpressionElements getBooleanExpressionAccess() {
		return pBooleanExpression;
	}
	
	public ParserRule getBooleanExpressionRule() {
		return getBooleanExpressionAccess().getRule();
	}
	
	///* Invariants */
	//Invariant returns SysML::Invariant :
	//    FeaturePrefix 'inv' ( 'true' | isNegated ?= 'false' )?
	//    ExpressionDeclaration FunctionBody
	//;
	public InvariantElements getInvariantAccess() {
		return pInvariant;
	}
	
	public ParserRule getInvariantRule() {
		return getInvariantAccess().getRule();
	}
	
	///* INTERACTIONS */
	///* Interactions */
	//Interaction returns SysML::Interaction :
	//    TypePrefix 'interaction'
	//    ClassifierDeclaration TypeBody
	//;
	public InteractionElements getInteractionAccess() {
		return pInteraction;
	}
	
	public ParserRule getInteractionRule() {
		return getInteractionAccess().getRule();
	}
	
	///* Item Flows */
	//ItemFlow returns SysML::ItemFlow :
	//    FeaturePrefix 'flow'
	//    ItemFlowDeclaration TypeBody
	//;
	public ItemFlowElements getItemFlowAccess() {
		return pItemFlow;
	}
	
	public ParserRule getItemFlowRule() {
		return getItemFlowAccess().getRule();
	}
	
	//SuccessionItemFlow returns SysML::SuccessionItemFlow :
	//    FeaturePrefix 'succession' 'flow' ItemFlowDeclaration TypeBody
	//;
	public SuccessionItemFlowElements getSuccessionItemFlowAccess() {
		return pSuccessionItemFlow;
	}
	
	public ParserRule getSuccessionItemFlowRule() {
		return getSuccessionItemFlowAccess().getRule();
	}
	
	//fragment ItemFlowDeclaration returns SysML::ItemFlow :
	//      FeatureDeclaration? ValuePart?
	//      ( 'of'  ownedRelationship += ItemFeatureMember )?
	//      ( 'from' ownedRelationship += ItemFlowEndMember
	//        'to' ownedRelationship += ItemFlowEndMember )?
	//    | ( isSufficient ?= 'all' )?
	//      ownedRelationship += ItemFlowEndMember 'to'
	//      ownedRelationship += ItemFlowEndMember
	//;
	public ItemFlowDeclarationElements getItemFlowDeclarationAccess() {
		return pItemFlowDeclaration;
	}
	
	public ParserRule getItemFlowDeclarationRule() {
		return getItemFlowDeclarationAccess().getRule();
	}
	
	//ItemFeatureMember returns SysML::FeatureMembership :
	//    ownedRelatedElement += ItemFeature
	//;
	public ItemFeatureMemberElements getItemFeatureMemberAccess() {
		return pItemFeatureMember;
	}
	
	public ParserRule getItemFeatureMemberRule() {
		return getItemFeatureMemberAccess().getRule();
	}
	
	//ItemFeature returns SysML::ItemFeature :
	//      Identification? ItemFeatureSpecializationPart ValuePart?
	//    | Identification? ValuePart
	//    | ownedRelationship += OwnedFeatureTyping ( ownedRelationship += OwnedMultiplicity )?
	//    | ownedRelationship += OwnedMultiplicity ownedRelationship += OwnedFeatureTyping
	//;
	public ItemFeatureElements getItemFeatureAccess() {
		return pItemFeature;
	}
	
	public ParserRule getItemFeatureRule() {
		return getItemFeatureAccess().getRule();
	}
	
	//fragment ItemFeatureSpecializationPart returns SysML::Feature :
	//      ( -> FeatureSpecialization )+ MultiplicityPart? FeatureSpecialization*
	//    | MultiplicityPart FeatureSpecialization+
	//;
	public ItemFeatureSpecializationPartElements getItemFeatureSpecializationPartAccess() {
		return pItemFeatureSpecializationPart;
	}
	
	public ParserRule getItemFeatureSpecializationPartRule() {
		return getItemFeatureSpecializationPartAccess().getRule();
	}
	
	//ItemFlowEndMember returns SysML::EndFeatureMembership :
	//    ownedRelatedElement += ItemFlowEnd
	//;
	public ItemFlowEndMemberElements getItemFlowEndMemberAccess() {
		return pItemFlowEndMember;
	}
	
	public ParserRule getItemFlowEndMemberRule() {
		return getItemFlowEndMemberAccess().getRule();
	}
	
	//ItemFlowEnd returns SysML::ItemFlowEnd :
	//    ( ownedRelationship += ItemFlowEndSubsetting )?
	//    ownedRelationship += ItemFlowFeatureMember
	//;
	public ItemFlowEndElements getItemFlowEndAccess() {
		return pItemFlowEnd;
	}
	
	public ParserRule getItemFlowEndRule() {
		return getItemFlowEndAccess().getRule();
	}
	
	//ItemFlowEndSubsetting returns SysML::ReferenceSubsetting :
	//      referencedFeature = [SysML::Feature | QualifiedName] '.'
	//    | ownedRelatedElement += FeatureChainPrefix
	//;
	public ItemFlowEndSubsettingElements getItemFlowEndSubsettingAccess() {
		return pItemFlowEndSubsetting;
	}
	
	public ParserRule getItemFlowEndSubsettingRule() {
		return getItemFlowEndSubsettingAccess().getRule();
	}
	
	//FeatureChainPrefix returns SysML::Feature :
	//    ( ownedRelationship += OwnedFeatureChaining '.' )+
	//    ownedRelationship += OwnedFeatureChaining '.'
	//;
	public FeatureChainPrefixElements getFeatureChainPrefixAccess() {
		return pFeatureChainPrefix;
	}
	
	public ParserRule getFeatureChainPrefixRule() {
		return getFeatureChainPrefixAccess().getRule();
	}
	
	//ItemFlowFeatureMember returns SysML::FeatureMembership :
	//    ownedRelatedElement += ItemFlowFeature
	//;
	public ItemFlowFeatureMemberElements getItemFlowFeatureMemberAccess() {
		return pItemFlowFeatureMember;
	}
	
	public ParserRule getItemFlowFeatureMemberRule() {
		return getItemFlowFeatureMemberAccess().getRule();
	}
	
	//ItemFlowFeature returns SysML::Feature :
	//    ownedRelationship += ItemFlowRedefinition
	//;
	public ItemFlowFeatureElements getItemFlowFeatureAccess() {
		return pItemFlowFeature;
	}
	
	public ParserRule getItemFlowFeatureRule() {
		return getItemFlowFeatureAccess().getRule();
	}
	
	//ItemFlowRedefinition returns SysML::Redefinition :
	//    redefinedFeature = [SysML::Feature|QualifiedName]
	//;
	public ItemFlowRedefinitionElements getItemFlowRedefinitionAccess() {
		return pItemFlowRedefinition;
	}
	
	public ParserRule getItemFlowRedefinitionRule() {
		return getItemFlowRedefinitionAccess().getRule();
	}
	
	///* METADATA */
	//Metaclass returns SysML::Metaclass :
	//    TypePrefix 'metaclass'
	//    ClassifierDeclaration TypeBody
	//;
	public MetaclassElements getMetaclassAccess() {
		return pMetaclass;
	}
	
	public ParserRule getMetaclassRule() {
		return getMetaclassAccess().getRule();
	}
	
	//PrefixMetadataAnnotation returns SysML::Annotation :
	//    '#' ownedRelatedElement += PrefixMetadataFeature
	//;
	public PrefixMetadataAnnotationElements getPrefixMetadataAnnotationAccess() {
		return pPrefixMetadataAnnotation;
	}
	
	public ParserRule getPrefixMetadataAnnotationRule() {
		return getPrefixMetadataAnnotationAccess().getRule();
	}
	
	//PrefixMetadataMember returns SysML::OwningMembership :
	//    '#' ownedRelatedElement += PrefixMetadataFeature
	//;
	public PrefixMetadataMemberElements getPrefixMetadataMemberAccess() {
		return pPrefixMetadataMember;
	}
	
	public ParserRule getPrefixMetadataMemberRule() {
		return getPrefixMetadataMemberAccess().getRule();
	}
	
	//PrefixMetadataFeature returns SysML::MetadataFeature :
	//    ownedRelationship += MetadataTyping
	//;
	public PrefixMetadataFeatureElements getPrefixMetadataFeatureAccess() {
		return pPrefixMetadataFeature;
	}
	
	public ParserRule getPrefixMetadataFeatureRule() {
		return getPrefixMetadataFeatureAccess().getRule();
	}
	
	//MetadataFeature returns SysML::MetadataFeature :
	//    ( ownedRelationship += PrefixMetadataMember )*
	//    ( '@' | 'metadata' ) MetadataFeatureDeclaration
	//    ( 'about' ownedRelationship += Annotation
	//        ( ',' ownedRelationship += Annotation )*
	//    )?
	//    MetadataBody
	//;
	public MetadataFeatureElements getMetadataFeatureAccess() {
		return pMetadataFeature;
	}
	
	public ParserRule getMetadataFeatureRule() {
		return getMetadataFeatureAccess().getRule();
	}
	
	//fragment MetadataFeatureDeclaration returns SysML::MetadataFeature :
	//    ( Identification ( ':' | 'typed' 'by' ) )? ownedRelationship += MetadataTyping
	//;
	public MetadataFeatureDeclarationElements getMetadataFeatureDeclarationAccess() {
		return pMetadataFeatureDeclaration;
	}
	
	public ParserRule getMetadataFeatureDeclarationRule() {
		return getMetadataFeatureDeclarationAccess().getRule();
	}
	
	//MetadataTyping returns SysML::FeatureTyping :
	//    type = [SysML::Metaclass | QualifiedName]
	//;
	public MetadataTypingElements getMetadataTypingAccess() {
		return pMetadataTyping;
	}
	
	public ParserRule getMetadataTypingRule() {
		return getMetadataTypingAccess().getRule();
	}
	
	//fragment MetadataBody returns SysML::Feature :
	//      ';'
	//    | '{' ( ownedRelationship += NonFeatureMember
	//          | ownedRelationship += MetadataBodyFeatureMember
	//          | ownedRelationship += AliasMember
	//          | ownedRelationship += Import
	//          )*
	//      '}'
	//;
	public MetadataBodyElements getMetadataBodyAccess() {
		return pMetadataBody;
	}
	
	public ParserRule getMetadataBodyRule() {
		return getMetadataBodyAccess().getRule();
	}
	
	//MetadataBodyFeatureMember returns SysML::FeatureMembership :
	//    ownedRelatedElement += MetadataBodyFeature
	//;
	public MetadataBodyFeatureMemberElements getMetadataBodyFeatureMemberAccess() {
		return pMetadataBodyFeatureMember;
	}
	
	public ParserRule getMetadataBodyFeatureMemberRule() {
		return getMetadataBodyFeatureMemberAccess().getRule();
	}
	
	//MetadataBodyFeature returns SysML::Feature :
	//    'feature'? ( ':>>' | 'redefines' )? ownedRelationship += OwnedRedefinition
	//    FeatureSpecializationPart? ValuePart?
	//    MetadataBody
	//;
	public MetadataBodyFeatureElements getMetadataBodyFeatureAccess() {
		return pMetadataBodyFeature;
	}
	
	public ParserRule getMetadataBodyFeatureRule() {
		return getMetadataBodyFeatureAccess().getRule();
	}
	
	///* EXPRESSIONS */
	//@Override
	//ExpressionBody returns SysML::Expression :
	//    '{' FunctionBodyPart '}'
	//;
	public ExpressionBodyElements getExpressionBodyAccess() {
		return pExpressionBody;
	}
	
	public ParserRule getExpressionBodyRule() {
		return getExpressionBodyAccess().getRule();
	}
	
	///* EXPRESSIONS */
	///* Operator Expressions */
	//OwnedExpressionMember returns SysML::FeatureMembership :
	//    ownedRelatedElement += OwnedExpression
	//;
	public KerMLExpressionsGrammarAccess.OwnedExpressionMemberElements getOwnedExpressionMemberAccess() {
		return gaKerMLExpressions.getOwnedExpressionMemberAccess();
	}
	
	public ParserRule getOwnedExpressionMemberRule() {
		return getOwnedExpressionMemberAccess().getRule();
	}
	
	//OwnedExpression returns SysML::Expression :
	//     ConditionalExpression
	//;
	public KerMLExpressionsGrammarAccess.OwnedExpressionElements getOwnedExpressionAccess() {
		return gaKerMLExpressions.getOwnedExpressionAccess();
	}
	
	public ParserRule getOwnedExpressionRule() {
		return getOwnedExpressionAccess().getRule();
	}
	
	//// Conditional Test Expressions
	//OwnedExpressionReference returns SysML::FeatureReferenceExpression :
	//    ownedRelationship += OwnedExpressionMember
	//;
	public KerMLExpressionsGrammarAccess.OwnedExpressionReferenceElements getOwnedExpressionReferenceAccess() {
		return gaKerMLExpressions.getOwnedExpressionReferenceAccess();
	}
	
	public ParserRule getOwnedExpressionReferenceRule() {
		return getOwnedExpressionReferenceAccess().getRule();
	}
	
	//ConditionalExpression returns SysML::Expression :
	//      NullCoalescingExpression
	//    | {SysML::OperatorExpression} operator = ConditionalOperator operand += NullCoalescingExpression
	//          '?' operand += OwnedExpressionReference 'else' operand += OwnedExpressionReference
	//;
	public KerMLExpressionsGrammarAccess.ConditionalExpressionElements getConditionalExpressionAccess() {
		return gaKerMLExpressions.getConditionalExpressionAccess();
	}
	
	public ParserRule getConditionalExpressionRule() {
		return getConditionalExpressionAccess().getRule();
	}
	
	//ConditionalOperator :
	//    'if'
	//;
	public KerMLExpressionsGrammarAccess.ConditionalOperatorElements getConditionalOperatorAccess() {
		return gaKerMLExpressions.getConditionalOperatorAccess();
	}
	
	public ParserRule getConditionalOperatorRule() {
		return getConditionalOperatorAccess().getRule();
	}
	
	//// Null Coalescing Expressions
	//NullCoalescingExpression returns SysML::Expression :
	//    ImpliesExpression ( {SysML::OperatorExpression.operand += current}
	//        operator = NullCoalescingOperator operand += ImpliesExpressionReference )*
	//;
	public KerMLExpressionsGrammarAccess.NullCoalescingExpressionElements getNullCoalescingExpressionAccess() {
		return gaKerMLExpressions.getNullCoalescingExpressionAccess();
	}
	
	public ParserRule getNullCoalescingExpressionRule() {
		return getNullCoalescingExpressionAccess().getRule();
	}
	
	//NullCoalescingOperator :
	//    '??'
	//;
	public KerMLExpressionsGrammarAccess.NullCoalescingOperatorElements getNullCoalescingOperatorAccess() {
		return gaKerMLExpressions.getNullCoalescingOperatorAccess();
	}
	
	public ParserRule getNullCoalescingOperatorRule() {
		return getNullCoalescingOperatorAccess().getRule();
	}
	
	//// Logical Expressions
	//ImpliesExpressionReference returns SysML::FeatureReferenceExpression :
	//    ownedRelationship += ImpliesExpressionMember
	//;
	public KerMLExpressionsGrammarAccess.ImpliesExpressionReferenceElements getImpliesExpressionReferenceAccess() {
		return gaKerMLExpressions.getImpliesExpressionReferenceAccess();
	}
	
	public ParserRule getImpliesExpressionReferenceRule() {
		return getImpliesExpressionReferenceAccess().getRule();
	}
	
	//ImpliesExpressionMember returns SysML::FeatureMembership :
	//    ownedRelatedElement += ImpliesExpression
	//;
	public KerMLExpressionsGrammarAccess.ImpliesExpressionMemberElements getImpliesExpressionMemberAccess() {
		return gaKerMLExpressions.getImpliesExpressionMemberAccess();
	}
	
	public ParserRule getImpliesExpressionMemberRule() {
		return getImpliesExpressionMemberAccess().getRule();
	}
	
	//ImpliesExpression returns SysML::Expression :
	//    OrExpression ( {SysML::OperatorExpression.operand += current}
	//        operator = ImpliesOperator operand += OrExpressionReference )*
	//;
	public KerMLExpressionsGrammarAccess.ImpliesExpressionElements getImpliesExpressionAccess() {
		return gaKerMLExpressions.getImpliesExpressionAccess();
	}
	
	public ParserRule getImpliesExpressionRule() {
		return getImpliesExpressionAccess().getRule();
	}
	
	//ImpliesOperator :
	//    'implies'
	//;
	public KerMLExpressionsGrammarAccess.ImpliesOperatorElements getImpliesOperatorAccess() {
		return gaKerMLExpressions.getImpliesOperatorAccess();
	}
	
	public ParserRule getImpliesOperatorRule() {
		return getImpliesOperatorAccess().getRule();
	}
	
	//OrExpressionReference returns SysML::FeatureReferenceExpression :
	//    ownedRelationship += OrExpressionMember
	//;
	public KerMLExpressionsGrammarAccess.OrExpressionReferenceElements getOrExpressionReferenceAccess() {
		return gaKerMLExpressions.getOrExpressionReferenceAccess();
	}
	
	public ParserRule getOrExpressionReferenceRule() {
		return getOrExpressionReferenceAccess().getRule();
	}
	
	//OrExpressionMember returns SysML::FeatureMembership :
	//    ownedRelatedElement += OrExpression
	//;
	public KerMLExpressionsGrammarAccess.OrExpressionMemberElements getOrExpressionMemberAccess() {
		return gaKerMLExpressions.getOrExpressionMemberAccess();
	}
	
	public ParserRule getOrExpressionMemberRule() {
		return getOrExpressionMemberAccess().getRule();
	}
	
	//OrExpression returns SysML::Expression :
	//    XorExpression ( {SysML::OperatorExpression.operand += current}
	//        ( operator = OrOperator operand += XorExpression
	//        | operator = ConditionalOrOperator operand += XorExpressionReference ) )*
	//;
	public KerMLExpressionsGrammarAccess.OrExpressionElements getOrExpressionAccess() {
		return gaKerMLExpressions.getOrExpressionAccess();
	}
	
	public ParserRule getOrExpressionRule() {
		return getOrExpressionAccess().getRule();
	}
	
	//OrOperator :
	//    '|'
	//;
	public KerMLExpressionsGrammarAccess.OrOperatorElements getOrOperatorAccess() {
		return gaKerMLExpressions.getOrOperatorAccess();
	}
	
	public ParserRule getOrOperatorRule() {
		return getOrOperatorAccess().getRule();
	}
	
	//ConditionalOrOperator :
	//    'or'
	//;
	public KerMLExpressionsGrammarAccess.ConditionalOrOperatorElements getConditionalOrOperatorAccess() {
		return gaKerMLExpressions.getConditionalOrOperatorAccess();
	}
	
	public ParserRule getConditionalOrOperatorRule() {
		return getConditionalOrOperatorAccess().getRule();
	}
	
	//XorExpressionReference returns SysML::FeatureReferenceExpression :
	//    ownedRelationship += XorExpressionMember
	//;
	public KerMLExpressionsGrammarAccess.XorExpressionReferenceElements getXorExpressionReferenceAccess() {
		return gaKerMLExpressions.getXorExpressionReferenceAccess();
	}
	
	public ParserRule getXorExpressionReferenceRule() {
		return getXorExpressionReferenceAccess().getRule();
	}
	
	//XorExpressionMember returns SysML::FeatureMembership :
	//    ownedRelatedElement += XorExpression
	//;
	public KerMLExpressionsGrammarAccess.XorExpressionMemberElements getXorExpressionMemberAccess() {
		return gaKerMLExpressions.getXorExpressionMemberAccess();
	}
	
	public ParserRule getXorExpressionMemberRule() {
		return getXorExpressionMemberAccess().getRule();
	}
	
	//XorExpression returns SysML::Expression :
	//    AndExpression ( {SysML::OperatorExpression.operand += current}
	//        operator = XorOperator operand += AndExpression )*
	//;
	public KerMLExpressionsGrammarAccess.XorExpressionElements getXorExpressionAccess() {
		return gaKerMLExpressions.getXorExpressionAccess();
	}
	
	public ParserRule getXorExpressionRule() {
		return getXorExpressionAccess().getRule();
	}
	
	//XorOperator :
	//    'xor'
	//;
	public KerMLExpressionsGrammarAccess.XorOperatorElements getXorOperatorAccess() {
		return gaKerMLExpressions.getXorOperatorAccess();
	}
	
	public ParserRule getXorOperatorRule() {
		return getXorOperatorAccess().getRule();
	}
	
	//AndExpression returns SysML::Expression :
	//    EqualityExpression ( {SysML::OperatorExpression.operand += current}
	//        ( operator = AndOperator operand += EqualityExpression
	//        | operator = ConditionalAndOperator operand += EqualityExpressionReference ) )*
	//;
	public KerMLExpressionsGrammarAccess.AndExpressionElements getAndExpressionAccess() {
		return gaKerMLExpressions.getAndExpressionAccess();
	}
	
	public ParserRule getAndExpressionRule() {
		return getAndExpressionAccess().getRule();
	}
	
	//AndOperator :
	//    '&'
	//;
	public KerMLExpressionsGrammarAccess.AndOperatorElements getAndOperatorAccess() {
		return gaKerMLExpressions.getAndOperatorAccess();
	}
	
	public ParserRule getAndOperatorRule() {
		return getAndOperatorAccess().getRule();
	}
	
	//ConditionalAndOperator :
	//    'and'
	//;
	public KerMLExpressionsGrammarAccess.ConditionalAndOperatorElements getConditionalAndOperatorAccess() {
		return gaKerMLExpressions.getConditionalAndOperatorAccess();
	}
	
	public ParserRule getConditionalAndOperatorRule() {
		return getConditionalAndOperatorAccess().getRule();
	}
	
	//// Equality Expressions
	//EqualityExpressionReference returns SysML::FeatureReferenceExpression :
	//    ownedRelationship += EqualityExpressionMember
	//;
	public KerMLExpressionsGrammarAccess.EqualityExpressionReferenceElements getEqualityExpressionReferenceAccess() {
		return gaKerMLExpressions.getEqualityExpressionReferenceAccess();
	}
	
	public ParserRule getEqualityExpressionReferenceRule() {
		return getEqualityExpressionReferenceAccess().getRule();
	}
	
	//EqualityExpressionMember returns SysML::FeatureMembership :
	//    ownedRelatedElement += EqualityExpression
	//;
	public KerMLExpressionsGrammarAccess.EqualityExpressionMemberElements getEqualityExpressionMemberAccess() {
		return gaKerMLExpressions.getEqualityExpressionMemberAccess();
	}
	
	public ParserRule getEqualityExpressionMemberRule() {
		return getEqualityExpressionMemberAccess().getRule();
	}
	
	//EqualityExpression returns SysML::Expression :
	//    ClassificationExpression ( {SysML::OperatorExpression.operand += current}
	//        operator = EqualityOperator operand += ClassificationExpression )*
	//;
	public KerMLExpressionsGrammarAccess.EqualityExpressionElements getEqualityExpressionAccess() {
		return gaKerMLExpressions.getEqualityExpressionAccess();
	}
	
	public ParserRule getEqualityExpressionRule() {
		return getEqualityExpressionAccess().getRule();
	}
	
	//EqualityOperator :
	//    '==' | '!=' | '===' | '!=='
	//;
	public KerMLExpressionsGrammarAccess.EqualityOperatorElements getEqualityOperatorAccess() {
		return gaKerMLExpressions.getEqualityOperatorAccess();
	}
	
	public ParserRule getEqualityOperatorRule() {
		return getEqualityOperatorAccess().getRule();
	}
	
	//// Classification Expressions
	//ClassificationExpression returns SysML::Expression :
	//      RelationalExpression
	//      ( {SysML::OperatorExpression.operand += current}
	//          operator = ClassificationTestOperator ownedRelationship += TypeReferenceMember
	//      | {SysML::OperatorExpression.operand += current}
	//        operator = CastOperator ownedRelationship += TypeResultMember
	//      )?
	//    | {SysML::OperatorExpression} operand += SelfReferenceExpression
	//      operator = ClassificationTestOperator ownedRelationship += TypeReferenceMember
	//    | {SysML::OperatorExpression} operand += MetadataReference
	//      operator = MetaClassificationTestOperator ownedRelationship += TypeReferenceMember
	//    | {SysML::OperatorExpression} operand += SelfReferenceExpression
	//      operator = CastOperator ownedRelationship += TypeResultMember
	//    | {SysML::OperatorExpression} operand += MetadataReference
	//      operator = MetaCastOperator ownedRelationship += TypeResultMember
	//;
	public KerMLExpressionsGrammarAccess.ClassificationExpressionElements getClassificationExpressionAccess() {
		return gaKerMLExpressions.getClassificationExpressionAccess();
	}
	
	public ParserRule getClassificationExpressionRule() {
		return getClassificationExpressionAccess().getRule();
	}
	
	//ClassificationTestOperator :
	//    'hastype' | 'istype' | '@'
	//;
	public KerMLExpressionsGrammarAccess.ClassificationTestOperatorElements getClassificationTestOperatorAccess() {
		return gaKerMLExpressions.getClassificationTestOperatorAccess();
	}
	
	public ParserRule getClassificationTestOperatorRule() {
		return getClassificationTestOperatorAccess().getRule();
	}
	
	//MetaClassificationTestOperator :
	//    '@@'
	//;
	public KerMLExpressionsGrammarAccess.MetaClassificationTestOperatorElements getMetaClassificationTestOperatorAccess() {
		return gaKerMLExpressions.getMetaClassificationTestOperatorAccess();
	}
	
	public ParserRule getMetaClassificationTestOperatorRule() {
		return getMetaClassificationTestOperatorAccess().getRule();
	}
	
	//CastOperator :
	//    'as'
	//;
	public KerMLExpressionsGrammarAccess.CastOperatorElements getCastOperatorAccess() {
		return gaKerMLExpressions.getCastOperatorAccess();
	}
	
	public ParserRule getCastOperatorRule() {
		return getCastOperatorAccess().getRule();
	}
	
	//MetaCastOperator :
	//    'meta'
	//;
	public KerMLExpressionsGrammarAccess.MetaCastOperatorElements getMetaCastOperatorAccess() {
		return gaKerMLExpressions.getMetaCastOperatorAccess();
	}
	
	public ParserRule getMetaCastOperatorRule() {
		return getMetaCastOperatorAccess().getRule();
	}
	
	//MetadataReference returns SysML::MetadataAccessExpression :
	//    referencedElement = [SysML::Element | QualifiedName]
	//;
	public KerMLExpressionsGrammarAccess.MetadataReferenceElements getMetadataReferenceAccess() {
		return gaKerMLExpressions.getMetadataReferenceAccess();
	}
	
	public ParserRule getMetadataReferenceRule() {
		return getMetadataReferenceAccess().getRule();
	}
	
	//TypeReferenceMember returns SysML::FeatureMembership :
	//    ownedRelatedElement += TypeReference
	//;
	public KerMLExpressionsGrammarAccess.TypeReferenceMemberElements getTypeReferenceMemberAccess() {
		return gaKerMLExpressions.getTypeReferenceMemberAccess();
	}
	
	public ParserRule getTypeReferenceMemberRule() {
		return getTypeReferenceMemberAccess().getRule();
	}
	
	//TypeResultMember returns SysML::ReturnParameterMembership :
	//    ownedRelatedElement += TypeReference
	//;
	public KerMLExpressionsGrammarAccess.TypeResultMemberElements getTypeResultMemberAccess() {
		return gaKerMLExpressions.getTypeResultMemberAccess();
	}
	
	public ParserRule getTypeResultMemberRule() {
		return getTypeResultMemberAccess().getRule();
	}
	
	//TypeReference returns SysML::Feature :
	//    ownedRelationship += ReferenceTyping
	//;
	public KerMLExpressionsGrammarAccess.TypeReferenceElements getTypeReferenceAccess() {
		return gaKerMLExpressions.getTypeReferenceAccess();
	}
	
	public ParserRule getTypeReferenceRule() {
		return getTypeReferenceAccess().getRule();
	}
	
	//ReferenceTyping returns SysML::FeatureTyping :
	//      type = [SysML::Type | QualifiedName]
	//;
	public KerMLExpressionsGrammarAccess.ReferenceTypingElements getReferenceTypingAccess() {
		return gaKerMLExpressions.getReferenceTypingAccess();
	}
	
	public ParserRule getReferenceTypingRule() {
		return getReferenceTypingAccess().getRule();
	}
	
	//SelfReferenceExpression returns SysML::FeatureReferenceExpression :
	//    ownedRelationship += SelfReferenceMember
	//;
	public KerMLExpressionsGrammarAccess.SelfReferenceExpressionElements getSelfReferenceExpressionAccess() {
		return gaKerMLExpressions.getSelfReferenceExpressionAccess();
	}
	
	public ParserRule getSelfReferenceExpressionRule() {
		return getSelfReferenceExpressionAccess().getRule();
	}
	
	//SelfReferenceMember returns SysML::ReturnParameterMembership :
	//    ownedRelatedElement += EmptyFeature
	//;
	public KerMLExpressionsGrammarAccess.SelfReferenceMemberElements getSelfReferenceMemberAccess() {
		return gaKerMLExpressions.getSelfReferenceMemberAccess();
	}
	
	public ParserRule getSelfReferenceMemberRule() {
		return getSelfReferenceMemberAccess().getRule();
	}
	
	//EmptyFeature returns SysML::Feature :
	//    {SysML::Feature}
	//;
	public KerMLExpressionsGrammarAccess.EmptyFeatureElements getEmptyFeatureAccess() {
		return gaKerMLExpressions.getEmptyFeatureAccess();
	}
	
	public ParserRule getEmptyFeatureRule() {
		return getEmptyFeatureAccess().getRule();
	}
	
	//// Relational Expressions
	//RelationalExpression returns SysML::Expression :
	//    RangeExpression ( {SysML::OperatorExpression.operand += current}
	//        operator = RelationalOperator operand += RangeExpression )*
	//;
	public KerMLExpressionsGrammarAccess.RelationalExpressionElements getRelationalExpressionAccess() {
		return gaKerMLExpressions.getRelationalExpressionAccess();
	}
	
	public ParserRule getRelationalExpressionRule() {
		return getRelationalExpressionAccess().getRule();
	}
	
	//RelationalOperator :
	//    '<' | '>' | '<=' | '>='
	//;
	public KerMLExpressionsGrammarAccess.RelationalOperatorElements getRelationalOperatorAccess() {
		return gaKerMLExpressions.getRelationalOperatorAccess();
	}
	
	public ParserRule getRelationalOperatorRule() {
		return getRelationalOperatorAccess().getRule();
	}
	
	//// Range Expressions
	//RangeExpression returns SysML::Expression :
	//    AdditiveExpression ( {SysML::OperatorExpression.operand += current}
	//        operator = '..' operand += AdditiveExpression )?
	//;
	public KerMLExpressionsGrammarAccess.RangeExpressionElements getRangeExpressionAccess() {
		return gaKerMLExpressions.getRangeExpressionAccess();
	}
	
	public ParserRule getRangeExpressionRule() {
		return getRangeExpressionAccess().getRule();
	}
	
	//// Arithmetic Expressions
	//AdditiveExpression returns SysML::Expression :
	//    MultiplicativeExpression ( {SysML::OperatorExpression.operand += current}
	//        operator = AdditiveOperator operand += MultiplicativeExpression )*
	//;
	public KerMLExpressionsGrammarAccess.AdditiveExpressionElements getAdditiveExpressionAccess() {
		return gaKerMLExpressions.getAdditiveExpressionAccess();
	}
	
	public ParserRule getAdditiveExpressionRule() {
		return getAdditiveExpressionAccess().getRule();
	}
	
	//AdditiveOperator :
	//    '+' | '-'
	//;
	public KerMLExpressionsGrammarAccess.AdditiveOperatorElements getAdditiveOperatorAccess() {
		return gaKerMLExpressions.getAdditiveOperatorAccess();
	}
	
	public ParserRule getAdditiveOperatorRule() {
		return getAdditiveOperatorAccess().getRule();
	}
	
	//MultiplicativeExpression returns SysML::Expression :
	//    ExponentiationExpression ( {SysML::OperatorExpression.operand += current}
	//        operator = MultiplicativeOperator operand += ExponentiationExpression )*
	//;
	public KerMLExpressionsGrammarAccess.MultiplicativeExpressionElements getMultiplicativeExpressionAccess() {
		return gaKerMLExpressions.getMultiplicativeExpressionAccess();
	}
	
	public ParserRule getMultiplicativeExpressionRule() {
		return getMultiplicativeExpressionAccess().getRule();
	}
	
	//MultiplicativeOperator :
	//    '*' | '/' | '%'
	//;
	public KerMLExpressionsGrammarAccess.MultiplicativeOperatorElements getMultiplicativeOperatorAccess() {
		return gaKerMLExpressions.getMultiplicativeOperatorAccess();
	}
	
	public ParserRule getMultiplicativeOperatorRule() {
		return getMultiplicativeOperatorAccess().getRule();
	}
	
	//ExponentiationExpression returns SysML::Expression :
	//    UnaryExpression ( {SysML::OperatorExpression.operand += current}
	//        operator = ExponentiationOperator operand += ExponentiationExpression )?
	//;
	public KerMLExpressionsGrammarAccess.ExponentiationExpressionElements getExponentiationExpressionAccess() {
		return gaKerMLExpressions.getExponentiationExpressionAccess();
	}
	
	public ParserRule getExponentiationExpressionRule() {
		return getExponentiationExpressionAccess().getRule();
	}
	
	//ExponentiationOperator :
	//    '**' | '^'
	//;
	public KerMLExpressionsGrammarAccess.ExponentiationOperatorElements getExponentiationOperatorAccess() {
		return gaKerMLExpressions.getExponentiationOperatorAccess();
	}
	
	public ParserRule getExponentiationOperatorRule() {
		return getExponentiationOperatorAccess().getRule();
	}
	
	//// Unary Expressions
	//UnaryExpression returns SysML::Expression:
	//      {SysML::OperatorExpression} operator = UnaryOperator operand += ExtentExpression
	//    | ExtentExpression
	//;
	public KerMLExpressionsGrammarAccess.UnaryExpressionElements getUnaryExpressionAccess() {
		return gaKerMLExpressions.getUnaryExpressionAccess();
	}
	
	public ParserRule getUnaryExpressionRule() {
		return getUnaryExpressionAccess().getRule();
	}
	
	//UnaryOperator :
	//    '+' | '-' | '~' | 'not'
	//;
	public KerMLExpressionsGrammarAccess.UnaryOperatorElements getUnaryOperatorAccess() {
		return gaKerMLExpressions.getUnaryOperatorAccess();
	}
	
	public ParserRule getUnaryOperatorRule() {
		return getUnaryOperatorAccess().getRule();
	}
	
	//// Extent Expressions
	//ExtentExpression returns SysML::Expression :
	//      {SysML::OperatorExpression} operator = 'all' ownedRelationship += TypeResultMember
	//    | PrimaryExpression
	//;
	public KerMLExpressionsGrammarAccess.ExtentExpressionElements getExtentExpressionAccess() {
		return gaKerMLExpressions.getExtentExpressionAccess();
	}
	
	public ParserRule getExtentExpressionRule() {
		return getExtentExpressionAccess().getRule();
	}
	
	///* Primary Expressions */
	//PrimaryExpression returns SysML::Expression :
	//    BaseExpression
	//    ( {SysML::FeatureChainExpression.operand += current} '.'
	//      ownedRelationship += FeatureChainMember
	//    )?
	//    ( ( {SysML::OperatorExpression.operand += current}
	//        operator = '#' '(' operand += SequenceExpression ')'
	//      | {SysML::OperatorExpression.operand += current}
	//        operator = '[' operand += SequenceExpression ']'
	//      | {SysML::InvocationExpression.operand += current} '->'
	//        ownedRelationship += ReferenceTyping
	//        ( operand += BodyExpression
	//        | operand += FunctionReferenceExpression
	//        | ArgumentList
	//        )
	//      | {SysML::CollectExpression.operand += current} '.'
	//        operand += BodyExpression
	//      | {SysML::SelectExpression.operand += current} '.?'
	//        operand += BodyExpression
	//      )
	//      ( {SysML::FeatureChainExpression.operand += current} '.'
	//          ownedRelationship += FeatureChainMember
	//      )?
	//    )*
	//;
	public KerMLExpressionsGrammarAccess.PrimaryExpressionElements getPrimaryExpressionAccess() {
		return gaKerMLExpressions.getPrimaryExpressionAccess();
	}
	
	public ParserRule getPrimaryExpressionRule() {
		return getPrimaryExpressionAccess().getRule();
	}
	
	//FunctionReferenceExpression returns SysML::FeatureReferenceExpression :
	//    ownedRelationship += FunctionReferenceMember
	//;
	public KerMLExpressionsGrammarAccess.FunctionReferenceExpressionElements getFunctionReferenceExpressionAccess() {
		return gaKerMLExpressions.getFunctionReferenceExpressionAccess();
	}
	
	public ParserRule getFunctionReferenceExpressionRule() {
		return getFunctionReferenceExpressionAccess().getRule();
	}
	
	//FunctionReferenceMember returns SysML::FeatureMembership :
	//    ownedRelatedElement += FunctionReference
	//;
	public KerMLExpressionsGrammarAccess.FunctionReferenceMemberElements getFunctionReferenceMemberAccess() {
		return gaKerMLExpressions.getFunctionReferenceMemberAccess();
	}
	
	public ParserRule getFunctionReferenceMemberRule() {
		return getFunctionReferenceMemberAccess().getRule();
	}
	
	//FunctionReference returns SysML::Expression :
	//    ownedRelationship += ReferenceTyping
	//;
	public KerMLExpressionsGrammarAccess.FunctionReferenceElements getFunctionReferenceAccess() {
		return gaKerMLExpressions.getFunctionReferenceAccess();
	}
	
	public ParserRule getFunctionReferenceRule() {
		return getFunctionReferenceAccess().getRule();
	}
	
	//FeatureChainMember returns SysML::Membership :
	//      memberElement = [SysML::Feature | QualifiedName]
	//    | {SysML::OwningMembership} ownedRelatedElement += OwnedFeatureChain
	//;
	public KerMLExpressionsGrammarAccess.FeatureChainMemberElements getFeatureChainMemberAccess() {
		return gaKerMLExpressions.getFeatureChainMemberAccess();
	}
	
	public ParserRule getFeatureChainMemberRule() {
		return getFeatureChainMemberAccess().getRule();
	}
	
	///* Base Expressions */
	//BaseExpression returns SysML::Expression :
	//      NullExpression
	//    | LiteralExpression
	//    | FeatureReferenceExpression
	//    | MetadataAccessExpression
	//    | InvocationExpression
	//    | BodyExpression
	//    | '(' SequenceExpression ')'
	//;
	public KerMLExpressionsGrammarAccess.BaseExpressionElements getBaseExpressionAccess() {
		return gaKerMLExpressions.getBaseExpressionAccess();
	}
	
	public ParserRule getBaseExpressionRule() {
		return getBaseExpressionAccess().getRule();
	}
	
	//// Expression Bodies
	//BodyExpression returns SysML::FeatureReferenceExpression :
	//    ownedRelationship += ExpressionBodyMember
	//;
	public KerMLExpressionsGrammarAccess.BodyExpressionElements getBodyExpressionAccess() {
		return gaKerMLExpressions.getBodyExpressionAccess();
	}
	
	public ParserRule getBodyExpressionRule() {
		return getBodyExpressionAccess().getRule();
	}
	
	//ExpressionBodyMember returns SysML::FeatureMembership :
	//    ownedRelatedElement += ExpressionBody
	//;
	public KerMLExpressionsGrammarAccess.ExpressionBodyMemberElements getExpressionBodyMemberAccess() {
		return gaKerMLExpressions.getExpressionBodyMemberAccess();
	}
	
	public ParserRule getExpressionBodyMemberRule() {
		return getExpressionBodyMemberAccess().getRule();
	}
	
	//BodyParameterMember returns SysML::ParameterMembership :
	//    'in' ownedRelatedElement += BodyParameter
	//;
	public KerMLExpressionsGrammarAccess.BodyParameterMemberElements getBodyParameterMemberAccess() {
		return gaKerMLExpressions.getBodyParameterMemberAccess();
	}
	
	public ParserRule getBodyParameterMemberRule() {
		return getBodyParameterMemberAccess().getRule();
	}
	
	//BodyParameter returns SysML::Feature :
	//    declaredName = Name
	//;
	public KerMLExpressionsGrammarAccess.BodyParameterElements getBodyParameterAccess() {
		return gaKerMLExpressions.getBodyParameterAccess();
	}
	
	public ParserRule getBodyParameterRule() {
		return getBodyParameterAccess().getRule();
	}
	
	//// Sequence Expressions
	//SequenceExpression returns SysML::Expression :
	//    OwnedExpression
	//    ( ','
	//    | {SysML::OperatorExpression.operand += current} operator = ','
	//      operand += SequenceExpression
	//    )?
	//;
	public KerMLExpressionsGrammarAccess.SequenceExpressionElements getSequenceExpressionAccess() {
		return gaKerMLExpressions.getSequenceExpressionAccess();
	}
	
	public ParserRule getSequenceExpressionRule() {
		return getSequenceExpressionAccess().getRule();
	}
	
	//// Feature Reference Expressions
	//FeatureReferenceExpression returns SysML::FeatureReferenceExpression :
	//    ownedRelationship += FeatureReferenceMember
	//;
	public KerMLExpressionsGrammarAccess.FeatureReferenceExpressionElements getFeatureReferenceExpressionAccess() {
		return gaKerMLExpressions.getFeatureReferenceExpressionAccess();
	}
	
	public ParserRule getFeatureReferenceExpressionRule() {
		return getFeatureReferenceExpressionAccess().getRule();
	}
	
	//FeatureReferenceMember returns SysML::Membership :
	//    memberElement = [SysML::Feature | QualifiedName]
	//;
	public KerMLExpressionsGrammarAccess.FeatureReferenceMemberElements getFeatureReferenceMemberAccess() {
		return gaKerMLExpressions.getFeatureReferenceMemberAccess();
	}
	
	public ParserRule getFeatureReferenceMemberRule() {
		return getFeatureReferenceMemberAccess().getRule();
	}
	
	//// Metadata Access Expressions
	//MetadataAccessExpression returns SysML::MetadataAccessExpression :
	//    referencedElement = [SysML::Element | QualifiedName] '.' 'metadata'
	//;
	public KerMLExpressionsGrammarAccess.MetadataAccessExpressionElements getMetadataAccessExpressionAccess() {
		return gaKerMLExpressions.getMetadataAccessExpressionAccess();
	}
	
	public ParserRule getMetadataAccessExpressionRule() {
		return getMetadataAccessExpressionAccess().getRule();
	}
	
	//// Invocation Expressions
	//InvocationExpression returns SysML::InvocationExpression :
	//    ownedRelationship += OwnedFeatureTyping ArgumentList
	//;
	public KerMLExpressionsGrammarAccess.InvocationExpressionElements getInvocationExpressionAccess() {
		return gaKerMLExpressions.getInvocationExpressionAccess();
	}
	
	public ParserRule getInvocationExpressionRule() {
		return getInvocationExpressionAccess().getRule();
	}
	
	//OwnedFeatureChain returns SysML::Feature :
	//    FeatureChain
	//;
	public KerMLExpressionsGrammarAccess.OwnedFeatureChainElements getOwnedFeatureChainAccess() {
		return gaKerMLExpressions.getOwnedFeatureChainAccess();
	}
	
	public ParserRule getOwnedFeatureChainRule() {
		return getOwnedFeatureChainAccess().getRule();
	}
	
	//// For use in KerML and SysML grammars
	//fragment FeatureChain returns SysML::Feature :
	//    ownedRelationship += OwnedFeatureChaining
	//    ( '.' ownedRelationship += OwnedFeatureChaining )+
	//;
	public KerMLExpressionsGrammarAccess.FeatureChainElements getFeatureChainAccess() {
		return gaKerMLExpressions.getFeatureChainAccess();
	}
	
	public ParserRule getFeatureChainRule() {
		return getFeatureChainAccess().getRule();
	}
	
	//OwnedFeatureChaining returns SysML::FeatureChaining :
	//    chainingFeature = [SysML::Feature | QualifiedName]
	//;
	public KerMLExpressionsGrammarAccess.OwnedFeatureChainingElements getOwnedFeatureChainingAccess() {
		return gaKerMLExpressions.getOwnedFeatureChainingAccess();
	}
	
	public ParserRule getOwnedFeatureChainingRule() {
		return getOwnedFeatureChainingAccess().getRule();
	}
	
	//fragment ArgumentList returns SysML::Expression :
	//    '(' ( PositionalArgumentList | NamedArgumentList )? ')'
	//;
	public KerMLExpressionsGrammarAccess.ArgumentListElements getArgumentListAccess() {
		return gaKerMLExpressions.getArgumentListAccess();
	}
	
	public ParserRule getArgumentListRule() {
		return getArgumentListAccess().getRule();
	}
	
	//fragment PositionalArgumentList returns SysML::Expression :
	//    ownedRelationship += ArgumentMember
	//    ( ',' ownedRelationship += ArgumentMember )*
	//;
	public KerMLExpressionsGrammarAccess.PositionalArgumentListElements getPositionalArgumentListAccess() {
		return gaKerMLExpressions.getPositionalArgumentListAccess();
	}
	
	public ParserRule getPositionalArgumentListRule() {
		return getPositionalArgumentListAccess().getRule();
	}
	
	//ArgumentMember returns SysML::ParameterMembership :
	//    ownedRelatedElement += Argument
	//;
	public KerMLExpressionsGrammarAccess.ArgumentMemberElements getArgumentMemberAccess() {
		return gaKerMLExpressions.getArgumentMemberAccess();
	}
	
	public ParserRule getArgumentMemberRule() {
		return getArgumentMemberAccess().getRule();
	}
	
	//Argument returns SysML::Feature :
	//    ownedRelationship += ArgumentValue
	//;
	public KerMLExpressionsGrammarAccess.ArgumentElements getArgumentAccess() {
		return gaKerMLExpressions.getArgumentAccess();
	}
	
	public ParserRule getArgumentRule() {
		return getArgumentAccess().getRule();
	}
	
	//fragment NamedArgumentList returns SysML::Expression :
	//    ownedRelationship += NamedArgumentMember
	//    ( ',' ownedRelationship += NamedArgumentMember )*
	//;
	public KerMLExpressionsGrammarAccess.NamedArgumentListElements getNamedArgumentListAccess() {
		return gaKerMLExpressions.getNamedArgumentListAccess();
	}
	
	public ParserRule getNamedArgumentListRule() {
		return getNamedArgumentListAccess().getRule();
	}
	
	//NamedArgumentMember returns SysML::ParameterMembership :
	//    ownedRelatedElement += NamedArgument
	//;
	public KerMLExpressionsGrammarAccess.NamedArgumentMemberElements getNamedArgumentMemberAccess() {
		return gaKerMLExpressions.getNamedArgumentMemberAccess();
	}
	
	public ParserRule getNamedArgumentMemberRule() {
		return getNamedArgumentMemberAccess().getRule();
	}
	
	//NamedArgument returns SysML::Feature :
	//    ownedRelationship += ParameterRedefinition '=' ownedRelationship += ArgumentValue
	//;
	public KerMLExpressionsGrammarAccess.NamedArgumentElements getNamedArgumentAccess() {
		return gaKerMLExpressions.getNamedArgumentAccess();
	}
	
	public ParserRule getNamedArgumentRule() {
		return getNamedArgumentAccess().getRule();
	}
	
	//ParameterRedefinition returns SysML::Redefinition:
	//    redefinedFeature = [SysML::Feature | QualifiedName]
	//;
	public KerMLExpressionsGrammarAccess.ParameterRedefinitionElements getParameterRedefinitionAccess() {
		return gaKerMLExpressions.getParameterRedefinitionAccess();
	}
	
	public ParserRule getParameterRedefinitionRule() {
		return getParameterRedefinitionAccess().getRule();
	}
	
	//ArgumentValue returns SysML::FeatureValue :
	//    ownedRelatedElement += OwnedExpression
	//;
	public KerMLExpressionsGrammarAccess.ArgumentValueElements getArgumentValueAccess() {
		return gaKerMLExpressions.getArgumentValueAccess();
	}
	
	public ParserRule getArgumentValueRule() {
		return getArgumentValueAccess().getRule();
	}
	
	//// Null Expressions
	//NullExpression returns SysML::NullExpression :
	//    {SysML::NullExpression} ( 'null' | '(' ')' )
	//;
	public KerMLExpressionsGrammarAccess.NullExpressionElements getNullExpressionAccess() {
		return gaKerMLExpressions.getNullExpressionAccess();
	}
	
	public ParserRule getNullExpressionRule() {
		return getNullExpressionAccess().getRule();
	}
	
	///* Literal Expressions */
	//LiteralExpression returns SysML::LiteralExpression :
	//      LiteralBoolean
	//    | LiteralString
	//    | LiteralInteger
	//    | LiteralReal
	//    | LiteralInfinity
	//;
	public KerMLExpressionsGrammarAccess.LiteralExpressionElements getLiteralExpressionAccess() {
		return gaKerMLExpressions.getLiteralExpressionAccess();
	}
	
	public ParserRule getLiteralExpressionRule() {
		return getLiteralExpressionAccess().getRule();
	}
	
	//LiteralBoolean returns SysML::LiteralBoolean :
	//    value = BooleanValue
	//;
	public KerMLExpressionsGrammarAccess.LiteralBooleanElements getLiteralBooleanAccess() {
		return gaKerMLExpressions.getLiteralBooleanAccess();
	}
	
	public ParserRule getLiteralBooleanRule() {
		return getLiteralBooleanAccess().getRule();
	}
	
	//BooleanValue returns Ecore::EBoolean :
	//    'true' | 'false'
	//;
	public KerMLExpressionsGrammarAccess.BooleanValueElements getBooleanValueAccess() {
		return gaKerMLExpressions.getBooleanValueAccess();
	}
	
	public ParserRule getBooleanValueRule() {
		return getBooleanValueAccess().getRule();
	}
	
	//LiteralString returns SysML::LiteralString :
	//    value = STRING_VALUE
	//;
	public KerMLExpressionsGrammarAccess.LiteralStringElements getLiteralStringAccess() {
		return gaKerMLExpressions.getLiteralStringAccess();
	}
	
	public ParserRule getLiteralStringRule() {
		return getLiteralStringAccess().getRule();
	}
	
	//LiteralInteger returns SysML::LiteralInteger:
	//    value = DECIMAL_VALUE
	//;
	public KerMLExpressionsGrammarAccess.LiteralIntegerElements getLiteralIntegerAccess() {
		return gaKerMLExpressions.getLiteralIntegerAccess();
	}
	
	public ParserRule getLiteralIntegerRule() {
		return getLiteralIntegerAccess().getRule();
	}
	
	//LiteralReal returns SysML::LiteralRational:
	//    value = RealValue
	//;
	public KerMLExpressionsGrammarAccess.LiteralRealElements getLiteralRealAccess() {
		return gaKerMLExpressions.getLiteralRealAccess();
	}
	
	public ParserRule getLiteralRealRule() {
		return getLiteralRealAccess().getRule();
	}
	
	//RealValue returns Ecore::EDouble:
	//    DECIMAL_VALUE? '.' ( DECIMAL_VALUE | EXP_VALUE ) | EXP_VALUE
	//;
	public KerMLExpressionsGrammarAccess.RealValueElements getRealValueAccess() {
		return gaKerMLExpressions.getRealValueAccess();
	}
	
	public ParserRule getRealValueRule() {
		return getRealValueAccess().getRule();
	}
	
	//LiteralInfinity returns SysML::LiteralInfinity :
	//    {SysML::LiteralInfinity} '*'
	//;
	public KerMLExpressionsGrammarAccess.LiteralInfinityElements getLiteralInfinityAccess() {
		return gaKerMLExpressions.getLiteralInfinityAccess();
	}
	
	public ParserRule getLiteralInfinityRule() {
		return getLiteralInfinityAccess().getRule();
	}
	
	///* NAMES */
	//Name:
	//    ID | UNRESTRICTED_NAME
	//;
	public KerMLExpressionsGrammarAccess.NameElements getNameAccess() {
		return gaKerMLExpressions.getNameAccess();
	}
	
	public ParserRule getNameRule() {
		return getNameAccess().getRule();
	}
	
	//Qualification :
	//    ( Name '::' )+
	//;
	public KerMLExpressionsGrammarAccess.QualificationElements getQualificationAccess() {
		return gaKerMLExpressions.getQualificationAccess();
	}
	
	public ParserRule getQualificationRule() {
		return getQualificationAccess().getRule();
	}
	
	//QualifiedName:
	//    Qualification? Name
	//;
	public KerMLExpressionsGrammarAccess.QualifiedNameElements getQualifiedNameAccess() {
		return gaKerMLExpressions.getQualifiedNameAccess();
	}
	
	public ParserRule getQualifiedNameRule() {
		return getQualifiedNameAccess().getRule();
	}
	
	///* TERMINALS */
	//terminal DECIMAL_VALUE returns Ecore::EInt:
	//    '0'..'9' ('0'..'9')*;
	public TerminalRule getDECIMAL_VALUERule() {
		return gaKerMLExpressions.getDECIMAL_VALUERule();
	}
	
	//terminal EXP_VALUE:
	//    DECIMAL_VALUE ('e' | 'E') ('+' | '-')? DECIMAL_VALUE;
	public TerminalRule getEXP_VALUERule() {
		return gaKerMLExpressions.getEXP_VALUERule();
	}
	
	//terminal ID:
	//    ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaKerMLExpressions.getIDRule();
	}
	
	//terminal UNRESTRICTED_NAME returns Ecore::EString:
	//    '\'' ('\\' ('b' | 't' | 'n' | 'f' | 'r' | '"' | "'" | '\\') | !('\\' | '\''))* '\'';
	public TerminalRule getUNRESTRICTED_NAMERule() {
		return gaKerMLExpressions.getUNRESTRICTED_NAMERule();
	}
	
	//terminal STRING_VALUE returns Ecore::EString:
	//    '"' ('\\' ('b' | 't' | 'n' | 'f' | 'r' | '"' | "'" | '\\') | !('\\' | '"'))* '"';
	public TerminalRule getSTRING_VALUERule() {
		return gaKerMLExpressions.getSTRING_VALUERule();
	}
	
	//terminal REGULAR_COMMENT:
	//    '/*' ->'*/';
	public TerminalRule getREGULAR_COMMENTRule() {
		return gaKerMLExpressions.getREGULAR_COMMENTRule();
	}
	
	//terminal ML_NOTE:
	//    '//*'->'*/';
	public TerminalRule getML_NOTERule() {
		return gaKerMLExpressions.getML_NOTERule();
	}
	
	//terminal SL_NOTE:
	//    '//' (!('\n' | '\r') !('\n' | '\r')*)? ('\r'? '\n')?;
	public TerminalRule getSL_NOTERule() {
		return gaKerMLExpressions.getSL_NOTERule();
	}
	
	//terminal WS:
	//    (' ' | '\t' | '\r' | '\n')+;
	public TerminalRule getWSRule() {
		return gaKerMLExpressions.getWSRule();
	}
}
