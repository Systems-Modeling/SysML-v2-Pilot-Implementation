/*
 * generated by Xtext 2.22.0
 */
package org.omg.sysml.xtext.serializer;

import com.google.inject.Inject;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;
import org.omg.sysml.lang.sysml.AcceptActionUsage;
import org.omg.sysml.lang.sysml.ActionDefinition;
import org.omg.sysml.lang.sysml.ActionUsage;
import org.omg.sysml.lang.sysml.AnalysisCaseDefinition;
import org.omg.sysml.lang.sysml.AnalysisCaseUsage;
import org.omg.sysml.lang.sysml.Annotation;
import org.omg.sysml.lang.sysml.AssertConstraintUsage;
import org.omg.sysml.lang.sysml.AttributeDefinition;
import org.omg.sysml.lang.sysml.AttributeUsage;
import org.omg.sysml.lang.sysml.BindingConnector;
import org.omg.sysml.lang.sysml.BlockExpression;
import org.omg.sysml.lang.sysml.CalculationDefinition;
import org.omg.sysml.lang.sysml.CalculationUsage;
import org.omg.sysml.lang.sysml.CaseDefinition;
import org.omg.sysml.lang.sysml.CaseUsage;
import org.omg.sysml.lang.sysml.Comment;
import org.omg.sysml.lang.sysml.ConjugatedPortDefinition;
import org.omg.sysml.lang.sysml.ConjugatedPortTyping;
import org.omg.sysml.lang.sysml.ConnectionDefinition;
import org.omg.sysml.lang.sysml.ConnectionUsage;
import org.omg.sysml.lang.sysml.ConstraintDefinition;
import org.omg.sysml.lang.sysml.ConstraintUsage;
import org.omg.sysml.lang.sysml.DecisionNode;
import org.omg.sysml.lang.sysml.Dependency;
import org.omg.sysml.lang.sysml.Documentation;
import org.omg.sysml.lang.sysml.EndFeatureMembership;
import org.omg.sysml.lang.sysml.ExhibitStateUsage;
import org.omg.sysml.lang.sysml.Expose;
import org.omg.sysml.lang.sysml.Feature;
import org.omg.sysml.lang.sysml.FeatureMembership;
import org.omg.sysml.lang.sysml.FeatureReferenceExpression;
import org.omg.sysml.lang.sysml.FeatureTyping;
import org.omg.sysml.lang.sysml.FeatureValue;
import org.omg.sysml.lang.sysml.ForkNode;
import org.omg.sysml.lang.sysml.Import;
import org.omg.sysml.lang.sysml.IndividualDefinition;
import org.omg.sysml.lang.sysml.IndividualUsage;
import org.omg.sysml.lang.sysml.InterfaceDefinition;
import org.omg.sysml.lang.sysml.InterfaceUsage;
import org.omg.sysml.lang.sysml.InvocationExpression;
import org.omg.sysml.lang.sysml.ItemDefinition;
import org.omg.sysml.lang.sysml.ItemFeature;
import org.omg.sysml.lang.sysml.ItemFlow;
import org.omg.sysml.lang.sysml.ItemFlowEnd;
import org.omg.sysml.lang.sysml.ItemFlowFeature;
import org.omg.sysml.lang.sysml.ItemUsage;
import org.omg.sysml.lang.sysml.JoinNode;
import org.omg.sysml.lang.sysml.LifeClass;
import org.omg.sysml.lang.sysml.LiteralBoolean;
import org.omg.sysml.lang.sysml.LiteralInteger;
import org.omg.sysml.lang.sysml.LiteralReal;
import org.omg.sysml.lang.sysml.LiteralString;
import org.omg.sysml.lang.sysml.LiteralUnbounded;
import org.omg.sysml.lang.sysml.Membership;
import org.omg.sysml.lang.sysml.MergeNode;
import org.omg.sysml.lang.sysml.MultiplicityRange;
import org.omg.sysml.lang.sysml.NullExpression;
import org.omg.sysml.lang.sysml.ObjectiveMembership;
import org.omg.sysml.lang.sysml.OperatorExpression;
import org.omg.sysml.lang.sysml.ParameterMembership;
import org.omg.sysml.lang.sysml.PartDefinition;
import org.omg.sysml.lang.sysml.PartUsage;
import org.omg.sysml.lang.sysml.PerformActionUsage;
import org.omg.sysml.lang.sysml.PortConjugation;
import org.omg.sysml.lang.sysml.PortDefinition;
import org.omg.sysml.lang.sysml.PortUsage;
import org.omg.sysml.lang.sysml.QueryPathExpression;
import org.omg.sysml.lang.sysml.QueryPathStepExpression;
import org.omg.sysml.lang.sysml.QueryQualifierExpression;
import org.omg.sysml.lang.sysml.Redefinition;
import org.omg.sysml.lang.sysml.ReferenceUsage;
import org.omg.sysml.lang.sysml.RenderingDefinition;
import org.omg.sysml.lang.sysml.RenderingUsage;
import org.omg.sysml.lang.sysml.RequirementConstraintMembership;
import org.omg.sysml.lang.sysml.RequirementDefinition;
import org.omg.sysml.lang.sysml.RequirementUsage;
import org.omg.sysml.lang.sysml.ResultExpressionMembership;
import org.omg.sysml.lang.sysml.ReturnParameterMembership;
import org.omg.sysml.lang.sysml.SatisfyRequirementUsage;
import org.omg.sysml.lang.sysml.SendActionUsage;
import org.omg.sysml.lang.sysml.SnapshotFeature;
import org.omg.sysml.lang.sysml.SourceEnd;
import org.omg.sysml.lang.sysml.StateDefinition;
import org.omg.sysml.lang.sysml.StateSubactionMembership;
import org.omg.sysml.lang.sysml.StateUsage;
import org.omg.sysml.lang.sysml.SubjectMembership;
import org.omg.sysml.lang.sysml.Subsetting;
import org.omg.sysml.lang.sysml.Succession;
import org.omg.sysml.lang.sysml.SuccessionItemFlow;
import org.omg.sysml.lang.sysml.Superclassing;
import org.omg.sysml.lang.sysml.SysMLPackage;
import org.omg.sysml.lang.sysml.TargetEnd;
import org.omg.sysml.lang.sysml.TextualRepresentation;
import org.omg.sysml.lang.sysml.TimeSliceFeature;
import org.omg.sysml.lang.sysml.TransitionFeatureMembership;
import org.omg.sysml.lang.sysml.TransitionUsage;
import org.omg.sysml.lang.sysml.VariantMembership;
import org.omg.sysml.lang.sysml.VerificationCaseDefinition;
import org.omg.sysml.lang.sysml.VerificationCaseUsage;
import org.omg.sysml.lang.sysml.ViewDefinition;
import org.omg.sysml.lang.sysml.ViewUsage;
import org.omg.sysml.lang.sysml.ViewpointDefinition;
import org.omg.sysml.lang.sysml.ViewpointUsage;
import org.omg.sysml.xtext.services.SysMLGrammarAccess;

@SuppressWarnings("all")
public class SysMLSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private SysMLGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == SysMLPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case SysMLPackage.ACCEPT_ACTION_USAGE:
				if (rule == grammarAccess.getStateActionUsageRule()
						|| rule == grammarAccess.getEffectBehaviorUsageRule()) {
					sequence_AcceptNodeDeclaration_ActionBodyItem_Identification_MultiplicityPart_PerformedActionUsage_Redefines_Redefinitions_Subsets_Subsettings_TypedBy_Typings(context, (AcceptActionUsage) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getActionNodeRule()
						|| rule == grammarAccess.getAcceptNodeRule()) {
					sequence_AcceptNodeDeclaration_ActionBodyItem_Identification_MultiplicityPart_Redefines_Redefinitions_Subsets_Subsettings_TypedBy_Typings_UsagePrefix(context, (AcceptActionUsage) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getPerformedActionUsageRule()) {
					sequence_AcceptNodeDeclaration_Identification_MultiplicityPart_PerformedActionUsage_Redefines_Redefinitions_Subsets_Subsettings_TypedBy_Typings(context, (AcceptActionUsage) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getTriggerActionRule()) {
					sequence_TriggerAction(context, (AcceptActionUsage) semanticObject); 
					return; 
				}
				else break;
			case SysMLPackage.ACTION_DEFINITION:
				sequence_ActionBodyItem_DefinitionPrefix_Identification_ParameterList_SuperclassingPart(context, (ActionDefinition) semanticObject); 
				return; 
			case SysMLPackage.ACTION_USAGE:
				if (rule == grammarAccess.getBehaviorUsageElementRule()
						|| rule == grammarAccess.getVariantUsageElementRule()
						|| rule == grammarAccess.getConnectionEndElementRule()
						|| rule == grammarAccess.getActionRefUsageRule()) {
					sequence_ActionBodyItem_ActionRefUsage_ActionUsageParameterList_Identification_MultiplicityPart_Redefines_Redefinitions_Subsets_Subsettings_TypedBy_Typings_UsagePrefix_ValuePart(context, (ActionUsage) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getUsageElementRule()
						|| rule == grammarAccess.getFeatureElementRule()
						|| rule == grammarAccess.getFlowUsageElementRule()
						|| rule == grammarAccess.getActionUsageRule()
						|| rule == grammarAccess.getActionFlowUsageRule()) {
					sequence_ActionBodyItem_ActionUsageParameterList_Identification_MultiplicityPart_Redefines_Redefinitions_Subsets_Subsettings_TypedBy_Typings_UsagePrefix_ValuePart(context, (ActionUsage) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getStateActionUsageRule()
						|| rule == grammarAccess.getEmptyActionUsageRule()
						|| rule == grammarAccess.getEffectBehaviorUsageRule()) {
					sequence_EmptyActionUsage(context, (ActionUsage) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getParameterRule()) {
					sequence_Identification_MultiplicityPart_Parameter_Redefines_Subsets_TypedBy(context, (ActionUsage) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getActionUsageParameterRule()) {
					sequence_Identification_MultiplicityPart_Parameter_Redefines_Subsets_TypedBy_ValueOrFlowPart(context, (ActionUsage) semanticObject); 
					return; 
				}
				else break;
			case SysMLPackage.ANALYSIS_CASE_DEFINITION:
				sequence_ActionBodyItem_CalculationBodyItem_CaseBody_CaseBodyItem_DefinitionPrefix_Identification_ParameterList_ReturnParameterPart_SuperclassingPart(context, (AnalysisCaseDefinition) semanticObject); 
				return; 
			case SysMLPackage.ANALYSIS_CASE_USAGE:
				if (rule == grammarAccess.getBehaviorUsageElementRule()
						|| rule == grammarAccess.getVariantUsageElementRule()
						|| rule == grammarAccess.getAnalysisCaseRefUsageRule()) {
					sequence_ActionBodyItem_ActionUsageParameterList_AnalysisCaseRefUsage_CalculationBodyItem_CalculationReturnParameterPart_CaseBody_CaseBodyItem_Identification_MultiplicityPart_Redefines_Redefinitions_Subsets_Subsettings_TypedBy_Typings_UsagePrefix_ValuePart(context, (AnalysisCaseUsage) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getUsageElementRule()
						|| rule == grammarAccess.getFeatureElementRule()
						|| rule == grammarAccess.getFlowUsageElementRule()
						|| rule == grammarAccess.getAnalysisCaseUsageRule()
						|| rule == grammarAccess.getAnalysisCaseFlowUsageRule()) {
					sequence_ActionBodyItem_ActionUsageParameterList_CalculationBodyItem_CalculationReturnParameterPart_CaseBody_CaseBodyItem_Identification_MultiplicityPart_Redefines_Redefinitions_Subsets_Subsettings_TypedBy_Typings_UsagePrefix_ValuePart(context, (AnalysisCaseUsage) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getParameterRule()) {
					sequence_Identification_MultiplicityPart_Parameter_Redefines_Subsets_TypedBy(context, (AnalysisCaseUsage) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getActionUsageParameterRule()) {
					sequence_Identification_MultiplicityPart_Parameter_Redefines_Subsets_TypedBy_ValueOrFlowPart(context, (AnalysisCaseUsage) semanticObject); 
					return; 
				}
				else break;
			case SysMLPackage.ANNOTATION:
				if (rule == grammarAccess.getAnnotationRule()) {
					sequence_Annotation(context, (Annotation) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getEmptyAnnotationRule()) {
					sequence_EmptyAnnotation(context, (Annotation) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getPrefixDocumentationRule()) {
					sequence_PrefixDocumentation(context, (Annotation) semanticObject); 
					return; 
				}
				else break;
			case SysMLPackage.ASSERT_CONSTRAINT_USAGE:
				sequence_ActionBodyItem_ActionUsageParameterList_AssertConstraintUsage_CalculationBody_CalculationBodyItem_CalculationReturnParameterPart_Identification_InvariantPart_MultiplicityPart_Redefines_Redefinitions_Subsets_Subsettings_TypedBy_Typings_UsagePrefix(context, (AssertConstraintUsage) semanticObject); 
				return; 
			case SysMLPackage.ATTRIBUTE_DEFINITION:
				sequence_DefinitionBodyItem_DefinitionPrefix_Identification_SuperclassingPart(context, (AttributeDefinition) semanticObject); 
				return; 
			case SysMLPackage.ATTRIBUTE_USAGE:
				if (rule == grammarAccess.getUsageElementRule()
						|| rule == grammarAccess.getFeatureElementRule()
						|| rule == grammarAccess.getStructureUsageElementRule()
						|| rule == grammarAccess.getVariantUsageElementRule()
						|| rule == grammarAccess.getFlowUsageElementRule()
						|| rule == grammarAccess.getAttributeUsageRule()
						|| rule == grammarAccess.getAttributeVariantUsageRule()) {
					sequence_DefinitionBodyItem_Identification_MultiplicityPart_Redefines_Redefinitions_Subsets_Subsettings_TypedBy_Typings_UsagePrefix_ValueOrFlowPart(context, (AttributeUsage) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getParameterRule()) {
					sequence_Identification_MultiplicityPart_Parameter_Redefines_Subsets_TypedBy(context, (AttributeUsage) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getActionUsageParameterRule()) {
					sequence_Identification_MultiplicityPart_Parameter_Redefines_Subsets_TypedBy_ValueOrFlowPart(context, (AttributeUsage) semanticObject); 
					return; 
				}
				else break;
			case SysMLPackage.BINDING_CONNECTOR:
				if (rule == grammarAccess.getDefinitionElementRule()
						|| rule == grammarAccess.getBindingConnectorRule()) {
					sequence_BindingConnector_BindingConnectorDeclaration_Identification_MultiplicityPart_Redefines_Redefinitions_Subsets_Subsettings_TypeBody_TypedBy_Typings(context, (BindingConnector) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getSatisfactionConnectorRule()) {
					sequence_SatisfactionConnector(context, (BindingConnector) semanticObject); 
					return; 
				}
				else break;
			case SysMLPackage.BLOCK_EXPRESSION:
				sequence_BodyExpression(context, (BlockExpression) semanticObject); 
				return; 
			case SysMLPackage.CALCULATION_DEFINITION:
				sequence_ActionBodyItem_CalculationBody_CalculationBodyItem_CalculationDefinition_DefinitionPrefix_Identification_ParameterList_ReturnParameterPart_SuperclassingPart(context, (CalculationDefinition) semanticObject); 
				return; 
			case SysMLPackage.CALCULATION_USAGE:
				if (rule == grammarAccess.getBehaviorUsageElementRule()
						|| rule == grammarAccess.getVariantUsageElementRule()
						|| rule == grammarAccess.getConnectionEndElementRule()
						|| rule == grammarAccess.getCalculationRefUsageRule()) {
					sequence_ActionBodyItem_ActionUsageParameterList_CalculationBody_CalculationBodyItem_CalculationRefUsage_CalculationReturnParameterPart_Identification_MultiplicityPart_Redefines_Redefinitions_Subsets_Subsettings_TypedBy_Typings_UsagePrefix_ValuePart(context, (CalculationUsage) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getUsageElementRule()
						|| rule == grammarAccess.getFeatureElementRule()
						|| rule == grammarAccess.getFlowUsageElementRule()
						|| rule == grammarAccess.getCalculationUsageRule()
						|| rule == grammarAccess.getCalculationFlowUsageRule()) {
					sequence_ActionBodyItem_ActionUsageParameterList_CalculationBody_CalculationBodyItem_CalculationReturnParameterPart_Identification_MultiplicityPart_Redefines_Redefinitions_Subsets_Subsettings_TypedBy_Typings_UsagePrefix_ValuePart(context, (CalculationUsage) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getParameterRule()) {
					sequence_Identification_MultiplicityPart_Parameter_Redefines_Subsets_TypedBy(context, (CalculationUsage) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getActionUsageParameterRule()) {
					sequence_Identification_MultiplicityPart_Parameter_Redefines_Subsets_TypedBy_ValueOrFlowPart(context, (CalculationUsage) semanticObject); 
					return; 
				}
				else break;
			case SysMLPackage.CASE_DEFINITION:
				sequence_ActionBodyItem_CalculationBodyItem_CaseBody_CaseBodyItem_DefinitionPrefix_Identification_ParameterList_ReturnParameterPart_SuperclassingPart(context, (CaseDefinition) semanticObject); 
				return; 
			case SysMLPackage.CASE_USAGE:
				if (rule == grammarAccess.getBehaviorUsageElementRule()
						|| rule == grammarAccess.getVariantUsageElementRule()
						|| rule == grammarAccess.getCaseRefUsageRule()) {
					sequence_ActionBodyItem_ActionUsageParameterList_CalculationBodyItem_CalculationReturnParameterPart_CaseBody_CaseBodyItem_CaseRefUsage_Identification_MultiplicityPart_Redefines_Redefinitions_Subsets_Subsettings_TypedBy_Typings_UsagePrefix_ValuePart(context, (CaseUsage) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getUsageElementRule()
						|| rule == grammarAccess.getFeatureElementRule()
						|| rule == grammarAccess.getFlowUsageElementRule()
						|| rule == grammarAccess.getCaseUsageRule()
						|| rule == grammarAccess.getCaseFlowUsageRule()) {
					sequence_ActionBodyItem_ActionUsageParameterList_CalculationBodyItem_CalculationReturnParameterPart_CaseBody_CaseBodyItem_Identification_MultiplicityPart_Redefines_Redefinitions_Subsets_Subsettings_TypedBy_Typings_UsagePrefix_ValuePart(context, (CaseUsage) semanticObject); 
					return; 
				}
				else break;
			case SysMLPackage.COMMENT:
				if (rule == grammarAccess.getCommentRule()
						|| rule == grammarAccess.getDefinitionElementRule()) {
					sequence_Comment_Identification(context, (Comment) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getDocumentationCommentRule()) {
					sequence_DocumentationComment(context, (Comment) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getPrefixDocumentationCommentRule()) {
					sequence_PrefixDocumentationComment(context, (Comment) semanticObject); 
					return; 
				}
				else break;
			case SysMLPackage.CONJUGATED_PORT_DEFINITION:
				sequence_ConjugatedPortDefinition(context, (ConjugatedPortDefinition) semanticObject); 
				return; 
			case SysMLPackage.CONJUGATED_PORT_TYPING:
				sequence_ConjugatedPortTyping(context, (ConjugatedPortTyping) semanticObject); 
				return; 
			case SysMLPackage.CONNECTION_DEFINITION:
				sequence_ConnectionBody_DefinitionPrefix_Identification_SuperclassingPart(context, (ConnectionDefinition) semanticObject); 
				return; 
			case SysMLPackage.CONNECTION_USAGE:
				if (rule == grammarAccess.getDefinitionElementRule()
						|| rule == grammarAccess.getVariantUsageElementRule()
						|| rule == grammarAccess.getConnectionUsageRule()) {
					sequence_BinaryConnectorPart_ConnectionBody_Identification_MultiplicityPart_NaryConnectorPart_Redefines_Redefinitions_Subsets_Subsettings_TypedBy_Typings_UsagePrefix(context, (ConnectionUsage) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getConnectorRule()) {
					sequence_BinaryConnectorPart_ConnectionBody_NaryConnectorPart_UsagePrefix(context, (ConnectionUsage) semanticObject); 
					return; 
				}
				else break;
			case SysMLPackage.CONSTRAINT_DEFINITION:
				sequence_ActionBodyItem_CalculationBody_CalculationBodyItem_DefinitionPrefix_EmptyReturnParameterPart_Identification_ParameterList_SuperclassingPart(context, (ConstraintDefinition) semanticObject); 
				return; 
			case SysMLPackage.CONSTRAINT_USAGE:
				if (rule == grammarAccess.getBehaviorUsageElementRule()
						|| rule == grammarAccess.getVariantUsageElementRule()
						|| rule == grammarAccess.getConstraintRefUsageRule()) {
					sequence_ActionBodyItem_ActionUsageParameterList_CalculationBody_CalculationBodyItem_CalculationReturnParameterPart_ConstraintRefUsage_Identification_MultiplicityPart_Redefines_Redefinitions_Subsets_Subsettings_TypedBy_Typings_UsagePrefix_ValuePart(context, (ConstraintUsage) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getRequirementConstraintUsageRule()) {
					sequence_ActionBodyItem_ActionUsageParameterList_CalculationBody_CalculationBodyItem_CalculationReturnParameterPart_DefinitionBodyItem_Identification_MultiplicityPart_Redefines_Redefinitions_RequirementBodyItem_RequirementConstraintUsage_Subsets_Subsettings_TypedBy_Typings_ValuePart(context, (ConstraintUsage) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getUsageElementRule()
						|| rule == grammarAccess.getFeatureElementRule()
						|| rule == grammarAccess.getFlowUsageElementRule()
						|| rule == grammarAccess.getConstraintUsageRule()
						|| rule == grammarAccess.getConstraintFlowUsageRule()) {
					sequence_ActionBodyItem_ActionUsageParameterList_CalculationBody_CalculationBodyItem_CalculationReturnParameterPart_Identification_MultiplicityPart_Redefines_Redefinitions_Subsets_Subsettings_TypedBy_Typings_UsagePrefix_ValuePart(context, (ConstraintUsage) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getParameterRule()) {
					sequence_Identification_MultiplicityPart_Parameter_Redefines_Subsets_TypedBy(context, (ConstraintUsage) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getActionUsageParameterRule()) {
					sequence_Identification_MultiplicityPart_Parameter_Redefines_Subsets_TypedBy_ValueOrFlowPart(context, (ConstraintUsage) semanticObject); 
					return; 
				}
				else break;
			case SysMLPackage.DECISION_NODE:
				sequence_DecisionNode_Identification_MultiplicityPart_Redefines_Redefinitions_Subsets_Subsettings_TypedBy_Typings_UsagePrefix(context, (DecisionNode) semanticObject); 
				return; 
			case SysMLPackage.DEPENDENCY:
				sequence_Dependency_Identification(context, (Dependency) semanticObject); 
				return; 
			case SysMLPackage.DOCUMENTATION:
				sequence_OwnedDocumentation(context, (Documentation) semanticObject); 
				return; 
			case SysMLPackage.END_FEATURE_MEMBERSHIP:
				if (rule == grammarAccess.getConnectionUsageMemberRule()) {
					sequence_ConnectionEndMember_DefinitionMemberPrefix(context, (EndFeatureMembership) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getConnectionEndMemberRule()) {
					sequence_ConnectionEndMember_DefinitionMemberPrefix(context, (EndFeatureMembership) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getConnectorEndMemberRule()) {
					sequence_ConnectorEndMember(context, (EndFeatureMembership) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getInterfaceUsageMemberRule()) {
					sequence_DefinitionMemberPrefix_InterfaceEndMember(context, (EndFeatureMembership) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getInterfaceEndMemberRule()) {
					sequence_DefinitionMemberPrefix_InterfaceEndMember(context, (EndFeatureMembership) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getEmptyItemFlowEndMemberRule()) {
					sequence_EmptyItemFlowEndMember(context, (EndFeatureMembership) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getEmptySourceEndMemberRule()) {
					sequence_EmptySourceEndMember(context, (EndFeatureMembership) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getEmptyTargetEndMemberRule()) {
					sequence_EmptyTargetEndMember(context, (EndFeatureMembership) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getFeatureTypeMemberRule()) {
					sequence_EndFeatureMember_TypeMemberPrefix(context, (EndFeatureMembership) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getEndFeatureMemberRule()) {
					sequence_EndFeatureMember_TypeMemberPrefix(context, (EndFeatureMembership) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getItemFlowEndMemberRule()) {
					sequence_ItemFlowEndMember(context, (EndFeatureMembership) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getMultiplicitySourceEndMemberRule()) {
					sequence_MultiplicitySourceEndMember(context, (EndFeatureMembership) semanticObject); 
					return; 
				}
				else break;
			case SysMLPackage.EXHIBIT_STATE_USAGE:
				sequence_ActionUsageParameterList_ExhibitStateUsage_Identification_MultiplicityPart_Redefines_Redefinitions_StateBodyPart_StateDefBodyItem_Subsets_Subsettings_TypedBy_Typings_UsagePrefix_ValuePart(context, (ExhibitStateUsage) semanticObject); 
				return; 
			case SysMLPackage.EXPOSE:
				sequence_Expose(context, (Expose) semanticObject); 
				return; 
			case SysMLPackage.FEATURE:
				if (rule == grammarAccess.getConnectorEndRule()) {
					sequence_ConnectorEnd(context, (Feature) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getTypeReferenceRule()) {
					sequence_TypeReference(context, (Feature) semanticObject); 
					return; 
				}
				else break;
			case SysMLPackage.FEATURE_MEMBERSHIP:
				if (rule == grammarAccess.getActionNodeMemberRule()) {
					sequence_ActionNodeMember_DefinitionMemberPrefix(context, (FeatureMembership) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getBehaviorUsageMemberRule()) {
					sequence_BehaviorUsageMember_DefinitionMemberPrefix(context, (FeatureMembership) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getNestedUsageMemberRule()
						|| rule == grammarAccess.getConnectionUsageMemberRule()
						|| rule == grammarAccess.getInterfaceUsageMemberRule()) {
					sequence_BehaviorUsageMember_DefinitionMemberPrefix_FlowUsageMember_StructureUsageMember(context, (FeatureMembership) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getBodyExpressionMemberRule()) {
					sequence_BodyExpressionMember(context, (FeatureMembership) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getEntryTransitionMemberRule()) {
					sequence_DefinitionMemberPrefix_EntryTransitionMember(context, (FeatureMembership) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getFlowUsageMemberRule()) {
					sequence_DefinitionMemberPrefix_FlowUsageMember(context, (FeatureMembership) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getIndividualUsageMemberRule()) {
					sequence_DefinitionMemberPrefix_IndividualUsageMember(context, (FeatureMembership) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getInitialNodeMemberRule()) {
					sequence_DefinitionMemberPrefix_InitialNodeMember(context, (FeatureMembership) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getStructureUsageMemberRule()) {
					sequence_DefinitionMemberPrefix_StructureUsageMember(context, (FeatureMembership) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getTargetSuccessionMemberRule()) {
					sequence_DefinitionMemberPrefix_TargetSuccessionMember(context, (FeatureMembership) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getTargetTransitionUsageMemberRule()) {
					sequence_DefinitionMemberPrefix_TargetTransitionUsageMember(context, (FeatureMembership) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getTransitionUsageMemberRule()) {
					sequence_DefinitionMemberPrefix_TransitionUsageMember(context, (FeatureMembership) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getEmptyItemFeatureMemberRule()) {
					sequence_EmptyItemFeatureMember(context, (FeatureMembership) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getEmptyItemFlowFeatureMemberRule()) {
					sequence_EmptyItemFlowFeatureMember(context, (FeatureMembership) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getEmptySuccessionMemberRule()) {
					sequence_EmptySuccessionMember(context, (FeatureMembership) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getFeatureTypeMemberRule()
						|| rule == grammarAccess.getFeatureMemberRule()) {
					sequence_FeatureMember_TypeMemberPrefix(context, (FeatureMembership) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getGuardedSuccessionMemberRule()) {
					sequence_GuardedSuccessionMember(context, (FeatureMembership) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getItemFeatureMemberRule()) {
					sequence_ItemFeatureMember(context, (FeatureMembership) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getItemFlowFeatureMemberRule()) {
					sequence_ItemFlowFeatureMember(context, (FeatureMembership) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getNamedExpressionMemberRule()) {
					sequence_NamedExpressionMember(context, (FeatureMembership) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getOwnedExpressionMemberRule()) {
					sequence_OwnedExpressionMember(context, (FeatureMembership) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getSnapshotFeatureMemberRule()) {
					sequence_SnapshotFeatureMember(context, (FeatureMembership) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getSourceItemFlowMemberRule()) {
					sequence_SourceItemFlowMember(context, (FeatureMembership) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getTimeSliceFeatureMemberRule()) {
					sequence_TimeSliceFeatureMember(context, (FeatureMembership) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getTransitionSourceMemberRule()) {
					sequence_TransitionSourceMember(context, (FeatureMembership) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getTransitionSuccessionMemberRule()) {
					sequence_TransitionSuccessionMember(context, (FeatureMembership) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getTrueLiteralMemberRule()) {
					sequence_TrueLiteralMember(context, (FeatureMembership) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getTypeReferenceMemberRule()) {
					sequence_TypeReferenceMember(context, (FeatureMembership) semanticObject); 
					return; 
				}
				else break;
			case SysMLPackage.FEATURE_REFERENCE_EXPRESSION:
				sequence_FeatureReferenceExpression(context, (FeatureReferenceExpression) semanticObject); 
				return; 
			case SysMLPackage.FEATURE_TYPING:
				if (rule == grammarAccess.getExpressionTypingRule()) {
					sequence_ExpressionTyping(context, (FeatureTyping) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getOwnedFeatureTypingRule()
						|| rule == grammarAccess.getPortTypingRule()) {
					sequence_OwnedFeatureTyping(context, (FeatureTyping) semanticObject); 
					return; 
				}
				else break;
			case SysMLPackage.FEATURE_VALUE:
				sequence_FeatureValue(context, (FeatureValue) semanticObject); 
				return; 
			case SysMLPackage.FORK_NODE:
				sequence_ForkNode_Identification_MultiplicityPart_Redefines_Redefinitions_Subsets_Subsettings_TypedBy_Typings_UsagePrefix(context, (ForkNode) semanticObject); 
				return; 
			case SysMLPackage.IMPORT:
				if (rule == grammarAccess.getEmptyImportRule()) {
					sequence_EmptyImport(context, (Import) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getPackageImportRule()) {
					sequence_PackageImport(context, (Import) semanticObject); 
					return; 
				}
				else break;
			case SysMLPackage.INDIVIDUAL_DEFINITION:
				sequence_DefinitionBodyItem_DefinitionPrefix_Identification_IndividualDefinition_SuperclassingPart(context, (IndividualDefinition) semanticObject); 
				return; 
			case SysMLPackage.INDIVIDUAL_USAGE:
				if (rule == grammarAccess.getIndividualUsageElementRule()
						|| rule == grammarAccess.getVariantUsageElementRule()) {
					sequence_DefinitionBodyItem_Identification_IndividualRefUsage_MultiplicityPart_Redefines_Redefinitions_SnapshotRefUsage_Subsets_Subsettings_TimeSliceRefUsage_TypedBy_Typings_UsagePrefix_ValueOrFlowPart(context, (IndividualUsage) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getIndividualRefUsageRule()) {
					sequence_DefinitionBodyItem_Identification_IndividualRefUsage_MultiplicityPart_Redefines_Redefinitions_Subsets_Subsettings_TypedBy_Typings_UsagePrefix_ValueOrFlowPart(context, (IndividualUsage) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getSnapshotRefUsageRule()) {
					sequence_DefinitionBodyItem_Identification_MultiplicityPart_Redefines_Redefinitions_SnapshotRefUsage_Subsets_Subsettings_TypedBy_Typings_UsagePrefix_ValueOrFlowPart(context, (IndividualUsage) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getUsageElementRule()
						|| rule == grammarAccess.getFeatureElementRule()) {
					sequence_DefinitionBodyItem_Identification_MultiplicityPart_Redefines_Redefinitions_SnapshotUsage_Subsets_Subsettings_TimeSliceUsage_TypedBy_Typings_UsagePrefix_ValueOrFlowPart(context, (IndividualUsage) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getSnapshotUsageRule()) {
					sequence_DefinitionBodyItem_Identification_MultiplicityPart_Redefines_Redefinitions_SnapshotUsage_Subsets_Subsettings_TypedBy_Typings_UsagePrefix_ValueOrFlowPart(context, (IndividualUsage) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getTimeSliceRefUsageRule()) {
					sequence_DefinitionBodyItem_Identification_MultiplicityPart_Redefines_Redefinitions_Subsets_Subsettings_TimeSliceRefUsage_TypedBy_Typings_UsagePrefix_ValueOrFlowPart(context, (IndividualUsage) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getTimeSliceUsageRule()) {
					sequence_DefinitionBodyItem_Identification_MultiplicityPart_Redefines_Redefinitions_Subsets_Subsettings_TimeSliceUsage_TypedBy_Typings_UsagePrefix_ValueOrFlowPart(context, (IndividualUsage) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getIndividualUsageRule()) {
					sequence_DefinitionBodyItem_Identification_MultiplicityPart_Redefines_Redefinitions_Subsets_Subsettings_TypedBy_Typings_UsagePrefix_ValueOrFlowPart(context, (IndividualUsage) semanticObject); 
					return; 
				}
				else break;
			case SysMLPackage.INTERFACE_DEFINITION:
				sequence_DefinitionPrefix_Identification_InterfaceDefBody_SuperclassingPart(context, (InterfaceDefinition) semanticObject); 
				return; 
			case SysMLPackage.INTERFACE_USAGE:
				sequence_BinaryConnectorPart_Identification_InterfaceDefBody_MultiplicityPart_NaryConnectorPart_Redefines_Redefinitions_Subsets_Subsettings_TypedBy_Typings_UsagePrefix(context, (InterfaceUsage) semanticObject); 
				return; 
			case SysMLPackage.INVOCATION_EXPRESSION:
				sequence_InvocationExpression_NamedArgumentList_PositionalArgumentList(context, (InvocationExpression) semanticObject); 
				return; 
			case SysMLPackage.ITEM_DEFINITION:
				sequence_DefinitionBodyItem_DefinitionPrefix_Identification_SuperclassingPart(context, (ItemDefinition) semanticObject); 
				return; 
			case SysMLPackage.ITEM_FEATURE:
				if (rule == grammarAccess.getEmptyItemFeatureRule()) {
					sequence_EmptyItemFeature(context, (ItemFeature) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getItemFeatureRule()) {
					sequence_ItemFeature(context, (ItemFeature) semanticObject); 
					return; 
				}
				else break;
			case SysMLPackage.ITEM_FLOW:
				if (rule == grammarAccess.getDefinitionElementRule()
						|| rule == grammarAccess.getItemFlowRule()) {
					sequence_Identification_ItemFlow_ItemFlowDeclaration_MultiplicityPart_Redefines_Redefinitions_Subsets_Subsettings_TypeBody_TypedBy_Typings(context, (ItemFlow) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getSourceItemFlowRule()) {
					sequence_SourceItemFlow(context, (ItemFlow) semanticObject); 
					return; 
				}
				else break;
			case SysMLPackage.ITEM_FLOW_END:
				if (rule == grammarAccess.getEmptyItemFlowEndRule()) {
					sequence_EmptyItemFlowEnd(context, (ItemFlowEnd) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getItemFlowEndRule()) {
					sequence_ItemFlowEnd(context, (ItemFlowEnd) semanticObject); 
					return; 
				}
				else break;
			case SysMLPackage.ITEM_FLOW_FEATURE:
				if (rule == grammarAccess.getEmptyItemFlowFeatureRule()) {
					sequence_EmptyItemFlowFeature(context, (ItemFlowFeature) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getItemFlowFeatureRule()) {
					sequence_ItemFlowFeature(context, (ItemFlowFeature) semanticObject); 
					return; 
				}
				else break;
			case SysMLPackage.ITEM_USAGE:
				if (rule == grammarAccess.getStructureUsageElementRule()
						|| rule == grammarAccess.getVariantUsageElementRule()
						|| rule == grammarAccess.getItemRefUsageRule()
						|| rule == grammarAccess.getConnectionEndElementRule()) {
					sequence_DefinitionBodyItem_Identification_ItemRefUsage_MultiplicityPart_Redefines_Redefinitions_Subsets_Subsettings_TypedBy_Typings_UsagePrefix_ValueOrFlowPart(context, (ItemUsage) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getUsageElementRule()
						|| rule == grammarAccess.getFeatureElementRule()
						|| rule == grammarAccess.getFlowUsageElementRule()
						|| rule == grammarAccess.getItemUsageRule()
						|| rule == grammarAccess.getItemFlowUsageRule()) {
					sequence_DefinitionBodyItem_Identification_MultiplicityPart_Redefines_Redefinitions_Subsets_Subsettings_TypedBy_Typings_UsagePrefix_ValueOrFlowPart(context, (ItemUsage) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getParameterRule()) {
					sequence_Identification_MultiplicityPart_Parameter_Redefines_Subsets_TypedBy(context, (ItemUsage) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getActionUsageParameterRule()) {
					sequence_Identification_MultiplicityPart_Parameter_Redefines_Subsets_TypedBy_ValueOrFlowPart(context, (ItemUsage) semanticObject); 
					return; 
				}
				else break;
			case SysMLPackage.JOIN_NODE:
				sequence_Identification_JoinNode_MultiplicityPart_Redefines_Redefinitions_Subsets_Subsettings_TypedBy_Typings_UsagePrefix(context, (JoinNode) semanticObject); 
				return; 
			case SysMLPackage.LIFE_CLASS:
				sequence_LifeClass(context, (LifeClass) semanticObject); 
				return; 
			case SysMLPackage.LITERAL_BOOLEAN:
				if (rule == grammarAccess.getOwnedExpressionRule()
						|| rule == grammarAccess.getConditionalExpressionRule()
						|| action == grammarAccess.getConditionalExpressionAccess().getOperatorExpressionOperand_compAction_1_0()
						|| rule == grammarAccess.getNullCoalescingExpressionRule()
						|| action == grammarAccess.getNullCoalescingExpressionAccess().getOperatorExpressionOperand_compAction_1_0()
						|| rule == grammarAccess.getConditionalOrExpressionRule()
						|| action == grammarAccess.getConditionalOrExpressionAccess().getOperatorExpressionOperand_compAction_1_0()
						|| rule == grammarAccess.getConditionalAndExpressionRule()
						|| action == grammarAccess.getConditionalAndExpressionAccess().getOperatorExpressionOperand_compAction_1_0()
						|| rule == grammarAccess.getOrExpressionRule()
						|| action == grammarAccess.getOrExpressionAccess().getOperatorExpressionOperand_compAction_1_0()
						|| rule == grammarAccess.getXorExpressionRule()
						|| action == grammarAccess.getXorExpressionAccess().getOperatorExpressionOperand_compAction_1_0()
						|| rule == grammarAccess.getAndExpressionRule()
						|| action == grammarAccess.getAndExpressionAccess().getOperatorExpressionOperand_compAction_1_0()
						|| rule == grammarAccess.getEqualityExpressionRule()
						|| action == grammarAccess.getEqualityExpressionAccess().getOperatorExpressionOperand_compAction_1_0()
						|| rule == grammarAccess.getClassificationExpressionRule()
						|| action == grammarAccess.getClassificationExpressionAccess().getOperatorExpressionOperand_compAction_1_0()
						|| rule == grammarAccess.getRelationalExpressionRule()
						|| action == grammarAccess.getRelationalExpressionAccess().getOperatorExpressionOperand_compAction_1_0()
						|| rule == grammarAccess.getAdditiveExpressionRule()
						|| action == grammarAccess.getAdditiveExpressionAccess().getOperatorExpressionOperand_compAction_1_0()
						|| rule == grammarAccess.getMultiplicativeExpressionRule()
						|| action == grammarAccess.getMultiplicativeExpressionAccess().getOperatorExpressionOperand_compAction_1_0()
						|| rule == grammarAccess.getExponentiationExpressionRule()
						|| action == grammarAccess.getExponentiationExpressionAccess().getOperatorExpressionOperand_compAction_1_0()
						|| rule == grammarAccess.getUnitsExpressionRule()
						|| action == grammarAccess.getUnitsExpressionAccess().getOperatorExpressionOperand_compAction_1_0()
						|| rule == grammarAccess.getUnaryExpressionRule()
						|| rule == grammarAccess.getExtentExpressionRule()
						|| rule == grammarAccess.getSequenceExpressionRule()
						|| action == grammarAccess.getSequenceExpressionAccess().getOperatorExpressionOperand_compAction_1_0_0()
						|| action == grammarAccess.getSequenceExpressionAccess().getOperatorExpressionOperand_compAction_1_1_0()
						|| rule == grammarAccess.getSequenceConstructionExpressionRule()
						|| action == grammarAccess.getSequenceConstructionExpressionAccess().getOperatorExpressionOperand_compAction_1_2_0_0()
						|| action == grammarAccess.getSequenceConstructionExpressionAccess().getOperatorExpressionOperand_compAction_1_2_1_0()
						|| rule == grammarAccess.getSequenceElementListRule()
						|| action == grammarAccess.getSequenceElementListAccess().getOperatorExpressionOperand_compAction_1_0()
						|| rule == grammarAccess.getBaseExpressionRule()
						|| rule == grammarAccess.getLiteralExpressionRule()
						|| rule == grammarAccess.getLiteralBooleanRule()) {
					sequence_LiteralBoolean(context, (LiteralBoolean) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getTrueLiteralExpressionRule()) {
					sequence_TrueLiteralExpression(context, (LiteralBoolean) semanticObject); 
					return; 
				}
				else break;
			case SysMLPackage.LITERAL_INTEGER:
				sequence_LiteralInteger(context, (LiteralInteger) semanticObject); 
				return; 
			case SysMLPackage.LITERAL_REAL:
				sequence_LiteralReal(context, (LiteralReal) semanticObject); 
				return; 
			case SysMLPackage.LITERAL_STRING:
				sequence_LiteralString(context, (LiteralString) semanticObject); 
				return; 
			case SysMLPackage.LITERAL_UNBOUNDED:
				sequence_LiteralUnbounded(context, (LiteralUnbounded) semanticObject); 
				return; 
			case SysMLPackage.MEMBERSHIP:
				if (rule == grammarAccess.getConjugatedPortDefinitionMemberRule()) {
					sequence_ConjugatedPortDefinitionMember(context, (Membership) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getLifeClassMembershipRule()) {
					sequence_LifeClassMembership(context, (Membership) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getLiteralIntegerMemberRule()) {
					sequence_LiteralIntegerMember(context, (Membership) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getLiteralUnlimitedNaturalMemberRule()) {
					sequence_LiteralUnlimitedNaturalMember(context, (Membership) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getMultiplicityMemberRule()) {
					sequence_MultiplicityMember(context, (Membership) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getPackageMemberRule()) {
					sequence_NonUsagePackageMember_PackageMember_UsagePackageMember(context, (Membership) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getNonFeatureTypeMemberRule()
						|| rule == grammarAccess.getNestedDefinitionMemberRule()) {
					sequence_NonUsagePackageMember_TypeMemberPrefix(context, (Membership) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getSatisfactionConnectorMemberRule()) {
					sequence_SatisfactionConnectorMember(context, (Membership) semanticObject); 
					return; 
				}
				else break;
			case SysMLPackage.MERGE_NODE:
				sequence_Identification_MergeNode_MultiplicityPart_Redefines_Redefinitions_Subsets_Subsettings_TypedBy_Typings_UsagePrefix(context, (MergeNode) semanticObject); 
				return; 
			case SysMLPackage.MULTIPLICITY_RANGE:
				sequence_Multiplicity(context, (MultiplicityRange) semanticObject); 
				return; 
			case SysMLPackage.NULL_EXPRESSION:
				sequence_NullExpression_SequenceConstructionExpression(context, (NullExpression) semanticObject); 
				return; 
			case SysMLPackage.OBJECTIVE_MEMBERSHIP:
				sequence_DefinitionMemberPrefix_ObjectiveMember(context, (ObjectiveMembership) semanticObject); 
				return; 
			case SysMLPackage.OPERATOR_EXPRESSION:
				if (rule == grammarAccess.getSequenceElementListRule()) {
					sequence_AdditiveExpression_AndExpression_ClassificationExpression_ConditionalAndExpression_ConditionalExpression_ConditionalOrExpression_EqualityExpression_ExponentiationExpression_ExtentExpression_ExtentExpression_Deprecated_MultiplicativeExpression_NullCoalescingExpression_OrExpression_RelationalExpression_SequenceConstructionExpression_SequenceElementList_SequenceExpression_UnaryExpression_UnitsExpression_XorExpression(context, (OperatorExpression) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getOwnedExpressionRule()
						|| rule == grammarAccess.getConditionalExpressionRule()
						|| action == grammarAccess.getConditionalExpressionAccess().getOperatorExpressionOperand_compAction_1_0()
						|| rule == grammarAccess.getNullCoalescingExpressionRule()
						|| action == grammarAccess.getNullCoalescingExpressionAccess().getOperatorExpressionOperand_compAction_1_0()
						|| rule == grammarAccess.getConditionalOrExpressionRule()
						|| action == grammarAccess.getConditionalOrExpressionAccess().getOperatorExpressionOperand_compAction_1_0()
						|| rule == grammarAccess.getConditionalAndExpressionRule()
						|| action == grammarAccess.getConditionalAndExpressionAccess().getOperatorExpressionOperand_compAction_1_0()
						|| rule == grammarAccess.getOrExpressionRule()
						|| action == grammarAccess.getOrExpressionAccess().getOperatorExpressionOperand_compAction_1_0()
						|| rule == grammarAccess.getXorExpressionRule()
						|| action == grammarAccess.getXorExpressionAccess().getOperatorExpressionOperand_compAction_1_0()
						|| rule == grammarAccess.getAndExpressionRule()
						|| action == grammarAccess.getAndExpressionAccess().getOperatorExpressionOperand_compAction_1_0()
						|| rule == grammarAccess.getEqualityExpressionRule()
						|| action == grammarAccess.getEqualityExpressionAccess().getOperatorExpressionOperand_compAction_1_0()
						|| rule == grammarAccess.getClassificationExpressionRule()
						|| action == grammarAccess.getClassificationExpressionAccess().getOperatorExpressionOperand_compAction_1_0()
						|| rule == grammarAccess.getRelationalExpressionRule()
						|| action == grammarAccess.getRelationalExpressionAccess().getOperatorExpressionOperand_compAction_1_0()
						|| rule == grammarAccess.getAdditiveExpressionRule()
						|| action == grammarAccess.getAdditiveExpressionAccess().getOperatorExpressionOperand_compAction_1_0()
						|| rule == grammarAccess.getMultiplicativeExpressionRule()
						|| action == grammarAccess.getMultiplicativeExpressionAccess().getOperatorExpressionOperand_compAction_1_0()
						|| rule == grammarAccess.getExponentiationExpressionRule()
						|| action == grammarAccess.getExponentiationExpressionAccess().getOperatorExpressionOperand_compAction_1_0()
						|| rule == grammarAccess.getUnitsExpressionRule()
						|| action == grammarAccess.getUnitsExpressionAccess().getOperatorExpressionOperand_compAction_1_0()
						|| rule == grammarAccess.getUnaryExpressionRule()
						|| rule == grammarAccess.getExtentExpressionRule()
						|| rule == grammarAccess.getSequenceExpressionRule()
						|| action == grammarAccess.getSequenceExpressionAccess().getOperatorExpressionOperand_compAction_1_0_0()
						|| action == grammarAccess.getSequenceExpressionAccess().getOperatorExpressionOperand_compAction_1_1_0()
						|| rule == grammarAccess.getSequenceConstructionExpressionRule()
						|| action == grammarAccess.getSequenceConstructionExpressionAccess().getOperatorExpressionOperand_compAction_1_2_0_0()
						|| action == grammarAccess.getSequenceConstructionExpressionAccess().getOperatorExpressionOperand_compAction_1_2_1_0()
						|| action == grammarAccess.getSequenceElementListAccess().getOperatorExpressionOperand_compAction_1_0()
						|| rule == grammarAccess.getBaseExpressionRule()) {
					sequence_AdditiveExpression_AndExpression_ClassificationExpression_ConditionalAndExpression_ConditionalExpression_ConditionalOrExpression_EqualityExpression_ExponentiationExpression_ExtentExpression_ExtentExpression_Deprecated_MultiplicativeExpression_NullCoalescingExpression_OrExpression_RelationalExpression_SequenceConstructionExpression_SequenceExpression_UnaryExpression_UnitsExpression_XorExpression(context, (OperatorExpression) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getExtentExpression_DeprecatedRule()) {
					sequence_ExtentExpression_Deprecated(context, (OperatorExpression) semanticObject); 
					return; 
				}
				else break;
			case SysMLPackage.PACKAGE:
				if (rule == grammarAccess.getPackageRule()
						|| rule == grammarAccess.getDefinitionElementRule()) {
					sequence_Identification_PackageBody(context, (org.omg.sysml.lang.sysml.Package) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getRootPackageRule()) {
					sequence_PackageBodyElement_RootPackage(context, (org.omg.sysml.lang.sysml.Package) semanticObject); 
					return; 
				}
				else break;
			case SysMLPackage.PARAMETER_MEMBERSHIP:
				if (rule == grammarAccess.getActionUsageParameterMemberRule()) {
					sequence_ActionUsageParameterMember(context, (ParameterMembership) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getBodyParameterMemberRule()) {
					sequence_BodyParameterMember(context, (ParameterMembership) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getParameterFlowUsageMemberRule()) {
					sequence_DefinitionMemberPrefix_ParameterFlowUsageMember(context, (ParameterMembership) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getEmptyParameterMemberRule()) {
					sequence_EmptyParameterMember(context, (ParameterMembership) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getParameterMemberRule()) {
					sequence_ParameterMember(context, (ParameterMembership) semanticObject); 
					return; 
				}
				else break;
			case SysMLPackage.PART_DEFINITION:
				sequence_DefinitionBodyItem_DefinitionPrefix_Identification_SuperclassingPart(context, (PartDefinition) semanticObject); 
				return; 
			case SysMLPackage.PART_USAGE:
				if (rule == grammarAccess.getStructureUsageElementRule()
						|| rule == grammarAccess.getVariantUsageElementRule()
						|| rule == grammarAccess.getPartRefUsageRule()
						|| rule == grammarAccess.getConnectionEndElementRule()) {
					sequence_DefinitionBodyItem_Identification_MultiplicityPart_PartRefUsage_Redefines_Redefinitions_Subsets_Subsettings_TypedBy_Typings_UsagePrefix_ValueOrFlowPart(context, (PartUsage) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getUsageElementRule()
						|| rule == grammarAccess.getFeatureElementRule()
						|| rule == grammarAccess.getFlowUsageElementRule()
						|| rule == grammarAccess.getPartUsageRule()
						|| rule == grammarAccess.getPartFlowUsageRule()) {
					sequence_DefinitionBodyItem_Identification_MultiplicityPart_Redefines_Redefinitions_Subsets_Subsettings_TypedBy_Typings_UsagePrefix_ValueOrFlowPart(context, (PartUsage) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getParameterRule()) {
					sequence_Identification_MultiplicityPart_Parameter_Redefines_Subsets_TypedBy(context, (PartUsage) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getActionUsageParameterRule()) {
					sequence_Identification_MultiplicityPart_Parameter_Redefines_Subsets_TypedBy_ValueOrFlowPart(context, (PartUsage) semanticObject); 
					return; 
				}
				else break;
			case SysMLPackage.PERFORM_ACTION_USAGE:
				if (rule == grammarAccess.getStateActionUsageRule()
						|| rule == grammarAccess.getEffectBehaviorUsageRule()) {
					sequence_ActionBodyItem_ActionUsageParameterList_Identification_MultiplicityPart_PerformActionUsageDeclaration_PerformedActionUsage_Redefines_Redefinitions_Subsets_Subsettings_TypedBy_Typings_ValuePart(context, (PerformActionUsage) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getBehaviorUsageElementRule()
						|| rule == grammarAccess.getVariantUsageElementRule()
						|| rule == grammarAccess.getPerformActionUsageRule()) {
					sequence_ActionBodyItem_ActionUsageParameterList_Identification_MultiplicityPart_PerformActionUsageDeclaration_Redefines_Redefinitions_Subsets_Subsettings_TypedBy_Typings_UsagePrefix_ValuePart(context, (PerformActionUsage) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getPerformedActionUsageRule()) {
					sequence_ActionUsageParameterList_Identification_MultiplicityPart_PerformActionUsageDeclaration_PerformedActionUsage_Redefines_Redefinitions_Subsets_Subsettings_TypedBy_Typings_ValuePart(context, (PerformActionUsage) semanticObject); 
					return; 
				}
				else break;
			case SysMLPackage.PORT_CONJUGATION:
				sequence_PortConjugation(context, (PortConjugation) semanticObject); 
				return; 
			case SysMLPackage.PORT_DEFINITION:
				sequence_DefinitionBodyItem_DefinitionPrefix_Identification_PortDefinition_SuperclassingPart(context, (PortDefinition) semanticObject); 
				return; 
			case SysMLPackage.PORT_USAGE:
				if (rule == grammarAccess.getUsageElementRule()
						|| rule == grammarAccess.getFeatureElementRule()
						|| rule == grammarAccess.getStructureUsageElementRule()
						|| rule == grammarAccess.getConnectionEndElementRule()) {
					sequence_DefinitionBodyItem_Identification_MultiplicityPart_PortTypings_Redefines_Redefinitions_Subsets_Subsettings_UsagePrefix_ValueOrFlowPart(context, (PortUsage) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getVariantUsageElementRule()) {
					sequence_DefinitionBodyItem_Identification_MultiplicityPart_PortTypings_Redefines_Redefinitions_Subsets_Subsettings_UsagePrefix_ValueOrFlowPart(context, (PortUsage) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getPortUsageRule()
						|| rule == grammarAccess.getPortEndUsageRule()) {
					sequence_DefinitionBodyItem_Identification_MultiplicityPart_PortTypings_Redefines_Redefinitions_Subsets_Subsettings_UsagePrefix_ValueOrFlowPart(context, (PortUsage) semanticObject); 
					return; 
				}
				else break;
			case SysMLPackage.QUERY_PATH_EXPRESSION:
				if (rule == grammarAccess.getOwnedExpressionRule()
						|| rule == grammarAccess.getConditionalExpressionRule()
						|| action == grammarAccess.getConditionalExpressionAccess().getOperatorExpressionOperand_compAction_1_0()
						|| rule == grammarAccess.getNullCoalescingExpressionRule()
						|| action == grammarAccess.getNullCoalescingExpressionAccess().getOperatorExpressionOperand_compAction_1_0()
						|| rule == grammarAccess.getConditionalOrExpressionRule()
						|| action == grammarAccess.getConditionalOrExpressionAccess().getOperatorExpressionOperand_compAction_1_0()
						|| rule == grammarAccess.getConditionalAndExpressionRule()
						|| action == grammarAccess.getConditionalAndExpressionAccess().getOperatorExpressionOperand_compAction_1_0()
						|| rule == grammarAccess.getOrExpressionRule()
						|| action == grammarAccess.getOrExpressionAccess().getOperatorExpressionOperand_compAction_1_0()
						|| rule == grammarAccess.getXorExpressionRule()
						|| action == grammarAccess.getXorExpressionAccess().getOperatorExpressionOperand_compAction_1_0()
						|| rule == grammarAccess.getAndExpressionRule()
						|| action == grammarAccess.getAndExpressionAccess().getOperatorExpressionOperand_compAction_1_0()
						|| rule == grammarAccess.getEqualityExpressionRule()
						|| action == grammarAccess.getEqualityExpressionAccess().getOperatorExpressionOperand_compAction_1_0()
						|| rule == grammarAccess.getClassificationExpressionRule()
						|| action == grammarAccess.getClassificationExpressionAccess().getOperatorExpressionOperand_compAction_1_0()
						|| rule == grammarAccess.getRelationalExpressionRule()
						|| action == grammarAccess.getRelationalExpressionAccess().getOperatorExpressionOperand_compAction_1_0()
						|| rule == grammarAccess.getAdditiveExpressionRule()
						|| action == grammarAccess.getAdditiveExpressionAccess().getOperatorExpressionOperand_compAction_1_0()
						|| rule == grammarAccess.getMultiplicativeExpressionRule()
						|| action == grammarAccess.getMultiplicativeExpressionAccess().getOperatorExpressionOperand_compAction_1_0()
						|| rule == grammarAccess.getExponentiationExpressionRule()
						|| action == grammarAccess.getExponentiationExpressionAccess().getOperatorExpressionOperand_compAction_1_0()
						|| rule == grammarAccess.getUnitsExpressionRule()
						|| action == grammarAccess.getUnitsExpressionAccess().getOperatorExpressionOperand_compAction_1_0()
						|| rule == grammarAccess.getUnaryExpressionRule()
						|| rule == grammarAccess.getExtentExpressionRule()
						|| rule == grammarAccess.getSequenceExpressionRule()
						|| action == grammarAccess.getSequenceExpressionAccess().getOperatorExpressionOperand_compAction_1_0_0()
						|| action == grammarAccess.getSequenceExpressionAccess().getOperatorExpressionOperand_compAction_1_1_0()
						|| rule == grammarAccess.getSequenceConstructionExpressionRule()
						|| action == grammarAccess.getSequenceConstructionExpressionAccess().getOperatorExpressionOperand_compAction_1_2_0_0()
						|| action == grammarAccess.getSequenceConstructionExpressionAccess().getOperatorExpressionOperand_compAction_1_2_1_0()
						|| rule == grammarAccess.getSequenceElementListRule()
						|| action == grammarAccess.getSequenceElementListAccess().getOperatorExpressionOperand_compAction_1_0()
						|| rule == grammarAccess.getBaseExpressionRule()
						|| rule == grammarAccess.getQueryPathExpressionRule()
						|| action == grammarAccess.getQueryPathExpressionAccess().getQueryQualifierExpressionOperand_compAction_1_1()
						|| action == grammarAccess.getQueryPathExpressionAccess().getQueryPathStepExpressionOperand_compAction_2_1()
						|| rule == grammarAccess.getQueryHeadExpressionRule()) {
					sequence_QueryHeadExpression(context, (QueryPathExpression) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getQueryNameExpressionRule()) {
					sequence_QueryNameExpression(context, (QueryPathExpression) semanticObject); 
					return; 
				}
				else break;
			case SysMLPackage.QUERY_PATH_STEP_EXPRESSION:
				sequence_QueryPathExpression(context, (QueryPathStepExpression) semanticObject); 
				return; 
			case SysMLPackage.QUERY_QUALIFIER_EXPRESSION:
				sequence_QueryPathExpression(context, (QueryQualifierExpression) semanticObject); 
				return; 
			case SysMLPackage.REDEFINITION:
				if (rule == grammarAccess.getEmptyRedefinitionRule()) {
					sequence_EmptyRedefinition(context, (Redefinition) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getOwnedRedefinitionRule()) {
					sequence_OwnedRedefinition(context, (Redefinition) semanticObject); 
					return; 
				}
				else break;
			case SysMLPackage.REFERENCE_USAGE:
				if (rule == grammarAccess.getActionUsageParameterRule()) {
					sequence_ActionUsageParameter_Identification_MultiplicityPart_Parameter_Redefines_Subsets_TypedBy_ValueOrFlowPart(context, (ReferenceUsage) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getBodyParameterRule()) {
					sequence_BodyParameter_MultiplicityPart_TypedBy(context, (ReferenceUsage) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getReferenceVariantUsageRule()
						|| rule == grammarAccess.getVariantUsageElementRule()) {
					sequence_DefinitionBodyItem_Identification_MultiplicityPart_Redefines_Redefinitions_ReferenceVariantUsage_Subsets_Subsettings_TypedBy_Typings_UsagePrefix_ValueOrFlowPart(context, (ReferenceUsage) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getReferenceUsageRule()
						|| rule == grammarAccess.getReferenceEndUsageRule()
						|| rule == grammarAccess.getStructureUsageElementRule()
						|| rule == grammarAccess.getFlowUsageElementRule()
						|| rule == grammarAccess.getConnectionEndElementRule()) {
					sequence_DefinitionBodyItem_Identification_MultiplicityPart_Redefines_Redefinitions_Subsets_Subsettings_TypedBy_Typings_UsagePrefix_ValueOrFlowPart(context, (ReferenceUsage) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getSubjectUsageRule()) {
					sequence_DefinitionBodyItem_Identification_MultiplicityPart_Redefines_Redefinitions_Subsets_Subsettings_TypedBy_Typings_ValueOrFlowPart(context, (ReferenceUsage) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getEmptyParameterRule()) {
					sequence_EmptyParameter(context, (ReferenceUsage) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getFeatureReferenceRule()) {
					sequence_FeatureReference(context, (ReferenceUsage) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getParameterRule()) {
					sequence_Identification_MultiplicityPart_Parameter_Redefines_Subsets_TypedBy(context, (ReferenceUsage) semanticObject); 
					return; 
				}
				else break;
			case SysMLPackage.RENDERING_DEFINITION:
				sequence_DefinitionBodyItem_DefinitionPrefix_Identification_SuperclassingPart(context, (RenderingDefinition) semanticObject); 
				return; 
			case SysMLPackage.RENDERING_USAGE:
				if (rule == grammarAccess.getStructureUsageElementRule()
						|| rule == grammarAccess.getRenderingRefUsageRule()) {
					sequence_DefinitionBodyItem_Identification_MultiplicityPart_Redefines_Redefinitions_RenderingRefUsage_Subsets_Subsettings_TypedBy_Typings_UsagePrefix_ValueOrFlowPart(context, (RenderingUsage) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getUsageElementRule()
						|| rule == grammarAccess.getFeatureElementRule()
						|| rule == grammarAccess.getFlowUsageElementRule()
						|| rule == grammarAccess.getRenderingUsageRule()
						|| rule == grammarAccess.getRenderingFlowUsageRule()) {
					sequence_DefinitionBodyItem_Identification_MultiplicityPart_Redefines_Redefinitions_Subsets_Subsettings_TypedBy_Typings_UsagePrefix_ValueOrFlowPart(context, (RenderingUsage) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getParameterRule()) {
					sequence_Identification_MultiplicityPart_Parameter_Redefines_Subsets_TypedBy(context, (RenderingUsage) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getActionUsageParameterRule()) {
					sequence_Identification_MultiplicityPart_Parameter_Redefines_Subsets_TypedBy_ValueOrFlowPart(context, (RenderingUsage) semanticObject); 
					return; 
				}
				else break;
			case SysMLPackage.REQUIREMENT_CONSTRAINT_MEMBERSHIP:
				sequence_DefinitionMemberPrefix_RequirementConstraintMember(context, (RequirementConstraintMembership) semanticObject); 
				return; 
			case SysMLPackage.REQUIREMENT_DEFINITION:
				sequence_DefinitionBodyItem_DefinitionPrefix_EmptyReturnParameterPart_Identification_ParameterList_RequirementBodyItem_SuperclassingPart(context, (RequirementDefinition) semanticObject); 
				return; 
			case SysMLPackage.REQUIREMENT_USAGE:
				if (rule == grammarAccess.getBehaviorUsageElementRule()
						|| rule == grammarAccess.getVariantUsageElementRule()
						|| rule == grammarAccess.getRequirementRefUsageRule()) {
					sequence_ActionUsageParameterList_CalculationReturnParameterPart_DefinitionBodyItem_Identification_MultiplicityPart_Redefines_Redefinitions_RequirementBodyItem_RequirementRefUsage_Subsets_Subsettings_TypedBy_Typings_UsagePrefix_ValuePart(context, (RequirementUsage) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getUsageElementRule()
						|| rule == grammarAccess.getFeatureElementRule()
						|| rule == grammarAccess.getFlowUsageElementRule()
						|| rule == grammarAccess.getRequirementUsageRule()
						|| rule == grammarAccess.getRequirementFlowUsageRule()) {
					sequence_ActionUsageParameterList_CalculationReturnParameterPart_DefinitionBodyItem_Identification_MultiplicityPart_Redefines_Redefinitions_RequirementBodyItem_Subsets_Subsettings_TypedBy_Typings_UsagePrefix_ValuePart(context, (RequirementUsage) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getObjectiveRequirementUsageRule()) {
					sequence_ActionUsageParameterList_CalculationReturnParameterPart_DefinitionBodyItem_Identification_MultiplicityPart_Redefines_Redefinitions_RequirementBodyItem_Subsets_Subsettings_TypedBy_Typings_ValuePart(context, (RequirementUsage) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getParameterRule()) {
					sequence_Identification_MultiplicityPart_Parameter_Redefines_Subsets_TypedBy(context, (RequirementUsage) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getActionUsageParameterRule()) {
					sequence_Identification_MultiplicityPart_Parameter_Redefines_Subsets_TypedBy_ValueOrFlowPart(context, (RequirementUsage) semanticObject); 
					return; 
				}
				else break;
			case SysMLPackage.RESULT_EXPRESSION_MEMBERSHIP:
				sequence_DefinitionMemberPrefix_ResultExpressionMember(context, (ResultExpressionMembership) semanticObject); 
				return; 
			case SysMLPackage.RETURN_PARAMETER_MEMBERSHIP:
				if (rule == grammarAccess.getCalculationReturnParameterMemberRule()) {
					sequence_CalculationReturnParameterMember(context, (ReturnParameterMembership) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getReturnParameterFlowUsageMemberRule()) {
					sequence_DefinitionMemberPrefix_ReturnParameterFlowUsageMember(context, (ReturnParameterMembership) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getEmptyReturnParameterMemberRule()) {
					sequence_EmptyReturnParameterMember(context, (ReturnParameterMembership) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getFeatureReferenceMemberRule()) {
					sequence_FeatureReferenceMember(context, (ReturnParameterMembership) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getReturnParameterMemberRule()) {
					sequence_ReturnParameterMember(context, (ReturnParameterMembership) semanticObject); 
					return; 
				}
				else break;
			case SysMLPackage.SATISFY_REQUIREMENT_USAGE:
				sequence_ActionUsageParameterList_DefinitionBodyItem_Identification_InvariantPart_MultiplicityPart_Redefines_Redefinitions_RequirementBodyItem_SatisfyRequirementUsage_Subsets_Subsettings_TypedBy_Typings_UsagePrefix_ValuePart(context, (SatisfyRequirementUsage) semanticObject); 
				return; 
			case SysMLPackage.SEND_ACTION_USAGE:
				if (rule == grammarAccess.getStateActionUsageRule()
						|| rule == grammarAccess.getEffectBehaviorUsageRule()) {
					sequence_ActionBodyItem_Identification_MultiplicityPart_PerformedActionUsage_Redefines_Redefinitions_SendNodeDeclaration_Subsets_Subsettings_TypedBy_Typings(context, (SendActionUsage) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getActionNodeRule()
						|| rule == grammarAccess.getSendNodeRule()) {
					sequence_ActionBodyItem_Identification_MultiplicityPart_Redefines_Redefinitions_SendNodeDeclaration_Subsets_Subsettings_TypedBy_Typings_UsagePrefix(context, (SendActionUsage) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getPerformedActionUsageRule()) {
					sequence_Identification_MultiplicityPart_PerformedActionUsage_Redefines_Redefinitions_SendNodeDeclaration_Subsets_Subsettings_TypedBy_Typings(context, (SendActionUsage) semanticObject); 
					return; 
				}
				else break;
			case SysMLPackage.SNAPSHOT_FEATURE:
				sequence_SnapshotFeature(context, (SnapshotFeature) semanticObject); 
				return; 
			case SysMLPackage.SOURCE_END:
				if (rule == grammarAccess.getEmptySourceEndRule()) {
					sequence_EmptySourceEnd(context, (SourceEnd) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getMultiplicitySourceEndRule()) {
					sequence_MultiplicitySourceEnd(context, (SourceEnd) semanticObject); 
					return; 
				}
				else break;
			case SysMLPackage.STATE_DEFINITION:
				sequence_Identification_ParameterList_StateBodyPart_StateDefBodyItem_StateDefinition_SuperclassingPart(context, (StateDefinition) semanticObject); 
				return; 
			case SysMLPackage.STATE_SUBACTION_MEMBERSHIP:
				if (rule == grammarAccess.getDoActionMemberRule()) {
					sequence_DefinitionMemberPrefix_DoActionMember(context, (StateSubactionMembership) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getEntryActionMemberRule()) {
					sequence_DefinitionMemberPrefix_EntryActionMember(context, (StateSubactionMembership) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getExitActionMemberRule()) {
					sequence_DefinitionMemberPrefix_ExitActionMember(context, (StateSubactionMembership) semanticObject); 
					return; 
				}
				else break;
			case SysMLPackage.STATE_USAGE:
				if (rule == grammarAccess.getBehaviorUsageElementRule()
						|| rule == grammarAccess.getVariantUsageElementRule()
						|| rule == grammarAccess.getConnectionEndElementRule()
						|| rule == grammarAccess.getStateRefUsageRule()) {
					sequence_ActionUsageParameterList_Identification_MultiplicityPart_Redefines_Redefinitions_StateBodyPart_StateDefBodyItem_StateRefUsage_Subsets_Subsettings_TypedBy_Typings_UsagePrefix_ValuePart(context, (StateUsage) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getUsageElementRule()
						|| rule == grammarAccess.getFeatureElementRule()
						|| rule == grammarAccess.getFlowUsageElementRule()
						|| rule == grammarAccess.getStateUsageRule()
						|| rule == grammarAccess.getStateFlowUsageRule()) {
					sequence_ActionUsageParameterList_Identification_MultiplicityPart_Redefines_Redefinitions_StateBodyPart_StateDefBodyItem_Subsets_Subsettings_TypedBy_Typings_UsagePrefix_ValuePart(context, (StateUsage) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getParameterRule()) {
					sequence_Identification_MultiplicityPart_Parameter_Redefines_Subsets_TypedBy(context, (StateUsage) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getActionUsageParameterRule()) {
					sequence_Identification_MultiplicityPart_Parameter_Redefines_Subsets_TypedBy_ValueOrFlowPart(context, (StateUsage) semanticObject); 
					return; 
				}
				else break;
			case SysMLPackage.SUBJECT_MEMBERSHIP:
				sequence_DefinitionMemberPrefix_SubjectMember(context, (SubjectMembership) semanticObject); 
				return; 
			case SysMLPackage.SUBSETTING:
				sequence_OwnedSubsetting(context, (Subsetting) semanticObject); 
				return; 
			case SysMLPackage.SUCCESSION:
				if (rule == grammarAccess.getEmptySuccessionRule()) {
					sequence_EmptySuccession(context, (Succession) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getDefinitionElementRule()
						|| rule == grammarAccess.getSuccessionRule()) {
					sequence_Identification_MultiplicityPart_Redefines_Redefinitions_Subsets_Subsettings_Succession_SuccessionDeclaration_TypeBody_TypedBy_Typings(context, (Succession) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getActionTargetSuccessionRule()
						|| rule == grammarAccess.getTargetSuccessionRule()) {
					sequence_TargetSuccession(context, (Succession) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getTransitionSuccessionRule()) {
					sequence_TransitionSuccession(context, (Succession) semanticObject); 
					return; 
				}
				else break;
			case SysMLPackage.SUCCESSION_ITEM_FLOW:
				if (rule == grammarAccess.getDefinitionElementRule()
						|| rule == grammarAccess.getSuccessionItemFlowRule()) {
					sequence_Identification_ItemFlowDeclaration_MultiplicityPart_Redefines_Redefinitions_Subsets_Subsettings_SuccessionItemFlow_TypeBody_TypedBy_Typings(context, (SuccessionItemFlow) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getSourceItemFlowRule()) {
					sequence_SourceItemFlow(context, (SuccessionItemFlow) semanticObject); 
					return; 
				}
				else break;
			case SysMLPackage.SUPERCLASSING:
				sequence_OwnedSuperclassing(context, (Superclassing) semanticObject); 
				return; 
			case SysMLPackage.TARGET_END:
				sequence_EmptyTargetEnd(context, (TargetEnd) semanticObject); 
				return; 
			case SysMLPackage.TEXTUAL_REPRESENTATION:
				sequence_Identification_TextualRepresentation(context, (TextualRepresentation) semanticObject); 
				return; 
			case SysMLPackage.TIME_SLICE_FEATURE:
				sequence_TimeSliceFeature(context, (TimeSliceFeature) semanticObject); 
				return; 
			case SysMLPackage.TRANSITION_FEATURE_MEMBERSHIP:
				if (rule == grammarAccess.getEffectBehaviorMemberRule()) {
					sequence_EffectBehaviorMember(context, (TransitionFeatureMembership) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getGuardExpressionMemberRule()) {
					sequence_GuardExpressionMember(context, (TransitionFeatureMembership) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getTriggerActionMemberRule()) {
					sequence_TriggerActionMember(context, (TransitionFeatureMembership) semanticObject); 
					return; 
				}
				else break;
			case SysMLPackage.TRANSITION_USAGE:
				if (rule == grammarAccess.getActionTargetSuccessionRule()) {
					sequence_DefaultTargetSuccession_GuardedTargetSuccession(context, (TransitionUsage) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getDefaultTargetSuccessionRule()) {
					sequence_DefaultTargetSuccession(context, (TransitionUsage) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getGuardedSuccessionRule()) {
					sequence_GuardedSuccession_Identification_MultiplicityPart_Redefines_Redefinitions_Subsets_Subsettings_TypedBy_Typings(context, (TransitionUsage) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getGuardedTargetSuccessionRule()) {
					sequence_GuardedTargetSuccession(context, (TransitionUsage) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getTransitionUsageRule()) {
					sequence_Identification_MultiplicityPart_Redefines_Redefinitions_Subsets_Subsettings_TransitionUsage_TypedBy_Typings(context, (TransitionUsage) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getTargetTransitionUsageRule()) {
					sequence_TargetTransitionUsage(context, (TransitionUsage) semanticObject); 
					return; 
				}
				else break;
			case SysMLPackage.VARIANT_MEMBERSHIP:
				sequence_DefinitionMemberPrefix_VariantUsageMember(context, (VariantMembership) semanticObject); 
				return; 
			case SysMLPackage.VERIFICATION_CASE_DEFINITION:
				sequence_ActionBodyItem_CalculationBodyItem_CaseBody_CaseBodyItem_DefinitionPrefix_Identification_ParameterList_ReturnParameterPart_SuperclassingPart(context, (VerificationCaseDefinition) semanticObject); 
				return; 
			case SysMLPackage.VERIFICATION_CASE_USAGE:
				if (rule == grammarAccess.getBehaviorUsageElementRule()
						|| rule == grammarAccess.getVariantUsageElementRule()
						|| rule == grammarAccess.getVerificationCaseRefUsageRule()) {
					sequence_ActionBodyItem_ActionUsageParameterList_CalculationBodyItem_CalculationReturnParameterPart_CaseBody_CaseBodyItem_Identification_MultiplicityPart_Redefines_Redefinitions_Subsets_Subsettings_TypedBy_Typings_UsagePrefix_ValuePart_VerificationCaseRefUsage(context, (VerificationCaseUsage) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getUsageElementRule()
						|| rule == grammarAccess.getFeatureElementRule()
						|| rule == grammarAccess.getFlowUsageElementRule()
						|| rule == grammarAccess.getVerificationCaseUsageRule()
						|| rule == grammarAccess.getVerificationCaseFlowUsageRule()) {
					sequence_ActionBodyItem_ActionUsageParameterList_CalculationBodyItem_CalculationReturnParameterPart_CaseBody_CaseBodyItem_Identification_MultiplicityPart_Redefines_Redefinitions_Subsets_Subsettings_TypedBy_Typings_UsagePrefix_ValuePart(context, (VerificationCaseUsage) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getActionUsageParameterRule()) {
					sequence_Identification_MultiplicityPart_Parameter_Redefines_Subsets_TypedBy_ValueOrFlowPart(context, (VerificationCaseUsage) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getParameterRule()) {
					sequence_Identification_MultiplicityPart_Parameter_Redefines_Subsets_TypedBy(context, (VerificationCaseUsage) semanticObject); 
					return; 
				}
				else break;
			case SysMLPackage.VIEW_DEFINITION:
				sequence_DefinitionBodyItem_DefinitionPrefix_Identification_SuperclassingPart(context, (ViewDefinition) semanticObject); 
				return; 
			case SysMLPackage.VIEW_USAGE:
				if (rule == grammarAccess.getStructureUsageElementRule()
						|| rule == grammarAccess.getViewRefUsageRule()) {
					sequence_DefinitionBodyItem_Identification_MultiplicityPart_Redefines_Redefinitions_Subsets_Subsettings_TypedBy_Typings_UsagePrefix_ValueOrFlowPart_ViewBodyItem_ViewRefUsage(context, (ViewUsage) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getUsageElementRule()
						|| rule == grammarAccess.getFeatureElementRule()
						|| rule == grammarAccess.getFlowUsageElementRule()
						|| rule == grammarAccess.getViewUsageRule()
						|| rule == grammarAccess.getViewFlowUsageRule()) {
					sequence_DefinitionBodyItem_Identification_MultiplicityPart_Redefines_Redefinitions_Subsets_Subsettings_TypedBy_Typings_UsagePrefix_ValueOrFlowPart_ViewBodyItem(context, (ViewUsage) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getActionUsageParameterRule()) {
					sequence_Identification_MultiplicityPart_Parameter_Redefines_Subsets_TypedBy_ValueOrFlowPart(context, (ViewUsage) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getParameterRule()) {
					sequence_Identification_MultiplicityPart_Parameter_Redefines_Subsets_TypedBy(context, (ViewUsage) semanticObject); 
					return; 
				}
				else break;
			case SysMLPackage.VIEWPOINT_DEFINITION:
				sequence_DefinitionBodyItem_DefinitionPrefix_EmptyReturnParameterPart_Identification_ParameterList_RequirementBodyItem_SuperclassingPart(context, (ViewpointDefinition) semanticObject); 
				return; 
			case SysMLPackage.VIEWPOINT_USAGE:
				if (rule == grammarAccess.getBehaviorUsageElementRule()
						|| rule == grammarAccess.getVariantUsageElementRule()
						|| rule == grammarAccess.getViewpointRefUsageRule()) {
					sequence_ActionUsageParameterList_CalculationReturnParameterPart_DefinitionBodyItem_Identification_MultiplicityPart_Redefines_Redefinitions_RequirementBodyItem_Subsets_Subsettings_TypedBy_Typings_UsagePrefix_ValuePart_ViewpointRefUsage(context, (ViewpointUsage) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getUsageElementRule()
						|| rule == grammarAccess.getFeatureElementRule()
						|| rule == grammarAccess.getFlowUsageElementRule()
						|| rule == grammarAccess.getViewpointUsageRule()
						|| rule == grammarAccess.getViewpointFlowUsageRule()) {
					sequence_ActionUsageParameterList_CalculationReturnParameterPart_DefinitionBodyItem_Identification_MultiplicityPart_Redefines_Redefinitions_RequirementBodyItem_Subsets_Subsettings_TypedBy_Typings_UsagePrefix_ValuePart(context, (ViewpointUsage) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getActionUsageParameterRule()) {
					sequence_Identification_MultiplicityPart_Parameter_Redefines_Subsets_TypedBy_ValueOrFlowPart(context, (ViewpointUsage) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getParameterRule()) {
					sequence_Identification_MultiplicityPart_Parameter_Redefines_Subsets_TypedBy(context, (ViewpointUsage) semanticObject); 
					return; 
				}
				else break;
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     StateActionUsage returns AcceptActionUsage
	 *     EffectBehaviorUsage returns AcceptActionUsage
	 *
	 * Constraint:
	 *     (
	 *         ownedFeatureMembership_comp+=EmptyParameterMember 
	 *         ((humanId=Name name=Name?) | name=Name)? 
	 *         (ownedMembership_comp+=MultiplicityMember (isOrdered?='ordered' | isNonunique?='nonunique')*)? 
	 *         (
	 *             (
	 *                 (ownedRelationship_comp+=OwnedFeatureTyping ownedRelationship_comp+=OwnedFeatureTyping*) | 
	 *                 (ownedRelationship_comp+=OwnedSubsetting ownedRelationship_comp+=OwnedSubsetting*) | 
	 *                 (ownedRelationship_comp+=OwnedRedefinition ownedRelationship_comp+=OwnedRedefinition*)
	 *             ) 
	 *             (ownedMembership_comp+=MultiplicityMember (isOrdered?='ordered' | isNonunique?='nonunique')*)?
	 *         )* 
	 *         ownedFeatureMembership_comp+=ItemFeatureMember 
	 *         (
	 *             (
	 *                 documentation_comp+=OwnedDocumentation | 
	 *                 ownedMembership_comp+=NestedDefinitionMember | 
	 *                 ownedMembership_comp+=VariantUsageMember | 
	 *                 ownedFeatureMembership_comp+=ParameterFlowUsageMember | 
	 *                 ownedFeatureMembership_comp+=StructureUsageMember | 
	 *                 ownedFeatureMembership_comp+=GuardedSuccessionMember | 
	 *                 ownedImport_comp+=PackageImport
	 *             )? 
	 *             (ownedFeatureMembership_comp+=InitialNodeMember ownedFeatureMembership_comp+=TargetSuccessionMember*)? 
	 *             (ownedFeatureMembership_comp+=EmptySuccessionMember? ownedFeatureMembership_comp+=IndividualUsageMember)? 
	 *             (
	 *                 ownedFeatureMembership_comp+=EmptySuccessionMember? 
	 *                 (ownedFeatureMembership_comp+=BehaviorUsageMember | ownedFeatureMembership_comp+=ActionNodeMember) 
	 *                 ownedFeatureMembership_comp+=TargetSuccessionMember*
	 *             )?
	 *         )+
	 *     )
	 */
	protected void sequence_AcceptNodeDeclaration_ActionBodyItem_Identification_MultiplicityPart_PerformedActionUsage_Redefines_Redefinitions_Subsets_Subsettings_TypedBy_Typings(ISerializationContext context, AcceptActionUsage semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ActionNode returns AcceptActionUsage
	 *     AcceptNode returns AcceptActionUsage
	 *
	 * Constraint:
	 *     (
	 *         (isAbstract?='abstract' | isVariation?='variation')? 
	 *         ownedFeatureMembership_comp+=EmptyParameterMember 
	 *         ((humanId=Name name=Name?) | name=Name)? 
	 *         (ownedMembership_comp+=MultiplicityMember (isOrdered?='ordered' | isNonunique?='nonunique')*)? 
	 *         (
	 *             (
	 *                 (ownedRelationship_comp+=OwnedFeatureTyping ownedRelationship_comp+=OwnedFeatureTyping*) | 
	 *                 (ownedRelationship_comp+=OwnedSubsetting ownedRelationship_comp+=OwnedSubsetting*) | 
	 *                 (ownedRelationship_comp+=OwnedRedefinition ownedRelationship_comp+=OwnedRedefinition*)
	 *             ) 
	 *             (ownedMembership_comp+=MultiplicityMember (isOrdered?='ordered' | isNonunique?='nonunique')*)?
	 *         )* 
	 *         ownedFeatureMembership_comp+=ItemFeatureMember 
	 *         (
	 *             (
	 *                 documentation_comp+=OwnedDocumentation | 
	 *                 ownedMembership_comp+=NestedDefinitionMember | 
	 *                 ownedMembership_comp+=VariantUsageMember | 
	 *                 ownedFeatureMembership_comp+=ParameterFlowUsageMember | 
	 *                 ownedFeatureMembership_comp+=StructureUsageMember | 
	 *                 ownedFeatureMembership_comp+=GuardedSuccessionMember | 
	 *                 ownedImport_comp+=PackageImport
	 *             )? 
	 *             (ownedFeatureMembership_comp+=InitialNodeMember ownedFeatureMembership_comp+=TargetSuccessionMember*)? 
	 *             (ownedFeatureMembership_comp+=EmptySuccessionMember? ownedFeatureMembership_comp+=IndividualUsageMember)? 
	 *             (
	 *                 ownedFeatureMembership_comp+=EmptySuccessionMember? 
	 *                 (ownedFeatureMembership_comp+=BehaviorUsageMember | ownedFeatureMembership_comp+=ActionNodeMember) 
	 *                 ownedFeatureMembership_comp+=TargetSuccessionMember*
	 *             )?
	 *         )+
	 *     )
	 */
	protected void sequence_AcceptNodeDeclaration_ActionBodyItem_Identification_MultiplicityPart_Redefines_Redefinitions_Subsets_Subsettings_TypedBy_Typings_UsagePrefix(ISerializationContext context, AcceptActionUsage semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     PerformedActionUsage returns AcceptActionUsage
	 *
	 * Constraint:
	 *     (
	 *         ownedFeatureMembership_comp+=EmptyParameterMember 
	 *         ((humanId=Name name=Name?) | name=Name)? 
	 *         (ownedMembership_comp+=MultiplicityMember (isOrdered?='ordered' | isNonunique?='nonunique')*)? 
	 *         (
	 *             (
	 *                 (ownedRelationship_comp+=OwnedFeatureTyping ownedRelationship_comp+=OwnedFeatureTyping*) | 
	 *                 (ownedRelationship_comp+=OwnedSubsetting ownedRelationship_comp+=OwnedSubsetting*) | 
	 *                 (ownedRelationship_comp+=OwnedRedefinition ownedRelationship_comp+=OwnedRedefinition*)
	 *             ) 
	 *             (ownedMembership_comp+=MultiplicityMember (isOrdered?='ordered' | isNonunique?='nonunique')*)?
	 *         )* 
	 *         ownedFeatureMembership_comp+=ItemFeatureMember
	 *     )
	 */
	protected void sequence_AcceptNodeDeclaration_Identification_MultiplicityPart_PerformedActionUsage_Redefines_Redefinitions_Subsets_Subsettings_TypedBy_Typings(ISerializationContext context, AcceptActionUsage semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     BehaviorUsageElement returns ActionUsage
	 *     VariantUsageElement returns ActionUsage
	 *     ConnectionEndElement returns ActionUsage
	 *     ActionRefUsage returns ActionUsage
	 *
	 * Constraint:
	 *     (
	 *         (isAbstract?='abstract' | isVariation?='variation')? 
	 *         isComposite?=ActionUsageKeyword? 
	 *         ((humanId=Name name=Name?) | name=Name)? 
	 *         (ownedMembership_comp+=MultiplicityMember isOrdered?='ordered'? (isNonunique?='nonunique'? isOrdered?='ordered'?)*)? 
	 *         (
	 *             (
	 *                 (ownedRelationship_comp+=OwnedFeatureTyping ownedRelationship_comp+=OwnedFeatureTyping*) | 
	 *                 (ownedRelationship_comp+=OwnedSubsetting ownedRelationship_comp+=OwnedSubsetting*) | 
	 *                 (ownedRelationship_comp+=OwnedRedefinition ownedRelationship_comp+=OwnedRedefinition*)
	 *             ) 
	 *             (ownedMembership_comp+=MultiplicityMember isOrdered?='ordered'?)?
	 *         )* 
	 *         (
	 *             ownedMembership_comp+=FeatureValue | 
	 *             (ownedFeatureMembership_comp+=ActionUsageParameterMember ownedFeatureMembership_comp+=ActionUsageParameterMember*)
	 *         )? 
	 *         (
	 *             (
	 *                 documentation_comp+=OwnedDocumentation | 
	 *                 ownedMembership_comp+=NestedDefinitionMember | 
	 *                 ownedMembership_comp+=VariantUsageMember | 
	 *                 ownedFeatureMembership_comp+=ParameterFlowUsageMember | 
	 *                 ownedFeatureMembership_comp+=StructureUsageMember | 
	 *                 ownedFeatureMembership_comp+=GuardedSuccessionMember | 
	 *                 ownedImport_comp+=PackageImport
	 *             )? 
	 *             (ownedFeatureMembership_comp+=InitialNodeMember ownedFeatureMembership_comp+=TargetSuccessionMember*)? 
	 *             (ownedFeatureMembership_comp+=EmptySuccessionMember? ownedFeatureMembership_comp+=IndividualUsageMember)? 
	 *             (
	 *                 ownedFeatureMembership_comp+=EmptySuccessionMember? 
	 *                 (ownedFeatureMembership_comp+=BehaviorUsageMember | ownedFeatureMembership_comp+=ActionNodeMember) 
	 *                 ownedFeatureMembership_comp+=TargetSuccessionMember*
	 *             )?
	 *         )+
	 *     )
	 */
	protected void sequence_ActionBodyItem_ActionRefUsage_ActionUsageParameterList_Identification_MultiplicityPart_Redefines_Redefinitions_Subsets_Subsettings_TypedBy_Typings_UsagePrefix_ValuePart(ISerializationContext context, ActionUsage semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     BehaviorUsageElement returns AnalysisCaseUsage
	 *     VariantUsageElement returns AnalysisCaseUsage
	 *     AnalysisCaseRefUsage returns AnalysisCaseUsage
	 *
	 * Constraint:
	 *     (
	 *         (isAbstract?='abstract' | isVariation?='variation')? 
	 *         isComposite?=AnalysisCaseUsageKeyword? 
	 *         ((humanId=Name name=Name?) | name=Name)? 
	 *         (ownedMembership_comp+=MultiplicityMember isOrdered?='ordered'? (isNonunique?='nonunique'? isOrdered?='ordered'?)*)? 
	 *         (
	 *             (
	 *                 (ownedRelationship_comp+=OwnedFeatureTyping ownedRelationship_comp+=OwnedFeatureTyping*) | 
	 *                 (ownedRelationship_comp+=OwnedSubsetting ownedRelationship_comp+=OwnedSubsetting*) | 
	 *                 (ownedRelationship_comp+=OwnedRedefinition ownedRelationship_comp+=OwnedRedefinition*)
	 *             ) 
	 *             (ownedMembership_comp+=MultiplicityMember isOrdered?='ordered'?)?
	 *         )* 
	 *         (
	 *             ownedMembership_comp+=FeatureValue | 
	 *             (
	 *                 (ownedFeatureMembership_comp+=ActionUsageParameterMember ownedFeatureMembership_comp+=ActionUsageParameterMember*)? 
	 *                 ownedFeatureMembership_comp+=CalculationReturnParameterMember?
	 *             )
	 *         )? 
	 *         (
	 *             (
	 *                 documentation_comp+=OwnedDocumentation | 
	 *                 ownedMembership_comp+=NestedDefinitionMember | 
	 *                 ownedMembership_comp+=VariantUsageMember | 
	 *                 ownedFeatureMembership_comp+=ParameterFlowUsageMember | 
	 *                 ownedFeatureMembership_comp+=StructureUsageMember | 
	 *                 ownedFeatureMembership_comp+=GuardedSuccessionMember | 
	 *                 ownedImport_comp+=PackageImport | 
	 *                 ownedFeatureMembership_comp+=ReturnParameterFlowUsageMember | 
	 *                 ownedFeatureMembership_comp+=SubjectMember | 
	 *                 ownedFeatureMembership_comp+=ObjectiveMember
	 *             )? 
	 *             (ownedFeatureMembership_comp+=InitialNodeMember ownedFeatureMembership_comp+=TargetSuccessionMember*)? 
	 *             (ownedFeatureMembership_comp+=EmptySuccessionMember? ownedFeatureMembership_comp+=IndividualUsageMember)? 
	 *             (
	 *                 ownedFeatureMembership_comp+=EmptySuccessionMember? 
	 *                 (ownedFeatureMembership_comp+=BehaviorUsageMember | ownedFeatureMembership_comp+=ActionNodeMember) 
	 *                 ownedFeatureMembership_comp+=TargetSuccessionMember*
	 *             )?
	 *         )+ 
	 *         ownedFeatureMembership_comp+=ResultExpressionMember?
	 *     )
	 */
	protected void sequence_ActionBodyItem_ActionUsageParameterList_AnalysisCaseRefUsage_CalculationBodyItem_CalculationReturnParameterPart_CaseBody_CaseBodyItem_Identification_MultiplicityPart_Redefines_Redefinitions_Subsets_Subsettings_TypedBy_Typings_UsagePrefix_ValuePart(ISerializationContext context, AnalysisCaseUsage semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     BehaviorUsageElement returns AssertConstraintUsage
	 *     VariantUsageElement returns AssertConstraintUsage
	 *     AssertConstraintUsage returns AssertConstraintUsage
	 *
	 * Constraint:
	 *     (
	 *         (isAbstract?='abstract' | isVariation?='variation')? 
	 *         ((humanId=Name name=Name?) | name=Name | ownedRelationship_comp+=OwnedSubsetting)? 
	 *         (
	 *             (
	 *                 (ownedRelationship_comp+=OwnedFeatureTyping ownedRelationship_comp+=OwnedFeatureTyping*) | 
	 *                 (ownedRelationship_comp+=OwnedSubsetting ownedRelationship_comp+=OwnedSubsetting*) | 
	 *                 (ownedRelationship_comp+=OwnedRedefinition ownedRelationship_comp+=OwnedRedefinition*)
	 *             ) 
	 *             (ownedMembership_comp+=MultiplicityMember (isOrdered?='ordered' | isNonunique?='nonunique')*)?
	 *         )* 
	 *         (ownedFeatureMembership_comp+=ActionUsageParameterMember ownedFeatureMembership_comp+=ActionUsageParameterMember*)? 
	 *         ownedFeatureMembership_comp+=CalculationReturnParameterMember? 
	 *         ownedFeatureMembership_comp+=TrueLiteralMember 
	 *         (
	 *             (
	 *                 documentation_comp+=OwnedDocumentation | 
	 *                 ownedMembership_comp+=NestedDefinitionMember | 
	 *                 ownedMembership_comp+=VariantUsageMember | 
	 *                 ownedFeatureMembership_comp+=ParameterFlowUsageMember | 
	 *                 ownedFeatureMembership_comp+=StructureUsageMember | 
	 *                 ownedFeatureMembership_comp+=GuardedSuccessionMember | 
	 *                 ownedImport_comp+=PackageImport | 
	 *                 ownedFeatureMembership_comp+=ReturnParameterFlowUsageMember
	 *             )? 
	 *             (ownedFeatureMembership_comp+=InitialNodeMember ownedFeatureMembership_comp+=TargetSuccessionMember*)? 
	 *             (ownedFeatureMembership_comp+=EmptySuccessionMember? ownedFeatureMembership_comp+=IndividualUsageMember)? 
	 *             (
	 *                 ownedFeatureMembership_comp+=EmptySuccessionMember? 
	 *                 (ownedFeatureMembership_comp+=BehaviorUsageMember | ownedFeatureMembership_comp+=ActionNodeMember) 
	 *                 ownedFeatureMembership_comp+=TargetSuccessionMember*
	 *             )?
	 *         )+ 
	 *         ownedFeatureMembership_comp+=ResultExpressionMember?
	 *     )
	 */
	protected void sequence_ActionBodyItem_ActionUsageParameterList_AssertConstraintUsage_CalculationBody_CalculationBodyItem_CalculationReturnParameterPart_Identification_InvariantPart_MultiplicityPart_Redefines_Redefinitions_Subsets_Subsettings_TypedBy_Typings_UsagePrefix(ISerializationContext context, AssertConstraintUsage semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     BehaviorUsageElement returns CaseUsage
	 *     VariantUsageElement returns CaseUsage
	 *     CaseRefUsage returns CaseUsage
	 *
	 * Constraint:
	 *     (
	 *         (isAbstract?='abstract' | isVariation?='variation')? 
	 *         isComposite?=CaseUsageKeyword? 
	 *         ((humanId=Name name=Name?) | name=Name)? 
	 *         (ownedMembership_comp+=MultiplicityMember isOrdered?='ordered'? (isNonunique?='nonunique'? isOrdered?='ordered'?)*)? 
	 *         (
	 *             (
	 *                 (ownedRelationship_comp+=OwnedFeatureTyping ownedRelationship_comp+=OwnedFeatureTyping*) | 
	 *                 (ownedRelationship_comp+=OwnedSubsetting ownedRelationship_comp+=OwnedSubsetting*) | 
	 *                 (ownedRelationship_comp+=OwnedRedefinition ownedRelationship_comp+=OwnedRedefinition*)
	 *             ) 
	 *             (ownedMembership_comp+=MultiplicityMember isOrdered?='ordered'?)?
	 *         )* 
	 *         (
	 *             ownedMembership_comp+=FeatureValue | 
	 *             (
	 *                 (ownedFeatureMembership_comp+=ActionUsageParameterMember ownedFeatureMembership_comp+=ActionUsageParameterMember*)? 
	 *                 ownedFeatureMembership_comp+=CalculationReturnParameterMember?
	 *             )
	 *         )? 
	 *         (
	 *             (
	 *                 documentation_comp+=OwnedDocumentation | 
	 *                 ownedMembership_comp+=NestedDefinitionMember | 
	 *                 ownedMembership_comp+=VariantUsageMember | 
	 *                 ownedFeatureMembership_comp+=ParameterFlowUsageMember | 
	 *                 ownedFeatureMembership_comp+=StructureUsageMember | 
	 *                 ownedFeatureMembership_comp+=GuardedSuccessionMember | 
	 *                 ownedImport_comp+=PackageImport | 
	 *                 ownedFeatureMembership_comp+=ReturnParameterFlowUsageMember | 
	 *                 ownedFeatureMembership_comp+=SubjectMember | 
	 *                 ownedFeatureMembership_comp+=ObjectiveMember
	 *             )? 
	 *             (ownedFeatureMembership_comp+=InitialNodeMember ownedFeatureMembership_comp+=TargetSuccessionMember*)? 
	 *             (ownedFeatureMembership_comp+=EmptySuccessionMember? ownedFeatureMembership_comp+=IndividualUsageMember)? 
	 *             (
	 *                 ownedFeatureMembership_comp+=EmptySuccessionMember? 
	 *                 (ownedFeatureMembership_comp+=BehaviorUsageMember | ownedFeatureMembership_comp+=ActionNodeMember) 
	 *                 ownedFeatureMembership_comp+=TargetSuccessionMember*
	 *             )?
	 *         )+ 
	 *         ownedFeatureMembership_comp+=ResultExpressionMember?
	 *     )
	 */
	protected void sequence_ActionBodyItem_ActionUsageParameterList_CalculationBodyItem_CalculationReturnParameterPart_CaseBody_CaseBodyItem_CaseRefUsage_Identification_MultiplicityPart_Redefines_Redefinitions_Subsets_Subsettings_TypedBy_Typings_UsagePrefix_ValuePart(ISerializationContext context, CaseUsage semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     UsageElement returns AnalysisCaseUsage
	 *     FeatureElement returns AnalysisCaseUsage
	 *     FlowUsageElement returns AnalysisCaseUsage
	 *     AnalysisCaseUsage returns AnalysisCaseUsage
	 *     AnalysisCaseFlowUsage returns AnalysisCaseUsage
	 *
	 * Constraint:
	 *     (
	 *         (isAbstract?='abstract' | isVariation?='variation')? 
	 *         ((humanId=Name name=Name?) | name=Name)? 
	 *         (ownedMembership_comp+=MultiplicityMember isOrdered?='ordered'? (isNonunique?='nonunique'? isOrdered?='ordered'?)*)? 
	 *         (
	 *             (
	 *                 (ownedRelationship_comp+=OwnedFeatureTyping ownedRelationship_comp+=OwnedFeatureTyping*) | 
	 *                 (ownedRelationship_comp+=OwnedSubsetting ownedRelationship_comp+=OwnedSubsetting*) | 
	 *                 (ownedRelationship_comp+=OwnedRedefinition ownedRelationship_comp+=OwnedRedefinition*)
	 *             ) 
	 *             (ownedMembership_comp+=MultiplicityMember isOrdered?='ordered'?)?
	 *         )* 
	 *         (
	 *             ownedMembership_comp+=FeatureValue | 
	 *             (
	 *                 (ownedFeatureMembership_comp+=ActionUsageParameterMember ownedFeatureMembership_comp+=ActionUsageParameterMember*)? 
	 *                 ownedFeatureMembership_comp+=CalculationReturnParameterMember?
	 *             )
	 *         )? 
	 *         (
	 *             (
	 *                 documentation_comp+=OwnedDocumentation | 
	 *                 ownedMembership_comp+=NestedDefinitionMember | 
	 *                 ownedMembership_comp+=VariantUsageMember | 
	 *                 ownedFeatureMembership_comp+=ParameterFlowUsageMember | 
	 *                 ownedFeatureMembership_comp+=StructureUsageMember | 
	 *                 ownedFeatureMembership_comp+=GuardedSuccessionMember | 
	 *                 ownedImport_comp+=PackageImport | 
	 *                 ownedFeatureMembership_comp+=ReturnParameterFlowUsageMember | 
	 *                 ownedFeatureMembership_comp+=SubjectMember | 
	 *                 ownedFeatureMembership_comp+=ObjectiveMember
	 *             )? 
	 *             (ownedFeatureMembership_comp+=InitialNodeMember ownedFeatureMembership_comp+=TargetSuccessionMember*)? 
	 *             (ownedFeatureMembership_comp+=EmptySuccessionMember? ownedFeatureMembership_comp+=IndividualUsageMember)? 
	 *             (
	 *                 ownedFeatureMembership_comp+=EmptySuccessionMember? 
	 *                 (ownedFeatureMembership_comp+=BehaviorUsageMember | ownedFeatureMembership_comp+=ActionNodeMember) 
	 *                 ownedFeatureMembership_comp+=TargetSuccessionMember*
	 *             )?
	 *         )+ 
	 *         ownedFeatureMembership_comp+=ResultExpressionMember?
	 *     )
	 */
	protected void sequence_ActionBodyItem_ActionUsageParameterList_CalculationBodyItem_CalculationReturnParameterPart_CaseBody_CaseBodyItem_Identification_MultiplicityPart_Redefines_Redefinitions_Subsets_Subsettings_TypedBy_Typings_UsagePrefix_ValuePart(ISerializationContext context, AnalysisCaseUsage semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     UsageElement returns CaseUsage
	 *     FeatureElement returns CaseUsage
	 *     FlowUsageElement returns CaseUsage
	 *     CaseUsage returns CaseUsage
	 *     CaseFlowUsage returns CaseUsage
	 *
	 * Constraint:
	 *     (
	 *         (isAbstract?='abstract' | isVariation?='variation')? 
	 *         ((humanId=Name name=Name?) | name=Name)? 
	 *         (ownedMembership_comp+=MultiplicityMember isOrdered?='ordered'? (isNonunique?='nonunique'? isOrdered?='ordered'?)*)? 
	 *         (
	 *             (
	 *                 (ownedRelationship_comp+=OwnedFeatureTyping ownedRelationship_comp+=OwnedFeatureTyping*) | 
	 *                 (ownedRelationship_comp+=OwnedSubsetting ownedRelationship_comp+=OwnedSubsetting*) | 
	 *                 (ownedRelationship_comp+=OwnedRedefinition ownedRelationship_comp+=OwnedRedefinition*)
	 *             ) 
	 *             (ownedMembership_comp+=MultiplicityMember isOrdered?='ordered'?)?
	 *         )* 
	 *         (
	 *             ownedMembership_comp+=FeatureValue | 
	 *             (
	 *                 (ownedFeatureMembership_comp+=ActionUsageParameterMember ownedFeatureMembership_comp+=ActionUsageParameterMember*)? 
	 *                 ownedFeatureMembership_comp+=CalculationReturnParameterMember?
	 *             )
	 *         )? 
	 *         (
	 *             (
	 *                 documentation_comp+=OwnedDocumentation | 
	 *                 ownedMembership_comp+=NestedDefinitionMember | 
	 *                 ownedMembership_comp+=VariantUsageMember | 
	 *                 ownedFeatureMembership_comp+=ParameterFlowUsageMember | 
	 *                 ownedFeatureMembership_comp+=StructureUsageMember | 
	 *                 ownedFeatureMembership_comp+=GuardedSuccessionMember | 
	 *                 ownedImport_comp+=PackageImport | 
	 *                 ownedFeatureMembership_comp+=ReturnParameterFlowUsageMember | 
	 *                 ownedFeatureMembership_comp+=SubjectMember | 
	 *                 ownedFeatureMembership_comp+=ObjectiveMember
	 *             )? 
	 *             (ownedFeatureMembership_comp+=InitialNodeMember ownedFeatureMembership_comp+=TargetSuccessionMember*)? 
	 *             (ownedFeatureMembership_comp+=EmptySuccessionMember? ownedFeatureMembership_comp+=IndividualUsageMember)? 
	 *             (
	 *                 ownedFeatureMembership_comp+=EmptySuccessionMember? 
	 *                 (ownedFeatureMembership_comp+=BehaviorUsageMember | ownedFeatureMembership_comp+=ActionNodeMember) 
	 *                 ownedFeatureMembership_comp+=TargetSuccessionMember*
	 *             )?
	 *         )+ 
	 *         ownedFeatureMembership_comp+=ResultExpressionMember?
	 *     )
	 */
	protected void sequence_ActionBodyItem_ActionUsageParameterList_CalculationBodyItem_CalculationReturnParameterPart_CaseBody_CaseBodyItem_Identification_MultiplicityPart_Redefines_Redefinitions_Subsets_Subsettings_TypedBy_Typings_UsagePrefix_ValuePart(ISerializationContext context, CaseUsage semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     BehaviorUsageElement returns VerificationCaseUsage
	 *     VariantUsageElement returns VerificationCaseUsage
	 *     VerificationCaseRefUsage returns VerificationCaseUsage
	 *
	 * Constraint:
	 *     (
	 *         (isAbstract?='abstract' | isVariation?='variation')? 
	 *         isComposite?=VerificationCaseUsageKeyword? 
	 *         ((humanId=Name name=Name?) | name=Name)? 
	 *         (ownedMembership_comp+=MultiplicityMember isOrdered?='ordered'? (isNonunique?='nonunique'? isOrdered?='ordered'?)*)? 
	 *         (
	 *             (
	 *                 (ownedRelationship_comp+=OwnedFeatureTyping ownedRelationship_comp+=OwnedFeatureTyping*) | 
	 *                 (ownedRelationship_comp+=OwnedSubsetting ownedRelationship_comp+=OwnedSubsetting*) | 
	 *                 (ownedRelationship_comp+=OwnedRedefinition ownedRelationship_comp+=OwnedRedefinition*)
	 *             ) 
	 *             (ownedMembership_comp+=MultiplicityMember isOrdered?='ordered'?)?
	 *         )* 
	 *         (
	 *             ownedMembership_comp+=FeatureValue | 
	 *             (
	 *                 (ownedFeatureMembership_comp+=ActionUsageParameterMember ownedFeatureMembership_comp+=ActionUsageParameterMember*)? 
	 *                 ownedFeatureMembership_comp+=CalculationReturnParameterMember?
	 *             )
	 *         )? 
	 *         (
	 *             (
	 *                 documentation_comp+=OwnedDocumentation | 
	 *                 ownedMembership_comp+=NestedDefinitionMember | 
	 *                 ownedMembership_comp+=VariantUsageMember | 
	 *                 ownedFeatureMembership_comp+=ParameterFlowUsageMember | 
	 *                 ownedFeatureMembership_comp+=StructureUsageMember | 
	 *                 ownedFeatureMembership_comp+=GuardedSuccessionMember | 
	 *                 ownedImport_comp+=PackageImport | 
	 *                 ownedFeatureMembership_comp+=ReturnParameterFlowUsageMember | 
	 *                 ownedFeatureMembership_comp+=SubjectMember | 
	 *                 ownedFeatureMembership_comp+=ObjectiveMember
	 *             )? 
	 *             (ownedFeatureMembership_comp+=InitialNodeMember ownedFeatureMembership_comp+=TargetSuccessionMember*)? 
	 *             (ownedFeatureMembership_comp+=EmptySuccessionMember? ownedFeatureMembership_comp+=IndividualUsageMember)? 
	 *             (
	 *                 ownedFeatureMembership_comp+=EmptySuccessionMember? 
	 *                 (ownedFeatureMembership_comp+=BehaviorUsageMember | ownedFeatureMembership_comp+=ActionNodeMember) 
	 *                 ownedFeatureMembership_comp+=TargetSuccessionMember*
	 *             )?
	 *         )+ 
	 *         ownedFeatureMembership_comp+=ResultExpressionMember?
	 *     )
	 */
	protected void sequence_ActionBodyItem_ActionUsageParameterList_CalculationBodyItem_CalculationReturnParameterPart_CaseBody_CaseBodyItem_Identification_MultiplicityPart_Redefines_Redefinitions_Subsets_Subsettings_TypedBy_Typings_UsagePrefix_ValuePart_VerificationCaseRefUsage(ISerializationContext context, VerificationCaseUsage semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     UsageElement returns VerificationCaseUsage
	 *     FeatureElement returns VerificationCaseUsage
	 *     FlowUsageElement returns VerificationCaseUsage
	 *     VerificationCaseUsage returns VerificationCaseUsage
	 *     VerificationCaseFlowUsage returns VerificationCaseUsage
	 *
	 * Constraint:
	 *     (
	 *         (isAbstract?='abstract' | isVariation?='variation')? 
	 *         ((humanId=Name name=Name?) | name=Name)? 
	 *         (ownedMembership_comp+=MultiplicityMember isOrdered?='ordered'? (isNonunique?='nonunique'? isOrdered?='ordered'?)*)? 
	 *         (
	 *             (
	 *                 (ownedRelationship_comp+=OwnedFeatureTyping ownedRelationship_comp+=OwnedFeatureTyping*) | 
	 *                 (ownedRelationship_comp+=OwnedSubsetting ownedRelationship_comp+=OwnedSubsetting*) | 
	 *                 (ownedRelationship_comp+=OwnedRedefinition ownedRelationship_comp+=OwnedRedefinition*)
	 *             ) 
	 *             (ownedMembership_comp+=MultiplicityMember isOrdered?='ordered'?)?
	 *         )* 
	 *         (
	 *             ownedMembership_comp+=FeatureValue | 
	 *             (
	 *                 (ownedFeatureMembership_comp+=ActionUsageParameterMember ownedFeatureMembership_comp+=ActionUsageParameterMember*)? 
	 *                 ownedFeatureMembership_comp+=CalculationReturnParameterMember?
	 *             )
	 *         )? 
	 *         (
	 *             (
	 *                 documentation_comp+=OwnedDocumentation | 
	 *                 ownedMembership_comp+=NestedDefinitionMember | 
	 *                 ownedMembership_comp+=VariantUsageMember | 
	 *                 ownedFeatureMembership_comp+=ParameterFlowUsageMember | 
	 *                 ownedFeatureMembership_comp+=StructureUsageMember | 
	 *                 ownedFeatureMembership_comp+=GuardedSuccessionMember | 
	 *                 ownedImport_comp+=PackageImport | 
	 *                 ownedFeatureMembership_comp+=ReturnParameterFlowUsageMember | 
	 *                 ownedFeatureMembership_comp+=SubjectMember | 
	 *                 ownedFeatureMembership_comp+=ObjectiveMember
	 *             )? 
	 *             (ownedFeatureMembership_comp+=InitialNodeMember ownedFeatureMembership_comp+=TargetSuccessionMember*)? 
	 *             (ownedFeatureMembership_comp+=EmptySuccessionMember? ownedFeatureMembership_comp+=IndividualUsageMember)? 
	 *             (
	 *                 ownedFeatureMembership_comp+=EmptySuccessionMember? 
	 *                 (ownedFeatureMembership_comp+=BehaviorUsageMember | ownedFeatureMembership_comp+=ActionNodeMember) 
	 *                 ownedFeatureMembership_comp+=TargetSuccessionMember*
	 *             )?
	 *         )+ 
	 *         ownedFeatureMembership_comp+=ResultExpressionMember?
	 *     )
	 */
	protected void sequence_ActionBodyItem_ActionUsageParameterList_CalculationBodyItem_CalculationReturnParameterPart_CaseBody_CaseBodyItem_Identification_MultiplicityPart_Redefines_Redefinitions_Subsets_Subsettings_TypedBy_Typings_UsagePrefix_ValuePart(ISerializationContext context, VerificationCaseUsage semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     BehaviorUsageElement returns CalculationUsage
	 *     VariantUsageElement returns CalculationUsage
	 *     ConnectionEndElement returns CalculationUsage
	 *     CalculationRefUsage returns CalculationUsage
	 *
	 * Constraint:
	 *     (
	 *         (isAbstract?='abstract' | isVariation?='variation')? 
	 *         isComposite?=CalculationUsageKeyword? 
	 *         ((humanId=Name name=Name?) | name=Name)? 
	 *         (ownedMembership_comp+=MultiplicityMember isOrdered?='ordered'? (isNonunique?='nonunique'? isOrdered?='ordered'?)*)? 
	 *         (
	 *             (
	 *                 (ownedRelationship_comp+=OwnedFeatureTyping ownedRelationship_comp+=OwnedFeatureTyping*) | 
	 *                 (ownedRelationship_comp+=OwnedSubsetting ownedRelationship_comp+=OwnedSubsetting*) | 
	 *                 (ownedRelationship_comp+=OwnedRedefinition ownedRelationship_comp+=OwnedRedefinition*)
	 *             ) 
	 *             (ownedMembership_comp+=MultiplicityMember isOrdered?='ordered'?)?
	 *         )* 
	 *         (
	 *             ownedMembership_comp+=FeatureValue | 
	 *             (
	 *                 (ownedFeatureMembership_comp+=ActionUsageParameterMember ownedFeatureMembership_comp+=ActionUsageParameterMember*)? 
	 *                 ownedFeatureMembership_comp+=CalculationReturnParameterMember?
	 *             )
	 *         )? 
	 *         (
	 *             (
	 *                 documentation_comp+=OwnedDocumentation | 
	 *                 ownedMembership_comp+=NestedDefinitionMember | 
	 *                 ownedMembership_comp+=VariantUsageMember | 
	 *                 ownedFeatureMembership_comp+=ParameterFlowUsageMember | 
	 *                 ownedFeatureMembership_comp+=StructureUsageMember | 
	 *                 ownedFeatureMembership_comp+=GuardedSuccessionMember | 
	 *                 ownedImport_comp+=PackageImport | 
	 *                 ownedFeatureMembership_comp+=ReturnParameterFlowUsageMember
	 *             )? 
	 *             (ownedFeatureMembership_comp+=InitialNodeMember ownedFeatureMembership_comp+=TargetSuccessionMember*)? 
	 *             (ownedFeatureMembership_comp+=EmptySuccessionMember? ownedFeatureMembership_comp+=IndividualUsageMember)? 
	 *             (
	 *                 ownedFeatureMembership_comp+=EmptySuccessionMember? 
	 *                 (ownedFeatureMembership_comp+=BehaviorUsageMember | ownedFeatureMembership_comp+=ActionNodeMember) 
	 *                 ownedFeatureMembership_comp+=TargetSuccessionMember*
	 *             )?
	 *         )+ 
	 *         ownedFeatureMembership_comp+=ResultExpressionMember?
	 *     )
	 */
	protected void sequence_ActionBodyItem_ActionUsageParameterList_CalculationBody_CalculationBodyItem_CalculationRefUsage_CalculationReturnParameterPart_Identification_MultiplicityPart_Redefines_Redefinitions_Subsets_Subsettings_TypedBy_Typings_UsagePrefix_ValuePart(ISerializationContext context, CalculationUsage semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     BehaviorUsageElement returns ConstraintUsage
	 *     VariantUsageElement returns ConstraintUsage
	 *     ConstraintRefUsage returns ConstraintUsage
	 *
	 * Constraint:
	 *     (
	 *         (isAbstract?='abstract' | isVariation?='variation')? 
	 *         isComposite?=ConstraintUsageKeyword? 
	 *         ((humanId=Name name=Name?) | name=Name)? 
	 *         (ownedMembership_comp+=MultiplicityMember isOrdered?='ordered'? (isNonunique?='nonunique'? isOrdered?='ordered'?)*)? 
	 *         (
	 *             (
	 *                 (ownedRelationship_comp+=OwnedFeatureTyping ownedRelationship_comp+=OwnedFeatureTyping*) | 
	 *                 (ownedRelationship_comp+=OwnedSubsetting ownedRelationship_comp+=OwnedSubsetting*) | 
	 *                 (ownedRelationship_comp+=OwnedRedefinition ownedRelationship_comp+=OwnedRedefinition*)
	 *             ) 
	 *             (ownedMembership_comp+=MultiplicityMember isOrdered?='ordered'?)?
	 *         )* 
	 *         (
	 *             ownedMembership_comp+=FeatureValue | 
	 *             (
	 *                 (ownedFeatureMembership_comp+=ActionUsageParameterMember ownedFeatureMembership_comp+=ActionUsageParameterMember*)? 
	 *                 ownedFeatureMembership_comp+=CalculationReturnParameterMember?
	 *             )
	 *         )? 
	 *         (
	 *             (
	 *                 documentation_comp+=OwnedDocumentation | 
	 *                 ownedMembership_comp+=NestedDefinitionMember | 
	 *                 ownedMembership_comp+=VariantUsageMember | 
	 *                 ownedFeatureMembership_comp+=ParameterFlowUsageMember | 
	 *                 ownedFeatureMembership_comp+=StructureUsageMember | 
	 *                 ownedFeatureMembership_comp+=GuardedSuccessionMember | 
	 *                 ownedImport_comp+=PackageImport | 
	 *                 ownedFeatureMembership_comp+=ReturnParameterFlowUsageMember
	 *             )? 
	 *             (ownedFeatureMembership_comp+=InitialNodeMember ownedFeatureMembership_comp+=TargetSuccessionMember*)? 
	 *             (ownedFeatureMembership_comp+=EmptySuccessionMember? ownedFeatureMembership_comp+=IndividualUsageMember)? 
	 *             (
	 *                 ownedFeatureMembership_comp+=EmptySuccessionMember? 
	 *                 (ownedFeatureMembership_comp+=BehaviorUsageMember | ownedFeatureMembership_comp+=ActionNodeMember) 
	 *                 ownedFeatureMembership_comp+=TargetSuccessionMember*
	 *             )?
	 *         )+ 
	 *         ownedFeatureMembership_comp+=ResultExpressionMember?
	 *     )
	 */
	protected void sequence_ActionBodyItem_ActionUsageParameterList_CalculationBody_CalculationBodyItem_CalculationReturnParameterPart_ConstraintRefUsage_Identification_MultiplicityPart_Redefines_Redefinitions_Subsets_Subsettings_TypedBy_Typings_UsagePrefix_ValuePart(ISerializationContext context, ConstraintUsage semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     RequirementConstraintUsage returns ConstraintUsage
	 *
	 * Constraint:
	 *     (
	 *         (
	 *             (
	 *                 (
	 *                     ((humanId=Name name=Name?) | name=Name)? 
	 *                     (ownedMembership_comp+=MultiplicityMember (isOrdered?='ordered'? isNonunique?='nonunique'?)* isOrdered?='ordered'?)?
	 *                 ) | 
	 *                 ownedRelationship_comp+=OwnedSubsetting
	 *             )? 
	 *             (
	 *                 (
	 *                     (ownedRelationship_comp+=OwnedFeatureTyping ownedRelationship_comp+=OwnedFeatureTyping*) | 
	 *                     (ownedRelationship_comp+=OwnedSubsetting ownedRelationship_comp+=OwnedSubsetting*) | 
	 *                     (ownedRelationship_comp+=OwnedRedefinition ownedRelationship_comp+=OwnedRedefinition*)
	 *                 ) 
	 *                 (ownedMembership_comp+=MultiplicityMember (isOrdered?='ordered'? isNonunique?='nonunique'?)* isOrdered?='ordered'?)?
	 *             )+ 
	 *             (
	 *                 (
	 *                     (ownedMembership_comp+=MultiplicityMember (isOrdered?='ordered'? isNonunique?='nonunique'?)* isOrdered?='ordered'?)? 
	 *                     (ownedFeatureMembership_comp+=ActionUsageParameterMember ownedFeatureMembership_comp+=ActionUsageParameterMember*)? 
	 *                     ownedFeatureMembership_comp+=CalculationReturnParameterMember? 
	 *                     (
	 *                         (
	 *                             documentation_comp+=OwnedDocumentation | 
	 *                             ownedMembership_comp+=NestedDefinitionMember | 
	 *                             ownedMembership_comp+=VariantUsageMember | 
	 *                             ownedFeatureMembership_comp+=NestedUsageMember | 
	 *                             ownedImport_comp+=PackageImport | 
	 *                             ownedFeatureMembership_comp+=SubjectMember | 
	 *                             ownedFeatureMembership_comp+=RequirementConstraintMember
	 *                         )? 
	 *                         (ownedFeatureMembership_comp+=EmptySuccessionMember? ownedFeatureMembership_comp+=IndividualUsageMember)?
	 *                     )+
	 *                 ) | 
	 *                 (
	 *                     (
	 *                         (
	 *                             ownedMembership_comp+=MultiplicityMember 
	 *                             (isOrdered?='ordered'? isNonunique?='nonunique'?)* 
	 *                             isOrdered?='ordered'? 
	 *                             ownedMembership_comp+=FeatureValue
	 *                         ) | 
	 *                         (
	 *                             (ownedMembership_comp+=MultiplicityMember (isOrdered?='ordered'? isNonunique?='nonunique'?)* isOrdered?='ordered'?)? 
	 *                             (ownedFeatureMembership_comp+=ActionUsageParameterMember ownedFeatureMembership_comp+=ActionUsageParameterMember*)? 
	 *                             ownedFeatureMembership_comp+=CalculationReturnParameterMember?
	 *                         ) | 
	 *                         ownedMembership_comp+=FeatureValue
	 *                     )? 
	 *                     (
	 *                         (
	 *                             documentation_comp+=OwnedDocumentation | 
	 *                             ownedMembership_comp+=NestedDefinitionMember | 
	 *                             ownedMembership_comp+=VariantUsageMember | 
	 *                             ownedFeatureMembership_comp+=ParameterFlowUsageMember | 
	 *                             ownedFeatureMembership_comp+=StructureUsageMember | 
	 *                             ownedFeatureMembership_comp+=GuardedSuccessionMember | 
	 *                             ownedImport_comp+=PackageImport | 
	 *                             ownedFeatureMembership_comp+=ReturnParameterFlowUsageMember
	 *                         )? 
	 *                         (ownedFeatureMembership_comp+=InitialNodeMember ownedFeatureMembership_comp+=TargetSuccessionMember*)? 
	 *                         (ownedFeatureMembership_comp+=EmptySuccessionMember? ownedFeatureMembership_comp+=IndividualUsageMember)? 
	 *                         (
	 *                             ownedFeatureMembership_comp+=EmptySuccessionMember? 
	 *                             (ownedFeatureMembership_comp+=BehaviorUsageMember | ownedFeatureMembership_comp+=ActionNodeMember) 
	 *                             ownedFeatureMembership_comp+=TargetSuccessionMember*
	 *                         )?
	 *                     )+ 
	 *                     ownedFeatureMembership_comp+=ResultExpressionMember?
	 *                 )
	 *             )
	 *         ) | 
	 *         (
	 *             (
	 *                 (
	 *                     ((humanId=Name name=Name?) | name=Name)? 
	 *                     (ownedMembership_comp+=MultiplicityMember (isOrdered?='ordered'? isNonunique?='nonunique'?)* isOrdered?='ordered'?)? 
	 *                     (ownedFeatureMembership_comp+=ActionUsageParameterMember ownedFeatureMembership_comp+=ActionUsageParameterMember*)? 
	 *                     ownedFeatureMembership_comp+=CalculationReturnParameterMember?
	 *                 ) | 
	 *                 (
	 *                     ownedRelationship_comp+=OwnedSubsetting 
	 *                     (ownedFeatureMembership_comp+=ActionUsageParameterMember ownedFeatureMembership_comp+=ActionUsageParameterMember*)? 
	 *                     ownedFeatureMembership_comp+=CalculationReturnParameterMember?
	 *                 )
	 *             ) 
	 *             (
	 *                 (
	 *                     documentation_comp+=OwnedDocumentation | 
	 *                     ownedMembership_comp+=NestedDefinitionMember | 
	 *                     ownedMembership_comp+=VariantUsageMember | 
	 *                     ownedFeatureMembership_comp+=NestedUsageMember | 
	 *                     ownedImport_comp+=PackageImport | 
	 *                     ownedFeatureMembership_comp+=SubjectMember | 
	 *                     ownedFeatureMembership_comp+=RequirementConstraintMember
	 *                 )? 
	 *                 (ownedFeatureMembership_comp+=EmptySuccessionMember? ownedFeatureMembership_comp+=IndividualUsageMember)?
	 *             )+
	 *         ) | 
	 *         (
	 *             (
	 *                 (((humanId=Name name=Name?) | name=Name)? ownedMembership_comp+=FeatureValue) | 
	 *                 (
	 *                     ((humanId=Name name=Name?) | name=Name)? 
	 *                     ownedMembership_comp+=MultiplicityMember 
	 *                     (isOrdered?='ordered'? isNonunique?='nonunique'?)* 
	 *                     isOrdered?='ordered'? 
	 *                     ownedMembership_comp+=FeatureValue
	 *                 ) | 
	 *                 (
	 *                     ((humanId=Name name=Name?) | name=Name)? 
	 *                     (ownedMembership_comp+=MultiplicityMember (isOrdered?='ordered'? isNonunique?='nonunique'?)* isOrdered?='ordered'?)? 
	 *                     (ownedFeatureMembership_comp+=ActionUsageParameterMember ownedFeatureMembership_comp+=ActionUsageParameterMember*)? 
	 *                     ownedFeatureMembership_comp+=CalculationReturnParameterMember?
	 *                 ) | 
	 *                 (
	 *                     ownedRelationship_comp+=OwnedSubsetting 
	 *                     (ownedFeatureMembership_comp+=ActionUsageParameterMember ownedFeatureMembership_comp+=ActionUsageParameterMember*)? 
	 *                     ownedFeatureMembership_comp+=CalculationReturnParameterMember?
	 *                 )
	 *             ) 
	 *             (
	 *                 (
	 *                     documentation_comp+=OwnedDocumentation | 
	 *                     ownedMembership_comp+=NestedDefinitionMember | 
	 *                     ownedMembership_comp+=VariantUsageMember | 
	 *                     ownedFeatureMembership_comp+=ParameterFlowUsageMember | 
	 *                     ownedFeatureMembership_comp+=StructureUsageMember | 
	 *                     ownedFeatureMembership_comp+=GuardedSuccessionMember | 
	 *                     ownedImport_comp+=PackageImport | 
	 *                     ownedFeatureMembership_comp+=ReturnParameterFlowUsageMember
	 *                 )? 
	 *                 (ownedFeatureMembership_comp+=InitialNodeMember ownedFeatureMembership_comp+=TargetSuccessionMember*)? 
	 *                 (ownedFeatureMembership_comp+=EmptySuccessionMember? ownedFeatureMembership_comp+=IndividualUsageMember)? 
	 *                 (
	 *                     ownedFeatureMembership_comp+=EmptySuccessionMember? 
	 *                     (ownedFeatureMembership_comp+=BehaviorUsageMember | ownedFeatureMembership_comp+=ActionNodeMember) 
	 *                     ownedFeatureMembership_comp+=TargetSuccessionMember*
	 *                 )?
	 *             )+ 
	 *             ownedFeatureMembership_comp+=ResultExpressionMember?
	 *         )
	 *     )
	 */
	protected void sequence_ActionBodyItem_ActionUsageParameterList_CalculationBody_CalculationBodyItem_CalculationReturnParameterPart_DefinitionBodyItem_Identification_MultiplicityPart_Redefines_Redefinitions_RequirementBodyItem_RequirementConstraintUsage_Subsets_Subsettings_TypedBy_Typings_ValuePart(ISerializationContext context, ConstraintUsage semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     UsageElement returns CalculationUsage
	 *     FeatureElement returns CalculationUsage
	 *     FlowUsageElement returns CalculationUsage
	 *     CalculationUsage returns CalculationUsage
	 *     CalculationFlowUsage returns CalculationUsage
	 *
	 * Constraint:
	 *     (
	 *         (isAbstract?='abstract' | isVariation?='variation')? 
	 *         ((humanId=Name name=Name?) | name=Name)? 
	 *         (ownedMembership_comp+=MultiplicityMember isOrdered?='ordered'? (isNonunique?='nonunique'? isOrdered?='ordered'?)*)? 
	 *         (
	 *             (
	 *                 (ownedRelationship_comp+=OwnedFeatureTyping ownedRelationship_comp+=OwnedFeatureTyping*) | 
	 *                 (ownedRelationship_comp+=OwnedSubsetting ownedRelationship_comp+=OwnedSubsetting*) | 
	 *                 (ownedRelationship_comp+=OwnedRedefinition ownedRelationship_comp+=OwnedRedefinition*)
	 *             ) 
	 *             (ownedMembership_comp+=MultiplicityMember isOrdered?='ordered'?)?
	 *         )* 
	 *         (
	 *             ownedMembership_comp+=FeatureValue | 
	 *             (
	 *                 (ownedFeatureMembership_comp+=ActionUsageParameterMember ownedFeatureMembership_comp+=ActionUsageParameterMember*)? 
	 *                 ownedFeatureMembership_comp+=CalculationReturnParameterMember?
	 *             )
	 *         )? 
	 *         (
	 *             (
	 *                 documentation_comp+=OwnedDocumentation | 
	 *                 ownedMembership_comp+=NestedDefinitionMember | 
	 *                 ownedMembership_comp+=VariantUsageMember | 
	 *                 ownedFeatureMembership_comp+=ParameterFlowUsageMember | 
	 *                 ownedFeatureMembership_comp+=StructureUsageMember | 
	 *                 ownedFeatureMembership_comp+=GuardedSuccessionMember | 
	 *                 ownedImport_comp+=PackageImport | 
	 *                 ownedFeatureMembership_comp+=ReturnParameterFlowUsageMember
	 *             )? 
	 *             (ownedFeatureMembership_comp+=InitialNodeMember ownedFeatureMembership_comp+=TargetSuccessionMember*)? 
	 *             (ownedFeatureMembership_comp+=EmptySuccessionMember? ownedFeatureMembership_comp+=IndividualUsageMember)? 
	 *             (
	 *                 ownedFeatureMembership_comp+=EmptySuccessionMember? 
	 *                 (ownedFeatureMembership_comp+=BehaviorUsageMember | ownedFeatureMembership_comp+=ActionNodeMember) 
	 *                 ownedFeatureMembership_comp+=TargetSuccessionMember*
	 *             )?
	 *         )+ 
	 *         ownedFeatureMembership_comp+=ResultExpressionMember?
	 *     )
	 */
	protected void sequence_ActionBodyItem_ActionUsageParameterList_CalculationBody_CalculationBodyItem_CalculationReturnParameterPart_Identification_MultiplicityPart_Redefines_Redefinitions_Subsets_Subsettings_TypedBy_Typings_UsagePrefix_ValuePart(ISerializationContext context, CalculationUsage semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     UsageElement returns ConstraintUsage
	 *     FeatureElement returns ConstraintUsage
	 *     FlowUsageElement returns ConstraintUsage
	 *     ConstraintUsage returns ConstraintUsage
	 *     ConstraintFlowUsage returns ConstraintUsage
	 *
	 * Constraint:
	 *     (
	 *         (isAbstract?='abstract' | isVariation?='variation')? 
	 *         ((humanId=Name name=Name?) | name=Name)? 
	 *         (ownedMembership_comp+=MultiplicityMember isOrdered?='ordered'? (isNonunique?='nonunique'? isOrdered?='ordered'?)*)? 
	 *         (
	 *             (
	 *                 (ownedRelationship_comp+=OwnedFeatureTyping ownedRelationship_comp+=OwnedFeatureTyping*) | 
	 *                 (ownedRelationship_comp+=OwnedSubsetting ownedRelationship_comp+=OwnedSubsetting*) | 
	 *                 (ownedRelationship_comp+=OwnedRedefinition ownedRelationship_comp+=OwnedRedefinition*)
	 *             ) 
	 *             (ownedMembership_comp+=MultiplicityMember isOrdered?='ordered'?)?
	 *         )* 
	 *         (
	 *             ownedMembership_comp+=FeatureValue | 
	 *             (
	 *                 (ownedFeatureMembership_comp+=ActionUsageParameterMember ownedFeatureMembership_comp+=ActionUsageParameterMember*)? 
	 *                 ownedFeatureMembership_comp+=CalculationReturnParameterMember?
	 *             )
	 *         )? 
	 *         (
	 *             (
	 *                 documentation_comp+=OwnedDocumentation | 
	 *                 ownedMembership_comp+=NestedDefinitionMember | 
	 *                 ownedMembership_comp+=VariantUsageMember | 
	 *                 ownedFeatureMembership_comp+=ParameterFlowUsageMember | 
	 *                 ownedFeatureMembership_comp+=StructureUsageMember | 
	 *                 ownedFeatureMembership_comp+=GuardedSuccessionMember | 
	 *                 ownedImport_comp+=PackageImport | 
	 *                 ownedFeatureMembership_comp+=ReturnParameterFlowUsageMember
	 *             )? 
	 *             (ownedFeatureMembership_comp+=InitialNodeMember ownedFeatureMembership_comp+=TargetSuccessionMember*)? 
	 *             (ownedFeatureMembership_comp+=EmptySuccessionMember? ownedFeatureMembership_comp+=IndividualUsageMember)? 
	 *             (
	 *                 ownedFeatureMembership_comp+=EmptySuccessionMember? 
	 *                 (ownedFeatureMembership_comp+=BehaviorUsageMember | ownedFeatureMembership_comp+=ActionNodeMember) 
	 *                 ownedFeatureMembership_comp+=TargetSuccessionMember*
	 *             )?
	 *         )+ 
	 *         ownedFeatureMembership_comp+=ResultExpressionMember?
	 *     )
	 */
	protected void sequence_ActionBodyItem_ActionUsageParameterList_CalculationBody_CalculationBodyItem_CalculationReturnParameterPart_Identification_MultiplicityPart_Redefines_Redefinitions_Subsets_Subsettings_TypedBy_Typings_UsagePrefix_ValuePart(ISerializationContext context, ConstraintUsage semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     StateActionUsage returns PerformActionUsage
	 *     EffectBehaviorUsage returns PerformActionUsage
	 *
	 * Constraint:
	 *     (
	 *         ((humanId=Name name=Name?) | name=Name | ownedRelationship_comp+=OwnedSubsetting)? 
	 *         (ownedMembership_comp+=MultiplicityMember isOrdered?='ordered'? (isNonunique?='nonunique'? isOrdered?='ordered'?)*)? 
	 *         (
	 *             (
	 *                 (ownedRelationship_comp+=OwnedFeatureTyping ownedRelationship_comp+=OwnedFeatureTyping*) | 
	 *                 (ownedRelationship_comp+=OwnedSubsetting ownedRelationship_comp+=OwnedSubsetting*) | 
	 *                 (ownedRelationship_comp+=OwnedRedefinition ownedRelationship_comp+=OwnedRedefinition*)
	 *             ) 
	 *             (ownedMembership_comp+=MultiplicityMember isOrdered?='ordered'?)?
	 *         )* 
	 *         (
	 *             ownedMembership_comp+=FeatureValue | 
	 *             (ownedFeatureMembership_comp+=ActionUsageParameterMember ownedFeatureMembership_comp+=ActionUsageParameterMember*)
	 *         )? 
	 *         (
	 *             (
	 *                 documentation_comp+=OwnedDocumentation | 
	 *                 ownedMembership_comp+=NestedDefinitionMember | 
	 *                 ownedMembership_comp+=VariantUsageMember | 
	 *                 ownedFeatureMembership_comp+=ParameterFlowUsageMember | 
	 *                 ownedFeatureMembership_comp+=StructureUsageMember | 
	 *                 ownedFeatureMembership_comp+=GuardedSuccessionMember | 
	 *                 ownedImport_comp+=PackageImport
	 *             )? 
	 *             (ownedFeatureMembership_comp+=InitialNodeMember ownedFeatureMembership_comp+=TargetSuccessionMember*)? 
	 *             (ownedFeatureMembership_comp+=EmptySuccessionMember? ownedFeatureMembership_comp+=IndividualUsageMember)? 
	 *             (
	 *                 ownedFeatureMembership_comp+=EmptySuccessionMember? 
	 *                 (ownedFeatureMembership_comp+=BehaviorUsageMember | ownedFeatureMembership_comp+=ActionNodeMember) 
	 *                 ownedFeatureMembership_comp+=TargetSuccessionMember*
	 *             )?
	 *         )+
	 *     )
	 */
	protected void sequence_ActionBodyItem_ActionUsageParameterList_Identification_MultiplicityPart_PerformActionUsageDeclaration_PerformedActionUsage_Redefines_Redefinitions_Subsets_Subsettings_TypedBy_Typings_ValuePart(ISerializationContext context, PerformActionUsage semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     BehaviorUsageElement returns PerformActionUsage
	 *     VariantUsageElement returns PerformActionUsage
	 *     PerformActionUsage returns PerformActionUsage
	 *
	 * Constraint:
	 *     (
	 *         (isAbstract?='abstract' | isVariation?='variation')? 
	 *         ((humanId=Name name=Name?) | name=Name | ownedRelationship_comp+=OwnedSubsetting)? 
	 *         (ownedMembership_comp+=MultiplicityMember isOrdered?='ordered'? (isNonunique?='nonunique'? isOrdered?='ordered'?)*)? 
	 *         (
	 *             (
	 *                 (ownedRelationship_comp+=OwnedFeatureTyping ownedRelationship_comp+=OwnedFeatureTyping*) | 
	 *                 (ownedRelationship_comp+=OwnedSubsetting ownedRelationship_comp+=OwnedSubsetting*) | 
	 *                 (ownedRelationship_comp+=OwnedRedefinition ownedRelationship_comp+=OwnedRedefinition*)
	 *             ) 
	 *             (ownedMembership_comp+=MultiplicityMember isOrdered?='ordered'?)?
	 *         )* 
	 *         (
	 *             ownedMembership_comp+=FeatureValue | 
	 *             (ownedFeatureMembership_comp+=ActionUsageParameterMember ownedFeatureMembership_comp+=ActionUsageParameterMember*)
	 *         )? 
	 *         (
	 *             (
	 *                 documentation_comp+=OwnedDocumentation | 
	 *                 ownedMembership_comp+=NestedDefinitionMember | 
	 *                 ownedMembership_comp+=VariantUsageMember | 
	 *                 ownedFeatureMembership_comp+=ParameterFlowUsageMember | 
	 *                 ownedFeatureMembership_comp+=StructureUsageMember | 
	 *                 ownedFeatureMembership_comp+=GuardedSuccessionMember | 
	 *                 ownedImport_comp+=PackageImport
	 *             )? 
	 *             (ownedFeatureMembership_comp+=InitialNodeMember ownedFeatureMembership_comp+=TargetSuccessionMember*)? 
	 *             (ownedFeatureMembership_comp+=EmptySuccessionMember? ownedFeatureMembership_comp+=IndividualUsageMember)? 
	 *             (
	 *                 ownedFeatureMembership_comp+=EmptySuccessionMember? 
	 *                 (ownedFeatureMembership_comp+=BehaviorUsageMember | ownedFeatureMembership_comp+=ActionNodeMember) 
	 *                 ownedFeatureMembership_comp+=TargetSuccessionMember*
	 *             )?
	 *         )+
	 *     )
	 */
	protected void sequence_ActionBodyItem_ActionUsageParameterList_Identification_MultiplicityPart_PerformActionUsageDeclaration_Redefines_Redefinitions_Subsets_Subsettings_TypedBy_Typings_UsagePrefix_ValuePart(ISerializationContext context, PerformActionUsage semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     UsageElement returns ActionUsage
	 *     FeatureElement returns ActionUsage
	 *     FlowUsageElement returns ActionUsage
	 *     ActionUsage returns ActionUsage
	 *     ActionFlowUsage returns ActionUsage
	 *
	 * Constraint:
	 *     (
	 *         (isAbstract?='abstract' | isVariation?='variation')? 
	 *         ((humanId=Name name=Name?) | name=Name)? 
	 *         (ownedMembership_comp+=MultiplicityMember isOrdered?='ordered'? (isNonunique?='nonunique'? isOrdered?='ordered'?)*)? 
	 *         (
	 *             (
	 *                 (ownedRelationship_comp+=OwnedFeatureTyping ownedRelationship_comp+=OwnedFeatureTyping*) | 
	 *                 (ownedRelationship_comp+=OwnedSubsetting ownedRelationship_comp+=OwnedSubsetting*) | 
	 *                 (ownedRelationship_comp+=OwnedRedefinition ownedRelationship_comp+=OwnedRedefinition*)
	 *             ) 
	 *             (ownedMembership_comp+=MultiplicityMember isOrdered?='ordered'?)?
	 *         )* 
	 *         (
	 *             ownedMembership_comp+=FeatureValue | 
	 *             (ownedFeatureMembership_comp+=ActionUsageParameterMember ownedFeatureMembership_comp+=ActionUsageParameterMember*)
	 *         )? 
	 *         (
	 *             (
	 *                 documentation_comp+=OwnedDocumentation | 
	 *                 ownedMembership_comp+=NestedDefinitionMember | 
	 *                 ownedMembership_comp+=VariantUsageMember | 
	 *                 ownedFeatureMembership_comp+=ParameterFlowUsageMember | 
	 *                 ownedFeatureMembership_comp+=StructureUsageMember | 
	 *                 ownedFeatureMembership_comp+=GuardedSuccessionMember | 
	 *                 ownedImport_comp+=PackageImport
	 *             )? 
	 *             (ownedFeatureMembership_comp+=InitialNodeMember ownedFeatureMembership_comp+=TargetSuccessionMember*)? 
	 *             (ownedFeatureMembership_comp+=EmptySuccessionMember? ownedFeatureMembership_comp+=IndividualUsageMember)? 
	 *             (
	 *                 ownedFeatureMembership_comp+=EmptySuccessionMember? 
	 *                 (ownedFeatureMembership_comp+=BehaviorUsageMember | ownedFeatureMembership_comp+=ActionNodeMember) 
	 *                 ownedFeatureMembership_comp+=TargetSuccessionMember*
	 *             )?
	 *         )+
	 *     )
	 */
	protected void sequence_ActionBodyItem_ActionUsageParameterList_Identification_MultiplicityPart_Redefines_Redefinitions_Subsets_Subsettings_TypedBy_Typings_UsagePrefix_ValuePart(ISerializationContext context, ActionUsage semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     DefinitionElement returns AnalysisCaseDefinition
	 *     AnalysisCaseDefinition returns AnalysisCaseDefinition
	 *
	 * Constraint:
	 *     (
	 *         (isAbstract?='abstract' | isVariation?='variation')? 
	 *         ((humanId=Name name=Name?) | name=Name)? 
	 *         (ownedRelationship_comp+=OwnedSuperclassing ownedRelationship_comp+=OwnedSuperclassing*)? 
	 *         (ownedFeatureMembership_comp+=ParameterMember ownedFeatureMembership_comp+=ParameterMember*)? 
	 *         ownedFeatureMembership_comp+=ReturnParameterMember? 
	 *         (
	 *             (
	 *                 documentation_comp+=OwnedDocumentation | 
	 *                 ownedMembership_comp+=NestedDefinitionMember | 
	 *                 ownedMembership_comp+=VariantUsageMember | 
	 *                 ownedFeatureMembership_comp+=ParameterFlowUsageMember | 
	 *                 ownedFeatureMembership_comp+=StructureUsageMember | 
	 *                 ownedFeatureMembership_comp+=GuardedSuccessionMember | 
	 *                 ownedImport_comp+=PackageImport | 
	 *                 ownedFeatureMembership_comp+=ReturnParameterFlowUsageMember | 
	 *                 ownedFeatureMembership_comp+=SubjectMember | 
	 *                 ownedFeatureMembership_comp+=ObjectiveMember
	 *             )? 
	 *             (ownedFeatureMembership_comp+=InitialNodeMember ownedFeatureMembership_comp+=TargetSuccessionMember*)? 
	 *             (ownedFeatureMembership_comp+=EmptySuccessionMember? ownedFeatureMembership_comp+=IndividualUsageMember)? 
	 *             (
	 *                 ownedFeatureMembership_comp+=EmptySuccessionMember? 
	 *                 (ownedFeatureMembership_comp+=BehaviorUsageMember | ownedFeatureMembership_comp+=ActionNodeMember) 
	 *                 ownedFeatureMembership_comp+=TargetSuccessionMember*
	 *             )?
	 *         )+ 
	 *         ownedFeatureMembership_comp+=ResultExpressionMember?
	 *     )
	 */
	protected void sequence_ActionBodyItem_CalculationBodyItem_CaseBody_CaseBodyItem_DefinitionPrefix_Identification_ParameterList_ReturnParameterPart_SuperclassingPart(ISerializationContext context, AnalysisCaseDefinition semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     DefinitionElement returns CaseDefinition
	 *     CaseDefinition returns CaseDefinition
	 *
	 * Constraint:
	 *     (
	 *         (isAbstract?='abstract' | isVariation?='variation')? 
	 *         ((humanId=Name name=Name?) | name=Name)? 
	 *         (ownedRelationship_comp+=OwnedSuperclassing ownedRelationship_comp+=OwnedSuperclassing*)? 
	 *         (ownedFeatureMembership_comp+=ParameterMember ownedFeatureMembership_comp+=ParameterMember*)? 
	 *         ownedFeatureMembership_comp+=ReturnParameterMember? 
	 *         (
	 *             (
	 *                 documentation_comp+=OwnedDocumentation | 
	 *                 ownedMembership_comp+=NestedDefinitionMember | 
	 *                 ownedMembership_comp+=VariantUsageMember | 
	 *                 ownedFeatureMembership_comp+=ParameterFlowUsageMember | 
	 *                 ownedFeatureMembership_comp+=StructureUsageMember | 
	 *                 ownedFeatureMembership_comp+=GuardedSuccessionMember | 
	 *                 ownedImport_comp+=PackageImport | 
	 *                 ownedFeatureMembership_comp+=ReturnParameterFlowUsageMember | 
	 *                 ownedFeatureMembership_comp+=SubjectMember | 
	 *                 ownedFeatureMembership_comp+=ObjectiveMember
	 *             )? 
	 *             (ownedFeatureMembership_comp+=InitialNodeMember ownedFeatureMembership_comp+=TargetSuccessionMember*)? 
	 *             (ownedFeatureMembership_comp+=EmptySuccessionMember? ownedFeatureMembership_comp+=IndividualUsageMember)? 
	 *             (
	 *                 ownedFeatureMembership_comp+=EmptySuccessionMember? 
	 *                 (ownedFeatureMembership_comp+=BehaviorUsageMember | ownedFeatureMembership_comp+=ActionNodeMember) 
	 *                 ownedFeatureMembership_comp+=TargetSuccessionMember*
	 *             )?
	 *         )+ 
	 *         ownedFeatureMembership_comp+=ResultExpressionMember?
	 *     )
	 */
	protected void sequence_ActionBodyItem_CalculationBodyItem_CaseBody_CaseBodyItem_DefinitionPrefix_Identification_ParameterList_ReturnParameterPart_SuperclassingPart(ISerializationContext context, CaseDefinition semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     DefinitionElement returns VerificationCaseDefinition
	 *     VerificationCaseDefinition returns VerificationCaseDefinition
	 *
	 * Constraint:
	 *     (
	 *         (isAbstract?='abstract' | isVariation?='variation')? 
	 *         ((humanId=Name name=Name?) | name=Name)? 
	 *         (ownedRelationship_comp+=OwnedSuperclassing ownedRelationship_comp+=OwnedSuperclassing*)? 
	 *         (ownedFeatureMembership_comp+=ParameterMember ownedFeatureMembership_comp+=ParameterMember*)? 
	 *         ownedFeatureMembership_comp+=ReturnParameterMember? 
	 *         (
	 *             (
	 *                 documentation_comp+=OwnedDocumentation | 
	 *                 ownedMembership_comp+=NestedDefinitionMember | 
	 *                 ownedMembership_comp+=VariantUsageMember | 
	 *                 ownedFeatureMembership_comp+=ParameterFlowUsageMember | 
	 *                 ownedFeatureMembership_comp+=StructureUsageMember | 
	 *                 ownedFeatureMembership_comp+=GuardedSuccessionMember | 
	 *                 ownedImport_comp+=PackageImport | 
	 *                 ownedFeatureMembership_comp+=ReturnParameterFlowUsageMember | 
	 *                 ownedFeatureMembership_comp+=SubjectMember | 
	 *                 ownedFeatureMembership_comp+=ObjectiveMember
	 *             )? 
	 *             (ownedFeatureMembership_comp+=InitialNodeMember ownedFeatureMembership_comp+=TargetSuccessionMember*)? 
	 *             (ownedFeatureMembership_comp+=EmptySuccessionMember? ownedFeatureMembership_comp+=IndividualUsageMember)? 
	 *             (
	 *                 ownedFeatureMembership_comp+=EmptySuccessionMember? 
	 *                 (ownedFeatureMembership_comp+=BehaviorUsageMember | ownedFeatureMembership_comp+=ActionNodeMember) 
	 *                 ownedFeatureMembership_comp+=TargetSuccessionMember*
	 *             )?
	 *         )+ 
	 *         ownedFeatureMembership_comp+=ResultExpressionMember?
	 *     )
	 */
	protected void sequence_ActionBodyItem_CalculationBodyItem_CaseBody_CaseBodyItem_DefinitionPrefix_Identification_ParameterList_ReturnParameterPart_SuperclassingPart(ISerializationContext context, VerificationCaseDefinition semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     DefinitionElement returns CalculationDefinition
	 *     CalculationDefinition returns CalculationDefinition
	 *
	 * Constraint:
	 *     (
	 *         (isAbstract?='abstract' | isVariation?='variation')? 
	 *         ((humanId=Name name=Name?) | name=Name)? 
	 *         (ownedRelationship_comp+=OwnedSuperclassing ownedRelationship_comp+=OwnedSuperclassing*)? 
	 *         (ownedFeatureMembership_comp+=ParameterMember ownedFeatureMembership_comp+=ParameterMember*)? 
	 *         ownedFeatureMembership_comp+=ReturnParameterMember? 
	 *         (
	 *             (
	 *                 (
	 *                     (
	 *                         documentation_comp+=OwnedDocumentation | 
	 *                         ownedMembership_comp+=NestedDefinitionMember | 
	 *                         ownedMembership_comp+=VariantUsageMember | 
	 *                         ownedFeatureMembership_comp+=ParameterFlowUsageMember | 
	 *                         ownedFeatureMembership_comp+=StructureUsageMember | 
	 *                         ownedFeatureMembership_comp+=GuardedSuccessionMember | 
	 *                         ownedImport_comp+=PackageImport | 
	 *                         ownedFeatureMembership_comp+=ReturnParameterFlowUsageMember
	 *                     )? 
	 *                     (ownedFeatureMembership_comp+=InitialNodeMember ownedFeatureMembership_comp+=TargetSuccessionMember*)? 
	 *                     (ownedFeatureMembership_comp+=EmptySuccessionMember? ownedFeatureMembership_comp+=IndividualUsageMember)? 
	 *                     (
	 *                         ownedFeatureMembership_comp+=EmptySuccessionMember? 
	 *                         (ownedFeatureMembership_comp+=BehaviorUsageMember | ownedFeatureMembership_comp+=ActionNodeMember) 
	 *                         ownedFeatureMembership_comp+=TargetSuccessionMember*
	 *                     )?
	 *                 )+ 
	 *                 ownedFeatureMembership_comp+=ResultExpressionMember?
	 *             ) | 
	 *             ownedFeatureMembership_comp+=ResultExpressionMember
	 *         )?
	 *     )
	 */
	protected void sequence_ActionBodyItem_CalculationBody_CalculationBodyItem_CalculationDefinition_DefinitionPrefix_Identification_ParameterList_ReturnParameterPart_SuperclassingPart(ISerializationContext context, CalculationDefinition semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     DefinitionElement returns ConstraintDefinition
	 *     ConstraintDefinition returns ConstraintDefinition
	 *
	 * Constraint:
	 *     (
	 *         (isAbstract?='abstract' | isVariation?='variation')? 
	 *         ((humanId=Name name=Name?) | name=Name)? 
	 *         (ownedRelationship_comp+=OwnedSuperclassing ownedRelationship_comp+=OwnedSuperclassing*)? 
	 *         (ownedFeatureMembership_comp+=ParameterMember ownedFeatureMembership_comp+=ParameterMember*)? 
	 *         ownedFeatureMembership_comp+=EmptyReturnParameterMember 
	 *         (
	 *             (
	 *                 documentation_comp+=OwnedDocumentation | 
	 *                 ownedMembership_comp+=NestedDefinitionMember | 
	 *                 ownedMembership_comp+=VariantUsageMember | 
	 *                 ownedFeatureMembership_comp+=ParameterFlowUsageMember | 
	 *                 ownedFeatureMembership_comp+=StructureUsageMember | 
	 *                 ownedFeatureMembership_comp+=GuardedSuccessionMember | 
	 *                 ownedImport_comp+=PackageImport | 
	 *                 ownedFeatureMembership_comp+=ReturnParameterFlowUsageMember
	 *             )? 
	 *             (ownedFeatureMembership_comp+=InitialNodeMember ownedFeatureMembership_comp+=TargetSuccessionMember*)? 
	 *             (ownedFeatureMembership_comp+=EmptySuccessionMember? ownedFeatureMembership_comp+=IndividualUsageMember)? 
	 *             (
	 *                 ownedFeatureMembership_comp+=EmptySuccessionMember? 
	 *                 (ownedFeatureMembership_comp+=BehaviorUsageMember | ownedFeatureMembership_comp+=ActionNodeMember) 
	 *                 ownedFeatureMembership_comp+=TargetSuccessionMember*
	 *             )?
	 *         )+ 
	 *         ownedFeatureMembership_comp+=ResultExpressionMember?
	 *     )
	 */
	protected void sequence_ActionBodyItem_CalculationBody_CalculationBodyItem_DefinitionPrefix_EmptyReturnParameterPart_Identification_ParameterList_SuperclassingPart(ISerializationContext context, ConstraintDefinition semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     DefinitionElement returns ActionDefinition
	 *     ActionDefinition returns ActionDefinition
	 *
	 * Constraint:
	 *     (
	 *         (isAbstract?='abstract' | isVariation?='variation')? 
	 *         ((humanId=Name name=Name?) | name=Name)? 
	 *         (ownedRelationship_comp+=OwnedSuperclassing ownedRelationship_comp+=OwnedSuperclassing*)? 
	 *         (ownedFeatureMembership_comp+=ParameterMember ownedFeatureMembership_comp+=ParameterMember*)? 
	 *         (
	 *             (
	 *                 documentation_comp+=OwnedDocumentation | 
	 *                 ownedMembership_comp+=NestedDefinitionMember | 
	 *                 ownedMembership_comp+=VariantUsageMember | 
	 *                 ownedFeatureMembership_comp+=ParameterFlowUsageMember | 
	 *                 ownedFeatureMembership_comp+=StructureUsageMember | 
	 *                 ownedFeatureMembership_comp+=GuardedSuccessionMember | 
	 *                 ownedImport_comp+=PackageImport
	 *             )? 
	 *             (ownedFeatureMembership_comp+=InitialNodeMember ownedFeatureMembership_comp+=TargetSuccessionMember*)? 
	 *             (ownedFeatureMembership_comp+=EmptySuccessionMember? ownedFeatureMembership_comp+=IndividualUsageMember)? 
	 *             (
	 *                 ownedFeatureMembership_comp+=EmptySuccessionMember? 
	 *                 (ownedFeatureMembership_comp+=BehaviorUsageMember | ownedFeatureMembership_comp+=ActionNodeMember) 
	 *                 ownedFeatureMembership_comp+=TargetSuccessionMember*
	 *             )?
	 *         )+
	 *     )
	 */
	protected void sequence_ActionBodyItem_DefinitionPrefix_Identification_ParameterList_SuperclassingPart(ISerializationContext context, ActionDefinition semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     StateActionUsage returns SendActionUsage
	 *     EffectBehaviorUsage returns SendActionUsage
	 *
	 * Constraint:
	 *     (
	 *         ownedFeatureMembership_comp+=EmptyParameterMember 
	 *         ownedFeatureMembership_comp+=EmptyItemFeatureMember 
	 *         ((humanId=Name name=Name?) | name=Name)? 
	 *         (ownedMembership_comp+=MultiplicityMember (isOrdered?='ordered' | isNonunique?='nonunique')*)? 
	 *         (
	 *             (
	 *                 (ownedRelationship_comp+=OwnedFeatureTyping ownedRelationship_comp+=OwnedFeatureTyping*) | 
	 *                 (ownedRelationship_comp+=OwnedSubsetting ownedRelationship_comp+=OwnedSubsetting*) | 
	 *                 (ownedRelationship_comp+=OwnedRedefinition ownedRelationship_comp+=OwnedRedefinition*)
	 *             ) 
	 *             (ownedMembership_comp+=MultiplicityMember (isOrdered?='ordered' | isNonunique?='nonunique')*)?
	 *         )* 
	 *         ownedFeatureMembership_comp+=OwnedExpressionMember 
	 *         ownedFeatureMembership_comp+=OwnedExpressionMember 
	 *         (
	 *             (
	 *                 documentation_comp+=OwnedDocumentation | 
	 *                 ownedMembership_comp+=NestedDefinitionMember | 
	 *                 ownedMembership_comp+=VariantUsageMember | 
	 *                 ownedFeatureMembership_comp+=ParameterFlowUsageMember | 
	 *                 ownedFeatureMembership_comp+=StructureUsageMember | 
	 *                 ownedFeatureMembership_comp+=GuardedSuccessionMember | 
	 *                 ownedImport_comp+=PackageImport
	 *             )? 
	 *             (ownedFeatureMembership_comp+=InitialNodeMember ownedFeatureMembership_comp+=TargetSuccessionMember*)? 
	 *             (ownedFeatureMembership_comp+=EmptySuccessionMember? ownedFeatureMembership_comp+=IndividualUsageMember)? 
	 *             (
	 *                 ownedFeatureMembership_comp+=EmptySuccessionMember? 
	 *                 (ownedFeatureMembership_comp+=BehaviorUsageMember | ownedFeatureMembership_comp+=ActionNodeMember) 
	 *                 ownedFeatureMembership_comp+=TargetSuccessionMember*
	 *             )?
	 *         )+
	 *     )
	 */
	protected void sequence_ActionBodyItem_Identification_MultiplicityPart_PerformedActionUsage_Redefines_Redefinitions_SendNodeDeclaration_Subsets_Subsettings_TypedBy_Typings(ISerializationContext context, SendActionUsage semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ActionNode returns SendActionUsage
	 *     SendNode returns SendActionUsage
	 *
	 * Constraint:
	 *     (
	 *         (isAbstract?='abstract' | isVariation?='variation')? 
	 *         ownedFeatureMembership_comp+=EmptyParameterMember 
	 *         ownedFeatureMembership_comp+=EmptyItemFeatureMember 
	 *         ((humanId=Name name=Name?) | name=Name)? 
	 *         (ownedMembership_comp+=MultiplicityMember (isOrdered?='ordered' | isNonunique?='nonunique')*)? 
	 *         (
	 *             (
	 *                 (ownedRelationship_comp+=OwnedFeatureTyping ownedRelationship_comp+=OwnedFeatureTyping*) | 
	 *                 (ownedRelationship_comp+=OwnedSubsetting ownedRelationship_comp+=OwnedSubsetting*) | 
	 *                 (ownedRelationship_comp+=OwnedRedefinition ownedRelationship_comp+=OwnedRedefinition*)
	 *             ) 
	 *             (ownedMembership_comp+=MultiplicityMember (isOrdered?='ordered' | isNonunique?='nonunique')*)?
	 *         )* 
	 *         ownedFeatureMembership_comp+=OwnedExpressionMember 
	 *         ownedFeatureMembership_comp+=OwnedExpressionMember 
	 *         (
	 *             (
	 *                 documentation_comp+=OwnedDocumentation | 
	 *                 ownedMembership_comp+=NestedDefinitionMember | 
	 *                 ownedMembership_comp+=VariantUsageMember | 
	 *                 ownedFeatureMembership_comp+=ParameterFlowUsageMember | 
	 *                 ownedFeatureMembership_comp+=StructureUsageMember | 
	 *                 ownedFeatureMembership_comp+=GuardedSuccessionMember | 
	 *                 ownedImport_comp+=PackageImport
	 *             )? 
	 *             (ownedFeatureMembership_comp+=InitialNodeMember ownedFeatureMembership_comp+=TargetSuccessionMember*)? 
	 *             (ownedFeatureMembership_comp+=EmptySuccessionMember? ownedFeatureMembership_comp+=IndividualUsageMember)? 
	 *             (
	 *                 ownedFeatureMembership_comp+=EmptySuccessionMember? 
	 *                 (ownedFeatureMembership_comp+=BehaviorUsageMember | ownedFeatureMembership_comp+=ActionNodeMember) 
	 *                 ownedFeatureMembership_comp+=TargetSuccessionMember*
	 *             )?
	 *         )+
	 *     )
	 */
	protected void sequence_ActionBodyItem_Identification_MultiplicityPart_Redefines_Redefinitions_SendNodeDeclaration_Subsets_Subsettings_TypedBy_Typings_UsagePrefix(ISerializationContext context, SendActionUsage semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ActionNodeMember returns FeatureMembership
	 *
	 * Constraint:
	 *     (ownedRelationship_comp+=PrefixDocumentation* visibility=VisibilityIndicator? ownedMemberFeature_comp=ActionNode)
	 */
	protected void sequence_ActionNodeMember_DefinitionMemberPrefix(ISerializationContext context, FeatureMembership semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     BehaviorUsageElement returns RequirementUsage
	 *     VariantUsageElement returns RequirementUsage
	 *     RequirementRefUsage returns RequirementUsage
	 *
	 * Constraint:
	 *     (
	 *         (isAbstract?='abstract' | isVariation?='variation')? 
	 *         isComposite?=RequirementUsageKeyword? 
	 *         ((humanId=Name name=Name?) | name=Name)? 
	 *         (ownedMembership_comp+=MultiplicityMember isOrdered?='ordered'? (isNonunique?='nonunique'? isOrdered?='ordered'?)*)? 
	 *         (
	 *             (
	 *                 (ownedRelationship_comp+=OwnedFeatureTyping ownedRelationship_comp+=OwnedFeatureTyping*) | 
	 *                 (ownedRelationship_comp+=OwnedSubsetting ownedRelationship_comp+=OwnedSubsetting*) | 
	 *                 (ownedRelationship_comp+=OwnedRedefinition ownedRelationship_comp+=OwnedRedefinition*)
	 *             ) 
	 *             (ownedMembership_comp+=MultiplicityMember isOrdered?='ordered'?)?
	 *         )* 
	 *         (
	 *             ownedMembership_comp+=FeatureValue | 
	 *             (
	 *                 (ownedFeatureMembership_comp+=ActionUsageParameterMember ownedFeatureMembership_comp+=ActionUsageParameterMember*)? 
	 *                 ownedFeatureMembership_comp+=CalculationReturnParameterMember?
	 *             )
	 *         )? 
	 *         (
	 *             (
	 *                 documentation_comp+=OwnedDocumentation | 
	 *                 ownedMembership_comp+=NestedDefinitionMember | 
	 *                 ownedMembership_comp+=VariantUsageMember | 
	 *                 ownedFeatureMembership_comp+=NestedUsageMember | 
	 *                 ownedImport_comp+=PackageImport | 
	 *                 ownedFeatureMembership_comp+=SubjectMember | 
	 *                 ownedFeatureMembership_comp+=RequirementConstraintMember
	 *             )? 
	 *             (ownedFeatureMembership_comp+=EmptySuccessionMember? ownedFeatureMembership_comp+=IndividualUsageMember)?
	 *         )+
	 *     )
	 */
	protected void sequence_ActionUsageParameterList_CalculationReturnParameterPart_DefinitionBodyItem_Identification_MultiplicityPart_Redefines_Redefinitions_RequirementBodyItem_RequirementRefUsage_Subsets_Subsettings_TypedBy_Typings_UsagePrefix_ValuePart(ISerializationContext context, RequirementUsage semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     UsageElement returns RequirementUsage
	 *     FeatureElement returns RequirementUsage
	 *     FlowUsageElement returns RequirementUsage
	 *     RequirementUsage returns RequirementUsage
	 *     RequirementFlowUsage returns RequirementUsage
	 *
	 * Constraint:
	 *     (
	 *         (isAbstract?='abstract' | isVariation?='variation')? 
	 *         ((humanId=Name name=Name?) | name=Name)? 
	 *         (ownedMembership_comp+=MultiplicityMember isOrdered?='ordered'? (isNonunique?='nonunique'? isOrdered?='ordered'?)*)? 
	 *         (
	 *             (
	 *                 (ownedRelationship_comp+=OwnedFeatureTyping ownedRelationship_comp+=OwnedFeatureTyping*) | 
	 *                 (ownedRelationship_comp+=OwnedSubsetting ownedRelationship_comp+=OwnedSubsetting*) | 
	 *                 (ownedRelationship_comp+=OwnedRedefinition ownedRelationship_comp+=OwnedRedefinition*)
	 *             ) 
	 *             (ownedMembership_comp+=MultiplicityMember isOrdered?='ordered'?)?
	 *         )* 
	 *         (
	 *             ownedMembership_comp+=FeatureValue | 
	 *             (
	 *                 (ownedFeatureMembership_comp+=ActionUsageParameterMember ownedFeatureMembership_comp+=ActionUsageParameterMember*)? 
	 *                 ownedFeatureMembership_comp+=CalculationReturnParameterMember?
	 *             )
	 *         )? 
	 *         (
	 *             (
	 *                 documentation_comp+=OwnedDocumentation | 
	 *                 ownedMembership_comp+=NestedDefinitionMember | 
	 *                 ownedMembership_comp+=VariantUsageMember | 
	 *                 ownedFeatureMembership_comp+=NestedUsageMember | 
	 *                 ownedImport_comp+=PackageImport | 
	 *                 ownedFeatureMembership_comp+=SubjectMember | 
	 *                 ownedFeatureMembership_comp+=RequirementConstraintMember
	 *             )? 
	 *             (ownedFeatureMembership_comp+=EmptySuccessionMember? ownedFeatureMembership_comp+=IndividualUsageMember)?
	 *         )+
	 *     )
	 */
	protected void sequence_ActionUsageParameterList_CalculationReturnParameterPart_DefinitionBodyItem_Identification_MultiplicityPart_Redefines_Redefinitions_RequirementBodyItem_Subsets_Subsettings_TypedBy_Typings_UsagePrefix_ValuePart(ISerializationContext context, RequirementUsage semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     BehaviorUsageElement returns ViewpointUsage
	 *     VariantUsageElement returns ViewpointUsage
	 *     ViewpointRefUsage returns ViewpointUsage
	 *
	 * Constraint:
	 *     (
	 *         (isAbstract?='abstract' | isVariation?='variation')? 
	 *         isComposite?=ViewpointUsageKeyword? 
	 *         ((humanId=Name name=Name?) | name=Name)? 
	 *         (ownedMembership_comp+=MultiplicityMember isOrdered?='ordered'? (isNonunique?='nonunique'? isOrdered?='ordered'?)*)? 
	 *         (
	 *             (
	 *                 (ownedRelationship_comp+=OwnedFeatureTyping ownedRelationship_comp+=OwnedFeatureTyping*) | 
	 *                 (ownedRelationship_comp+=OwnedSubsetting ownedRelationship_comp+=OwnedSubsetting*) | 
	 *                 (ownedRelationship_comp+=OwnedRedefinition ownedRelationship_comp+=OwnedRedefinition*)
	 *             ) 
	 *             (ownedMembership_comp+=MultiplicityMember isOrdered?='ordered'?)?
	 *         )* 
	 *         (
	 *             ownedMembership_comp+=FeatureValue | 
	 *             (
	 *                 (ownedFeatureMembership_comp+=ActionUsageParameterMember ownedFeatureMembership_comp+=ActionUsageParameterMember*)? 
	 *                 ownedFeatureMembership_comp+=CalculationReturnParameterMember?
	 *             )
	 *         )? 
	 *         (
	 *             (
	 *                 documentation_comp+=OwnedDocumentation | 
	 *                 ownedMembership_comp+=NestedDefinitionMember | 
	 *                 ownedMembership_comp+=VariantUsageMember | 
	 *                 ownedFeatureMembership_comp+=NestedUsageMember | 
	 *                 ownedImport_comp+=PackageImport | 
	 *                 ownedFeatureMembership_comp+=SubjectMember | 
	 *                 ownedFeatureMembership_comp+=RequirementConstraintMember
	 *             )? 
	 *             (ownedFeatureMembership_comp+=EmptySuccessionMember? ownedFeatureMembership_comp+=IndividualUsageMember)?
	 *         )+
	 *     )
	 */
	protected void sequence_ActionUsageParameterList_CalculationReturnParameterPart_DefinitionBodyItem_Identification_MultiplicityPart_Redefines_Redefinitions_RequirementBodyItem_Subsets_Subsettings_TypedBy_Typings_UsagePrefix_ValuePart_ViewpointRefUsage(ISerializationContext context, ViewpointUsage semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     UsageElement returns ViewpointUsage
	 *     FeatureElement returns ViewpointUsage
	 *     FlowUsageElement returns ViewpointUsage
	 *     ViewpointUsage returns ViewpointUsage
	 *     ViewpointFlowUsage returns ViewpointUsage
	 *
	 * Constraint:
	 *     (
	 *         (isAbstract?='abstract' | isVariation?='variation')? 
	 *         ((humanId=Name name=Name?) | name=Name)? 
	 *         (ownedMembership_comp+=MultiplicityMember isOrdered?='ordered'? (isNonunique?='nonunique'? isOrdered?='ordered'?)*)? 
	 *         (
	 *             (
	 *                 (ownedRelationship_comp+=OwnedFeatureTyping ownedRelationship_comp+=OwnedFeatureTyping*) | 
	 *                 (ownedRelationship_comp+=OwnedSubsetting ownedRelationship_comp+=OwnedSubsetting*) | 
	 *                 (ownedRelationship_comp+=OwnedRedefinition ownedRelationship_comp+=OwnedRedefinition*)
	 *             ) 
	 *             (ownedMembership_comp+=MultiplicityMember isOrdered?='ordered'?)?
	 *         )* 
	 *         (
	 *             ownedMembership_comp+=FeatureValue | 
	 *             (
	 *                 (ownedFeatureMembership_comp+=ActionUsageParameterMember ownedFeatureMembership_comp+=ActionUsageParameterMember*)? 
	 *                 ownedFeatureMembership_comp+=CalculationReturnParameterMember?
	 *             )
	 *         )? 
	 *         (
	 *             (
	 *                 documentation_comp+=OwnedDocumentation | 
	 *                 ownedMembership_comp+=NestedDefinitionMember | 
	 *                 ownedMembership_comp+=VariantUsageMember | 
	 *                 ownedFeatureMembership_comp+=NestedUsageMember | 
	 *                 ownedImport_comp+=PackageImport | 
	 *                 ownedFeatureMembership_comp+=SubjectMember | 
	 *                 ownedFeatureMembership_comp+=RequirementConstraintMember
	 *             )? 
	 *             (ownedFeatureMembership_comp+=EmptySuccessionMember? ownedFeatureMembership_comp+=IndividualUsageMember)?
	 *         )+
	 *     )
	 */
	protected void sequence_ActionUsageParameterList_CalculationReturnParameterPart_DefinitionBodyItem_Identification_MultiplicityPart_Redefines_Redefinitions_RequirementBodyItem_Subsets_Subsettings_TypedBy_Typings_UsagePrefix_ValuePart(ISerializationContext context, ViewpointUsage semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ObjectiveRequirementUsage returns RequirementUsage
	 *
	 * Constraint:
	 *     (
	 *         ((humanId=Name name=Name?) | name=Name)? 
	 *         (ownedMembership_comp+=MultiplicityMember (isOrdered?='ordered' | isNonunique?='nonunique')*)? 
	 *         (
	 *             (
	 *                 (ownedRelationship_comp+=OwnedFeatureTyping ownedRelationship_comp+=OwnedFeatureTyping*) | 
	 *                 (ownedRelationship_comp+=OwnedSubsetting ownedRelationship_comp+=OwnedSubsetting*) | 
	 *                 (ownedRelationship_comp+=OwnedRedefinition ownedRelationship_comp+=OwnedRedefinition*)
	 *             ) 
	 *             (ownedMembership_comp+=MultiplicityMember (isOrdered?='ordered' | isNonunique?='nonunique')*)?
	 *         )* 
	 *         (
	 *             ownedMembership_comp+=FeatureValue | 
	 *             (
	 *                 (ownedFeatureMembership_comp+=ActionUsageParameterMember ownedFeatureMembership_comp+=ActionUsageParameterMember*)? 
	 *                 ownedFeatureMembership_comp+=CalculationReturnParameterMember?
	 *             )
	 *         )? 
	 *         documentation_comp+=OwnedDocumentation? 
	 *         (
	 *             (
	 *                 ownedMembership_comp+=NestedDefinitionMember | 
	 *                 ownedMembership_comp+=VariantUsageMember | 
	 *                 ownedFeatureMembership_comp+=NestedUsageMember | 
	 *                 (ownedFeatureMembership_comp+=EmptySuccessionMember? ownedFeatureMembership_comp+=IndividualUsageMember) | 
	 *                 ownedImport_comp+=PackageImport | 
	 *                 ownedFeatureMembership_comp+=SubjectMember | 
	 *                 ownedFeatureMembership_comp+=RequirementConstraintMember
	 *             )? 
	 *             documentation_comp+=OwnedDocumentation?
	 *         )*
	 *     )
	 */
	protected void sequence_ActionUsageParameterList_CalculationReturnParameterPart_DefinitionBodyItem_Identification_MultiplicityPart_Redefines_Redefinitions_RequirementBodyItem_Subsets_Subsettings_TypedBy_Typings_ValuePart(ISerializationContext context, RequirementUsage semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     BehaviorUsageElement returns SatisfyRequirementUsage
	 *     VariantUsageElement returns SatisfyRequirementUsage
	 *     SatisfyRequirementUsage returns SatisfyRequirementUsage
	 *
	 * Constraint:
	 *     (
	 *         (isAbstract?='abstract' | isVariation?='variation')? 
	 *         ((humanId=Name name=Name?) | name=Name | ownedRelationship_comp+=OwnedSubsetting)? 
	 *         (ownedMembership_comp+=MultiplicityMember (isOrdered?='ordered' | isNonunique?='nonunique')*)? 
	 *         (
	 *             (
	 *                 (ownedRelationship_comp+=OwnedFeatureTyping ownedRelationship_comp+=OwnedFeatureTyping*) | 
	 *                 (ownedRelationship_comp+=OwnedSubsetting ownedRelationship_comp+=OwnedSubsetting*) | 
	 *                 (ownedRelationship_comp+=OwnedRedefinition ownedRelationship_comp+=OwnedRedefinition*)
	 *             ) 
	 *             (ownedMembership_comp+=MultiplicityMember (isOrdered?='ordered' | isNonunique?='nonunique')*)?
	 *         )* 
	 *         (
	 *             ownedMembership_comp+=FeatureValue | 
	 *             (ownedFeatureMembership_comp+=ActionUsageParameterMember ownedFeatureMembership_comp+=ActionUsageParameterMember*)
	 *         )? 
	 *         ownedMembership_comp+=SatisfactionConnectorMember? 
	 *         ownedFeatureMembership_comp+=TrueLiteralMember 
	 *         (
	 *             (
	 *                 documentation_comp+=OwnedDocumentation | 
	 *                 ownedMembership_comp+=NestedDefinitionMember | 
	 *                 ownedMembership_comp+=VariantUsageMember | 
	 *                 ownedFeatureMembership_comp+=NestedUsageMember | 
	 *                 ownedImport_comp+=PackageImport | 
	 *                 ownedFeatureMembership_comp+=SubjectMember | 
	 *                 ownedFeatureMembership_comp+=RequirementConstraintMember
	 *             )? 
	 *             (ownedFeatureMembership_comp+=EmptySuccessionMember? ownedFeatureMembership_comp+=IndividualUsageMember)?
	 *         )+
	 *     )
	 */
	protected void sequence_ActionUsageParameterList_DefinitionBodyItem_Identification_InvariantPart_MultiplicityPart_Redefines_Redefinitions_RequirementBodyItem_SatisfyRequirementUsage_Subsets_Subsettings_TypedBy_Typings_UsagePrefix_ValuePart(ISerializationContext context, SatisfyRequirementUsage semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     BehaviorUsageElement returns ExhibitStateUsage
	 *     VariantUsageElement returns ExhibitStateUsage
	 *     ExhibitStateUsage returns ExhibitStateUsage
	 *
	 * Constraint:
	 *     (
	 *         (isAbstract?='abstract' | isVariation?='variation')? 
	 *         ((humanId=Name name=Name?) | name=Name | ownedRelationship_comp+=OwnedSubsetting)? 
	 *         (ownedMembership_comp+=MultiplicityMember isOrdered?='ordered'? (isNonunique?='nonunique'? isOrdered?='ordered'?)*)? 
	 *         (
	 *             (
	 *                 (ownedRelationship_comp+=OwnedFeatureTyping ownedRelationship_comp+=OwnedFeatureTyping*) | 
	 *                 (ownedRelationship_comp+=OwnedSubsetting ownedRelationship_comp+=OwnedSubsetting*) | 
	 *                 (ownedRelationship_comp+=OwnedRedefinition ownedRelationship_comp+=OwnedRedefinition*)
	 *             ) 
	 *             (ownedMembership_comp+=MultiplicityMember isOrdered?='ordered'?)?
	 *         )* 
	 *         (
	 *             ownedMembership_comp+=FeatureValue | 
	 *             (ownedFeatureMembership_comp+=ActionUsageParameterMember ownedFeatureMembership_comp+=ActionUsageParameterMember*)
	 *         )? 
	 *         (ownedFeatureMembership_comp+=EntryActionMember ownedFeatureMembership_comp+=EntryTransitionMember*)? 
	 *         ownedFeatureMembership_comp+=DoActionMember? 
	 *         ownedFeatureMembership_comp+=ExitActionMember? 
	 *         (
	 *             (
	 *                 documentation_comp+=OwnedDocumentation | 
	 *                 ownedMembership_comp+=NestedDefinitionMember | 
	 *                 ownedMembership_comp+=VariantUsageMember | 
	 *                 ownedFeatureMembership_comp+=ParameterFlowUsageMember | 
	 *                 ownedFeatureMembership_comp+=StructureUsageMember | 
	 *                 ownedFeatureMembership_comp+=TransitionUsageMember | 
	 *                 ownedImport_comp+=PackageImport
	 *             )? 
	 *             (ownedFeatureMembership_comp+=BehaviorUsageMember ownedFeatureMembership_comp+=TargetTransitionUsageMember*)? 
	 *             (ownedFeatureMembership_comp+=EmptySuccessionMember? ownedFeatureMembership_comp+=IndividualUsageMember)?
	 *         )+
	 *     )
	 */
	protected void sequence_ActionUsageParameterList_ExhibitStateUsage_Identification_MultiplicityPart_Redefines_Redefinitions_StateBodyPart_StateDefBodyItem_Subsets_Subsettings_TypedBy_Typings_UsagePrefix_ValuePart(ISerializationContext context, ExhibitStateUsage semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     PerformedActionUsage returns PerformActionUsage
	 *
	 * Constraint:
	 *     (
	 *         ((humanId=Name name=Name?) | name=Name | ownedRelationship_comp+=OwnedSubsetting)? 
	 *         (ownedMembership_comp+=MultiplicityMember (isOrdered?='ordered' | isNonunique?='nonunique')*)? 
	 *         (
	 *             (
	 *                 (ownedRelationship_comp+=OwnedFeatureTyping ownedRelationship_comp+=OwnedFeatureTyping*) | 
	 *                 (ownedRelationship_comp+=OwnedSubsetting ownedRelationship_comp+=OwnedSubsetting*) | 
	 *                 (ownedRelationship_comp+=OwnedRedefinition ownedRelationship_comp+=OwnedRedefinition*)
	 *             ) 
	 *             (ownedMembership_comp+=MultiplicityMember (isOrdered?='ordered' | isNonunique?='nonunique')*)?
	 *         )* 
	 *         (
	 *             ownedMembership_comp+=FeatureValue | 
	 *             (ownedFeatureMembership_comp+=ActionUsageParameterMember ownedFeatureMembership_comp+=ActionUsageParameterMember*)
	 *         )?
	 *     )
	 */
	protected void sequence_ActionUsageParameterList_Identification_MultiplicityPart_PerformActionUsageDeclaration_PerformedActionUsage_Redefines_Redefinitions_Subsets_Subsettings_TypedBy_Typings_ValuePart(ISerializationContext context, PerformActionUsage semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     BehaviorUsageElement returns StateUsage
	 *     VariantUsageElement returns StateUsage
	 *     ConnectionEndElement returns StateUsage
	 *     StateRefUsage returns StateUsage
	 *
	 * Constraint:
	 *     (
	 *         (isAbstract?='abstract' | isVariation?='variation')? 
	 *         isComposite?=StateUsageKeyword? 
	 *         ((humanId=Name name=Name?) | name=Name)? 
	 *         (ownedMembership_comp+=MultiplicityMember isOrdered?='ordered'? (isNonunique?='nonunique'? isOrdered?='ordered'?)*)? 
	 *         (
	 *             (
	 *                 (ownedRelationship_comp+=OwnedFeatureTyping ownedRelationship_comp+=OwnedFeatureTyping*) | 
	 *                 (ownedRelationship_comp+=OwnedSubsetting ownedRelationship_comp+=OwnedSubsetting*) | 
	 *                 (ownedRelationship_comp+=OwnedRedefinition ownedRelationship_comp+=OwnedRedefinition*)
	 *             ) 
	 *             (ownedMembership_comp+=MultiplicityMember isOrdered?='ordered'?)?
	 *         )* 
	 *         (
	 *             ownedMembership_comp+=FeatureValue | 
	 *             (ownedFeatureMembership_comp+=ActionUsageParameterMember ownedFeatureMembership_comp+=ActionUsageParameterMember*)
	 *         )? 
	 *         (ownedFeatureMembership_comp+=EntryActionMember ownedFeatureMembership_comp+=EntryTransitionMember*)? 
	 *         ownedFeatureMembership_comp+=DoActionMember? 
	 *         ownedFeatureMembership_comp+=ExitActionMember? 
	 *         (
	 *             (
	 *                 documentation_comp+=OwnedDocumentation | 
	 *                 ownedMembership_comp+=NestedDefinitionMember | 
	 *                 ownedMembership_comp+=VariantUsageMember | 
	 *                 ownedFeatureMembership_comp+=ParameterFlowUsageMember | 
	 *                 ownedFeatureMembership_comp+=StructureUsageMember | 
	 *                 ownedFeatureMembership_comp+=TransitionUsageMember | 
	 *                 ownedImport_comp+=PackageImport
	 *             )? 
	 *             (ownedFeatureMembership_comp+=BehaviorUsageMember ownedFeatureMembership_comp+=TargetTransitionUsageMember*)? 
	 *             (ownedFeatureMembership_comp+=EmptySuccessionMember? ownedFeatureMembership_comp+=IndividualUsageMember)?
	 *         )+
	 *     )
	 */
	protected void sequence_ActionUsageParameterList_Identification_MultiplicityPart_Redefines_Redefinitions_StateBodyPart_StateDefBodyItem_StateRefUsage_Subsets_Subsettings_TypedBy_Typings_UsagePrefix_ValuePart(ISerializationContext context, StateUsage semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     UsageElement returns StateUsage
	 *     FeatureElement returns StateUsage
	 *     FlowUsageElement returns StateUsage
	 *     StateUsage returns StateUsage
	 *     StateFlowUsage returns StateUsage
	 *
	 * Constraint:
	 *     (
	 *         (isAbstract?='abstract' | isVariation?='variation')? 
	 *         ((humanId=Name name=Name?) | name=Name)? 
	 *         (ownedMembership_comp+=MultiplicityMember isOrdered?='ordered'? (isNonunique?='nonunique'? isOrdered?='ordered'?)*)? 
	 *         (
	 *             (
	 *                 (ownedRelationship_comp+=OwnedFeatureTyping ownedRelationship_comp+=OwnedFeatureTyping*) | 
	 *                 (ownedRelationship_comp+=OwnedSubsetting ownedRelationship_comp+=OwnedSubsetting*) | 
	 *                 (ownedRelationship_comp+=OwnedRedefinition ownedRelationship_comp+=OwnedRedefinition*)
	 *             ) 
	 *             (ownedMembership_comp+=MultiplicityMember isOrdered?='ordered'?)?
	 *         )* 
	 *         (
	 *             ownedMembership_comp+=FeatureValue | 
	 *             (ownedFeatureMembership_comp+=ActionUsageParameterMember ownedFeatureMembership_comp+=ActionUsageParameterMember*)
	 *         )? 
	 *         (ownedFeatureMembership_comp+=EntryActionMember ownedFeatureMembership_comp+=EntryTransitionMember*)? 
	 *         ownedFeatureMembership_comp+=DoActionMember? 
	 *         ownedFeatureMembership_comp+=ExitActionMember? 
	 *         (
	 *             (
	 *                 documentation_comp+=OwnedDocumentation | 
	 *                 ownedMembership_comp+=NestedDefinitionMember | 
	 *                 ownedMembership_comp+=VariantUsageMember | 
	 *                 ownedFeatureMembership_comp+=ParameterFlowUsageMember | 
	 *                 ownedFeatureMembership_comp+=StructureUsageMember | 
	 *                 ownedFeatureMembership_comp+=TransitionUsageMember | 
	 *                 ownedImport_comp+=PackageImport
	 *             )? 
	 *             (ownedFeatureMembership_comp+=BehaviorUsageMember ownedFeatureMembership_comp+=TargetTransitionUsageMember*)? 
	 *             (ownedFeatureMembership_comp+=EmptySuccessionMember? ownedFeatureMembership_comp+=IndividualUsageMember)?
	 *         )+
	 *     )
	 */
	protected void sequence_ActionUsageParameterList_Identification_MultiplicityPart_Redefines_Redefinitions_StateBodyPart_StateDefBodyItem_Subsets_Subsettings_TypedBy_Typings_UsagePrefix_ValuePart(ISerializationContext context, StateUsage semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ActionUsageParameterMember returns ParameterMembership
	 *
	 * Constraint:
	 *     (direction=FeatureDirection? ownedMemberParameter_comp=ActionUsageParameter)
	 */
	protected void sequence_ActionUsageParameterMember(ISerializationContext context, ParameterMembership semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ActionUsageParameter returns ReferenceUsage
	 *
	 * Constraint:
	 *     (
	 *         ((humanId=Name name=Name?) | name=Name)? 
	 *         (ownedMembership_comp+=MultiplicityMember isOrdered?='ordered'? (isNonunique?='nonunique'? isOrdered?='ordered'?)*)? 
	 *         (
	 *             (ownedRelationship_comp+=OwnedFeatureTyping | ownedRelationship_comp+=OwnedSubsetting | ownedRelationship_comp+=OwnedRedefinition) 
	 *             (ownedMembership_comp+=MultiplicityMember isOrdered?='ordered'?)?
	 *         )* 
	 *         (ownedMembership_comp+=FeatureValue | ownedMembership_comp+=SourceItemFlowMember)?
	 *     )
	 */
	protected void sequence_ActionUsageParameter_Identification_MultiplicityPart_Parameter_Redefines_Subsets_TypedBy_ValueOrFlowPart(ISerializationContext context, ReferenceUsage semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     SequenceElementList returns OperatorExpression
	 *
	 * Constraint:
	 *     (
	 *         (
	 *             operand_comp+=ConditionalExpression_OperatorExpression_1_0 
	 *             operator=ConditionalTestOperator 
	 *             operand_comp+=OwnedExpression 
	 *             operand_comp+=ConditionalExpression
	 *         ) | 
	 *         (operand_comp+=NullCoalescingExpression_OperatorExpression_1_0 operator=NullCoalescingOperator operand_comp+=ConditionalOrExpression) | 
	 *         (operand_comp+=ConditionalOrExpression_OperatorExpression_1_0 operator=ConditionalOrOperator operand_comp+=ConditionalAndExpression) | 
	 *         (operand_comp+=ConditionalAndExpression_OperatorExpression_1_0 operator=ConditionalAndOperator operand_comp+=OrExpression) | 
	 *         (operand_comp+=OrExpression_OperatorExpression_1_0 operator=OrOperator operand_comp+=XorExpression) | 
	 *         (operand_comp+=XorExpression_OperatorExpression_1_0 operator=XorOperator operand_comp+=AndExpression) | 
	 *         (operand_comp+=AndExpression_OperatorExpression_1_0 operator=AndOperator operand_comp+=EqualityExpression) | 
	 *         (operand_comp+=EqualityExpression_OperatorExpression_1_0 operator=EqualityOperator operand_comp+=ClassificationExpression) | 
	 *         (operand_comp+=ClassificationExpression_OperatorExpression_1_0 operator=ClassificationOperator ownedFeatureMembership_comp+=TypeReferenceMember) | 
	 *         (operand_comp+=RelationalExpression_OperatorExpression_1_0 operator=RelationalOperator operand_comp+=AdditiveExpression) | 
	 *         (operand_comp+=AdditiveExpression_OperatorExpression_1_0 operator=AdditiveOperator operand_comp+=MultiplicativeExpression) | 
	 *         (operand_comp+=MultiplicativeExpression_OperatorExpression_1_0 operator=MultiplicativeOperator operand_comp+=ExponentiationExpression) | 
	 *         (operand_comp+=ExponentiationExpression_OperatorExpression_1_0 operator=ExponentiationOperator operand_comp+=UnitsExpression) | 
	 *         (operand_comp+=UnitsExpression_OperatorExpression_1_0 operator='@' operand_comp+=OwnedExpression) | 
	 *         (operator=UnaryOperator operand_comp+=ExtentExpression) | 
	 *         (operator='all' ownedFeatureMembership_comp+=TypeReferenceMember) | 
	 *         (operand_comp+=SequenceExpression_OperatorExpression_1_0_0 operator='[' operand_comp+=OwnedExpression) | 
	 *         (operand_comp+=SequenceExpression_OperatorExpression_1_1_0 operator=Name ownedFeatureMembership_comp+=BodyExpressionMember+) | 
	 *         (operand_comp+=SequenceConstructionExpression_OperatorExpression_1_2_0_0 operator=',' operand_comp+=SequenceElementList) | 
	 *         (operand_comp+=SequenceConstructionExpression_OperatorExpression_1_2_1_0 operator='..' operand_comp+=OwnedExpression) | 
	 *         (operand_comp+=SequenceElementList_OperatorExpression_1_0 operator=',' operand_comp+=SequenceElementList) | 
	 *         (ownedFeatureMembership_comp+=TypeReferenceMember operator='allInstances')
	 *     )
	 */
	protected void sequence_AdditiveExpression_AndExpression_ClassificationExpression_ConditionalAndExpression_ConditionalExpression_ConditionalOrExpression_EqualityExpression_ExponentiationExpression_ExtentExpression_ExtentExpression_Deprecated_MultiplicativeExpression_NullCoalescingExpression_OrExpression_RelationalExpression_SequenceConstructionExpression_SequenceElementList_SequenceExpression_UnaryExpression_UnitsExpression_XorExpression(ISerializationContext context, OperatorExpression semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     OwnedExpression returns OperatorExpression
	 *     ConditionalExpression returns OperatorExpression
	 *     ConditionalExpression.OperatorExpression_1_0 returns OperatorExpression
	 *     NullCoalescingExpression returns OperatorExpression
	 *     NullCoalescingExpression.OperatorExpression_1_0 returns OperatorExpression
	 *     ConditionalOrExpression returns OperatorExpression
	 *     ConditionalOrExpression.OperatorExpression_1_0 returns OperatorExpression
	 *     ConditionalAndExpression returns OperatorExpression
	 *     ConditionalAndExpression.OperatorExpression_1_0 returns OperatorExpression
	 *     OrExpression returns OperatorExpression
	 *     OrExpression.OperatorExpression_1_0 returns OperatorExpression
	 *     XorExpression returns OperatorExpression
	 *     XorExpression.OperatorExpression_1_0 returns OperatorExpression
	 *     AndExpression returns OperatorExpression
	 *     AndExpression.OperatorExpression_1_0 returns OperatorExpression
	 *     EqualityExpression returns OperatorExpression
	 *     EqualityExpression.OperatorExpression_1_0 returns OperatorExpression
	 *     ClassificationExpression returns OperatorExpression
	 *     ClassificationExpression.OperatorExpression_1_0 returns OperatorExpression
	 *     RelationalExpression returns OperatorExpression
	 *     RelationalExpression.OperatorExpression_1_0 returns OperatorExpression
	 *     AdditiveExpression returns OperatorExpression
	 *     AdditiveExpression.OperatorExpression_1_0 returns OperatorExpression
	 *     MultiplicativeExpression returns OperatorExpression
	 *     MultiplicativeExpression.OperatorExpression_1_0 returns OperatorExpression
	 *     ExponentiationExpression returns OperatorExpression
	 *     ExponentiationExpression.OperatorExpression_1_0 returns OperatorExpression
	 *     UnitsExpression returns OperatorExpression
	 *     UnitsExpression.OperatorExpression_1_0 returns OperatorExpression
	 *     UnaryExpression returns OperatorExpression
	 *     ExtentExpression returns OperatorExpression
	 *     SequenceExpression returns OperatorExpression
	 *     SequenceExpression.OperatorExpression_1_0_0 returns OperatorExpression
	 *     SequenceExpression.OperatorExpression_1_1_0 returns OperatorExpression
	 *     SequenceConstructionExpression returns OperatorExpression
	 *     SequenceConstructionExpression.OperatorExpression_1_2_0_0 returns OperatorExpression
	 *     SequenceConstructionExpression.OperatorExpression_1_2_1_0 returns OperatorExpression
	 *     SequenceElementList.OperatorExpression_1_0 returns OperatorExpression
	 *     BaseExpression returns OperatorExpression
	 *
	 * Constraint:
	 *     (
	 *         (
	 *             operand_comp+=ConditionalExpression_OperatorExpression_1_0 
	 *             operator=ConditionalTestOperator 
	 *             operand_comp+=OwnedExpression 
	 *             operand_comp+=ConditionalExpression
	 *         ) | 
	 *         (operand_comp+=NullCoalescingExpression_OperatorExpression_1_0 operator=NullCoalescingOperator operand_comp+=ConditionalOrExpression) | 
	 *         (operand_comp+=ConditionalOrExpression_OperatorExpression_1_0 operator=ConditionalOrOperator operand_comp+=ConditionalAndExpression) | 
	 *         (operand_comp+=ConditionalAndExpression_OperatorExpression_1_0 operator=ConditionalAndOperator operand_comp+=OrExpression) | 
	 *         (operand_comp+=OrExpression_OperatorExpression_1_0 operator=OrOperator operand_comp+=XorExpression) | 
	 *         (operand_comp+=XorExpression_OperatorExpression_1_0 operator=XorOperator operand_comp+=AndExpression) | 
	 *         (operand_comp+=AndExpression_OperatorExpression_1_0 operator=AndOperator operand_comp+=EqualityExpression) | 
	 *         (operand_comp+=EqualityExpression_OperatorExpression_1_0 operator=EqualityOperator operand_comp+=ClassificationExpression) | 
	 *         (operand_comp+=ClassificationExpression_OperatorExpression_1_0 operator=ClassificationOperator ownedFeatureMembership_comp+=TypeReferenceMember) | 
	 *         (operand_comp+=RelationalExpression_OperatorExpression_1_0 operator=RelationalOperator operand_comp+=AdditiveExpression) | 
	 *         (operand_comp+=AdditiveExpression_OperatorExpression_1_0 operator=AdditiveOperator operand_comp+=MultiplicativeExpression) | 
	 *         (operand_comp+=MultiplicativeExpression_OperatorExpression_1_0 operator=MultiplicativeOperator operand_comp+=ExponentiationExpression) | 
	 *         (operand_comp+=ExponentiationExpression_OperatorExpression_1_0 operator=ExponentiationOperator operand_comp+=UnitsExpression) | 
	 *         (operand_comp+=UnitsExpression_OperatorExpression_1_0 operator='@' operand_comp+=OwnedExpression) | 
	 *         (operator=UnaryOperator operand_comp+=ExtentExpression) | 
	 *         (operator='all' ownedFeatureMembership_comp+=TypeReferenceMember) | 
	 *         (operand_comp+=SequenceExpression_OperatorExpression_1_0_0 operator='[' operand_comp+=OwnedExpression) | 
	 *         (operand_comp+=SequenceExpression_OperatorExpression_1_1_0 operator=Name ownedFeatureMembership_comp+=BodyExpressionMember+) | 
	 *         (operand_comp+=SequenceConstructionExpression_OperatorExpression_1_2_0_0 operator=',' operand_comp+=SequenceElementList) | 
	 *         (operand_comp+=SequenceConstructionExpression_OperatorExpression_1_2_1_0 operator='..' operand_comp+=OwnedExpression) | 
	 *         (ownedFeatureMembership_comp+=TypeReferenceMember operator='allInstances')
	 *     )
	 */
	protected void sequence_AdditiveExpression_AndExpression_ClassificationExpression_ConditionalAndExpression_ConditionalExpression_ConditionalOrExpression_EqualityExpression_ExponentiationExpression_ExtentExpression_ExtentExpression_Deprecated_MultiplicativeExpression_NullCoalescingExpression_OrExpression_RelationalExpression_SequenceConstructionExpression_SequenceExpression_UnaryExpression_UnitsExpression_XorExpression(ISerializationContext context, OperatorExpression semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Annotation returns Annotation
	 *
	 * Constraint:
	 *     annotatedElement=[Element|QualifiedName]
	 */
	protected void sequence_Annotation(ISerializationContext context, Annotation semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, SysMLPackage.Literals.ANNOTATION__ANNOTATED_ELEMENT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SysMLPackage.Literals.ANNOTATION__ANNOTATED_ELEMENT));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getAnnotationAccess().getAnnotatedElementElementQualifiedNameParserRuleCall_0_1(), semanticObject.eGet(SysMLPackage.Literals.ANNOTATION__ANNOTATED_ELEMENT, false));
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     BehaviorUsageMember returns FeatureMembership
	 *
	 * Constraint:
	 *     (ownedRelationship_comp+=PrefixDocumentation* visibility=VisibilityIndicator? ownedMemberFeature_comp=BehaviorUsageElement)
	 */
	protected void sequence_BehaviorUsageMember_DefinitionMemberPrefix(ISerializationContext context, FeatureMembership semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     NestedUsageMember returns FeatureMembership
	 *     ConnectionUsageMember returns FeatureMembership
	 *     InterfaceUsageMember returns FeatureMembership
	 *
	 * Constraint:
	 *     (
	 *         ownedRelationship_comp+=PrefixDocumentation* 
	 *         visibility=VisibilityIndicator? 
	 *         (
	 *             ownedMemberFeature_comp=StructureUsageElement | 
	 *             ownedMemberFeature_comp=BehaviorUsageElement | 
	 *             (direction=FeatureDirection ownedMemberFeature_comp=FlowUsageElement)
	 *         )
	 *     )
	 */
	protected void sequence_BehaviorUsageMember_DefinitionMemberPrefix_FlowUsageMember_StructureUsageMember(ISerializationContext context, FeatureMembership semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     DefinitionElement returns ConnectionUsage
	 *     VariantUsageElement returns ConnectionUsage
	 *     ConnectionUsage returns ConnectionUsage
	 *
	 * Constraint:
	 *     (
	 *         (isAbstract?='abstract' | isVariation?='variation')? 
	 *         ((humanId=Name name=Name?) | name=Name)? 
	 *         (ownedMembership_comp+=MultiplicityMember isOrdered?='ordered'? (isNonunique?='nonunique'? isOrdered?='ordered'?)*)? 
	 *         (
	 *             (
	 *                 (ownedRelationship_comp+=OwnedFeatureTyping ownedRelationship_comp+=OwnedFeatureTyping*) | 
	 *                 (ownedRelationship_comp+=OwnedSubsetting ownedRelationship_comp+=OwnedSubsetting*) | 
	 *                 (ownedRelationship_comp+=OwnedRedefinition ownedRelationship_comp+=OwnedRedefinition*)
	 *             ) 
	 *             (ownedMembership_comp+=MultiplicityMember isOrdered?='ordered'?)?
	 *         )* 
	 *         (
	 *             (ownedFeatureMembership_comp+=ConnectorEndMember ownedFeatureMembership_comp+=ConnectorEndMember) | 
	 *             (
	 *                 ownedFeatureMembership_comp+=ConnectorEndMember 
	 *                 ownedFeatureMembership_comp+=ConnectorEndMember 
	 *                 ownedFeatureMembership_comp+=ConnectorEndMember*
	 *             )
	 *         )? 
	 *         (
	 *             (
	 *                 documentation_comp+=OwnedDocumentation | 
	 *                 ownedMembership_comp+=NestedDefinitionMember | 
	 *                 ownedMembership_comp+=VariantUsageMember | 
	 *                 ownedFeatureMembership_comp+=ConnectionUsageMember | 
	 *                 ownedImport_comp+=PackageImport
	 *             )? 
	 *             (ownedFeatureMembership_comp+=EmptySuccessionMember? ownedFeatureMembership_comp+=IndividualUsageMember)?
	 *         )+
	 *     )
	 */
	protected void sequence_BinaryConnectorPart_ConnectionBody_Identification_MultiplicityPart_NaryConnectorPart_Redefines_Redefinitions_Subsets_Subsettings_TypedBy_Typings_UsagePrefix(ISerializationContext context, ConnectionUsage semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Connector returns ConnectionUsage
	 *
	 * Constraint:
	 *     (
	 *         (isAbstract?='abstract' | isVariation?='variation')? 
	 *         (
	 *             (ownedFeatureMembership_comp+=ConnectorEndMember ownedFeatureMembership_comp+=ConnectorEndMember) | 
	 *             (
	 *                 ownedFeatureMembership_comp+=ConnectorEndMember 
	 *                 ownedFeatureMembership_comp+=ConnectorEndMember 
	 *                 ownedFeatureMembership_comp+=ConnectorEndMember*
	 *             )
	 *         ) 
	 *         (
	 *             (
	 *                 documentation_comp+=OwnedDocumentation | 
	 *                 ownedMembership_comp+=NestedDefinitionMember | 
	 *                 ownedMembership_comp+=VariantUsageMember | 
	 *                 ownedFeatureMembership_comp+=ConnectionUsageMember | 
	 *                 ownedImport_comp+=PackageImport
	 *             )? 
	 *             (ownedFeatureMembership_comp+=EmptySuccessionMember? ownedFeatureMembership_comp+=IndividualUsageMember)?
	 *         )+
	 *     )
	 */
	protected void sequence_BinaryConnectorPart_ConnectionBody_NaryConnectorPart_UsagePrefix(ISerializationContext context, ConnectionUsage semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     UsageElement returns InterfaceUsage
	 *     FeatureElement returns InterfaceUsage
	 *     StructureUsageElement returns InterfaceUsage
	 *     VariantUsageElement returns InterfaceUsage
	 *     InterfaceUsage returns InterfaceUsage
	 *
	 * Constraint:
	 *     (
	 *         (isAbstract?='abstract' | isVariation?='variation')? 
	 *         ((humanId=Name name=Name?) | name=Name)? 
	 *         (ownedMembership_comp+=MultiplicityMember isOrdered?='ordered'? (isNonunique?='nonunique'? isOrdered?='ordered'?)*)? 
	 *         (
	 *             (
	 *                 (ownedRelationship_comp+=OwnedFeatureTyping ownedRelationship_comp+=OwnedFeatureTyping*) | 
	 *                 (ownedRelationship_comp+=OwnedSubsetting ownedRelationship_comp+=OwnedSubsetting*) | 
	 *                 (ownedRelationship_comp+=OwnedRedefinition ownedRelationship_comp+=OwnedRedefinition*)
	 *             ) 
	 *             (ownedMembership_comp+=MultiplicityMember isOrdered?='ordered'?)?
	 *         )* 
	 *         (
	 *             (ownedFeatureMembership_comp+=ConnectorEndMember ownedFeatureMembership_comp+=ConnectorEndMember) | 
	 *             (
	 *                 ownedFeatureMembership_comp+=ConnectorEndMember 
	 *                 ownedFeatureMembership_comp+=ConnectorEndMember 
	 *                 ownedFeatureMembership_comp+=ConnectorEndMember*
	 *             )
	 *         )? 
	 *         (
	 *             documentation_comp+=OwnedDocumentation | 
	 *             ownedMembership_comp+=NestedDefinitionMember | 
	 *             ownedMembership_comp+=VariantUsageMember | 
	 *             ownedFeatureMembership_comp+=InterfaceUsageMember | 
	 *             ownedImport_comp+=PackageImport
	 *         )*
	 *     )
	 */
	protected void sequence_BinaryConnectorPart_Identification_InterfaceDefBody_MultiplicityPart_NaryConnectorPart_Redefines_Redefinitions_Subsets_Subsettings_TypedBy_Typings_UsagePrefix(ISerializationContext context, InterfaceUsage semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     DefinitionElement returns BindingConnector
	 *     BindingConnector returns BindingConnector
	 *
	 * Constraint:
	 *     (
	 *         isAbstract?='abstract'? 
	 *         ((humanId=Name name=Name?) | name=Name)? 
	 *         (ownedMembership_comp+=MultiplicityMember (isOrdered?='ordered' | isNonunique?='nonunique')*)? 
	 *         (
	 *             (
	 *                 (ownedRelationship_comp+=OwnedFeatureTyping ownedRelationship_comp+=OwnedFeatureTyping*) | 
	 *                 (ownedRelationship_comp+=OwnedSubsetting ownedRelationship_comp+=OwnedSubsetting*) | 
	 *                 (ownedRelationship_comp+=OwnedRedefinition ownedRelationship_comp+=OwnedRedefinition*)
	 *             ) 
	 *             (ownedMembership_comp+=MultiplicityMember (isOrdered?='ordered' | isNonunique?='nonunique')*)?
	 *         )* 
	 *         ownedFeatureMembership_comp+=ConnectorEndMember 
	 *         ownedFeatureMembership_comp+=ConnectorEndMember 
	 *         (
	 *             documentation_comp+=OwnedDocumentation | 
	 *             ownedMembership_comp+=NonFeatureTypeMember | 
	 *             ownedFeatureMembership_comp+=FeatureTypeMember | 
	 *             ownedImport_comp+=PackageImport
	 *         )*
	 *     )
	 */
	protected void sequence_BindingConnector_BindingConnectorDeclaration_Identification_MultiplicityPart_Redefines_Redefinitions_Subsets_Subsettings_TypeBody_TypedBy_Typings(ISerializationContext context, BindingConnector semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     BodyExpressionMember returns FeatureMembership
	 *
	 * Constraint:
	 *     ownedMemberFeature_comp=BodyExpression
	 */
	protected void sequence_BodyExpressionMember(ISerializationContext context, FeatureMembership semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, SysMLPackage.Literals.FEATURE_MEMBERSHIP__OWNED_MEMBER_FEATURE_COMP) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SysMLPackage.Literals.FEATURE_MEMBERSHIP__OWNED_MEMBER_FEATURE_COMP));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getBodyExpressionMemberAccess().getOwnedMemberFeature_compBodyExpressionParserRuleCall_0(), semanticObject.getOwnedMemberFeature_comp());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     BodyExpression returns BlockExpression
	 *
	 * Constraint:
	 *     (
	 *         (
	 *             ownedFeatureMembership_comp+=BodyParameterMember 
	 *             ownedFeatureMembership_comp+=BodyParameterMember* 
	 *             ownedFeatureMembership_comp+=ResultExpressionMember
	 *         ) | 
	 *         ownedRelationship_comp+=ExpressionTyping
	 *     )
	 */
	protected void sequence_BodyExpression(ISerializationContext context, BlockExpression semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     BodyParameterMember returns ParameterMembership
	 *
	 * Constraint:
	 *     (memberName=Name ownedMemberParameter_comp=BodyParameter)
	 */
	protected void sequence_BodyParameterMember(ISerializationContext context, ParameterMembership semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, SysMLPackage.Literals.MEMBERSHIP__MEMBER_NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SysMLPackage.Literals.MEMBERSHIP__MEMBER_NAME));
			if (transientValues.isValueTransient(semanticObject, SysMLPackage.Literals.PARAMETER_MEMBERSHIP__OWNED_MEMBER_PARAMETER_COMP) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SysMLPackage.Literals.PARAMETER_MEMBERSHIP__OWNED_MEMBER_PARAMETER_COMP));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getBodyParameterMemberAccess().getMemberNameNameParserRuleCall_0_0(), semanticObject.getMemberName());
		feeder.accept(grammarAccess.getBodyParameterMemberAccess().getOwnedMemberParameter_compBodyParameterParserRuleCall_1_0(), semanticObject.getOwnedMemberParameter_comp());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     BodyParameter returns ReferenceUsage
	 *
	 * Constraint:
	 *     (
	 *         ownedRelationship_comp+=OwnedFeatureTyping? 
	 *         (
	 *             ownedMembership_comp+=MultiplicityMember 
	 *             (isOrdered?='ordered' | isNonunique?='nonunique')* 
	 *             (ownedRelationship_comp+=OwnedFeatureTyping? ownedMembership_comp+=MultiplicityMember (isOrdered?='ordered' | isNonunique?='nonunique')*)* 
	 *             ownedRelationship_comp+=OwnedFeatureTyping?
	 *         )?
	 *     )
	 */
	protected void sequence_BodyParameter_MultiplicityPart_TypedBy(ISerializationContext context, ReferenceUsage semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     CalculationReturnParameterMember returns ReturnParameterMembership
	 *
	 * Constraint:
	 *     ownedMemberParameter_comp=ActionUsageParameter
	 */
	protected void sequence_CalculationReturnParameterMember(ISerializationContext context, ReturnParameterMembership semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, SysMLPackage.Literals.PARAMETER_MEMBERSHIP__OWNED_MEMBER_PARAMETER_COMP) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SysMLPackage.Literals.PARAMETER_MEMBERSHIP__OWNED_MEMBER_PARAMETER_COMP));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getCalculationReturnParameterMemberAccess().getOwnedMemberParameter_compActionUsageParameterParserRuleCall_1_0(), semanticObject.getOwnedMemberParameter_comp());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Comment returns Comment
	 *     DefinitionElement returns Comment
	 *
	 * Constraint:
	 *     (
	 *         ((humanId=Name name=Name?) | name=Name)? 
	 *         ((ownedRelationship_comp+=Annotation ownedRelationship_comp+=Annotation*) | ownedRelationship_comp+=EmptyAnnotation) 
	 *         body=REGULAR_COMMENT
	 *     )
	 */
	protected void sequence_Comment_Identification(ISerializationContext context, Comment semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ConjugatedPortDefinitionMember returns Membership
	 *
	 * Constraint:
	 *     ownedMemberElement_comp=ConjugatedPortDefinition
	 */
	protected void sequence_ConjugatedPortDefinitionMember(ISerializationContext context, Membership semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, SysMLPackage.Literals.MEMBERSHIP__OWNED_MEMBER_ELEMENT_COMP) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SysMLPackage.Literals.MEMBERSHIP__OWNED_MEMBER_ELEMENT_COMP));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getConjugatedPortDefinitionMemberAccess().getOwnedMemberElement_compConjugatedPortDefinitionParserRuleCall_0(), semanticObject.getOwnedMemberElement_comp());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     ConjugatedPortDefinition returns ConjugatedPortDefinition
	 *
	 * Constraint:
	 *     ownedRelationship_comp+=PortConjugation
	 */
	protected void sequence_ConjugatedPortDefinition(ISerializationContext context, ConjugatedPortDefinition semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     PortTyping returns ConjugatedPortTyping
	 *     ConjugatedPortTyping returns ConjugatedPortTyping
	 *
	 * Constraint:
	 *     portDefinition=[PortDefinition|QualifiedName]
	 */
	protected void sequence_ConjugatedPortTyping(ISerializationContext context, ConjugatedPortTyping semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, SysMLPackage.Literals.CONJUGATED_PORT_TYPING__PORT_DEFINITION) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SysMLPackage.Literals.CONJUGATED_PORT_TYPING__PORT_DEFINITION));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getConjugatedPortTypingAccess().getPortDefinitionPortDefinitionQualifiedNameParserRuleCall_1_0_1(), semanticObject.eGet(SysMLPackage.Literals.CONJUGATED_PORT_TYPING__PORT_DEFINITION, false));
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     DefinitionElement returns ConnectionDefinition
	 *     ConnectionDefinition returns ConnectionDefinition
	 *
	 * Constraint:
	 *     (
	 *         (isAbstract?='abstract' | isVariation?='variation')? 
	 *         ((humanId=Name name=Name?) | name=Name)? 
	 *         (ownedRelationship_comp+=OwnedSuperclassing ownedRelationship_comp+=OwnedSuperclassing*)? 
	 *         (
	 *             (
	 *                 documentation_comp+=OwnedDocumentation | 
	 *                 ownedMembership_comp+=NestedDefinitionMember | 
	 *                 ownedMembership_comp+=VariantUsageMember | 
	 *                 ownedFeatureMembership_comp+=ConnectionUsageMember | 
	 *                 ownedImport_comp+=PackageImport
	 *             )? 
	 *             (ownedFeatureMembership_comp+=EmptySuccessionMember? ownedFeatureMembership_comp+=IndividualUsageMember)?
	 *         )+
	 *     )
	 */
	protected void sequence_ConnectionBody_DefinitionPrefix_Identification_SuperclassingPart(ISerializationContext context, ConnectionDefinition semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ConnectionUsageMember returns EndFeatureMembership
	 *
	 * Constraint:
	 *     (ownedRelationship_comp+=PrefixDocumentation? visibility=VisibilityIndicator? ownedMemberFeature_comp=ConnectionEndElement)
	 */
	protected void sequence_ConnectionEndMember_DefinitionMemberPrefix(ISerializationContext context, EndFeatureMembership semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	// This method is commented out because it has the same signature as another method in this class.
	// This is probably a bug in Xtext's serializer, please report it here: 
	// https://bugs.eclipse.org/bugs/enter_bug.cgi?product=TMF
	//
	// Contexts:
	//     ConnectionEndMember returns EndFeatureMembership
	//
	// Constraint:
	//     (ownedRelationship_comp+=PrefixDocumentation* visibility=VisibilityIndicator? ownedMemberFeature_comp=ConnectionEndElement)
	//
	// protected void sequence_ConnectionEndMember_DefinitionMemberPrefix(ISerializationContext context, EndFeatureMembership semanticObject) { }
	
	/**
	 * Contexts:
	 *     ConnectorEndMember returns EndFeatureMembership
	 *
	 * Constraint:
	 *     (memberName=Name? ownedMemberFeature_comp=ConnectorEnd)
	 */
	protected void sequence_ConnectorEndMember(ISerializationContext context, EndFeatureMembership semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ConnectorEnd returns Feature
	 *
	 * Constraint:
	 *     (ownedRelationship_comp+=OwnedSubsetting ownedMembership_comp+=MultiplicityMember?)
	 */
	protected void sequence_ConnectorEnd(ISerializationContext context, Feature semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ActionNode returns DecisionNode
	 *     ControlNode returns DecisionNode
	 *     DecisionNode returns DecisionNode
	 *
	 * Constraint:
	 *     (
	 *         (isAbstract?='abstract' | isVariation?='variation')? 
	 *         isComposite?='decide' 
	 *         ((humanId=Name name=Name?) | name=Name)? 
	 *         (ownedMembership_comp+=MultiplicityMember (isOrdered?='ordered' | isNonunique?='nonunique')*)? 
	 *         (
	 *             (
	 *                 (ownedRelationship_comp+=OwnedFeatureTyping ownedRelationship_comp+=OwnedFeatureTyping*) | 
	 *                 (ownedRelationship_comp+=OwnedSubsetting ownedRelationship_comp+=OwnedSubsetting*) | 
	 *                 (ownedRelationship_comp+=OwnedRedefinition ownedRelationship_comp+=OwnedRedefinition*)
	 *             ) 
	 *             (ownedMembership_comp+=MultiplicityMember (isOrdered?='ordered' | isNonunique?='nonunique')*)?
	 *         )*
	 *     )
	 */
	protected void sequence_DecisionNode_Identification_MultiplicityPart_Redefines_Redefinitions_Subsets_Subsettings_TypedBy_Typings_UsagePrefix(ISerializationContext context, DecisionNode semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ActionTargetSuccession returns TransitionUsage
	 *
	 * Constraint:
	 *     (
	 *         (ownedFeatureMembership_comp+=GuardExpressionMember ownedFeatureMembership_comp+=TransitionSuccessionMember) | 
	 *         ownedFeatureMembership_comp+=TransitionSuccessionMember
	 *     )
	 */
	protected void sequence_DefaultTargetSuccession_GuardedTargetSuccession(ISerializationContext context, TransitionUsage semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     DefaultTargetSuccession returns TransitionUsage
	 *
	 * Constraint:
	 *     ownedFeatureMembership_comp+=TransitionSuccessionMember
	 */
	protected void sequence_DefaultTargetSuccession(ISerializationContext context, TransitionUsage semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     DefinitionElement returns RequirementDefinition
	 *     RequirementDefinition returns RequirementDefinition
	 *
	 * Constraint:
	 *     (
	 *         (isAbstract?='abstract' | isVariation?='variation')? 
	 *         ((humanId=Name name=Name?) | name=Name)? 
	 *         (ownedRelationship_comp+=OwnedSuperclassing ownedRelationship_comp+=OwnedSuperclassing*)? 
	 *         (ownedFeatureMembership_comp+=ParameterMember ownedFeatureMembership_comp+=ParameterMember*)? 
	 *         ownedFeatureMembership_comp+=EmptyReturnParameterMember 
	 *         (
	 *             (
	 *                 documentation_comp+=OwnedDocumentation | 
	 *                 ownedMembership_comp+=NestedDefinitionMember | 
	 *                 ownedMembership_comp+=VariantUsageMember | 
	 *                 ownedFeatureMembership_comp+=NestedUsageMember | 
	 *                 ownedImport_comp+=PackageImport | 
	 *                 ownedFeatureMembership_comp+=SubjectMember | 
	 *                 ownedFeatureMembership_comp+=RequirementConstraintMember
	 *             )? 
	 *             (ownedFeatureMembership_comp+=EmptySuccessionMember? ownedFeatureMembership_comp+=IndividualUsageMember)?
	 *         )+
	 *     )
	 */
	protected void sequence_DefinitionBodyItem_DefinitionPrefix_EmptyReturnParameterPart_Identification_ParameterList_RequirementBodyItem_SuperclassingPart(ISerializationContext context, RequirementDefinition semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     DefinitionElement returns ViewpointDefinition
	 *     ViewpointDefinition returns ViewpointDefinition
	 *
	 * Constraint:
	 *     (
	 *         (isAbstract?='abstract' | isVariation?='variation')? 
	 *         ((humanId=Name name=Name?) | name=Name)? 
	 *         (ownedRelationship_comp+=OwnedSuperclassing ownedRelationship_comp+=OwnedSuperclassing*)? 
	 *         (ownedFeatureMembership_comp+=ParameterMember ownedFeatureMembership_comp+=ParameterMember*)? 
	 *         ownedFeatureMembership_comp+=EmptyReturnParameterMember 
	 *         (
	 *             (
	 *                 documentation_comp+=OwnedDocumentation | 
	 *                 ownedMembership_comp+=NestedDefinitionMember | 
	 *                 ownedMembership_comp+=VariantUsageMember | 
	 *                 ownedFeatureMembership_comp+=NestedUsageMember | 
	 *                 ownedImport_comp+=PackageImport | 
	 *                 ownedFeatureMembership_comp+=SubjectMember | 
	 *                 ownedFeatureMembership_comp+=RequirementConstraintMember
	 *             )? 
	 *             (ownedFeatureMembership_comp+=EmptySuccessionMember? ownedFeatureMembership_comp+=IndividualUsageMember)?
	 *         )+
	 *     )
	 */
	protected void sequence_DefinitionBodyItem_DefinitionPrefix_EmptyReturnParameterPart_Identification_ParameterList_RequirementBodyItem_SuperclassingPart(ISerializationContext context, ViewpointDefinition semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     DefinitionElement returns IndividualDefinition
	 *     IndividualDefinition returns IndividualDefinition
	 *
	 * Constraint:
	 *     (
	 *         (isAbstract?='abstract' | isVariation?='variation')? 
	 *         ((humanId=Name name=Name?) | name=Name)? 
	 *         (ownedRelationship_comp+=OwnedSuperclassing ownedRelationship_comp+=OwnedSuperclassing*)? 
	 *         (
	 *             (
	 *                 documentation_comp+=OwnedDocumentation | 
	 *                 ownedMembership_comp+=NestedDefinitionMember | 
	 *                 ownedMembership_comp+=VariantUsageMember | 
	 *                 ownedFeatureMembership_comp+=NestedUsageMember | 
	 *                 ownedImport_comp+=PackageImport
	 *             )? 
	 *             (ownedFeatureMembership_comp+=EmptySuccessionMember? ownedFeatureMembership_comp+=IndividualUsageMember)?
	 *         )+ 
	 *         ownedMembership_comp+=LifeClassMembership
	 *     )
	 */
	protected void sequence_DefinitionBodyItem_DefinitionPrefix_Identification_IndividualDefinition_SuperclassingPart(ISerializationContext context, IndividualDefinition semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     DefinitionElement returns PortDefinition
	 *     PortDefinition returns PortDefinition
	 *
	 * Constraint:
	 *     (
	 *         (isAbstract?='abstract' | isVariation?='variation')? 
	 *         ((humanId=Name name=Name?) | name=Name)? 
	 *         (ownedRelationship_comp+=OwnedSuperclassing ownedRelationship_comp+=OwnedSuperclassing*)? 
	 *         (
	 *             (
	 *                 documentation_comp+=OwnedDocumentation | 
	 *                 ownedMembership_comp+=NestedDefinitionMember | 
	 *                 ownedMembership_comp+=VariantUsageMember | 
	 *                 ownedFeatureMembership_comp+=NestedUsageMember | 
	 *                 ownedImport_comp+=PackageImport
	 *             )? 
	 *             (ownedFeatureMembership_comp+=EmptySuccessionMember? ownedFeatureMembership_comp+=IndividualUsageMember)?
	 *         )+ 
	 *         ownedMembership_comp+=ConjugatedPortDefinitionMember
	 *     )
	 */
	protected void sequence_DefinitionBodyItem_DefinitionPrefix_Identification_PortDefinition_SuperclassingPart(ISerializationContext context, PortDefinition semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     DefinitionElement returns AttributeDefinition
	 *     AttributeDefinition returns AttributeDefinition
	 *
	 * Constraint:
	 *     (
	 *         (isAbstract?='abstract' | isVariation?='variation')? 
	 *         ((humanId=Name name=Name?) | name=Name)? 
	 *         (ownedRelationship_comp+=OwnedSuperclassing ownedRelationship_comp+=OwnedSuperclassing*)? 
	 *         (
	 *             (
	 *                 documentation_comp+=OwnedDocumentation | 
	 *                 ownedMembership_comp+=NestedDefinitionMember | 
	 *                 ownedMembership_comp+=VariantUsageMember | 
	 *                 ownedFeatureMembership_comp+=NestedUsageMember | 
	 *                 ownedImport_comp+=PackageImport
	 *             )? 
	 *             (ownedFeatureMembership_comp+=EmptySuccessionMember? ownedFeatureMembership_comp+=IndividualUsageMember)?
	 *         )+
	 *     )
	 */
	protected void sequence_DefinitionBodyItem_DefinitionPrefix_Identification_SuperclassingPart(ISerializationContext context, AttributeDefinition semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     DefinitionElement returns ItemDefinition
	 *     ItemDefinition returns ItemDefinition
	 *
	 * Constraint:
	 *     (
	 *         (isAbstract?='abstract' | isVariation?='variation')? 
	 *         ((humanId=Name name=Name?) | name=Name)? 
	 *         (ownedRelationship_comp+=OwnedSuperclassing ownedRelationship_comp+=OwnedSuperclassing*)? 
	 *         (
	 *             (
	 *                 documentation_comp+=OwnedDocumentation | 
	 *                 ownedMembership_comp+=NestedDefinitionMember | 
	 *                 ownedMembership_comp+=VariantUsageMember | 
	 *                 ownedFeatureMembership_comp+=NestedUsageMember | 
	 *                 ownedImport_comp+=PackageImport
	 *             )? 
	 *             (ownedFeatureMembership_comp+=EmptySuccessionMember? ownedFeatureMembership_comp+=IndividualUsageMember)?
	 *         )+
	 *     )
	 */
	protected void sequence_DefinitionBodyItem_DefinitionPrefix_Identification_SuperclassingPart(ISerializationContext context, ItemDefinition semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     DefinitionElement returns PartDefinition
	 *     PartDefinition returns PartDefinition
	 *
	 * Constraint:
	 *     (
	 *         (isAbstract?='abstract' | isVariation?='variation')? 
	 *         ((humanId=Name name=Name?) | name=Name)? 
	 *         (ownedRelationship_comp+=OwnedSuperclassing ownedRelationship_comp+=OwnedSuperclassing*)? 
	 *         (
	 *             (
	 *                 documentation_comp+=OwnedDocumentation | 
	 *                 ownedMembership_comp+=NestedDefinitionMember | 
	 *                 ownedMembership_comp+=VariantUsageMember | 
	 *                 ownedFeatureMembership_comp+=NestedUsageMember | 
	 *                 ownedImport_comp+=PackageImport
	 *             )? 
	 *             (ownedFeatureMembership_comp+=EmptySuccessionMember? ownedFeatureMembership_comp+=IndividualUsageMember)?
	 *         )+
	 *     )
	 */
	protected void sequence_DefinitionBodyItem_DefinitionPrefix_Identification_SuperclassingPart(ISerializationContext context, PartDefinition semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     DefinitionElement returns RenderingDefinition
	 *     RenderingDefinition returns RenderingDefinition
	 *
	 * Constraint:
	 *     (
	 *         (isAbstract?='abstract' | isVariation?='variation')? 
	 *         ((humanId=Name name=Name?) | name=Name)? 
	 *         (ownedRelationship_comp+=OwnedSuperclassing ownedRelationship_comp+=OwnedSuperclassing*)? 
	 *         (
	 *             (
	 *                 documentation_comp+=OwnedDocumentation | 
	 *                 ownedMembership_comp+=NestedDefinitionMember | 
	 *                 ownedMembership_comp+=VariantUsageMember | 
	 *                 ownedFeatureMembership_comp+=NestedUsageMember | 
	 *                 ownedImport_comp+=PackageImport
	 *             )? 
	 *             (ownedFeatureMembership_comp+=EmptySuccessionMember? ownedFeatureMembership_comp+=IndividualUsageMember)?
	 *         )+
	 *     )
	 */
	protected void sequence_DefinitionBodyItem_DefinitionPrefix_Identification_SuperclassingPart(ISerializationContext context, RenderingDefinition semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     DefinitionElement returns ViewDefinition
	 *     ViewDefinition returns ViewDefinition
	 *
	 * Constraint:
	 *     (
	 *         (isAbstract?='abstract' | isVariation?='variation')? 
	 *         ((humanId=Name name=Name?) | name=Name)? 
	 *         (ownedRelationship_comp+=OwnedSuperclassing ownedRelationship_comp+=OwnedSuperclassing*)? 
	 *         (
	 *             (
	 *                 documentation_comp+=OwnedDocumentation | 
	 *                 ownedMembership_comp+=NestedDefinitionMember | 
	 *                 ownedMembership_comp+=VariantUsageMember | 
	 *                 ownedFeatureMembership_comp+=NestedUsageMember | 
	 *                 ownedImport_comp+=PackageImport
	 *             )? 
	 *             (ownedFeatureMembership_comp+=EmptySuccessionMember? ownedFeatureMembership_comp+=IndividualUsageMember)?
	 *         )+
	 *     )
	 */
	protected void sequence_DefinitionBodyItem_DefinitionPrefix_Identification_SuperclassingPart(ISerializationContext context, ViewDefinition semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     IndividualUsageElement returns IndividualUsage
	 *     VariantUsageElement returns IndividualUsage
	 *
	 * Constraint:
	 *     (
	 *         (isAbstract?='abstract' | isVariation?='variation')? 
	 *         (isComposite?=IndividualUsageKeyword | isComposite?=TimeSliceKeyword | isComposite?=SnapshotKeyword)? 
	 *         ((humanId=Name name=Name?) | name=Name)? 
	 *         (ownedMembership_comp+=MultiplicityMember (isOrdered?='ordered' | isNonunique?='nonunique')*)? 
	 *         (
	 *             (
	 *                 (ownedRelationship_comp+=OwnedFeatureTyping ownedRelationship_comp+=OwnedFeatureTyping*) | 
	 *                 (ownedRelationship_comp+=OwnedSubsetting ownedRelationship_comp+=OwnedSubsetting*) | 
	 *                 (ownedRelationship_comp+=OwnedRedefinition ownedRelationship_comp+=OwnedRedefinition*)
	 *             ) 
	 *             (ownedMembership_comp+=MultiplicityMember (isOrdered?='ordered' | isNonunique?='nonunique')*)?
	 *         )* 
	 *         (ownedMembership_comp+=FeatureValue | ownedMembership_comp+=SourceItemFlowMember)? 
	 *         ownedMembership_comp+=VariantUsageMember? 
	 *         (
	 *             (
	 *                 documentation_comp+=OwnedDocumentation | 
	 *                 ownedMembership_comp+=NestedDefinitionMember | 
	 *                 ownedFeatureMembership_comp+=NestedUsageMember | 
	 *                 (ownedFeatureMembership_comp+=EmptySuccessionMember? ownedFeatureMembership_comp+=IndividualUsageMember) | 
	 *                 ownedImport_comp+=PackageImport
	 *             )? 
	 *             ownedMembership_comp+=VariantUsageMember?
	 *         )* 
	 *         (ownedFeatureMembership_comp+=TimeSliceFeatureMember | ownedFeatureMembership_comp+=SnapshotFeatureMember)?
	 *     )
	 */
	protected void sequence_DefinitionBodyItem_Identification_IndividualRefUsage_MultiplicityPart_Redefines_Redefinitions_SnapshotRefUsage_Subsets_Subsettings_TimeSliceRefUsage_TypedBy_Typings_UsagePrefix_ValueOrFlowPart(ISerializationContext context, IndividualUsage semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     IndividualRefUsage returns IndividualUsage
	 *
	 * Constraint:
	 *     (
	 *         (isAbstract?='abstract' | isVariation?='variation')? 
	 *         isComposite?=IndividualUsageKeyword? 
	 *         ((humanId=Name name=Name?) | name=Name)? 
	 *         (ownedMembership_comp+=MultiplicityMember (isOrdered?='ordered' | isNonunique?='nonunique')*)? 
	 *         (
	 *             (
	 *                 (ownedRelationship_comp+=OwnedFeatureTyping ownedRelationship_comp+=OwnedFeatureTyping*) | 
	 *                 (ownedRelationship_comp+=OwnedSubsetting ownedRelationship_comp+=OwnedSubsetting*) | 
	 *                 (ownedRelationship_comp+=OwnedRedefinition ownedRelationship_comp+=OwnedRedefinition*)
	 *             ) 
	 *             (ownedMembership_comp+=MultiplicityMember (isOrdered?='ordered' | isNonunique?='nonunique')*)?
	 *         )* 
	 *         (ownedMembership_comp+=FeatureValue | ownedMembership_comp+=SourceItemFlowMember)? 
	 *         documentation_comp+=OwnedDocumentation? 
	 *         (
	 *             (
	 *                 ownedMembership_comp+=NestedDefinitionMember | 
	 *                 ownedMembership_comp+=VariantUsageMember | 
	 *                 ownedFeatureMembership_comp+=NestedUsageMember | 
	 *                 (ownedFeatureMembership_comp+=EmptySuccessionMember? ownedFeatureMembership_comp+=IndividualUsageMember) | 
	 *                 ownedImport_comp+=PackageImport
	 *             )? 
	 *             documentation_comp+=OwnedDocumentation?
	 *         )*
	 *     )
	 */
	protected void sequence_DefinitionBodyItem_Identification_IndividualRefUsage_MultiplicityPart_Redefines_Redefinitions_Subsets_Subsettings_TypedBy_Typings_UsagePrefix_ValueOrFlowPart(ISerializationContext context, IndividualUsage semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     StructureUsageElement returns ItemUsage
	 *     VariantUsageElement returns ItemUsage
	 *     ItemRefUsage returns ItemUsage
	 *     ConnectionEndElement returns ItemUsage
	 *
	 * Constraint:
	 *     (
	 *         (isAbstract?='abstract' | isVariation?='variation')? 
	 *         isComposite?=ItemUsageKeyword? 
	 *         ((humanId=Name name=Name?) | name=Name)? 
	 *         (ownedMembership_comp+=MultiplicityMember (isOrdered?='ordered' | isNonunique?='nonunique')*)? 
	 *         (
	 *             (
	 *                 (ownedRelationship_comp+=OwnedFeatureTyping ownedRelationship_comp+=OwnedFeatureTyping*) | 
	 *                 (ownedRelationship_comp+=OwnedSubsetting ownedRelationship_comp+=OwnedSubsetting*) | 
	 *                 (ownedRelationship_comp+=OwnedRedefinition ownedRelationship_comp+=OwnedRedefinition*)
	 *             ) 
	 *             (ownedMembership_comp+=MultiplicityMember (isOrdered?='ordered' | isNonunique?='nonunique')*)?
	 *         )* 
	 *         (ownedMembership_comp+=FeatureValue | ownedMembership_comp+=SourceItemFlowMember)? 
	 *         ownedMembership_comp+=VariantUsageMember? 
	 *         (
	 *             (
	 *                 documentation_comp+=OwnedDocumentation | 
	 *                 ownedMembership_comp+=NestedDefinitionMember | 
	 *                 ownedFeatureMembership_comp+=NestedUsageMember | 
	 *                 (ownedFeatureMembership_comp+=EmptySuccessionMember? ownedFeatureMembership_comp+=IndividualUsageMember) | 
	 *                 ownedImport_comp+=PackageImport
	 *             )? 
	 *             ownedMembership_comp+=VariantUsageMember?
	 *         )*
	 *     )
	 */
	protected void sequence_DefinitionBodyItem_Identification_ItemRefUsage_MultiplicityPart_Redefines_Redefinitions_Subsets_Subsettings_TypedBy_Typings_UsagePrefix_ValueOrFlowPart(ISerializationContext context, ItemUsage semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     StructureUsageElement returns PartUsage
	 *     VariantUsageElement returns PartUsage
	 *     PartRefUsage returns PartUsage
	 *     ConnectionEndElement returns PartUsage
	 *
	 * Constraint:
	 *     (
	 *         (isAbstract?='abstract' | isVariation?='variation')? 
	 *         isComposite?=PartUsageKeyword? 
	 *         ((humanId=Name name=Name?) | name=Name)? 
	 *         (ownedMembership_comp+=MultiplicityMember (isOrdered?='ordered' | isNonunique?='nonunique')*)? 
	 *         (
	 *             (
	 *                 (ownedRelationship_comp+=OwnedFeatureTyping ownedRelationship_comp+=OwnedFeatureTyping*) | 
	 *                 (ownedRelationship_comp+=OwnedSubsetting ownedRelationship_comp+=OwnedSubsetting*) | 
	 *                 (ownedRelationship_comp+=OwnedRedefinition ownedRelationship_comp+=OwnedRedefinition*)
	 *             ) 
	 *             (ownedMembership_comp+=MultiplicityMember (isOrdered?='ordered' | isNonunique?='nonunique')*)?
	 *         )* 
	 *         (ownedMembership_comp+=FeatureValue | ownedMembership_comp+=SourceItemFlowMember)? 
	 *         ownedMembership_comp+=VariantUsageMember? 
	 *         (
	 *             (
	 *                 documentation_comp+=OwnedDocumentation | 
	 *                 ownedMembership_comp+=NestedDefinitionMember | 
	 *                 ownedFeatureMembership_comp+=NestedUsageMember | 
	 *                 (ownedFeatureMembership_comp+=EmptySuccessionMember? ownedFeatureMembership_comp+=IndividualUsageMember) | 
	 *                 ownedImport_comp+=PackageImport
	 *             )? 
	 *             ownedMembership_comp+=VariantUsageMember?
	 *         )*
	 *     )
	 */
	protected void sequence_DefinitionBodyItem_Identification_MultiplicityPart_PartRefUsage_Redefines_Redefinitions_Subsets_Subsettings_TypedBy_Typings_UsagePrefix_ValueOrFlowPart(ISerializationContext context, PartUsage semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     UsageElement returns PortUsage
	 *     FeatureElement returns PortUsage
	 *     StructureUsageElement returns PortUsage
	 *     ConnectionEndElement returns PortUsage
	 *
	 * Constraint:
	 *     (
	 *         (isAbstract?='abstract' | isVariation?='variation')? 
	 *         (
	 *             (
	 *                 (
	 *                     (((humanId=Name name=Name?) | name=Name) (ownedMembership_comp+=MultiplicityMember isOrdered?='ordered'? isNonunique?='nonunique'?)) | 
	 *                     (ownedMembership_comp+=MultiplicityMember isOrdered?='ordered'? isNonunique?='nonunique'?)
	 *                 )? 
	 *                 (
	 *                     (
	 *                         (ownedRelationship_comp+=OwnedSubsetting ownedRelationship_comp+=OwnedSubsetting?) | 
	 *                         (ownedRelationship_comp+=OwnedRedefinition ownedRelationship_comp+=OwnedRedefinition*) | 
	 *                         (ownedRelationship_comp+=PortTyping ownedRelationship_comp+=PortTyping*)
	 *                     ) 
	 *                     (ownedMembership_comp+=MultiplicityMember isOrdered?='ordered'? isNonunique?='nonunique'?)
	 *                 )+
	 *             ) | 
	 *             (
	 *                 (
	 *                     (ownedRelationship_comp+=OwnedSubsetting ownedRelationship_comp+=OwnedSubsetting?) | 
	 *                     (ownedRelationship_comp+=OwnedRedefinition ownedRelationship_comp+=OwnedRedefinition*) | 
	 *                     (ownedRelationship_comp+=PortTyping ownedRelationship_comp+=PortTyping*)
	 *                 ) 
	 *                 (ownedMembership_comp+=MultiplicityMember isOrdered?='ordered'? isNonunique?='nonunique'?)
	 *             )+
	 *         )? 
	 *         (ownedMembership_comp+=FeatureValue | ownedMembership_comp+=SourceItemFlowMember)? 
	 *         (
	 *             (
	 *                 documentation_comp+=OwnedDocumentation | 
	 *                 ownedMembership_comp+=NestedDefinitionMember | 
	 *                 ownedMembership_comp+=VariantUsageMember | 
	 *                 ownedFeatureMembership_comp+=NestedUsageMember | 
	 *                 ownedImport_comp+=PackageImport
	 *             )? 
	 *             (ownedFeatureMembership_comp+=EmptySuccessionMember? ownedFeatureMembership_comp+=IndividualUsageMember)?
	 *         )+
	 *     )
	 */
	protected void sequence_DefinitionBodyItem_Identification_MultiplicityPart_PortTypings_Redefines_Redefinitions_Subsets_Subsettings_UsagePrefix_ValueOrFlowPart(ISerializationContext context, PortUsage semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	// This method is commented out because it has the same signature as another method in this class.
	// This is probably a bug in Xtext's serializer, please report it here: 
	// https://bugs.eclipse.org/bugs/enter_bug.cgi?product=TMF
	//
	// Contexts:
	//     VariantUsageElement returns PortUsage
	//
	// Constraint:
	//     (
	//         (isAbstract?='abstract' | isVariation?='variation')? 
	//         (
	//             (
	//                 (
	//                     (((humanId=Name name=Name?) | name=Name) (ownedMembership_comp+=MultiplicityMember isOrdered?='ordered'? isNonunique?='nonunique'?)) | 
	//                     (ownedMembership_comp+=MultiplicityMember isOrdered?='ordered'? isNonunique?='nonunique'?)
	//                 )? 
	//                 (
	//                     (
	//                         (ownedRelationship_comp+=OwnedSubsetting ownedRelationship_comp+=OwnedSubsetting?) | 
	//                         (ownedRelationship_comp+=OwnedRedefinition ownedRelationship_comp+=OwnedRedefinition?) | 
	//                         (ownedRelationship_comp+=PortTyping ownedRelationship_comp+=PortTyping*)
	//                     ) 
	//                     (ownedMembership_comp+=MultiplicityMember isOrdered?='ordered'? isNonunique?='nonunique'?)
	//                 )+
	//             ) | 
	//             (
	//                 (
	//                     (ownedRelationship_comp+=OwnedSubsetting ownedRelationship_comp+=OwnedSubsetting?) | 
	//                     (ownedRelationship_comp+=OwnedRedefinition ownedRelationship_comp+=OwnedRedefinition?) | 
	//                     (ownedRelationship_comp+=PortTyping ownedRelationship_comp+=PortTyping*)
	//                 ) 
	//                 (ownedMembership_comp+=MultiplicityMember isOrdered?='ordered'? isNonunique?='nonunique'?)
	//             )+
	//         )? 
	//         (ownedMembership_comp+=FeatureValue | ownedMembership_comp+=SourceItemFlowMember)? 
	//         (
	//             (
	//                 documentation_comp+=OwnedDocumentation | 
	//                 ownedMembership_comp+=NestedDefinitionMember | 
	//                 ownedMembership_comp+=VariantUsageMember | 
	//                 ownedFeatureMembership_comp+=NestedUsageMember | 
	//                 ownedImport_comp+=PackageImport
	//             )? 
	//             (ownedFeatureMembership_comp+=EmptySuccessionMember? ownedFeatureMembership_comp+=IndividualUsageMember)?
	//         )+
	//     )
	//
	// protected void sequence_DefinitionBodyItem_Identification_MultiplicityPart_PortTypings_Redefines_Redefinitions_Subsets_Subsettings_UsagePrefix_ValueOrFlowPart(ISerializationContext context, PortUsage semanticObject) { }
	
	// This method is commented out because it has the same signature as another method in this class.
	// This is probably a bug in Xtext's serializer, please report it here: 
	// https://bugs.eclipse.org/bugs/enter_bug.cgi?product=TMF
	//
	// Contexts:
	//     PortUsage returns PortUsage
	//     PortEndUsage returns PortUsage
	//
	// Constraint:
	//     (
	//         (isAbstract?='abstract' | isVariation?='variation')? 
	//         (
	//             (
	//                 (
	//                     (humanId=Name name=Name?) | 
	//                     (((humanId=Name name=Name?) | name=Name)? ownedMembership_comp+=MultiplicityMember (isOrdered?='ordered' | isNonunique?='nonunique')*) | 
	//                     name=Name
	//                 )? 
	//                 (
	//                     (
	//                         (ownedRelationship_comp+=OwnedSubsetting ownedRelationship_comp+=OwnedSubsetting*) | 
	//                         (ownedRelationship_comp+=OwnedRedefinition ownedRelationship_comp+=OwnedRedefinition*) | 
	//                         (ownedRelationship_comp+=PortTyping ownedRelationship_comp+=PortTyping*)
	//                     ) 
	//                     (ownedMembership_comp+=MultiplicityMember (isOrdered?='ordered' | isNonunique?='nonunique')*)?
	//                 )+
	//             ) | 
	//             (humanId=Name name=Name?) | 
	//             (((humanId=Name name=Name?) | name=Name)? ownedMembership_comp+=MultiplicityMember (isOrdered?='ordered' | isNonunique?='nonunique')*) | 
	//             name=Name
	//         )? 
	//         (ownedMembership_comp+=FeatureValue | ownedMembership_comp+=SourceItemFlowMember)? 
	//         documentation_comp+=OwnedDocumentation? 
	//         (
	//             (
	//                 ownedMembership_comp+=NestedDefinitionMember | 
	//                 ownedMembership_comp+=VariantUsageMember | 
	//                 ownedFeatureMembership_comp+=NestedUsageMember | 
	//                 (ownedFeatureMembership_comp+=EmptySuccessionMember? ownedFeatureMembership_comp+=IndividualUsageMember) | 
	//                 ownedImport_comp+=PackageImport
	//             )? 
	//             documentation_comp+=OwnedDocumentation?
	//         )*
	//     )
	//
	// protected void sequence_DefinitionBodyItem_Identification_MultiplicityPart_PortTypings_Redefines_Redefinitions_Subsets_Subsettings_UsagePrefix_ValueOrFlowPart(ISerializationContext context, PortUsage semanticObject) { }
	
	/**
	 * Contexts:
	 *     ReferenceVariantUsage returns ReferenceUsage
	 *     VariantUsageElement returns ReferenceUsage
	 *
	 * Constraint:
	 *     (
	 *         (
	 *             (
	 *                 (isAbstract?='abstract' | isVariation?='variation')? 
	 *                 ((humanId=Name name=Name?) | name=Name)? 
	 *                 (ownedMembership_comp+=MultiplicityMember isOrdered?='ordered'? (isNonunique?='nonunique'? isOrdered?='ordered'?)*)? 
	 *                 (ownedMembership_comp+=FeatureValue | ownedMembership_comp+=SourceItemFlowMember)?
	 *             ) | 
	 *             (
	 *                 (
	 *                     (
	 *                         (isAbstract?='abstract' | isVariation?='variation')? 
	 *                         ((humanId=Name name=Name?) | name=Name)? 
	 *                         (ownedMembership_comp+=MultiplicityMember isOrdered?='ordered'? (isNonunique?='nonunique'? isOrdered?='ordered'?)*)?
	 *                     ) | 
	 *                     ownedRelationship_comp+=OwnedSubsetting
	 *                 ) 
	 *                 (
	 *                     (
	 *                         (ownedRelationship_comp+=OwnedFeatureTyping ownedRelationship_comp+=OwnedFeatureTyping*) | 
	 *                         (ownedRelationship_comp+=OwnedSubsetting ownedRelationship_comp+=OwnedSubsetting*) | 
	 *                         (ownedRelationship_comp+=OwnedRedefinition ownedRelationship_comp+=OwnedRedefinition*)
	 *                     ) 
	 *                     (ownedMembership_comp+=MultiplicityMember isOrdered?='ordered'?)?
	 *                 )+ 
	 *                 (ownedMembership_comp+=FeatureValue | ownedMembership_comp+=SourceItemFlowMember)?
	 *             ) | 
	 *             ownedRelationship_comp+=OwnedSubsetting
	 *         )? 
	 *         (
	 *             (
	 *                 documentation_comp+=OwnedDocumentation | 
	 *                 ownedMembership_comp+=NestedDefinitionMember | 
	 *                 ownedMembership_comp+=VariantUsageMember | 
	 *                 ownedFeatureMembership_comp+=NestedUsageMember | 
	 *                 ownedImport_comp+=PackageImport
	 *             )? 
	 *             (ownedFeatureMembership_comp+=EmptySuccessionMember? ownedFeatureMembership_comp+=IndividualUsageMember)?
	 *         )+
	 *     )
	 */
	protected void sequence_DefinitionBodyItem_Identification_MultiplicityPart_Redefines_Redefinitions_ReferenceVariantUsage_Subsets_Subsettings_TypedBy_Typings_UsagePrefix_ValueOrFlowPart(ISerializationContext context, ReferenceUsage semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     StructureUsageElement returns RenderingUsage
	 *     RenderingRefUsage returns RenderingUsage
	 *
	 * Constraint:
	 *     (
	 *         (isAbstract?='abstract' | isVariation?='variation')? 
	 *         isComposite?=RenderingUsageKeyword? 
	 *         ((humanId=Name name=Name?) | name=Name)? 
	 *         (ownedMembership_comp+=MultiplicityMember (isOrdered?='ordered' | isNonunique?='nonunique')*)? 
	 *         (
	 *             (
	 *                 (ownedRelationship_comp+=OwnedFeatureTyping ownedRelationship_comp+=OwnedFeatureTyping*) | 
	 *                 (ownedRelationship_comp+=OwnedSubsetting ownedRelationship_comp+=OwnedSubsetting*) | 
	 *                 (ownedRelationship_comp+=OwnedRedefinition ownedRelationship_comp+=OwnedRedefinition*)
	 *             ) 
	 *             (ownedMembership_comp+=MultiplicityMember (isOrdered?='ordered' | isNonunique?='nonunique')*)?
	 *         )* 
	 *         (ownedMembership_comp+=FeatureValue | ownedMembership_comp+=SourceItemFlowMember)? 
	 *         ownedMembership_comp+=VariantUsageMember? 
	 *         (
	 *             (
	 *                 documentation_comp+=OwnedDocumentation | 
	 *                 ownedMembership_comp+=NestedDefinitionMember | 
	 *                 ownedFeatureMembership_comp+=NestedUsageMember | 
	 *                 (ownedFeatureMembership_comp+=EmptySuccessionMember? ownedFeatureMembership_comp+=IndividualUsageMember) | 
	 *                 ownedImport_comp+=PackageImport
	 *             )? 
	 *             ownedMembership_comp+=VariantUsageMember?
	 *         )*
	 *     )
	 */
	protected void sequence_DefinitionBodyItem_Identification_MultiplicityPart_Redefines_Redefinitions_RenderingRefUsage_Subsets_Subsettings_TypedBy_Typings_UsagePrefix_ValueOrFlowPart(ISerializationContext context, RenderingUsage semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     SnapshotRefUsage returns IndividualUsage
	 *
	 * Constraint:
	 *     (
	 *         (isAbstract?='abstract' | isVariation?='variation')? 
	 *         isComposite?=SnapshotKeyword? 
	 *         ((humanId=Name name=Name?) | name=Name)? 
	 *         (ownedMembership_comp+=MultiplicityMember (isOrdered?='ordered' | isNonunique?='nonunique')*)? 
	 *         (
	 *             (
	 *                 (ownedRelationship_comp+=OwnedFeatureTyping ownedRelationship_comp+=OwnedFeatureTyping*) | 
	 *                 (ownedRelationship_comp+=OwnedSubsetting ownedRelationship_comp+=OwnedSubsetting*) | 
	 *                 (ownedRelationship_comp+=OwnedRedefinition ownedRelationship_comp+=OwnedRedefinition*)
	 *             ) 
	 *             (ownedMembership_comp+=MultiplicityMember (isOrdered?='ordered' | isNonunique?='nonunique')*)?
	 *         )* 
	 *         (ownedMembership_comp+=FeatureValue | ownedMembership_comp+=SourceItemFlowMember)? 
	 *         documentation_comp+=OwnedDocumentation? 
	 *         (
	 *             (
	 *                 ownedMembership_comp+=NestedDefinitionMember | 
	 *                 ownedMembership_comp+=VariantUsageMember | 
	 *                 ownedFeatureMembership_comp+=NestedUsageMember | 
	 *                 (ownedFeatureMembership_comp+=EmptySuccessionMember? ownedFeatureMembership_comp+=IndividualUsageMember) | 
	 *                 ownedImport_comp+=PackageImport
	 *             )? 
	 *             documentation_comp+=OwnedDocumentation?
	 *         )* 
	 *         ownedFeatureMembership_comp+=SnapshotFeatureMember
	 *     )
	 */
	protected void sequence_DefinitionBodyItem_Identification_MultiplicityPart_Redefines_Redefinitions_SnapshotRefUsage_Subsets_Subsettings_TypedBy_Typings_UsagePrefix_ValueOrFlowPart(ISerializationContext context, IndividualUsage semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     UsageElement returns IndividualUsage
	 *     FeatureElement returns IndividualUsage
	 *
	 * Constraint:
	 *     (
	 *         (isAbstract?='abstract' | isVariation?='variation')? 
	 *         ((humanId=Name name=Name?) | name=Name)? 
	 *         (ownedMembership_comp+=MultiplicityMember (isOrdered?='ordered' | isNonunique?='nonunique')*)? 
	 *         (
	 *             (
	 *                 (ownedRelationship_comp+=OwnedFeatureTyping ownedRelationship_comp+=OwnedFeatureTyping*) | 
	 *                 (ownedRelationship_comp+=OwnedSubsetting ownedRelationship_comp+=OwnedSubsetting*) | 
	 *                 (ownedRelationship_comp+=OwnedRedefinition ownedRelationship_comp+=OwnedRedefinition*)
	 *             ) 
	 *             (ownedMembership_comp+=MultiplicityMember (isOrdered?='ordered' | isNonunique?='nonunique')*)?
	 *         )* 
	 *         (ownedMembership_comp+=FeatureValue | ownedMembership_comp+=SourceItemFlowMember)? 
	 *         ownedMembership_comp+=VariantUsageMember? 
	 *         (
	 *             (
	 *                 documentation_comp+=OwnedDocumentation | 
	 *                 ownedMembership_comp+=NestedDefinitionMember | 
	 *                 ownedFeatureMembership_comp+=NestedUsageMember | 
	 *                 (ownedFeatureMembership_comp+=EmptySuccessionMember? ownedFeatureMembership_comp+=IndividualUsageMember) | 
	 *                 ownedImport_comp+=PackageImport
	 *             )? 
	 *             ownedMembership_comp+=VariantUsageMember?
	 *         )* 
	 *         (ownedFeatureMembership_comp+=TimeSliceFeatureMember | ownedFeatureMembership_comp+=SnapshotFeatureMember)?
	 *     )
	 */
	protected void sequence_DefinitionBodyItem_Identification_MultiplicityPart_Redefines_Redefinitions_SnapshotUsage_Subsets_Subsettings_TimeSliceUsage_TypedBy_Typings_UsagePrefix_ValueOrFlowPart(ISerializationContext context, IndividualUsage semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     SnapshotUsage returns IndividualUsage
	 *
	 * Constraint:
	 *     (
	 *         (isAbstract?='abstract' | isVariation?='variation')? 
	 *         ((humanId=Name name=Name?) | name=Name)? 
	 *         (ownedMembership_comp+=MultiplicityMember (isOrdered?='ordered' | isNonunique?='nonunique')*)? 
	 *         (
	 *             (
	 *                 (ownedRelationship_comp+=OwnedFeatureTyping ownedRelationship_comp+=OwnedFeatureTyping*) | 
	 *                 (ownedRelationship_comp+=OwnedSubsetting ownedRelationship_comp+=OwnedSubsetting*) | 
	 *                 (ownedRelationship_comp+=OwnedRedefinition ownedRelationship_comp+=OwnedRedefinition*)
	 *             ) 
	 *             (ownedMembership_comp+=MultiplicityMember (isOrdered?='ordered' | isNonunique?='nonunique')*)?
	 *         )* 
	 *         (ownedMembership_comp+=FeatureValue | ownedMembership_comp+=SourceItemFlowMember)? 
	 *         documentation_comp+=OwnedDocumentation? 
	 *         (
	 *             (
	 *                 ownedMembership_comp+=NestedDefinitionMember | 
	 *                 ownedMembership_comp+=VariantUsageMember | 
	 *                 ownedFeatureMembership_comp+=NestedUsageMember | 
	 *                 (ownedFeatureMembership_comp+=EmptySuccessionMember? ownedFeatureMembership_comp+=IndividualUsageMember) | 
	 *                 ownedImport_comp+=PackageImport
	 *             )? 
	 *             documentation_comp+=OwnedDocumentation?
	 *         )* 
	 *         ownedFeatureMembership_comp+=SnapshotFeatureMember
	 *     )
	 */
	protected void sequence_DefinitionBodyItem_Identification_MultiplicityPart_Redefines_Redefinitions_SnapshotUsage_Subsets_Subsettings_TypedBy_Typings_UsagePrefix_ValueOrFlowPart(ISerializationContext context, IndividualUsage semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     TimeSliceRefUsage returns IndividualUsage
	 *
	 * Constraint:
	 *     (
	 *         (isAbstract?='abstract' | isVariation?='variation')? 
	 *         isComposite?=TimeSliceKeyword? 
	 *         ((humanId=Name name=Name?) | name=Name)? 
	 *         (ownedMembership_comp+=MultiplicityMember (isOrdered?='ordered' | isNonunique?='nonunique')*)? 
	 *         (
	 *             (
	 *                 (ownedRelationship_comp+=OwnedFeatureTyping ownedRelationship_comp+=OwnedFeatureTyping*) | 
	 *                 (ownedRelationship_comp+=OwnedSubsetting ownedRelationship_comp+=OwnedSubsetting*) | 
	 *                 (ownedRelationship_comp+=OwnedRedefinition ownedRelationship_comp+=OwnedRedefinition*)
	 *             ) 
	 *             (ownedMembership_comp+=MultiplicityMember (isOrdered?='ordered' | isNonunique?='nonunique')*)?
	 *         )* 
	 *         (ownedMembership_comp+=FeatureValue | ownedMembership_comp+=SourceItemFlowMember)? 
	 *         documentation_comp+=OwnedDocumentation? 
	 *         (
	 *             (
	 *                 ownedMembership_comp+=NestedDefinitionMember | 
	 *                 ownedMembership_comp+=VariantUsageMember | 
	 *                 ownedFeatureMembership_comp+=NestedUsageMember | 
	 *                 (ownedFeatureMembership_comp+=EmptySuccessionMember? ownedFeatureMembership_comp+=IndividualUsageMember) | 
	 *                 ownedImport_comp+=PackageImport
	 *             )? 
	 *             documentation_comp+=OwnedDocumentation?
	 *         )* 
	 *         ownedFeatureMembership_comp+=TimeSliceFeatureMember
	 *     )
	 */
	protected void sequence_DefinitionBodyItem_Identification_MultiplicityPart_Redefines_Redefinitions_Subsets_Subsettings_TimeSliceRefUsage_TypedBy_Typings_UsagePrefix_ValueOrFlowPart(ISerializationContext context, IndividualUsage semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     TimeSliceUsage returns IndividualUsage
	 *
	 * Constraint:
	 *     (
	 *         (isAbstract?='abstract' | isVariation?='variation')? 
	 *         ((humanId=Name name=Name?) | name=Name)? 
	 *         (ownedMembership_comp+=MultiplicityMember (isOrdered?='ordered' | isNonunique?='nonunique')*)? 
	 *         (
	 *             (
	 *                 (ownedRelationship_comp+=OwnedFeatureTyping ownedRelationship_comp+=OwnedFeatureTyping*) | 
	 *                 (ownedRelationship_comp+=OwnedSubsetting ownedRelationship_comp+=OwnedSubsetting*) | 
	 *                 (ownedRelationship_comp+=OwnedRedefinition ownedRelationship_comp+=OwnedRedefinition*)
	 *             ) 
	 *             (ownedMembership_comp+=MultiplicityMember (isOrdered?='ordered' | isNonunique?='nonunique')*)?
	 *         )* 
	 *         (ownedMembership_comp+=FeatureValue | ownedMembership_comp+=SourceItemFlowMember)? 
	 *         documentation_comp+=OwnedDocumentation? 
	 *         (
	 *             (
	 *                 ownedMembership_comp+=NestedDefinitionMember | 
	 *                 ownedMembership_comp+=VariantUsageMember | 
	 *                 ownedFeatureMembership_comp+=NestedUsageMember | 
	 *                 (ownedFeatureMembership_comp+=EmptySuccessionMember? ownedFeatureMembership_comp+=IndividualUsageMember) | 
	 *                 ownedImport_comp+=PackageImport
	 *             )? 
	 *             documentation_comp+=OwnedDocumentation?
	 *         )* 
	 *         ownedFeatureMembership_comp+=TimeSliceFeatureMember
	 *     )
	 */
	protected void sequence_DefinitionBodyItem_Identification_MultiplicityPart_Redefines_Redefinitions_Subsets_Subsettings_TimeSliceUsage_TypedBy_Typings_UsagePrefix_ValueOrFlowPart(ISerializationContext context, IndividualUsage semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     UsageElement returns AttributeUsage
	 *     FeatureElement returns AttributeUsage
	 *     StructureUsageElement returns AttributeUsage
	 *     VariantUsageElement returns AttributeUsage
	 *     FlowUsageElement returns AttributeUsage
	 *     AttributeUsage returns AttributeUsage
	 *     AttributeVariantUsage returns AttributeUsage
	 *
	 * Constraint:
	 *     (
	 *         (isAbstract?='abstract' | isVariation?='variation')? 
	 *         ((humanId=Name name=Name?) | name=Name)? 
	 *         (ownedMembership_comp+=MultiplicityMember (isOrdered?='ordered' | isNonunique?='nonunique')*)? 
	 *         (
	 *             (
	 *                 (ownedRelationship_comp+=OwnedFeatureTyping ownedRelationship_comp+=OwnedFeatureTyping*) | 
	 *                 (ownedRelationship_comp+=OwnedSubsetting ownedRelationship_comp+=OwnedSubsetting*) | 
	 *                 (ownedRelationship_comp+=OwnedRedefinition ownedRelationship_comp+=OwnedRedefinition*)
	 *             ) 
	 *             (ownedMembership_comp+=MultiplicityMember (isOrdered?='ordered' | isNonunique?='nonunique')*)?
	 *         )* 
	 *         (ownedMembership_comp+=FeatureValue | ownedMembership_comp+=SourceItemFlowMember)? 
	 *         ownedMembership_comp+=VariantUsageMember? 
	 *         (
	 *             (
	 *                 documentation_comp+=OwnedDocumentation | 
	 *                 ownedMembership_comp+=NestedDefinitionMember | 
	 *                 ownedFeatureMembership_comp+=NestedUsageMember | 
	 *                 (ownedFeatureMembership_comp+=EmptySuccessionMember? ownedFeatureMembership_comp+=IndividualUsageMember) | 
	 *                 ownedImport_comp+=PackageImport
	 *             )? 
	 *             ownedMembership_comp+=VariantUsageMember?
	 *         )*
	 *     )
	 */
	protected void sequence_DefinitionBodyItem_Identification_MultiplicityPart_Redefines_Redefinitions_Subsets_Subsettings_TypedBy_Typings_UsagePrefix_ValueOrFlowPart(ISerializationContext context, AttributeUsage semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     IndividualUsage returns IndividualUsage
	 *
	 * Constraint:
	 *     (
	 *         (isAbstract?='abstract' | isVariation?='variation')? 
	 *         ((humanId=Name name=Name?) | name=Name)? 
	 *         (ownedMembership_comp+=MultiplicityMember (isOrdered?='ordered' | isNonunique?='nonunique')*)? 
	 *         (
	 *             (
	 *                 (ownedRelationship_comp+=OwnedFeatureTyping ownedRelationship_comp+=OwnedFeatureTyping*) | 
	 *                 (ownedRelationship_comp+=OwnedSubsetting ownedRelationship_comp+=OwnedSubsetting*) | 
	 *                 (ownedRelationship_comp+=OwnedRedefinition ownedRelationship_comp+=OwnedRedefinition*)
	 *             ) 
	 *             (ownedMembership_comp+=MultiplicityMember (isOrdered?='ordered' | isNonunique?='nonunique')*)?
	 *         )* 
	 *         (ownedMembership_comp+=FeatureValue | ownedMembership_comp+=SourceItemFlowMember)? 
	 *         ownedMembership_comp+=VariantUsageMember? 
	 *         (
	 *             (
	 *                 documentation_comp+=OwnedDocumentation | 
	 *                 ownedMembership_comp+=NestedDefinitionMember | 
	 *                 ownedFeatureMembership_comp+=NestedUsageMember | 
	 *                 (ownedFeatureMembership_comp+=EmptySuccessionMember? ownedFeatureMembership_comp+=IndividualUsageMember) | 
	 *                 ownedImport_comp+=PackageImport
	 *             )? 
	 *             ownedMembership_comp+=VariantUsageMember?
	 *         )*
	 *     )
	 */
	protected void sequence_DefinitionBodyItem_Identification_MultiplicityPart_Redefines_Redefinitions_Subsets_Subsettings_TypedBy_Typings_UsagePrefix_ValueOrFlowPart(ISerializationContext context, IndividualUsage semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     UsageElement returns ItemUsage
	 *     FeatureElement returns ItemUsage
	 *     FlowUsageElement returns ItemUsage
	 *     ItemUsage returns ItemUsage
	 *     ItemFlowUsage returns ItemUsage
	 *
	 * Constraint:
	 *     (
	 *         (isAbstract?='abstract' | isVariation?='variation')? 
	 *         ((humanId=Name name=Name?) | name=Name)? 
	 *         (ownedMembership_comp+=MultiplicityMember (isOrdered?='ordered' | isNonunique?='nonunique')*)? 
	 *         (
	 *             (
	 *                 (ownedRelationship_comp+=OwnedFeatureTyping ownedRelationship_comp+=OwnedFeatureTyping*) | 
	 *                 (ownedRelationship_comp+=OwnedSubsetting ownedRelationship_comp+=OwnedSubsetting*) | 
	 *                 (ownedRelationship_comp+=OwnedRedefinition ownedRelationship_comp+=OwnedRedefinition*)
	 *             ) 
	 *             (ownedMembership_comp+=MultiplicityMember (isOrdered?='ordered' | isNonunique?='nonunique')*)?
	 *         )* 
	 *         (ownedMembership_comp+=FeatureValue | ownedMembership_comp+=SourceItemFlowMember)? 
	 *         ownedMembership_comp+=VariantUsageMember? 
	 *         (
	 *             (
	 *                 documentation_comp+=OwnedDocumentation | 
	 *                 ownedMembership_comp+=NestedDefinitionMember | 
	 *                 ownedFeatureMembership_comp+=NestedUsageMember | 
	 *                 (ownedFeatureMembership_comp+=EmptySuccessionMember? ownedFeatureMembership_comp+=IndividualUsageMember) | 
	 *                 ownedImport_comp+=PackageImport
	 *             )? 
	 *             ownedMembership_comp+=VariantUsageMember?
	 *         )*
	 *     )
	 */
	protected void sequence_DefinitionBodyItem_Identification_MultiplicityPart_Redefines_Redefinitions_Subsets_Subsettings_TypedBy_Typings_UsagePrefix_ValueOrFlowPart(ISerializationContext context, ItemUsage semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     UsageElement returns PartUsage
	 *     FeatureElement returns PartUsage
	 *     FlowUsageElement returns PartUsage
	 *     PartUsage returns PartUsage
	 *     PartFlowUsage returns PartUsage
	 *
	 * Constraint:
	 *     (
	 *         (isAbstract?='abstract' | isVariation?='variation')? 
	 *         ((humanId=Name name=Name?) | name=Name)? 
	 *         (ownedMembership_comp+=MultiplicityMember (isOrdered?='ordered' | isNonunique?='nonunique')*)? 
	 *         (
	 *             (
	 *                 (ownedRelationship_comp+=OwnedFeatureTyping ownedRelationship_comp+=OwnedFeatureTyping*) | 
	 *                 (ownedRelationship_comp+=OwnedSubsetting ownedRelationship_comp+=OwnedSubsetting*) | 
	 *                 (ownedRelationship_comp+=OwnedRedefinition ownedRelationship_comp+=OwnedRedefinition*)
	 *             ) 
	 *             (ownedMembership_comp+=MultiplicityMember (isOrdered?='ordered' | isNonunique?='nonunique')*)?
	 *         )* 
	 *         (ownedMembership_comp+=FeatureValue | ownedMembership_comp+=SourceItemFlowMember)? 
	 *         ownedMembership_comp+=VariantUsageMember? 
	 *         (
	 *             (
	 *                 documentation_comp+=OwnedDocumentation | 
	 *                 ownedMembership_comp+=NestedDefinitionMember | 
	 *                 ownedFeatureMembership_comp+=NestedUsageMember | 
	 *                 (ownedFeatureMembership_comp+=EmptySuccessionMember? ownedFeatureMembership_comp+=IndividualUsageMember) | 
	 *                 ownedImport_comp+=PackageImport
	 *             )? 
	 *             ownedMembership_comp+=VariantUsageMember?
	 *         )*
	 *     )
	 */
	protected void sequence_DefinitionBodyItem_Identification_MultiplicityPart_Redefines_Redefinitions_Subsets_Subsettings_TypedBy_Typings_UsagePrefix_ValueOrFlowPart(ISerializationContext context, PartUsage semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ReferenceUsage returns ReferenceUsage
	 *     ReferenceEndUsage returns ReferenceUsage
	 *     StructureUsageElement returns ReferenceUsage
	 *     FlowUsageElement returns ReferenceUsage
	 *     ConnectionEndElement returns ReferenceUsage
	 *
	 * Constraint:
	 *     (
	 *         (isAbstract?='abstract' | isVariation?='variation')? 
	 *         ((humanId=Name name=Name?) | name=Name)? 
	 *         (ownedMembership_comp+=MultiplicityMember (isOrdered?='ordered' | isNonunique?='nonunique')*)? 
	 *         (
	 *             (
	 *                 (ownedRelationship_comp+=OwnedFeatureTyping ownedRelationship_comp+=OwnedFeatureTyping*) | 
	 *                 (ownedRelationship_comp+=OwnedSubsetting ownedRelationship_comp+=OwnedSubsetting*) | 
	 *                 (ownedRelationship_comp+=OwnedRedefinition ownedRelationship_comp+=OwnedRedefinition*)
	 *             ) 
	 *             (ownedMembership_comp+=MultiplicityMember (isOrdered?='ordered' | isNonunique?='nonunique')*)?
	 *         )* 
	 *         (ownedMembership_comp+=FeatureValue | ownedMembership_comp+=SourceItemFlowMember)? 
	 *         ownedMembership_comp+=VariantUsageMember? 
	 *         (
	 *             (
	 *                 documentation_comp+=OwnedDocumentation | 
	 *                 ownedMembership_comp+=NestedDefinitionMember | 
	 *                 ownedFeatureMembership_comp+=NestedUsageMember | 
	 *                 (ownedFeatureMembership_comp+=EmptySuccessionMember? ownedFeatureMembership_comp+=IndividualUsageMember) | 
	 *                 ownedImport_comp+=PackageImport
	 *             )? 
	 *             ownedMembership_comp+=VariantUsageMember?
	 *         )*
	 *     )
	 */
	protected void sequence_DefinitionBodyItem_Identification_MultiplicityPart_Redefines_Redefinitions_Subsets_Subsettings_TypedBy_Typings_UsagePrefix_ValueOrFlowPart(ISerializationContext context, ReferenceUsage semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     UsageElement returns RenderingUsage
	 *     FeatureElement returns RenderingUsage
	 *     FlowUsageElement returns RenderingUsage
	 *     RenderingUsage returns RenderingUsage
	 *     RenderingFlowUsage returns RenderingUsage
	 *
	 * Constraint:
	 *     (
	 *         (isAbstract?='abstract' | isVariation?='variation')? 
	 *         ((humanId=Name name=Name?) | name=Name)? 
	 *         (ownedMembership_comp+=MultiplicityMember (isOrdered?='ordered' | isNonunique?='nonunique')*)? 
	 *         (
	 *             (
	 *                 (ownedRelationship_comp+=OwnedFeatureTyping ownedRelationship_comp+=OwnedFeatureTyping*) | 
	 *                 (ownedRelationship_comp+=OwnedSubsetting ownedRelationship_comp+=OwnedSubsetting*) | 
	 *                 (ownedRelationship_comp+=OwnedRedefinition ownedRelationship_comp+=OwnedRedefinition*)
	 *             ) 
	 *             (ownedMembership_comp+=MultiplicityMember (isOrdered?='ordered' | isNonunique?='nonunique')*)?
	 *         )* 
	 *         (ownedMembership_comp+=FeatureValue | ownedMembership_comp+=SourceItemFlowMember)? 
	 *         ownedMembership_comp+=VariantUsageMember? 
	 *         (
	 *             (
	 *                 documentation_comp+=OwnedDocumentation | 
	 *                 ownedMembership_comp+=NestedDefinitionMember | 
	 *                 ownedFeatureMembership_comp+=NestedUsageMember | 
	 *                 (ownedFeatureMembership_comp+=EmptySuccessionMember? ownedFeatureMembership_comp+=IndividualUsageMember) | 
	 *                 ownedImport_comp+=PackageImport
	 *             )? 
	 *             ownedMembership_comp+=VariantUsageMember?
	 *         )*
	 *     )
	 */
	protected void sequence_DefinitionBodyItem_Identification_MultiplicityPart_Redefines_Redefinitions_Subsets_Subsettings_TypedBy_Typings_UsagePrefix_ValueOrFlowPart(ISerializationContext context, RenderingUsage semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     StructureUsageElement returns ViewUsage
	 *     ViewRefUsage returns ViewUsage
	 *
	 * Constraint:
	 *     (
	 *         (isAbstract?='abstract' | isVariation?='variation')? 
	 *         isComposite?=ViewUsageKeyword? 
	 *         ((humanId=Name name=Name?) | name=Name)? 
	 *         (ownedMembership_comp+=MultiplicityMember isOrdered?='ordered'? (isNonunique?='nonunique'? isOrdered?='ordered'?)*)? 
	 *         (
	 *             (
	 *                 (ownedRelationship_comp+=OwnedFeatureTyping ownedRelationship_comp+=OwnedFeatureTyping*) | 
	 *                 (ownedRelationship_comp+=OwnedSubsetting ownedRelationship_comp+=OwnedSubsetting*) | 
	 *                 (ownedRelationship_comp+=OwnedRedefinition ownedRelationship_comp+=OwnedRedefinition*)
	 *             ) 
	 *             (ownedMembership_comp+=MultiplicityMember isOrdered?='ordered'?)?
	 *         )* 
	 *         (ownedMembership_comp+=FeatureValue | ownedMembership_comp+=SourceItemFlowMember)? 
	 *         (
	 *             (
	 *                 documentation_comp+=OwnedDocumentation | 
	 *                 ownedMembership_comp+=NestedDefinitionMember | 
	 *                 ownedMembership_comp+=VariantUsageMember | 
	 *                 ownedFeatureMembership_comp+=NestedUsageMember | 
	 *                 ownedImport_comp+=PackageImport | 
	 *                 ownedImport_comp+=Expose
	 *             )? 
	 *             (ownedFeatureMembership_comp+=EmptySuccessionMember? ownedFeatureMembership_comp+=IndividualUsageMember)?
	 *         )+
	 *     )
	 */
	protected void sequence_DefinitionBodyItem_Identification_MultiplicityPart_Redefines_Redefinitions_Subsets_Subsettings_TypedBy_Typings_UsagePrefix_ValueOrFlowPart_ViewBodyItem_ViewRefUsage(ISerializationContext context, ViewUsage semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     UsageElement returns ViewUsage
	 *     FeatureElement returns ViewUsage
	 *     FlowUsageElement returns ViewUsage
	 *     ViewUsage returns ViewUsage
	 *     ViewFlowUsage returns ViewUsage
	 *
	 * Constraint:
	 *     (
	 *         (isAbstract?='abstract' | isVariation?='variation')? 
	 *         ((humanId=Name name=Name?) | name=Name)? 
	 *         (ownedMembership_comp+=MultiplicityMember isOrdered?='ordered'? (isNonunique?='nonunique'? isOrdered?='ordered'?)*)? 
	 *         (
	 *             (
	 *                 (ownedRelationship_comp+=OwnedFeatureTyping ownedRelationship_comp+=OwnedFeatureTyping*) | 
	 *                 (ownedRelationship_comp+=OwnedSubsetting ownedRelationship_comp+=OwnedSubsetting*) | 
	 *                 (ownedRelationship_comp+=OwnedRedefinition ownedRelationship_comp+=OwnedRedefinition*)
	 *             ) 
	 *             (ownedMembership_comp+=MultiplicityMember isOrdered?='ordered'?)?
	 *         )* 
	 *         (ownedMembership_comp+=FeatureValue | ownedMembership_comp+=SourceItemFlowMember)? 
	 *         (
	 *             (
	 *                 documentation_comp+=OwnedDocumentation | 
	 *                 ownedMembership_comp+=NestedDefinitionMember | 
	 *                 ownedMembership_comp+=VariantUsageMember | 
	 *                 ownedFeatureMembership_comp+=NestedUsageMember | 
	 *                 ownedImport_comp+=PackageImport | 
	 *                 ownedImport_comp+=Expose
	 *             )? 
	 *             (ownedFeatureMembership_comp+=EmptySuccessionMember? ownedFeatureMembership_comp+=IndividualUsageMember)?
	 *         )+
	 *     )
	 */
	protected void sequence_DefinitionBodyItem_Identification_MultiplicityPart_Redefines_Redefinitions_Subsets_Subsettings_TypedBy_Typings_UsagePrefix_ValueOrFlowPart_ViewBodyItem(ISerializationContext context, ViewUsage semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     SubjectUsage returns ReferenceUsage
	 *
	 * Constraint:
	 *     (
	 *         ((humanId=Name name=Name?) | name=Name)? 
	 *         (ownedMembership_comp+=MultiplicityMember (isOrdered?='ordered' | isNonunique?='nonunique')*)? 
	 *         (
	 *             (
	 *                 (ownedRelationship_comp+=OwnedFeatureTyping ownedRelationship_comp+=OwnedFeatureTyping*) | 
	 *                 (ownedRelationship_comp+=OwnedSubsetting ownedRelationship_comp+=OwnedSubsetting*) | 
	 *                 (ownedRelationship_comp+=OwnedRedefinition ownedRelationship_comp+=OwnedRedefinition*)
	 *             ) 
	 *             (ownedMembership_comp+=MultiplicityMember (isOrdered?='ordered' | isNonunique?='nonunique')*)?
	 *         )* 
	 *         (ownedMembership_comp+=FeatureValue | ownedMembership_comp+=SourceItemFlowMember)? 
	 *         documentation_comp+=OwnedDocumentation? 
	 *         (
	 *             (
	 *                 ownedMembership_comp+=NestedDefinitionMember | 
	 *                 ownedMembership_comp+=VariantUsageMember | 
	 *                 ownedFeatureMembership_comp+=NestedUsageMember | 
	 *                 (ownedFeatureMembership_comp+=EmptySuccessionMember? ownedFeatureMembership_comp+=IndividualUsageMember) | 
	 *                 ownedImport_comp+=PackageImport
	 *             )? 
	 *             documentation_comp+=OwnedDocumentation?
	 *         )*
	 *     )
	 */
	protected void sequence_DefinitionBodyItem_Identification_MultiplicityPart_Redefines_Redefinitions_Subsets_Subsettings_TypedBy_Typings_ValueOrFlowPart(ISerializationContext context, ReferenceUsage semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     DoActionMember returns StateSubactionMembership
	 *
	 * Constraint:
	 *     (ownedRelationship_comp+=PrefixDocumentation* visibility=VisibilityIndicator? kind=DoActionKind ownedMemberFeature_comp=StateActionUsage)
	 */
	protected void sequence_DefinitionMemberPrefix_DoActionMember(ISerializationContext context, StateSubactionMembership semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     EntryActionMember returns StateSubactionMembership
	 *
	 * Constraint:
	 *     (ownedRelationship_comp+=PrefixDocumentation* visibility=VisibilityIndicator? kind=EntryActionKind ownedMemberFeature_comp=StateActionUsage)
	 */
	protected void sequence_DefinitionMemberPrefix_EntryActionMember(ISerializationContext context, StateSubactionMembership semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     EntryTransitionMember returns FeatureMembership
	 *
	 * Constraint:
	 *     (
	 *         ownedRelationship_comp+=PrefixDocumentation* 
	 *         visibility=VisibilityIndicator? 
	 *         (ownedMemberFeature_comp=GuardedTargetSuccession | ownedMemberFeature_comp=TransitionSuccession)
	 *     )
	 */
	protected void sequence_DefinitionMemberPrefix_EntryTransitionMember(ISerializationContext context, FeatureMembership semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ExitActionMember returns StateSubactionMembership
	 *
	 * Constraint:
	 *     (ownedRelationship_comp+=PrefixDocumentation* visibility=VisibilityIndicator? kind=ExitActionKind ownedMemberFeature_comp=StateActionUsage)
	 */
	protected void sequence_DefinitionMemberPrefix_ExitActionMember(ISerializationContext context, StateSubactionMembership semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     FlowUsageMember returns FeatureMembership
	 *
	 * Constraint:
	 *     (
	 *         ownedRelationship_comp+=PrefixDocumentation* 
	 *         visibility=VisibilityIndicator? 
	 *         direction=FeatureDirection 
	 *         ownedMemberFeature_comp=FlowUsageElement
	 *     )
	 */
	protected void sequence_DefinitionMemberPrefix_FlowUsageMember(ISerializationContext context, FeatureMembership semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     IndividualUsageMember returns FeatureMembership
	 *
	 * Constraint:
	 *     (ownedRelationship_comp+=PrefixDocumentation* visibility=VisibilityIndicator? ownedMemberFeature_comp=IndividualUsageElement)
	 */
	protected void sequence_DefinitionMemberPrefix_IndividualUsageMember(ISerializationContext context, FeatureMembership semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     InitialNodeMember returns FeatureMembership
	 *
	 * Constraint:
	 *     (ownedRelationship_comp+=PrefixDocumentation* visibility=VisibilityIndicator? memberFeature=[Feature|QualifiedName])
	 */
	protected void sequence_DefinitionMemberPrefix_InitialNodeMember(ISerializationContext context, FeatureMembership semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     InterfaceUsageMember returns EndFeatureMembership
	 *
	 * Constraint:
	 *     (ownedRelationship_comp+=PrefixDocumentation? visibility=VisibilityIndicator? ownedMemberFeature_comp=PortEndUsage)
	 */
	protected void sequence_DefinitionMemberPrefix_InterfaceEndMember(ISerializationContext context, EndFeatureMembership semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	// This method is commented out because it has the same signature as another method in this class.
	// This is probably a bug in Xtext's serializer, please report it here: 
	// https://bugs.eclipse.org/bugs/enter_bug.cgi?product=TMF
	//
	// Contexts:
	//     InterfaceEndMember returns EndFeatureMembership
	//
	// Constraint:
	//     (ownedRelationship_comp+=PrefixDocumentation* visibility=VisibilityIndicator? ownedMemberFeature_comp=PortEndUsage)
	//
	// protected void sequence_DefinitionMemberPrefix_InterfaceEndMember(ISerializationContext context, EndFeatureMembership semanticObject) { }
	
	/**
	 * Contexts:
	 *     ObjectiveMember returns ObjectiveMembership
	 *
	 * Constraint:
	 *     (ownedRelationship_comp+=PrefixDocumentation* visibility=VisibilityIndicator? ownedObjectiveRequirement_comp=ObjectiveRequirementUsage)
	 */
	protected void sequence_DefinitionMemberPrefix_ObjectiveMember(ISerializationContext context, ObjectiveMembership semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ParameterFlowUsageMember returns ParameterMembership
	 *
	 * Constraint:
	 *     (
	 *         ownedRelationship_comp+=PrefixDocumentation* 
	 *         visibility=VisibilityIndicator? 
	 *         direction=FeatureDirection 
	 *         ownedMemberParameter_comp=FlowUsageElement
	 *     )
	 */
	protected void sequence_DefinitionMemberPrefix_ParameterFlowUsageMember(ISerializationContext context, ParameterMembership semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     RequirementConstraintMember returns RequirementConstraintMembership
	 *
	 * Constraint:
	 *     (
	 *         ownedRelationship_comp+=PrefixDocumentation* 
	 *         visibility=VisibilityIndicator? 
	 *         kind=RequirementConstraintKind 
	 *         ownedMemberFeature_comp=RequirementConstraintUsage
	 *     )
	 */
	protected void sequence_DefinitionMemberPrefix_RequirementConstraintMember(ISerializationContext context, RequirementConstraintMembership semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ResultExpressionMember returns ResultExpressionMembership
	 *
	 * Constraint:
	 *     (ownedRelationship_comp+=PrefixDocumentation* visibility=VisibilityIndicator? ownedResultExpression_comp=OwnedExpression)
	 */
	protected void sequence_DefinitionMemberPrefix_ResultExpressionMember(ISerializationContext context, ResultExpressionMembership semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ReturnParameterFlowUsageMember returns ReturnParameterMembership
	 *
	 * Constraint:
	 *     (ownedRelationship_comp+=PrefixDocumentation* visibility=VisibilityIndicator? ownedMemberParameter_comp=FlowUsageElement)
	 */
	protected void sequence_DefinitionMemberPrefix_ReturnParameterFlowUsageMember(ISerializationContext context, ReturnParameterMembership semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     StructureUsageMember returns FeatureMembership
	 *
	 * Constraint:
	 *     (ownedRelationship_comp+=PrefixDocumentation* visibility=VisibilityIndicator? ownedMemberFeature_comp=StructureUsageElement)
	 */
	protected void sequence_DefinitionMemberPrefix_StructureUsageMember(ISerializationContext context, FeatureMembership semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     SubjectMember returns SubjectMembership
	 *
	 * Constraint:
	 *     (ownedRelationship_comp+=PrefixDocumentation* visibility=VisibilityIndicator? ownedSubjectParameter_comp=SubjectUsage)
	 */
	protected void sequence_DefinitionMemberPrefix_SubjectMember(ISerializationContext context, SubjectMembership semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     TargetSuccessionMember returns FeatureMembership
	 *
	 * Constraint:
	 *     (ownedRelationship_comp+=PrefixDocumentation* visibility=VisibilityIndicator? ownedMemberFeature_comp=ActionTargetSuccession)
	 */
	protected void sequence_DefinitionMemberPrefix_TargetSuccessionMember(ISerializationContext context, FeatureMembership semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     TargetTransitionUsageMember returns FeatureMembership
	 *
	 * Constraint:
	 *     (ownedRelationship_comp+=PrefixDocumentation* visibility=VisibilityIndicator? ownedMemberFeature_comp=TargetTransitionUsage)
	 */
	protected void sequence_DefinitionMemberPrefix_TargetTransitionUsageMember(ISerializationContext context, FeatureMembership semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     TransitionUsageMember returns FeatureMembership
	 *
	 * Constraint:
	 *     (ownedRelationship_comp+=PrefixDocumentation* visibility=VisibilityIndicator? ownedMemberFeature_comp=TransitionUsage)
	 */
	protected void sequence_DefinitionMemberPrefix_TransitionUsageMember(ISerializationContext context, FeatureMembership semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     VariantUsageMember returns VariantMembership
	 *
	 * Constraint:
	 *     (ownedRelationship_comp+=PrefixDocumentation* visibility=VisibilityIndicator? ownedVariantUsage_comp=VariantUsageElement)
	 */
	protected void sequence_DefinitionMemberPrefix_VariantUsageMember(ISerializationContext context, VariantMembership semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     DefinitionElement returns InterfaceDefinition
	 *     InterfaceDefinition returns InterfaceDefinition
	 *
	 * Constraint:
	 *     (
	 *         (isAbstract?='abstract' | isVariation?='variation')? 
	 *         ((humanId=Name name=Name?) | name=Name)? 
	 *         (ownedRelationship_comp+=OwnedSuperclassing ownedRelationship_comp+=OwnedSuperclassing*)? 
	 *         (
	 *             documentation_comp+=OwnedDocumentation | 
	 *             ownedMembership_comp+=NestedDefinitionMember | 
	 *             ownedMembership_comp+=VariantUsageMember | 
	 *             ownedFeatureMembership_comp+=InterfaceUsageMember | 
	 *             ownedImport_comp+=PackageImport
	 *         )*
	 *     )
	 */
	protected void sequence_DefinitionPrefix_Identification_InterfaceDefBody_SuperclassingPart(ISerializationContext context, InterfaceDefinition semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     DefinitionElement returns Dependency
	 *     Dependency returns Dependency
	 *
	 * Constraint:
	 *     (
	 *         ((humanId=Name name=Name?) | name=Name)? 
	 *         client+=[Element|QualifiedName] 
	 *         client+=[Element|QualifiedName]* 
	 *         supplier+=[Element|QualifiedName] 
	 *         supplier+=[Element|QualifiedName]*
	 *     )
	 */
	protected void sequence_Dependency_Identification(ISerializationContext context, Dependency semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     DocumentationComment returns Comment
	 *
	 * Constraint:
	 *     (humanId=Name? body=REGULAR_COMMENT)
	 */
	protected void sequence_DocumentationComment(ISerializationContext context, Comment semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     EffectBehaviorMember returns TransitionFeatureMembership
	 *
	 * Constraint:
	 *     (kind=EffectFeatureKind ownedMemberFeature_comp=EffectBehaviorUsage)
	 */
	protected void sequence_EffectBehaviorMember(ISerializationContext context, TransitionFeatureMembership semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, SysMLPackage.Literals.TRANSITION_FEATURE_MEMBERSHIP__KIND) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SysMLPackage.Literals.TRANSITION_FEATURE_MEMBERSHIP__KIND));
			if (transientValues.isValueTransient(semanticObject, SysMLPackage.Literals.FEATURE_MEMBERSHIP__OWNED_MEMBER_FEATURE_COMP) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SysMLPackage.Literals.FEATURE_MEMBERSHIP__OWNED_MEMBER_FEATURE_COMP));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getEffectBehaviorMemberAccess().getKindEffectFeatureKindEnumRuleCall_0_0(), semanticObject.getKind());
		feeder.accept(grammarAccess.getEffectBehaviorMemberAccess().getOwnedMemberFeature_compEffectBehaviorUsageParserRuleCall_1_0(), semanticObject.getOwnedMemberFeature_comp());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     StateActionUsage returns ActionUsage
	 *     EmptyActionUsage returns ActionUsage
	 *     EffectBehaviorUsage returns ActionUsage
	 *
	 * Constraint:
	 *     {ActionUsage}
	 */
	protected void sequence_EmptyActionUsage(ISerializationContext context, ActionUsage semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     EmptyAnnotation returns Annotation
	 *
	 * Constraint:
	 *     {Annotation}
	 */
	protected void sequence_EmptyAnnotation(ISerializationContext context, Annotation semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     EmptyImport returns Import
	 *
	 * Constraint:
	 *     {Import}
	 */
	protected void sequence_EmptyImport(ISerializationContext context, Import semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     EmptyItemFeatureMember returns FeatureMembership
	 *
	 * Constraint:
	 *     ownedMemberFeature_comp=EmptyItemFeature
	 */
	protected void sequence_EmptyItemFeatureMember(ISerializationContext context, FeatureMembership semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, SysMLPackage.Literals.FEATURE_MEMBERSHIP__OWNED_MEMBER_FEATURE_COMP) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SysMLPackage.Literals.FEATURE_MEMBERSHIP__OWNED_MEMBER_FEATURE_COMP));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getEmptyItemFeatureMemberAccess().getOwnedMemberFeature_compEmptyItemFeatureParserRuleCall_0(), semanticObject.getOwnedMemberFeature_comp());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     EmptyItemFeature returns ItemFeature
	 *
	 * Constraint:
	 *     {ItemFeature}
	 */
	protected void sequence_EmptyItemFeature(ISerializationContext context, ItemFeature semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     EmptyItemFlowEndMember returns EndFeatureMembership
	 *
	 * Constraint:
	 *     ownedMemberFeature_comp=EmptyItemFlowEnd
	 */
	protected void sequence_EmptyItemFlowEndMember(ISerializationContext context, EndFeatureMembership semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, SysMLPackage.Literals.FEATURE_MEMBERSHIP__OWNED_MEMBER_FEATURE_COMP) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SysMLPackage.Literals.FEATURE_MEMBERSHIP__OWNED_MEMBER_FEATURE_COMP));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getEmptyItemFlowEndMemberAccess().getOwnedMemberFeature_compEmptyItemFlowEndParserRuleCall_0(), semanticObject.getOwnedMemberFeature_comp());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     EmptyItemFlowEnd returns ItemFlowEnd
	 *
	 * Constraint:
	 *     ownedFeatureMembership_comp+=EmptyItemFlowFeatureMember
	 */
	protected void sequence_EmptyItemFlowEnd(ISerializationContext context, ItemFlowEnd semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     EmptyItemFlowFeatureMember returns FeatureMembership
	 *
	 * Constraint:
	 *     ownedMemberFeature_comp=EmptyItemFlowFeature
	 */
	protected void sequence_EmptyItemFlowFeatureMember(ISerializationContext context, FeatureMembership semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, SysMLPackage.Literals.FEATURE_MEMBERSHIP__OWNED_MEMBER_FEATURE_COMP) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SysMLPackage.Literals.FEATURE_MEMBERSHIP__OWNED_MEMBER_FEATURE_COMP));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getEmptyItemFlowFeatureMemberAccess().getOwnedMemberFeature_compEmptyItemFlowFeatureParserRuleCall_0(), semanticObject.getOwnedMemberFeature_comp());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     EmptyItemFlowFeature returns ItemFlowFeature
	 *
	 * Constraint:
	 *     ownedRelationship_comp+=EmptyRedefinition
	 */
	protected void sequence_EmptyItemFlowFeature(ISerializationContext context, ItemFlowFeature semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     EmptyParameterMember returns ParameterMembership
	 *
	 * Constraint:
	 *     ownedMemberParameter_comp=EmptyParameter
	 */
	protected void sequence_EmptyParameterMember(ISerializationContext context, ParameterMembership semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, SysMLPackage.Literals.PARAMETER_MEMBERSHIP__OWNED_MEMBER_PARAMETER_COMP) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SysMLPackage.Literals.PARAMETER_MEMBERSHIP__OWNED_MEMBER_PARAMETER_COMP));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getEmptyParameterMemberAccess().getOwnedMemberParameter_compEmptyParameterParserRuleCall_0(), semanticObject.getOwnedMemberParameter_comp());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     EmptyParameter returns ReferenceUsage
	 *
	 * Constraint:
	 *     {ReferenceUsage}
	 */
	protected void sequence_EmptyParameter(ISerializationContext context, ReferenceUsage semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     EmptyRedefinition returns Redefinition
	 *
	 * Constraint:
	 *     {Redefinition}
	 */
	protected void sequence_EmptyRedefinition(ISerializationContext context, Redefinition semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     EmptyReturnParameterMember returns ReturnParameterMembership
	 *
	 * Constraint:
	 *     ownedMemberParameter_comp=EmptyParameter
	 */
	protected void sequence_EmptyReturnParameterMember(ISerializationContext context, ReturnParameterMembership semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, SysMLPackage.Literals.PARAMETER_MEMBERSHIP__OWNED_MEMBER_PARAMETER_COMP) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SysMLPackage.Literals.PARAMETER_MEMBERSHIP__OWNED_MEMBER_PARAMETER_COMP));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getEmptyReturnParameterMemberAccess().getOwnedMemberParameter_compEmptyParameterParserRuleCall_0(), semanticObject.getOwnedMemberParameter_comp());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     EmptySourceEndMember returns EndFeatureMembership
	 *
	 * Constraint:
	 *     ownedMemberFeature_comp=EmptySourceEnd
	 */
	protected void sequence_EmptySourceEndMember(ISerializationContext context, EndFeatureMembership semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, SysMLPackage.Literals.FEATURE_MEMBERSHIP__OWNED_MEMBER_FEATURE_COMP) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SysMLPackage.Literals.FEATURE_MEMBERSHIP__OWNED_MEMBER_FEATURE_COMP));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getEmptySourceEndMemberAccess().getOwnedMemberFeature_compEmptySourceEndParserRuleCall_0(), semanticObject.getOwnedMemberFeature_comp());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     EmptySourceEnd returns SourceEnd
	 *
	 * Constraint:
	 *     {SourceEnd}
	 */
	protected void sequence_EmptySourceEnd(ISerializationContext context, SourceEnd semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     EmptySuccessionMember returns FeatureMembership
	 *
	 * Constraint:
	 *     ownedMemberFeature_comp=EmptySuccession
	 */
	protected void sequence_EmptySuccessionMember(ISerializationContext context, FeatureMembership semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, SysMLPackage.Literals.FEATURE_MEMBERSHIP__OWNED_MEMBER_FEATURE_COMP) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SysMLPackage.Literals.FEATURE_MEMBERSHIP__OWNED_MEMBER_FEATURE_COMP));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getEmptySuccessionMemberAccess().getOwnedMemberFeature_compEmptySuccessionParserRuleCall_0(), semanticObject.getOwnedMemberFeature_comp());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     EmptySuccession returns Succession
	 *
	 * Constraint:
	 *     (ownedFeatureMembership_comp+=MultiplicitySourceEndMember ownedFeatureMembership_comp+=EmptyTargetEndMember)
	 */
	protected void sequence_EmptySuccession(ISerializationContext context, Succession semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     EmptyTargetEndMember returns EndFeatureMembership
	 *
	 * Constraint:
	 *     ownedMemberFeature_comp=EmptyTargetEnd
	 */
	protected void sequence_EmptyTargetEndMember(ISerializationContext context, EndFeatureMembership semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, SysMLPackage.Literals.FEATURE_MEMBERSHIP__OWNED_MEMBER_FEATURE_COMP) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SysMLPackage.Literals.FEATURE_MEMBERSHIP__OWNED_MEMBER_FEATURE_COMP));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getEmptyTargetEndMemberAccess().getOwnedMemberFeature_compEmptyTargetEndParserRuleCall_0(), semanticObject.getOwnedMemberFeature_comp());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     EmptyTargetEnd returns TargetEnd
	 *
	 * Constraint:
	 *     {TargetEnd}
	 */
	protected void sequence_EmptyTargetEnd(ISerializationContext context, TargetEnd semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     FeatureTypeMember returns EndFeatureMembership
	 *
	 * Constraint:
	 *     (ownedRelationship_comp+=PrefixDocumentation? visibility=VisibilityIndicator? direction=FeatureDirection ownedMemberFeature_comp=FeatureElement)
	 */
	protected void sequence_EndFeatureMember_TypeMemberPrefix(ISerializationContext context, EndFeatureMembership semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	// This method is commented out because it has the same signature as another method in this class.
	// This is probably a bug in Xtext's serializer, please report it here: 
	// https://bugs.eclipse.org/bugs/enter_bug.cgi?product=TMF
	//
	// Contexts:
	//     EndFeatureMember returns EndFeatureMembership
	//
	// Constraint:
	//     (ownedRelationship_comp+=PrefixDocumentation* visibility=VisibilityIndicator? direction=FeatureDirection ownedMemberFeature_comp=FeatureElement)
	//
	// protected void sequence_EndFeatureMember_TypeMemberPrefix(ISerializationContext context, EndFeatureMembership semanticObject) { }
	
	/**
	 * Contexts:
	 *     Expose returns Expose
	 *
	 * Constraint:
	 *     (
	 *         ownedRelationship_comp+=PrefixDocumentation* 
	 *         visibility=BasicVisibilityIndicator? 
	 *         (importedPackage=[Package|Name] | importedPackage=[Package|ColonQualifiedName] | importedPackage=[Package|DotQualifiedName])
	 *     )
	 */
	protected void sequence_Expose(ISerializationContext context, Expose semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ExpressionTyping returns FeatureTyping
	 *
	 * Constraint:
	 *     type=[Function|QualifiedName]
	 */
	protected void sequence_ExpressionTyping(ISerializationContext context, FeatureTyping semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, SysMLPackage.Literals.FEATURE_TYPING__TYPE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SysMLPackage.Literals.FEATURE_TYPING__TYPE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getExpressionTypingAccess().getTypeFunctionQualifiedNameParserRuleCall_0_1(), semanticObject.eGet(SysMLPackage.Literals.FEATURE_TYPING__TYPE, false));
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     ExtentExpression_Deprecated returns OperatorExpression
	 *
	 * Constraint:
	 *     (ownedFeatureMembership_comp+=TypeReferenceMember operator='allInstances')
	 */
	protected void sequence_ExtentExpression_Deprecated(ISerializationContext context, OperatorExpression semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     FeatureTypeMember returns FeatureMembership
	 *     FeatureMember returns FeatureMembership
	 *
	 * Constraint:
	 *     (ownedRelationship_comp+=PrefixDocumentation* visibility=VisibilityIndicator? direction=FeatureDirection ownedMemberFeature_comp=FeatureElement)
	 */
	protected void sequence_FeatureMember_TypeMemberPrefix(ISerializationContext context, FeatureMembership semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     OwnedExpression returns FeatureReferenceExpression
	 *     ConditionalExpression returns FeatureReferenceExpression
	 *     ConditionalExpression.OperatorExpression_1_0 returns FeatureReferenceExpression
	 *     NullCoalescingExpression returns FeatureReferenceExpression
	 *     NullCoalescingExpression.OperatorExpression_1_0 returns FeatureReferenceExpression
	 *     ConditionalOrExpression returns FeatureReferenceExpression
	 *     ConditionalOrExpression.OperatorExpression_1_0 returns FeatureReferenceExpression
	 *     ConditionalAndExpression returns FeatureReferenceExpression
	 *     ConditionalAndExpression.OperatorExpression_1_0 returns FeatureReferenceExpression
	 *     OrExpression returns FeatureReferenceExpression
	 *     OrExpression.OperatorExpression_1_0 returns FeatureReferenceExpression
	 *     XorExpression returns FeatureReferenceExpression
	 *     XorExpression.OperatorExpression_1_0 returns FeatureReferenceExpression
	 *     AndExpression returns FeatureReferenceExpression
	 *     AndExpression.OperatorExpression_1_0 returns FeatureReferenceExpression
	 *     EqualityExpression returns FeatureReferenceExpression
	 *     EqualityExpression.OperatorExpression_1_0 returns FeatureReferenceExpression
	 *     ClassificationExpression returns FeatureReferenceExpression
	 *     ClassificationExpression.OperatorExpression_1_0 returns FeatureReferenceExpression
	 *     RelationalExpression returns FeatureReferenceExpression
	 *     RelationalExpression.OperatorExpression_1_0 returns FeatureReferenceExpression
	 *     AdditiveExpression returns FeatureReferenceExpression
	 *     AdditiveExpression.OperatorExpression_1_0 returns FeatureReferenceExpression
	 *     MultiplicativeExpression returns FeatureReferenceExpression
	 *     MultiplicativeExpression.OperatorExpression_1_0 returns FeatureReferenceExpression
	 *     ExponentiationExpression returns FeatureReferenceExpression
	 *     ExponentiationExpression.OperatorExpression_1_0 returns FeatureReferenceExpression
	 *     UnitsExpression returns FeatureReferenceExpression
	 *     UnitsExpression.OperatorExpression_1_0 returns FeatureReferenceExpression
	 *     UnaryExpression returns FeatureReferenceExpression
	 *     ExtentExpression returns FeatureReferenceExpression
	 *     SequenceExpression returns FeatureReferenceExpression
	 *     SequenceExpression.OperatorExpression_1_0_0 returns FeatureReferenceExpression
	 *     SequenceExpression.OperatorExpression_1_1_0 returns FeatureReferenceExpression
	 *     SequenceConstructionExpression returns FeatureReferenceExpression
	 *     SequenceConstructionExpression.OperatorExpression_1_2_0_0 returns FeatureReferenceExpression
	 *     SequenceConstructionExpression.OperatorExpression_1_2_1_0 returns FeatureReferenceExpression
	 *     SequenceElementList returns FeatureReferenceExpression
	 *     SequenceElementList.OperatorExpression_1_0 returns FeatureReferenceExpression
	 *     BaseExpression returns FeatureReferenceExpression
	 *     FeatureReferenceExpression returns FeatureReferenceExpression
	 *
	 * Constraint:
	 *     ownedFeatureMembership_comp+=FeatureReferenceMember
	 */
	protected void sequence_FeatureReferenceExpression(ISerializationContext context, FeatureReferenceExpression semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     FeatureReferenceMember returns ReturnParameterMembership
	 *
	 * Constraint:
	 *     ownedMemberFeature_comp=FeatureReference
	 */
	protected void sequence_FeatureReferenceMember(ISerializationContext context, ReturnParameterMembership semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, SysMLPackage.Literals.FEATURE_MEMBERSHIP__OWNED_MEMBER_FEATURE_COMP) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SysMLPackage.Literals.FEATURE_MEMBERSHIP__OWNED_MEMBER_FEATURE_COMP));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getFeatureReferenceMemberAccess().getOwnedMemberFeature_compFeatureReferenceParserRuleCall_0(), semanticObject.getOwnedMemberFeature_comp());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     FeatureReference returns ReferenceUsage
	 *
	 * Constraint:
	 *     ownedRelationship_comp+=OwnedSubsetting
	 */
	protected void sequence_FeatureReference(ISerializationContext context, ReferenceUsage semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     FeatureValue returns FeatureValue
	 *
	 * Constraint:
	 *     value_comp=OwnedExpression
	 */
	protected void sequence_FeatureValue(ISerializationContext context, FeatureValue semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, SysMLPackage.Literals.FEATURE_VALUE__VALUE_COMP) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SysMLPackage.Literals.FEATURE_VALUE__VALUE_COMP));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getFeatureValueAccess().getValue_compOwnedExpressionParserRuleCall_1_0(), semanticObject.getValue_comp());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     ActionNode returns ForkNode
	 *     ControlNode returns ForkNode
	 *     ForkNode returns ForkNode
	 *
	 * Constraint:
	 *     (
	 *         (isAbstract?='abstract' | isVariation?='variation')? 
	 *         isComposite?='fork' 
	 *         ((humanId=Name name=Name?) | name=Name)? 
	 *         (ownedMembership_comp+=MultiplicityMember (isOrdered?='ordered' | isNonunique?='nonunique')*)? 
	 *         (
	 *             (
	 *                 (ownedRelationship_comp+=OwnedFeatureTyping ownedRelationship_comp+=OwnedFeatureTyping*) | 
	 *                 (ownedRelationship_comp+=OwnedSubsetting ownedRelationship_comp+=OwnedSubsetting*) | 
	 *                 (ownedRelationship_comp+=OwnedRedefinition ownedRelationship_comp+=OwnedRedefinition*)
	 *             ) 
	 *             (ownedMembership_comp+=MultiplicityMember (isOrdered?='ordered' | isNonunique?='nonunique')*)?
	 *         )*
	 *     )
	 */
	protected void sequence_ForkNode_Identification_MultiplicityPart_Redefines_Redefinitions_Subsets_Subsettings_TypedBy_Typings_UsagePrefix(ISerializationContext context, ForkNode semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     GuardExpressionMember returns TransitionFeatureMembership
	 *
	 * Constraint:
	 *     (kind=GuardFeatureKind ownedMemberFeature_comp=OwnedExpression)
	 */
	protected void sequence_GuardExpressionMember(ISerializationContext context, TransitionFeatureMembership semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, SysMLPackage.Literals.TRANSITION_FEATURE_MEMBERSHIP__KIND) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SysMLPackage.Literals.TRANSITION_FEATURE_MEMBERSHIP__KIND));
			if (transientValues.isValueTransient(semanticObject, SysMLPackage.Literals.FEATURE_MEMBERSHIP__OWNED_MEMBER_FEATURE_COMP) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SysMLPackage.Literals.FEATURE_MEMBERSHIP__OWNED_MEMBER_FEATURE_COMP));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getGuardExpressionMemberAccess().getKindGuardFeatureKindEnumRuleCall_0_0(), semanticObject.getKind());
		feeder.accept(grammarAccess.getGuardExpressionMemberAccess().getOwnedMemberFeature_compOwnedExpressionParserRuleCall_1_0(), semanticObject.getOwnedMemberFeature_comp());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     GuardedSuccessionMember returns FeatureMembership
	 *
	 * Constraint:
	 *     ownedMemberFeature_comp=GuardedSuccession
	 */
	protected void sequence_GuardedSuccessionMember(ISerializationContext context, FeatureMembership semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, SysMLPackage.Literals.FEATURE_MEMBERSHIP__OWNED_MEMBER_FEATURE_COMP) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SysMLPackage.Literals.FEATURE_MEMBERSHIP__OWNED_MEMBER_FEATURE_COMP));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getGuardedSuccessionMemberAccess().getOwnedMemberFeature_compGuardedSuccessionParserRuleCall_0_0(), semanticObject.getOwnedMemberFeature_comp());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     GuardedSuccession returns TransitionUsage
	 *
	 * Constraint:
	 *     (
	 *         ((humanId=Name name=Name?) | name=Name)? 
	 *         (ownedMembership_comp+=MultiplicityMember (isOrdered?='ordered' | isNonunique?='nonunique')*)? 
	 *         (
	 *             (
	 *                 (ownedRelationship_comp+=OwnedFeatureTyping ownedRelationship_comp+=OwnedFeatureTyping*) | 
	 *                 (ownedRelationship_comp+=OwnedSubsetting ownedRelationship_comp+=OwnedSubsetting*) | 
	 *                 (ownedRelationship_comp+=OwnedRedefinition ownedRelationship_comp+=OwnedRedefinition*)
	 *             ) 
	 *             (ownedMembership_comp+=MultiplicityMember (isOrdered?='ordered' | isNonunique?='nonunique')*)?
	 *         )* 
	 *         ownedFeatureMembership_comp+=TransitionSourceMember 
	 *         ownedFeatureMembership_comp+=GuardExpressionMember 
	 *         ownedFeatureMembership_comp+=TransitionSuccessionMember
	 *     )
	 */
	protected void sequence_GuardedSuccession_Identification_MultiplicityPart_Redefines_Redefinitions_Subsets_Subsettings_TypedBy_Typings(ISerializationContext context, TransitionUsage semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     GuardedTargetSuccession returns TransitionUsage
	 *
	 * Constraint:
	 *     (ownedFeatureMembership_comp+=GuardExpressionMember ownedFeatureMembership_comp+=TransitionSuccessionMember)
	 */
	protected void sequence_GuardedTargetSuccession(ISerializationContext context, TransitionUsage semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     DefinitionElement returns SuccessionItemFlow
	 *     SuccessionItemFlow returns SuccessionItemFlow
	 *
	 * Constraint:
	 *     (
	 *         isAbstract?='abstract'? 
	 *         (
	 *             (
	 *                 ((humanId=Name name=Name?) | name=Name)? 
	 *                 (ownedMembership_comp+=MultiplicityMember isOrdered?='ordered'? (isNonunique?='nonunique'? isOrdered?='ordered'?)*)? 
	 *                 (
	 *                     (
	 *                         (ownedRelationship_comp+=OwnedFeatureTyping ownedRelationship_comp+=OwnedFeatureTyping*) | 
	 *                         (ownedRelationship_comp+=OwnedSubsetting ownedRelationship_comp+=OwnedSubsetting*) | 
	 *                         (ownedRelationship_comp+=OwnedRedefinition ownedRelationship_comp+=OwnedRedefinition*)
	 *                     ) 
	 *                     (ownedMembership_comp+=MultiplicityMember isOrdered?='ordered'?)?
	 *                 )* 
	 *                 (ownedFeatureMembership_comp+=ItemFeatureMember | ownedFeatureMembership_comp+=EmptyItemFeatureMember)
	 *             ) | 
	 *             ownedFeatureMembership_comp+=EmptyItemFeatureMember
	 *         ) 
	 *         ownedFeatureMembership_comp+=ItemFlowEndMember 
	 *         ownedFeatureMembership_comp+=ItemFlowEndMember 
	 *         (
	 *             documentation_comp+=OwnedDocumentation | 
	 *             ownedMembership_comp+=NonFeatureTypeMember | 
	 *             ownedFeatureMembership_comp+=FeatureTypeMember | 
	 *             ownedImport_comp+=PackageImport
	 *         )*
	 *     )
	 */
	protected void sequence_Identification_ItemFlowDeclaration_MultiplicityPart_Redefines_Redefinitions_Subsets_Subsettings_SuccessionItemFlow_TypeBody_TypedBy_Typings(ISerializationContext context, SuccessionItemFlow semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     DefinitionElement returns ItemFlow
	 *     ItemFlow returns ItemFlow
	 *
	 * Constraint:
	 *     (
	 *         isAbstract?='abstract'? 
	 *         (
	 *             (
	 *                 ((humanId=Name name=Name?) | name=Name)? 
	 *                 (ownedMembership_comp+=MultiplicityMember isOrdered?='ordered'? (isNonunique?='nonunique'? isOrdered?='ordered'?)*)? 
	 *                 (
	 *                     (
	 *                         (ownedRelationship_comp+=OwnedFeatureTyping ownedRelationship_comp+=OwnedFeatureTyping*) | 
	 *                         (ownedRelationship_comp+=OwnedSubsetting ownedRelationship_comp+=OwnedSubsetting*) | 
	 *                         (ownedRelationship_comp+=OwnedRedefinition ownedRelationship_comp+=OwnedRedefinition*)
	 *                     ) 
	 *                     (ownedMembership_comp+=MultiplicityMember isOrdered?='ordered'?)?
	 *                 )* 
	 *                 (ownedFeatureMembership_comp+=ItemFeatureMember | ownedFeatureMembership_comp+=EmptyItemFeatureMember)
	 *             ) | 
	 *             ownedFeatureMembership_comp+=EmptyItemFeatureMember
	 *         ) 
	 *         ownedFeatureMembership_comp+=ItemFlowEndMember 
	 *         ownedFeatureMembership_comp+=ItemFlowEndMember 
	 *         (
	 *             documentation_comp+=OwnedDocumentation | 
	 *             ownedMembership_comp+=NonFeatureTypeMember | 
	 *             ownedFeatureMembership_comp+=FeatureTypeMember | 
	 *             ownedImport_comp+=PackageImport
	 *         )*
	 *     )
	 */
	protected void sequence_Identification_ItemFlow_ItemFlowDeclaration_MultiplicityPart_Redefines_Redefinitions_Subsets_Subsettings_TypeBody_TypedBy_Typings(ISerializationContext context, ItemFlow semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ActionNode returns JoinNode
	 *     ControlNode returns JoinNode
	 *     JoinNode returns JoinNode
	 *
	 * Constraint:
	 *     (
	 *         (isAbstract?='abstract' | isVariation?='variation')? 
	 *         isComposite?='join' 
	 *         ((humanId=Name name=Name?) | name=Name)? 
	 *         (ownedMembership_comp+=MultiplicityMember (isOrdered?='ordered' | isNonunique?='nonunique')*)? 
	 *         (
	 *             (
	 *                 (ownedRelationship_comp+=OwnedFeatureTyping ownedRelationship_comp+=OwnedFeatureTyping*) | 
	 *                 (ownedRelationship_comp+=OwnedSubsetting ownedRelationship_comp+=OwnedSubsetting*) | 
	 *                 (ownedRelationship_comp+=OwnedRedefinition ownedRelationship_comp+=OwnedRedefinition*)
	 *             ) 
	 *             (ownedMembership_comp+=MultiplicityMember (isOrdered?='ordered' | isNonunique?='nonunique')*)?
	 *         )*
	 *     )
	 */
	protected void sequence_Identification_JoinNode_MultiplicityPart_Redefines_Redefinitions_Subsets_Subsettings_TypedBy_Typings_UsagePrefix(ISerializationContext context, JoinNode semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ActionNode returns MergeNode
	 *     ControlNode returns MergeNode
	 *     MergeNode returns MergeNode
	 *
	 * Constraint:
	 *     (
	 *         (isAbstract?='abstract' | isVariation?='variation')? 
	 *         isComposite?='merge' 
	 *         ((humanId=Name name=Name?) | name=Name)? 
	 *         (ownedMembership_comp+=MultiplicityMember (isOrdered?='ordered' | isNonunique?='nonunique')*)? 
	 *         (
	 *             (
	 *                 (ownedRelationship_comp+=OwnedFeatureTyping ownedRelationship_comp+=OwnedFeatureTyping*) | 
	 *                 (ownedRelationship_comp+=OwnedSubsetting ownedRelationship_comp+=OwnedSubsetting*) | 
	 *                 (ownedRelationship_comp+=OwnedRedefinition ownedRelationship_comp+=OwnedRedefinition*)
	 *             ) 
	 *             (ownedMembership_comp+=MultiplicityMember (isOrdered?='ordered' | isNonunique?='nonunique')*)?
	 *         )*
	 *     )
	 */
	protected void sequence_Identification_MergeNode_MultiplicityPart_Redefines_Redefinitions_Subsets_Subsettings_TypedBy_Typings_UsagePrefix(ISerializationContext context, MergeNode semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Parameter returns ActionUsage
	 *
	 * Constraint:
	 *     (
	 *         ((humanId=Name name=Name?) | name=Name)? 
	 *         (ownedMembership_comp+=MultiplicityMember isOrdered?='ordered'? (isNonunique?='nonunique'? isOrdered?='ordered'?)*)? 
	 *         (
	 *             (ownedRelationship_comp+=OwnedFeatureTyping | ownedRelationship_comp+=OwnedSubsetting | ownedRelationship_comp+=OwnedRedefinition) 
	 *             (ownedMembership_comp+=MultiplicityMember isOrdered?='ordered'?)?
	 *         )*
	 *     )
	 */
	protected void sequence_Identification_MultiplicityPart_Parameter_Redefines_Subsets_TypedBy(ISerializationContext context, ActionUsage semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Parameter returns AnalysisCaseUsage
	 *
	 * Constraint:
	 *     (
	 *         ((humanId=Name name=Name?) | name=Name)? 
	 *         (ownedMembership_comp+=MultiplicityMember isOrdered?='ordered'? (isNonunique?='nonunique'? isOrdered?='ordered'?)*)? 
	 *         (
	 *             (ownedRelationship_comp+=OwnedFeatureTyping | ownedRelationship_comp+=OwnedSubsetting | ownedRelationship_comp+=OwnedRedefinition) 
	 *             (ownedMembership_comp+=MultiplicityMember isOrdered?='ordered'?)?
	 *         )*
	 *     )
	 */
	protected void sequence_Identification_MultiplicityPart_Parameter_Redefines_Subsets_TypedBy(ISerializationContext context, AnalysisCaseUsage semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Parameter returns AttributeUsage
	 *
	 * Constraint:
	 *     (
	 *         ((humanId=Name name=Name?) | name=Name)? 
	 *         (ownedMembership_comp+=MultiplicityMember isOrdered?='ordered'? (isNonunique?='nonunique'? isOrdered?='ordered'?)*)? 
	 *         (
	 *             (ownedRelationship_comp+=OwnedFeatureTyping | ownedRelationship_comp+=OwnedSubsetting | ownedRelationship_comp+=OwnedRedefinition) 
	 *             (ownedMembership_comp+=MultiplicityMember isOrdered?='ordered'?)?
	 *         )*
	 *     )
	 */
	protected void sequence_Identification_MultiplicityPart_Parameter_Redefines_Subsets_TypedBy(ISerializationContext context, AttributeUsage semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Parameter returns CalculationUsage
	 *
	 * Constraint:
	 *     (
	 *         ((humanId=Name name=Name?) | name=Name)? 
	 *         (ownedMembership_comp+=MultiplicityMember isOrdered?='ordered'? (isNonunique?='nonunique'? isOrdered?='ordered'?)*)? 
	 *         (
	 *             (ownedRelationship_comp+=OwnedFeatureTyping | ownedRelationship_comp+=OwnedSubsetting | ownedRelationship_comp+=OwnedRedefinition) 
	 *             (ownedMembership_comp+=MultiplicityMember isOrdered?='ordered'?)?
	 *         )*
	 *     )
	 */
	protected void sequence_Identification_MultiplicityPart_Parameter_Redefines_Subsets_TypedBy(ISerializationContext context, CalculationUsage semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Parameter returns ConstraintUsage
	 *
	 * Constraint:
	 *     (
	 *         ((humanId=Name name=Name?) | name=Name)? 
	 *         (ownedMembership_comp+=MultiplicityMember isOrdered?='ordered'? (isNonunique?='nonunique'? isOrdered?='ordered'?)*)? 
	 *         (
	 *             (ownedRelationship_comp+=OwnedFeatureTyping | ownedRelationship_comp+=OwnedSubsetting | ownedRelationship_comp+=OwnedRedefinition) 
	 *             (ownedMembership_comp+=MultiplicityMember isOrdered?='ordered'?)?
	 *         )*
	 *     )
	 */
	protected void sequence_Identification_MultiplicityPart_Parameter_Redefines_Subsets_TypedBy(ISerializationContext context, ConstraintUsage semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Parameter returns ItemUsage
	 *
	 * Constraint:
	 *     (
	 *         ((humanId=Name name=Name?) | name=Name)? 
	 *         (ownedMembership_comp+=MultiplicityMember isOrdered?='ordered'? (isNonunique?='nonunique'? isOrdered?='ordered'?)*)? 
	 *         (
	 *             (ownedRelationship_comp+=OwnedFeatureTyping | ownedRelationship_comp+=OwnedSubsetting | ownedRelationship_comp+=OwnedRedefinition) 
	 *             (ownedMembership_comp+=MultiplicityMember isOrdered?='ordered'?)?
	 *         )*
	 *     )
	 */
	protected void sequence_Identification_MultiplicityPart_Parameter_Redefines_Subsets_TypedBy(ISerializationContext context, ItemUsage semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Parameter returns PartUsage
	 *
	 * Constraint:
	 *     (
	 *         ((humanId=Name name=Name?) | name=Name)? 
	 *         (ownedMembership_comp+=MultiplicityMember isOrdered?='ordered'? (isNonunique?='nonunique'? isOrdered?='ordered'?)*)? 
	 *         (
	 *             (ownedRelationship_comp+=OwnedFeatureTyping | ownedRelationship_comp+=OwnedSubsetting | ownedRelationship_comp+=OwnedRedefinition) 
	 *             (ownedMembership_comp+=MultiplicityMember isOrdered?='ordered'?)?
	 *         )*
	 *     )
	 */
	protected void sequence_Identification_MultiplicityPart_Parameter_Redefines_Subsets_TypedBy(ISerializationContext context, PartUsage semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Parameter returns ReferenceUsage
	 *
	 * Constraint:
	 *     (
	 *         ((humanId=Name name=Name?) | name=Name)? 
	 *         (ownedMembership_comp+=MultiplicityMember isOrdered?='ordered'? (isNonunique?='nonunique'? isOrdered?='ordered'?)*)? 
	 *         (
	 *             (ownedRelationship_comp+=OwnedFeatureTyping | ownedRelationship_comp+=OwnedSubsetting | ownedRelationship_comp+=OwnedRedefinition) 
	 *             (ownedMembership_comp+=MultiplicityMember isOrdered?='ordered'?)?
	 *         )*
	 *     )
	 */
	protected void sequence_Identification_MultiplicityPart_Parameter_Redefines_Subsets_TypedBy(ISerializationContext context, ReferenceUsage semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Parameter returns RenderingUsage
	 *
	 * Constraint:
	 *     (
	 *         ((humanId=Name name=Name?) | name=Name)? 
	 *         (ownedMembership_comp+=MultiplicityMember isOrdered?='ordered'? (isNonunique?='nonunique'? isOrdered?='ordered'?)*)? 
	 *         (
	 *             (ownedRelationship_comp+=OwnedFeatureTyping | ownedRelationship_comp+=OwnedSubsetting | ownedRelationship_comp+=OwnedRedefinition) 
	 *             (ownedMembership_comp+=MultiplicityMember isOrdered?='ordered'?)?
	 *         )*
	 *     )
	 */
	protected void sequence_Identification_MultiplicityPart_Parameter_Redefines_Subsets_TypedBy(ISerializationContext context, RenderingUsage semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Parameter returns RequirementUsage
	 *
	 * Constraint:
	 *     (
	 *         ((humanId=Name name=Name?) | name=Name)? 
	 *         (ownedMembership_comp+=MultiplicityMember isOrdered?='ordered'? (isNonunique?='nonunique'? isOrdered?='ordered'?)*)? 
	 *         (
	 *             (ownedRelationship_comp+=OwnedFeatureTyping | ownedRelationship_comp+=OwnedSubsetting | ownedRelationship_comp+=OwnedRedefinition) 
	 *             (ownedMembership_comp+=MultiplicityMember isOrdered?='ordered'?)?
	 *         )*
	 *     )
	 */
	protected void sequence_Identification_MultiplicityPart_Parameter_Redefines_Subsets_TypedBy(ISerializationContext context, RequirementUsage semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Parameter returns StateUsage
	 *
	 * Constraint:
	 *     (
	 *         ((humanId=Name name=Name?) | name=Name)? 
	 *         (ownedMembership_comp+=MultiplicityMember isOrdered?='ordered'? (isNonunique?='nonunique'? isOrdered?='ordered'?)*)? 
	 *         (
	 *             (ownedRelationship_comp+=OwnedFeatureTyping | ownedRelationship_comp+=OwnedSubsetting | ownedRelationship_comp+=OwnedRedefinition) 
	 *             (ownedMembership_comp+=MultiplicityMember isOrdered?='ordered'?)?
	 *         )*
	 *     )
	 */
	protected void sequence_Identification_MultiplicityPart_Parameter_Redefines_Subsets_TypedBy(ISerializationContext context, StateUsage semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ActionUsageParameter returns ActionUsage
	 *
	 * Constraint:
	 *     (
	 *         ((humanId=Name name=Name?) | name=Name)? 
	 *         (ownedMembership_comp+=MultiplicityMember isOrdered?='ordered'? (isNonunique?='nonunique'? isOrdered?='ordered'?)*)? 
	 *         (
	 *             (ownedRelationship_comp+=OwnedFeatureTyping | ownedRelationship_comp+=OwnedSubsetting | ownedRelationship_comp+=OwnedRedefinition) 
	 *             (ownedMembership_comp+=MultiplicityMember isOrdered?='ordered'?)?
	 *         )* 
	 *         (ownedMembership_comp+=FeatureValue | ownedMembership_comp+=SourceItemFlowMember)?
	 *     )
	 */
	protected void sequence_Identification_MultiplicityPart_Parameter_Redefines_Subsets_TypedBy_ValueOrFlowPart(ISerializationContext context, ActionUsage semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ActionUsageParameter returns AnalysisCaseUsage
	 *
	 * Constraint:
	 *     (
	 *         ((humanId=Name name=Name?) | name=Name)? 
	 *         (ownedMembership_comp+=MultiplicityMember isOrdered?='ordered'? (isNonunique?='nonunique'? isOrdered?='ordered'?)*)? 
	 *         (
	 *             (ownedRelationship_comp+=OwnedFeatureTyping | ownedRelationship_comp+=OwnedSubsetting | ownedRelationship_comp+=OwnedRedefinition) 
	 *             (ownedMembership_comp+=MultiplicityMember isOrdered?='ordered'?)?
	 *         )* 
	 *         (ownedMembership_comp+=FeatureValue | ownedMembership_comp+=SourceItemFlowMember)?
	 *     )
	 */
	protected void sequence_Identification_MultiplicityPart_Parameter_Redefines_Subsets_TypedBy_ValueOrFlowPart(ISerializationContext context, AnalysisCaseUsage semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ActionUsageParameter returns AttributeUsage
	 *
	 * Constraint:
	 *     (
	 *         ((humanId=Name name=Name?) | name=Name)? 
	 *         (ownedMembership_comp+=MultiplicityMember isOrdered?='ordered'? (isNonunique?='nonunique'? isOrdered?='ordered'?)*)? 
	 *         (
	 *             (ownedRelationship_comp+=OwnedFeatureTyping | ownedRelationship_comp+=OwnedSubsetting | ownedRelationship_comp+=OwnedRedefinition) 
	 *             (ownedMembership_comp+=MultiplicityMember isOrdered?='ordered'?)?
	 *         )* 
	 *         (ownedMembership_comp+=FeatureValue | ownedMembership_comp+=SourceItemFlowMember)?
	 *     )
	 */
	protected void sequence_Identification_MultiplicityPart_Parameter_Redefines_Subsets_TypedBy_ValueOrFlowPart(ISerializationContext context, AttributeUsage semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ActionUsageParameter returns CalculationUsage
	 *
	 * Constraint:
	 *     (
	 *         ((humanId=Name name=Name?) | name=Name)? 
	 *         (ownedMembership_comp+=MultiplicityMember isOrdered?='ordered'? (isNonunique?='nonunique'? isOrdered?='ordered'?)*)? 
	 *         (
	 *             (ownedRelationship_comp+=OwnedFeatureTyping | ownedRelationship_comp+=OwnedSubsetting | ownedRelationship_comp+=OwnedRedefinition) 
	 *             (ownedMembership_comp+=MultiplicityMember isOrdered?='ordered'?)?
	 *         )* 
	 *         (ownedMembership_comp+=FeatureValue | ownedMembership_comp+=SourceItemFlowMember)?
	 *     )
	 */
	protected void sequence_Identification_MultiplicityPart_Parameter_Redefines_Subsets_TypedBy_ValueOrFlowPart(ISerializationContext context, CalculationUsage semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ActionUsageParameter returns ConstraintUsage
	 *
	 * Constraint:
	 *     (
	 *         ((humanId=Name name=Name?) | name=Name)? 
	 *         (ownedMembership_comp+=MultiplicityMember isOrdered?='ordered'? (isNonunique?='nonunique'? isOrdered?='ordered'?)*)? 
	 *         (
	 *             (ownedRelationship_comp+=OwnedFeatureTyping | ownedRelationship_comp+=OwnedSubsetting | ownedRelationship_comp+=OwnedRedefinition) 
	 *             (ownedMembership_comp+=MultiplicityMember isOrdered?='ordered'?)?
	 *         )* 
	 *         (ownedMembership_comp+=FeatureValue | ownedMembership_comp+=SourceItemFlowMember)?
	 *     )
	 */
	protected void sequence_Identification_MultiplicityPart_Parameter_Redefines_Subsets_TypedBy_ValueOrFlowPart(ISerializationContext context, ConstraintUsage semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ActionUsageParameter returns ItemUsage
	 *
	 * Constraint:
	 *     (
	 *         ((humanId=Name name=Name?) | name=Name)? 
	 *         (ownedMembership_comp+=MultiplicityMember isOrdered?='ordered'? (isNonunique?='nonunique'? isOrdered?='ordered'?)*)? 
	 *         (
	 *             (ownedRelationship_comp+=OwnedFeatureTyping | ownedRelationship_comp+=OwnedSubsetting | ownedRelationship_comp+=OwnedRedefinition) 
	 *             (ownedMembership_comp+=MultiplicityMember isOrdered?='ordered'?)?
	 *         )* 
	 *         (ownedMembership_comp+=FeatureValue | ownedMembership_comp+=SourceItemFlowMember)?
	 *     )
	 */
	protected void sequence_Identification_MultiplicityPart_Parameter_Redefines_Subsets_TypedBy_ValueOrFlowPart(ISerializationContext context, ItemUsage semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ActionUsageParameter returns PartUsage
	 *
	 * Constraint:
	 *     (
	 *         ((humanId=Name name=Name?) | name=Name)? 
	 *         (ownedMembership_comp+=MultiplicityMember isOrdered?='ordered'? (isNonunique?='nonunique'? isOrdered?='ordered'?)*)? 
	 *         (
	 *             (ownedRelationship_comp+=OwnedFeatureTyping | ownedRelationship_comp+=OwnedSubsetting | ownedRelationship_comp+=OwnedRedefinition) 
	 *             (ownedMembership_comp+=MultiplicityMember isOrdered?='ordered'?)?
	 *         )* 
	 *         (ownedMembership_comp+=FeatureValue | ownedMembership_comp+=SourceItemFlowMember)?
	 *     )
	 */
	protected void sequence_Identification_MultiplicityPart_Parameter_Redefines_Subsets_TypedBy_ValueOrFlowPart(ISerializationContext context, PartUsage semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ActionUsageParameter returns RenderingUsage
	 *
	 * Constraint:
	 *     (
	 *         ((humanId=Name name=Name?) | name=Name)? 
	 *         (ownedMembership_comp+=MultiplicityMember isOrdered?='ordered'? (isNonunique?='nonunique'? isOrdered?='ordered'?)*)? 
	 *         (
	 *             (ownedRelationship_comp+=OwnedFeatureTyping | ownedRelationship_comp+=OwnedSubsetting | ownedRelationship_comp+=OwnedRedefinition) 
	 *             (ownedMembership_comp+=MultiplicityMember isOrdered?='ordered'?)?
	 *         )* 
	 *         (ownedMembership_comp+=FeatureValue | ownedMembership_comp+=SourceItemFlowMember)?
	 *     )
	 */
	protected void sequence_Identification_MultiplicityPart_Parameter_Redefines_Subsets_TypedBy_ValueOrFlowPart(ISerializationContext context, RenderingUsage semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ActionUsageParameter returns RequirementUsage
	 *
	 * Constraint:
	 *     (
	 *         ((humanId=Name name=Name?) | name=Name)? 
	 *         (ownedMembership_comp+=MultiplicityMember isOrdered?='ordered'? (isNonunique?='nonunique'? isOrdered?='ordered'?)*)? 
	 *         (
	 *             (ownedRelationship_comp+=OwnedFeatureTyping | ownedRelationship_comp+=OwnedSubsetting | ownedRelationship_comp+=OwnedRedefinition) 
	 *             (ownedMembership_comp+=MultiplicityMember isOrdered?='ordered'?)?
	 *         )* 
	 *         (ownedMembership_comp+=FeatureValue | ownedMembership_comp+=SourceItemFlowMember)?
	 *     )
	 */
	protected void sequence_Identification_MultiplicityPart_Parameter_Redefines_Subsets_TypedBy_ValueOrFlowPart(ISerializationContext context, RequirementUsage semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ActionUsageParameter returns StateUsage
	 *
	 * Constraint:
	 *     (
	 *         ((humanId=Name name=Name?) | name=Name)? 
	 *         (ownedMembership_comp+=MultiplicityMember isOrdered?='ordered'? (isNonunique?='nonunique'? isOrdered?='ordered'?)*)? 
	 *         (
	 *             (ownedRelationship_comp+=OwnedFeatureTyping | ownedRelationship_comp+=OwnedSubsetting | ownedRelationship_comp+=OwnedRedefinition) 
	 *             (ownedMembership_comp+=MultiplicityMember isOrdered?='ordered'?)?
	 *         )* 
	 *         (ownedMembership_comp+=FeatureValue | ownedMembership_comp+=SourceItemFlowMember)?
	 *     )
	 */
	protected void sequence_Identification_MultiplicityPart_Parameter_Redefines_Subsets_TypedBy_ValueOrFlowPart(ISerializationContext context, StateUsage semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ActionUsageParameter returns VerificationCaseUsage
	 *
	 * Constraint:
	 *     (
	 *         ((humanId=Name name=Name?) | name=Name)? 
	 *         (ownedMembership_comp+=MultiplicityMember isOrdered?='ordered'? (isNonunique?='nonunique'? isOrdered?='ordered'?)*)? 
	 *         (
	 *             (ownedRelationship_comp+=OwnedFeatureTyping | ownedRelationship_comp+=OwnedSubsetting | ownedRelationship_comp+=OwnedRedefinition) 
	 *             (ownedMembership_comp+=MultiplicityMember isOrdered?='ordered'?)?
	 *         )* 
	 *         (ownedMembership_comp+=FeatureValue | ownedMembership_comp+=SourceItemFlowMember)?
	 *     )
	 */
	protected void sequence_Identification_MultiplicityPart_Parameter_Redefines_Subsets_TypedBy_ValueOrFlowPart(ISerializationContext context, VerificationCaseUsage semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ActionUsageParameter returns ViewUsage
	 *
	 * Constraint:
	 *     (
	 *         ((humanId=Name name=Name?) | name=Name)? 
	 *         (ownedMembership_comp+=MultiplicityMember isOrdered?='ordered'? (isNonunique?='nonunique'? isOrdered?='ordered'?)*)? 
	 *         (
	 *             (ownedRelationship_comp+=OwnedFeatureTyping | ownedRelationship_comp+=OwnedSubsetting | ownedRelationship_comp+=OwnedRedefinition) 
	 *             (ownedMembership_comp+=MultiplicityMember isOrdered?='ordered'?)?
	 *         )* 
	 *         (ownedMembership_comp+=FeatureValue | ownedMembership_comp+=SourceItemFlowMember)?
	 *     )
	 */
	protected void sequence_Identification_MultiplicityPart_Parameter_Redefines_Subsets_TypedBy_ValueOrFlowPart(ISerializationContext context, ViewUsage semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ActionUsageParameter returns ViewpointUsage
	 *
	 * Constraint:
	 *     (
	 *         ((humanId=Name name=Name?) | name=Name)? 
	 *         (ownedMembership_comp+=MultiplicityMember isOrdered?='ordered'? (isNonunique?='nonunique'? isOrdered?='ordered'?)*)? 
	 *         (
	 *             (ownedRelationship_comp+=OwnedFeatureTyping | ownedRelationship_comp+=OwnedSubsetting | ownedRelationship_comp+=OwnedRedefinition) 
	 *             (ownedMembership_comp+=MultiplicityMember isOrdered?='ordered'?)?
	 *         )* 
	 *         (ownedMembership_comp+=FeatureValue | ownedMembership_comp+=SourceItemFlowMember)?
	 *     )
	 */
	protected void sequence_Identification_MultiplicityPart_Parameter_Redefines_Subsets_TypedBy_ValueOrFlowPart(ISerializationContext context, ViewpointUsage semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Parameter returns VerificationCaseUsage
	 *
	 * Constraint:
	 *     (
	 *         ((humanId=Name name=Name?) | name=Name)? 
	 *         (ownedMembership_comp+=MultiplicityMember isOrdered?='ordered'? (isNonunique?='nonunique'? isOrdered?='ordered'?)*)? 
	 *         (
	 *             (ownedRelationship_comp+=OwnedFeatureTyping | ownedRelationship_comp+=OwnedSubsetting | ownedRelationship_comp+=OwnedRedefinition) 
	 *             (ownedMembership_comp+=MultiplicityMember isOrdered?='ordered'?)?
	 *         )*
	 *     )
	 */
	protected void sequence_Identification_MultiplicityPart_Parameter_Redefines_Subsets_TypedBy(ISerializationContext context, VerificationCaseUsage semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Parameter returns ViewUsage
	 *
	 * Constraint:
	 *     (
	 *         ((humanId=Name name=Name?) | name=Name)? 
	 *         (ownedMembership_comp+=MultiplicityMember isOrdered?='ordered'? (isNonunique?='nonunique'? isOrdered?='ordered'?)*)? 
	 *         (
	 *             (ownedRelationship_comp+=OwnedFeatureTyping | ownedRelationship_comp+=OwnedSubsetting | ownedRelationship_comp+=OwnedRedefinition) 
	 *             (ownedMembership_comp+=MultiplicityMember isOrdered?='ordered'?)?
	 *         )*
	 *     )
	 */
	protected void sequence_Identification_MultiplicityPart_Parameter_Redefines_Subsets_TypedBy(ISerializationContext context, ViewUsage semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Parameter returns ViewpointUsage
	 *
	 * Constraint:
	 *     (
	 *         ((humanId=Name name=Name?) | name=Name)? 
	 *         (ownedMembership_comp+=MultiplicityMember isOrdered?='ordered'? (isNonunique?='nonunique'? isOrdered?='ordered'?)*)? 
	 *         (
	 *             (ownedRelationship_comp+=OwnedFeatureTyping | ownedRelationship_comp+=OwnedSubsetting | ownedRelationship_comp+=OwnedRedefinition) 
	 *             (ownedMembership_comp+=MultiplicityMember isOrdered?='ordered'?)?
	 *         )*
	 *     )
	 */
	protected void sequence_Identification_MultiplicityPart_Parameter_Redefines_Subsets_TypedBy(ISerializationContext context, ViewpointUsage semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     PerformedActionUsage returns SendActionUsage
	 *
	 * Constraint:
	 *     (
	 *         ownedFeatureMembership_comp+=EmptyParameterMember 
	 *         ownedFeatureMembership_comp+=EmptyItemFeatureMember 
	 *         ((humanId=Name name=Name?) | name=Name)? 
	 *         (ownedMembership_comp+=MultiplicityMember (isOrdered?='ordered' | isNonunique?='nonunique')*)? 
	 *         (
	 *             (
	 *                 (ownedRelationship_comp+=OwnedFeatureTyping ownedRelationship_comp+=OwnedFeatureTyping*) | 
	 *                 (ownedRelationship_comp+=OwnedSubsetting ownedRelationship_comp+=OwnedSubsetting*) | 
	 *                 (ownedRelationship_comp+=OwnedRedefinition ownedRelationship_comp+=OwnedRedefinition*)
	 *             ) 
	 *             (ownedMembership_comp+=MultiplicityMember (isOrdered?='ordered' | isNonunique?='nonunique')*)?
	 *         )* 
	 *         ownedFeatureMembership_comp+=OwnedExpressionMember 
	 *         ownedFeatureMembership_comp+=OwnedExpressionMember
	 *     )
	 */
	protected void sequence_Identification_MultiplicityPart_PerformedActionUsage_Redefines_Redefinitions_SendNodeDeclaration_Subsets_Subsettings_TypedBy_Typings(ISerializationContext context, SendActionUsage semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     DefinitionElement returns Succession
	 *     Succession returns Succession
	 *
	 * Constraint:
	 *     (
	 *         isAbstract?='abstract'? 
	 *         ((humanId=Name name=Name?) | name=Name)? 
	 *         (ownedMembership_comp+=MultiplicityMember (isOrdered?='ordered' | isNonunique?='nonunique')*)? 
	 *         (
	 *             (
	 *                 (ownedRelationship_comp+=OwnedFeatureTyping ownedRelationship_comp+=OwnedFeatureTyping*) | 
	 *                 (ownedRelationship_comp+=OwnedSubsetting ownedRelationship_comp+=OwnedSubsetting*) | 
	 *                 (ownedRelationship_comp+=OwnedRedefinition ownedRelationship_comp+=OwnedRedefinition*)
	 *             ) 
	 *             (ownedMembership_comp+=MultiplicityMember (isOrdered?='ordered' | isNonunique?='nonunique')*)?
	 *         )* 
	 *         ownedFeatureMembership_comp+=ConnectorEndMember 
	 *         ownedFeatureMembership_comp+=ConnectorEndMember 
	 *         (
	 *             documentation_comp+=OwnedDocumentation | 
	 *             ownedMembership_comp+=NonFeatureTypeMember | 
	 *             ownedFeatureMembership_comp+=FeatureTypeMember | 
	 *             ownedImport_comp+=PackageImport
	 *         )*
	 *     )
	 */
	protected void sequence_Identification_MultiplicityPart_Redefines_Redefinitions_Subsets_Subsettings_Succession_SuccessionDeclaration_TypeBody_TypedBy_Typings(ISerializationContext context, Succession semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     TransitionUsage returns TransitionUsage
	 *
	 * Constraint:
	 *     (
	 *         ((humanId=Name name=Name?) | name=Name)? 
	 *         (ownedMembership_comp+=MultiplicityMember (isOrdered?='ordered' | isNonunique?='nonunique')*)? 
	 *         (
	 *             (
	 *                 (ownedRelationship_comp+=OwnedFeatureTyping ownedRelationship_comp+=OwnedFeatureTyping*) | 
	 *                 (ownedRelationship_comp+=OwnedSubsetting ownedRelationship_comp+=OwnedSubsetting*) | 
	 *                 (ownedRelationship_comp+=OwnedRedefinition ownedRelationship_comp+=OwnedRedefinition*)
	 *             ) 
	 *             (ownedMembership_comp+=MultiplicityMember (isOrdered?='ordered' | isNonunique?='nonunique')*)?
	 *         )* 
	 *         ownedFeatureMembership_comp+=TransitionSourceMember 
	 *         (ownedImport_comp+=EmptyImport ownedFeatureMembership_comp+=TriggerActionMember)? 
	 *         ownedFeatureMembership_comp+=GuardExpressionMember? 
	 *         ownedFeatureMembership_comp+=EffectBehaviorMember? 
	 *         ownedFeatureMembership_comp+=TransitionSuccessionMember
	 *     )
	 */
	protected void sequence_Identification_MultiplicityPart_Redefines_Redefinitions_Subsets_Subsettings_TransitionUsage_TypedBy_Typings(ISerializationContext context, TransitionUsage semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Package returns Package
	 *     DefinitionElement returns Package
	 *
	 * Constraint:
	 *     (
	 *         ((humanId=Name name=Name?) | name=Name)? 
	 *         (documentation_comp+=OwnedDocumentation | ownedMembership_comp+=PackageMember | ownedImport_comp+=PackageImport)*
	 *     )
	 */
	protected void sequence_Identification_PackageBody(ISerializationContext context, org.omg.sysml.lang.sysml.Package semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     DefinitionElement returns StateDefinition
	 *     StateDefinition returns StateDefinition
	 *
	 * Constraint:
	 *     (
	 *         isAbstract?='abstract'? 
	 *         ((humanId=Name name=Name?) | name=Name)? 
	 *         (ownedRelationship_comp+=OwnedSuperclassing ownedRelationship_comp+=OwnedSuperclassing*)? 
	 *         (ownedFeatureMembership_comp+=ParameterMember ownedFeatureMembership_comp+=ParameterMember*)? 
	 *         (ownedFeatureMembership_comp+=EntryActionMember ownedFeatureMembership_comp+=EntryTransitionMember*)? 
	 *         ownedFeatureMembership_comp+=DoActionMember? 
	 *         ownedFeatureMembership_comp+=ExitActionMember? 
	 *         (
	 *             (
	 *                 documentation_comp+=OwnedDocumentation | 
	 *                 ownedMembership_comp+=NestedDefinitionMember | 
	 *                 ownedMembership_comp+=VariantUsageMember | 
	 *                 ownedFeatureMembership_comp+=ParameterFlowUsageMember | 
	 *                 ownedFeatureMembership_comp+=StructureUsageMember | 
	 *                 ownedFeatureMembership_comp+=TransitionUsageMember | 
	 *                 ownedImport_comp+=PackageImport
	 *             )? 
	 *             (ownedFeatureMembership_comp+=BehaviorUsageMember ownedFeatureMembership_comp+=TargetTransitionUsageMember*)? 
	 *             (ownedFeatureMembership_comp+=EmptySuccessionMember? ownedFeatureMembership_comp+=IndividualUsageMember)?
	 *         )+
	 *     )
	 */
	protected void sequence_Identification_ParameterList_StateBodyPart_StateDefBodyItem_StateDefinition_SuperclassingPart(ISerializationContext context, StateDefinition semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     TextualRepresentation returns TextualRepresentation
	 *     DefinitionElement returns TextualRepresentation
	 *
	 * Constraint:
	 *     (
	 *         ((humanId=Name name=Name?) | name=Name)? 
	 *         (ownedRelationship_comp+=Annotation | ownedRelationship_comp+=EmptyAnnotation) 
	 *         language=STRING_VALUE 
	 *         body=REGULAR_COMMENT
	 *     )
	 */
	protected void sequence_Identification_TextualRepresentation(ISerializationContext context, TextualRepresentation semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     OwnedExpression returns InvocationExpression
	 *     ConditionalExpression returns InvocationExpression
	 *     ConditionalExpression.OperatorExpression_1_0 returns InvocationExpression
	 *     NullCoalescingExpression returns InvocationExpression
	 *     NullCoalescingExpression.OperatorExpression_1_0 returns InvocationExpression
	 *     ConditionalOrExpression returns InvocationExpression
	 *     ConditionalOrExpression.OperatorExpression_1_0 returns InvocationExpression
	 *     ConditionalAndExpression returns InvocationExpression
	 *     ConditionalAndExpression.OperatorExpression_1_0 returns InvocationExpression
	 *     OrExpression returns InvocationExpression
	 *     OrExpression.OperatorExpression_1_0 returns InvocationExpression
	 *     XorExpression returns InvocationExpression
	 *     XorExpression.OperatorExpression_1_0 returns InvocationExpression
	 *     AndExpression returns InvocationExpression
	 *     AndExpression.OperatorExpression_1_0 returns InvocationExpression
	 *     EqualityExpression returns InvocationExpression
	 *     EqualityExpression.OperatorExpression_1_0 returns InvocationExpression
	 *     ClassificationExpression returns InvocationExpression
	 *     ClassificationExpression.OperatorExpression_1_0 returns InvocationExpression
	 *     RelationalExpression returns InvocationExpression
	 *     RelationalExpression.OperatorExpression_1_0 returns InvocationExpression
	 *     AdditiveExpression returns InvocationExpression
	 *     AdditiveExpression.OperatorExpression_1_0 returns InvocationExpression
	 *     MultiplicativeExpression returns InvocationExpression
	 *     MultiplicativeExpression.OperatorExpression_1_0 returns InvocationExpression
	 *     ExponentiationExpression returns InvocationExpression
	 *     ExponentiationExpression.OperatorExpression_1_0 returns InvocationExpression
	 *     UnitsExpression returns InvocationExpression
	 *     UnitsExpression.OperatorExpression_1_0 returns InvocationExpression
	 *     UnaryExpression returns InvocationExpression
	 *     ExtentExpression returns InvocationExpression
	 *     SequenceExpression returns InvocationExpression
	 *     SequenceExpression.OperatorExpression_1_0_0 returns InvocationExpression
	 *     SequenceExpression.OperatorExpression_1_1_0 returns InvocationExpression
	 *     SequenceConstructionExpression returns InvocationExpression
	 *     SequenceConstructionExpression.OperatorExpression_1_2_0_0 returns InvocationExpression
	 *     SequenceConstructionExpression.OperatorExpression_1_2_1_0 returns InvocationExpression
	 *     SequenceElementList returns InvocationExpression
	 *     SequenceElementList.OperatorExpression_1_0 returns InvocationExpression
	 *     BaseExpression returns InvocationExpression
	 *     InvocationExpression returns InvocationExpression
	 *
	 * Constraint:
	 *     (
	 *         ownedRelationship_comp+=OwnedFeatureTyping 
	 *         (
	 *             (ownedFeatureMembership_comp+=OwnedExpressionMember ownedFeatureMembership_comp+=OwnedExpressionMember*) | 
	 *             (ownedFeatureMembership_comp+=NamedExpressionMember ownedFeatureMembership_comp+=NamedExpressionMember*)
	 *         )?
	 *     )
	 */
	protected void sequence_InvocationExpression_NamedArgumentList_PositionalArgumentList(ISerializationContext context, InvocationExpression semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ItemFeatureMember returns FeatureMembership
	 *
	 * Constraint:
	 *     (memberName=Name? ownedMemberFeature_comp=ItemFeature)
	 */
	protected void sequence_ItemFeatureMember(ISerializationContext context, FeatureMembership semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ItemFeature returns ItemFeature
	 *
	 * Constraint:
	 *     (
	 *         (ownedRelationship_comp+=OwnedFeatureTyping ownedMembership_comp+=MultiplicityMember?) | 
	 *         (ownedMembership_comp+=MultiplicityMember ownedRelationship_comp+=OwnedFeatureTyping?)
	 *     )
	 */
	protected void sequence_ItemFeature(ISerializationContext context, ItemFeature semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ItemFlowEndMember returns EndFeatureMembership
	 *
	 * Constraint:
	 *     ownedMemberFeature_comp=ItemFlowEnd
	 */
	protected void sequence_ItemFlowEndMember(ISerializationContext context, EndFeatureMembership semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, SysMLPackage.Literals.FEATURE_MEMBERSHIP__OWNED_MEMBER_FEATURE_COMP) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SysMLPackage.Literals.FEATURE_MEMBERSHIP__OWNED_MEMBER_FEATURE_COMP));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getItemFlowEndMemberAccess().getOwnedMemberFeature_compItemFlowEndParserRuleCall_0(), semanticObject.getOwnedMemberFeature_comp());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     ItemFlowEnd returns ItemFlowEnd
	 *
	 * Constraint:
	 *     ownedFeatureMembership_comp+=ItemFlowFeatureMember
	 */
	protected void sequence_ItemFlowEnd(ISerializationContext context, ItemFlowEnd semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ItemFlowFeatureMember returns FeatureMembership
	 *
	 * Constraint:
	 *     ownedMemberFeature_comp=ItemFlowFeature
	 */
	protected void sequence_ItemFlowFeatureMember(ISerializationContext context, FeatureMembership semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, SysMLPackage.Literals.FEATURE_MEMBERSHIP__OWNED_MEMBER_FEATURE_COMP) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SysMLPackage.Literals.FEATURE_MEMBERSHIP__OWNED_MEMBER_FEATURE_COMP));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getItemFlowFeatureMemberAccess().getOwnedMemberFeature_compItemFlowFeatureParserRuleCall_0(), semanticObject.getOwnedMemberFeature_comp());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     ItemFlowFeature returns ItemFlowFeature
	 *
	 * Constraint:
	 *     ownedRelationship_comp+=OwnedRedefinition
	 */
	protected void sequence_ItemFlowFeature(ISerializationContext context, ItemFlowFeature semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     LifeClassMembership returns Membership
	 *
	 * Constraint:
	 *     ownedMemberElement_comp=LifeClass
	 */
	protected void sequence_LifeClassMembership(ISerializationContext context, Membership semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, SysMLPackage.Literals.MEMBERSHIP__OWNED_MEMBER_ELEMENT_COMP) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SysMLPackage.Literals.MEMBERSHIP__OWNED_MEMBER_ELEMENT_COMP));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getLifeClassMembershipAccess().getOwnedMemberElement_compLifeClassParserRuleCall_0(), semanticObject.getOwnedMemberElement_comp());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     LifeClass returns LifeClass
	 *
	 * Constraint:
	 *     {LifeClass}
	 */
	protected void sequence_LifeClass(ISerializationContext context, LifeClass semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     OwnedExpression returns LiteralBoolean
	 *     ConditionalExpression returns LiteralBoolean
	 *     ConditionalExpression.OperatorExpression_1_0 returns LiteralBoolean
	 *     NullCoalescingExpression returns LiteralBoolean
	 *     NullCoalescingExpression.OperatorExpression_1_0 returns LiteralBoolean
	 *     ConditionalOrExpression returns LiteralBoolean
	 *     ConditionalOrExpression.OperatorExpression_1_0 returns LiteralBoolean
	 *     ConditionalAndExpression returns LiteralBoolean
	 *     ConditionalAndExpression.OperatorExpression_1_0 returns LiteralBoolean
	 *     OrExpression returns LiteralBoolean
	 *     OrExpression.OperatorExpression_1_0 returns LiteralBoolean
	 *     XorExpression returns LiteralBoolean
	 *     XorExpression.OperatorExpression_1_0 returns LiteralBoolean
	 *     AndExpression returns LiteralBoolean
	 *     AndExpression.OperatorExpression_1_0 returns LiteralBoolean
	 *     EqualityExpression returns LiteralBoolean
	 *     EqualityExpression.OperatorExpression_1_0 returns LiteralBoolean
	 *     ClassificationExpression returns LiteralBoolean
	 *     ClassificationExpression.OperatorExpression_1_0 returns LiteralBoolean
	 *     RelationalExpression returns LiteralBoolean
	 *     RelationalExpression.OperatorExpression_1_0 returns LiteralBoolean
	 *     AdditiveExpression returns LiteralBoolean
	 *     AdditiveExpression.OperatorExpression_1_0 returns LiteralBoolean
	 *     MultiplicativeExpression returns LiteralBoolean
	 *     MultiplicativeExpression.OperatorExpression_1_0 returns LiteralBoolean
	 *     ExponentiationExpression returns LiteralBoolean
	 *     ExponentiationExpression.OperatorExpression_1_0 returns LiteralBoolean
	 *     UnitsExpression returns LiteralBoolean
	 *     UnitsExpression.OperatorExpression_1_0 returns LiteralBoolean
	 *     UnaryExpression returns LiteralBoolean
	 *     ExtentExpression returns LiteralBoolean
	 *     SequenceExpression returns LiteralBoolean
	 *     SequenceExpression.OperatorExpression_1_0_0 returns LiteralBoolean
	 *     SequenceExpression.OperatorExpression_1_1_0 returns LiteralBoolean
	 *     SequenceConstructionExpression returns LiteralBoolean
	 *     SequenceConstructionExpression.OperatorExpression_1_2_0_0 returns LiteralBoolean
	 *     SequenceConstructionExpression.OperatorExpression_1_2_1_0 returns LiteralBoolean
	 *     SequenceElementList returns LiteralBoolean
	 *     SequenceElementList.OperatorExpression_1_0 returns LiteralBoolean
	 *     BaseExpression returns LiteralBoolean
	 *     LiteralExpression returns LiteralBoolean
	 *     LiteralBoolean returns LiteralBoolean
	 *
	 * Constraint:
	 *     value=BooleanValue
	 */
	protected void sequence_LiteralBoolean(ISerializationContext context, LiteralBoolean semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, SysMLPackage.Literals.LITERAL_BOOLEAN__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SysMLPackage.Literals.LITERAL_BOOLEAN__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getLiteralBooleanAccess().getValueBooleanValueParserRuleCall_0(), semanticObject.isValue());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     LiteralIntegerMember returns Membership
	 *
	 * Constraint:
	 *     ownedMemberElement_comp=LiteralInteger
	 */
	protected void sequence_LiteralIntegerMember(ISerializationContext context, Membership semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, SysMLPackage.Literals.MEMBERSHIP__OWNED_MEMBER_ELEMENT_COMP) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SysMLPackage.Literals.MEMBERSHIP__OWNED_MEMBER_ELEMENT_COMP));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getLiteralIntegerMemberAccess().getOwnedMemberElement_compLiteralIntegerParserRuleCall_0(), semanticObject.getOwnedMemberElement_comp());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     OwnedExpression returns LiteralInteger
	 *     ConditionalExpression returns LiteralInteger
	 *     ConditionalExpression.OperatorExpression_1_0 returns LiteralInteger
	 *     NullCoalescingExpression returns LiteralInteger
	 *     NullCoalescingExpression.OperatorExpression_1_0 returns LiteralInteger
	 *     ConditionalOrExpression returns LiteralInteger
	 *     ConditionalOrExpression.OperatorExpression_1_0 returns LiteralInteger
	 *     ConditionalAndExpression returns LiteralInteger
	 *     ConditionalAndExpression.OperatorExpression_1_0 returns LiteralInteger
	 *     OrExpression returns LiteralInteger
	 *     OrExpression.OperatorExpression_1_0 returns LiteralInteger
	 *     XorExpression returns LiteralInteger
	 *     XorExpression.OperatorExpression_1_0 returns LiteralInteger
	 *     AndExpression returns LiteralInteger
	 *     AndExpression.OperatorExpression_1_0 returns LiteralInteger
	 *     EqualityExpression returns LiteralInteger
	 *     EqualityExpression.OperatorExpression_1_0 returns LiteralInteger
	 *     ClassificationExpression returns LiteralInteger
	 *     ClassificationExpression.OperatorExpression_1_0 returns LiteralInteger
	 *     RelationalExpression returns LiteralInteger
	 *     RelationalExpression.OperatorExpression_1_0 returns LiteralInteger
	 *     AdditiveExpression returns LiteralInteger
	 *     AdditiveExpression.OperatorExpression_1_0 returns LiteralInteger
	 *     MultiplicativeExpression returns LiteralInteger
	 *     MultiplicativeExpression.OperatorExpression_1_0 returns LiteralInteger
	 *     ExponentiationExpression returns LiteralInteger
	 *     ExponentiationExpression.OperatorExpression_1_0 returns LiteralInteger
	 *     UnitsExpression returns LiteralInteger
	 *     UnitsExpression.OperatorExpression_1_0 returns LiteralInteger
	 *     UnaryExpression returns LiteralInteger
	 *     ExtentExpression returns LiteralInteger
	 *     SequenceExpression returns LiteralInteger
	 *     SequenceExpression.OperatorExpression_1_0_0 returns LiteralInteger
	 *     SequenceExpression.OperatorExpression_1_1_0 returns LiteralInteger
	 *     SequenceConstructionExpression returns LiteralInteger
	 *     SequenceConstructionExpression.OperatorExpression_1_2_0_0 returns LiteralInteger
	 *     SequenceConstructionExpression.OperatorExpression_1_2_1_0 returns LiteralInteger
	 *     SequenceElementList returns LiteralInteger
	 *     SequenceElementList.OperatorExpression_1_0 returns LiteralInteger
	 *     BaseExpression returns LiteralInteger
	 *     LiteralExpression returns LiteralInteger
	 *     LiteralInteger returns LiteralInteger
	 *     LiteralUnlimitedNatural returns LiteralInteger
	 *
	 * Constraint:
	 *     value=DECIMAL_VALUE
	 */
	protected void sequence_LiteralInteger(ISerializationContext context, LiteralInteger semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, SysMLPackage.Literals.LITERAL_INTEGER__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SysMLPackage.Literals.LITERAL_INTEGER__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getLiteralIntegerAccess().getValueDECIMAL_VALUETerminalRuleCall_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     OwnedExpression returns LiteralReal
	 *     ConditionalExpression returns LiteralReal
	 *     ConditionalExpression.OperatorExpression_1_0 returns LiteralReal
	 *     NullCoalescingExpression returns LiteralReal
	 *     NullCoalescingExpression.OperatorExpression_1_0 returns LiteralReal
	 *     ConditionalOrExpression returns LiteralReal
	 *     ConditionalOrExpression.OperatorExpression_1_0 returns LiteralReal
	 *     ConditionalAndExpression returns LiteralReal
	 *     ConditionalAndExpression.OperatorExpression_1_0 returns LiteralReal
	 *     OrExpression returns LiteralReal
	 *     OrExpression.OperatorExpression_1_0 returns LiteralReal
	 *     XorExpression returns LiteralReal
	 *     XorExpression.OperatorExpression_1_0 returns LiteralReal
	 *     AndExpression returns LiteralReal
	 *     AndExpression.OperatorExpression_1_0 returns LiteralReal
	 *     EqualityExpression returns LiteralReal
	 *     EqualityExpression.OperatorExpression_1_0 returns LiteralReal
	 *     ClassificationExpression returns LiteralReal
	 *     ClassificationExpression.OperatorExpression_1_0 returns LiteralReal
	 *     RelationalExpression returns LiteralReal
	 *     RelationalExpression.OperatorExpression_1_0 returns LiteralReal
	 *     AdditiveExpression returns LiteralReal
	 *     AdditiveExpression.OperatorExpression_1_0 returns LiteralReal
	 *     MultiplicativeExpression returns LiteralReal
	 *     MultiplicativeExpression.OperatorExpression_1_0 returns LiteralReal
	 *     ExponentiationExpression returns LiteralReal
	 *     ExponentiationExpression.OperatorExpression_1_0 returns LiteralReal
	 *     UnitsExpression returns LiteralReal
	 *     UnitsExpression.OperatorExpression_1_0 returns LiteralReal
	 *     UnaryExpression returns LiteralReal
	 *     ExtentExpression returns LiteralReal
	 *     SequenceExpression returns LiteralReal
	 *     SequenceExpression.OperatorExpression_1_0_0 returns LiteralReal
	 *     SequenceExpression.OperatorExpression_1_1_0 returns LiteralReal
	 *     SequenceConstructionExpression returns LiteralReal
	 *     SequenceConstructionExpression.OperatorExpression_1_2_0_0 returns LiteralReal
	 *     SequenceConstructionExpression.OperatorExpression_1_2_1_0 returns LiteralReal
	 *     SequenceElementList returns LiteralReal
	 *     SequenceElementList.OperatorExpression_1_0 returns LiteralReal
	 *     BaseExpression returns LiteralReal
	 *     LiteralExpression returns LiteralReal
	 *     LiteralReal returns LiteralReal
	 *
	 * Constraint:
	 *     value=RealValue
	 */
	protected void sequence_LiteralReal(ISerializationContext context, LiteralReal semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, SysMLPackage.Literals.LITERAL_REAL__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SysMLPackage.Literals.LITERAL_REAL__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getLiteralRealAccess().getValueRealValueParserRuleCall_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     OwnedExpression returns LiteralString
	 *     ConditionalExpression returns LiteralString
	 *     ConditionalExpression.OperatorExpression_1_0 returns LiteralString
	 *     NullCoalescingExpression returns LiteralString
	 *     NullCoalescingExpression.OperatorExpression_1_0 returns LiteralString
	 *     ConditionalOrExpression returns LiteralString
	 *     ConditionalOrExpression.OperatorExpression_1_0 returns LiteralString
	 *     ConditionalAndExpression returns LiteralString
	 *     ConditionalAndExpression.OperatorExpression_1_0 returns LiteralString
	 *     OrExpression returns LiteralString
	 *     OrExpression.OperatorExpression_1_0 returns LiteralString
	 *     XorExpression returns LiteralString
	 *     XorExpression.OperatorExpression_1_0 returns LiteralString
	 *     AndExpression returns LiteralString
	 *     AndExpression.OperatorExpression_1_0 returns LiteralString
	 *     EqualityExpression returns LiteralString
	 *     EqualityExpression.OperatorExpression_1_0 returns LiteralString
	 *     ClassificationExpression returns LiteralString
	 *     ClassificationExpression.OperatorExpression_1_0 returns LiteralString
	 *     RelationalExpression returns LiteralString
	 *     RelationalExpression.OperatorExpression_1_0 returns LiteralString
	 *     AdditiveExpression returns LiteralString
	 *     AdditiveExpression.OperatorExpression_1_0 returns LiteralString
	 *     MultiplicativeExpression returns LiteralString
	 *     MultiplicativeExpression.OperatorExpression_1_0 returns LiteralString
	 *     ExponentiationExpression returns LiteralString
	 *     ExponentiationExpression.OperatorExpression_1_0 returns LiteralString
	 *     UnitsExpression returns LiteralString
	 *     UnitsExpression.OperatorExpression_1_0 returns LiteralString
	 *     UnaryExpression returns LiteralString
	 *     ExtentExpression returns LiteralString
	 *     SequenceExpression returns LiteralString
	 *     SequenceExpression.OperatorExpression_1_0_0 returns LiteralString
	 *     SequenceExpression.OperatorExpression_1_1_0 returns LiteralString
	 *     SequenceConstructionExpression returns LiteralString
	 *     SequenceConstructionExpression.OperatorExpression_1_2_0_0 returns LiteralString
	 *     SequenceConstructionExpression.OperatorExpression_1_2_1_0 returns LiteralString
	 *     SequenceElementList returns LiteralString
	 *     SequenceElementList.OperatorExpression_1_0 returns LiteralString
	 *     BaseExpression returns LiteralString
	 *     LiteralExpression returns LiteralString
	 *     LiteralString returns LiteralString
	 *
	 * Constraint:
	 *     value=STRING_VALUE
	 */
	protected void sequence_LiteralString(ISerializationContext context, LiteralString semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, SysMLPackage.Literals.LITERAL_STRING__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SysMLPackage.Literals.LITERAL_STRING__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getLiteralStringAccess().getValueSTRING_VALUETerminalRuleCall_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     OwnedExpression returns LiteralUnbounded
	 *     ConditionalExpression returns LiteralUnbounded
	 *     ConditionalExpression.OperatorExpression_1_0 returns LiteralUnbounded
	 *     NullCoalescingExpression returns LiteralUnbounded
	 *     NullCoalescingExpression.OperatorExpression_1_0 returns LiteralUnbounded
	 *     ConditionalOrExpression returns LiteralUnbounded
	 *     ConditionalOrExpression.OperatorExpression_1_0 returns LiteralUnbounded
	 *     ConditionalAndExpression returns LiteralUnbounded
	 *     ConditionalAndExpression.OperatorExpression_1_0 returns LiteralUnbounded
	 *     OrExpression returns LiteralUnbounded
	 *     OrExpression.OperatorExpression_1_0 returns LiteralUnbounded
	 *     XorExpression returns LiteralUnbounded
	 *     XorExpression.OperatorExpression_1_0 returns LiteralUnbounded
	 *     AndExpression returns LiteralUnbounded
	 *     AndExpression.OperatorExpression_1_0 returns LiteralUnbounded
	 *     EqualityExpression returns LiteralUnbounded
	 *     EqualityExpression.OperatorExpression_1_0 returns LiteralUnbounded
	 *     ClassificationExpression returns LiteralUnbounded
	 *     ClassificationExpression.OperatorExpression_1_0 returns LiteralUnbounded
	 *     RelationalExpression returns LiteralUnbounded
	 *     RelationalExpression.OperatorExpression_1_0 returns LiteralUnbounded
	 *     AdditiveExpression returns LiteralUnbounded
	 *     AdditiveExpression.OperatorExpression_1_0 returns LiteralUnbounded
	 *     MultiplicativeExpression returns LiteralUnbounded
	 *     MultiplicativeExpression.OperatorExpression_1_0 returns LiteralUnbounded
	 *     ExponentiationExpression returns LiteralUnbounded
	 *     ExponentiationExpression.OperatorExpression_1_0 returns LiteralUnbounded
	 *     UnitsExpression returns LiteralUnbounded
	 *     UnitsExpression.OperatorExpression_1_0 returns LiteralUnbounded
	 *     UnaryExpression returns LiteralUnbounded
	 *     ExtentExpression returns LiteralUnbounded
	 *     SequenceExpression returns LiteralUnbounded
	 *     SequenceExpression.OperatorExpression_1_0_0 returns LiteralUnbounded
	 *     SequenceExpression.OperatorExpression_1_1_0 returns LiteralUnbounded
	 *     SequenceConstructionExpression returns LiteralUnbounded
	 *     SequenceConstructionExpression.OperatorExpression_1_2_0_0 returns LiteralUnbounded
	 *     SequenceConstructionExpression.OperatorExpression_1_2_1_0 returns LiteralUnbounded
	 *     SequenceElementList returns LiteralUnbounded
	 *     SequenceElementList.OperatorExpression_1_0 returns LiteralUnbounded
	 *     BaseExpression returns LiteralUnbounded
	 *     LiteralExpression returns LiteralUnbounded
	 *     LiteralUnbounded returns LiteralUnbounded
	 *     LiteralUnlimitedNatural returns LiteralUnbounded
	 *
	 * Constraint:
	 *     {LiteralUnbounded}
	 */
	protected void sequence_LiteralUnbounded(ISerializationContext context, LiteralUnbounded semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     LiteralUnlimitedNaturalMember returns Membership
	 *
	 * Constraint:
	 *     ownedMemberElement_comp=LiteralUnlimitedNatural
	 */
	protected void sequence_LiteralUnlimitedNaturalMember(ISerializationContext context, Membership semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, SysMLPackage.Literals.MEMBERSHIP__OWNED_MEMBER_ELEMENT_COMP) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SysMLPackage.Literals.MEMBERSHIP__OWNED_MEMBER_ELEMENT_COMP));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getLiteralUnlimitedNaturalMemberAccess().getOwnedMemberElement_compLiteralUnlimitedNaturalParserRuleCall_0(), semanticObject.getOwnedMemberElement_comp());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     MultiplicityMember returns Membership
	 *
	 * Constraint:
	 *     ownedMemberElement_comp=Multiplicity
	 */
	protected void sequence_MultiplicityMember(ISerializationContext context, Membership semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, SysMLPackage.Literals.MEMBERSHIP__OWNED_MEMBER_ELEMENT_COMP) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SysMLPackage.Literals.MEMBERSHIP__OWNED_MEMBER_ELEMENT_COMP));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getMultiplicityMemberAccess().getOwnedMemberElement_compMultiplicityParserRuleCall_0(), semanticObject.getOwnedMemberElement_comp());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     MultiplicitySourceEndMember returns EndFeatureMembership
	 *
	 * Constraint:
	 *     ownedMemberFeature_comp=MultiplicitySourceEnd
	 */
	protected void sequence_MultiplicitySourceEndMember(ISerializationContext context, EndFeatureMembership semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, SysMLPackage.Literals.FEATURE_MEMBERSHIP__OWNED_MEMBER_FEATURE_COMP) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SysMLPackage.Literals.FEATURE_MEMBERSHIP__OWNED_MEMBER_FEATURE_COMP));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getMultiplicitySourceEndMemberAccess().getOwnedMemberFeature_compMultiplicitySourceEndParserRuleCall_0(), semanticObject.getOwnedMemberFeature_comp());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     MultiplicitySourceEnd returns SourceEnd
	 *
	 * Constraint:
	 *     ownedMembership_comp+=MultiplicityMember?
	 */
	protected void sequence_MultiplicitySourceEnd(ISerializationContext context, SourceEnd semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Multiplicity returns MultiplicityRange
	 *
	 * Constraint:
	 *     (ownedMembership_comp+=LiteralIntegerMember? ownedMembership_comp+=LiteralUnlimitedNaturalMember)
	 */
	protected void sequence_Multiplicity(ISerializationContext context, MultiplicityRange semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     NamedExpressionMember returns FeatureMembership
	 *
	 * Constraint:
	 *     (memberName=Name ownedMemberFeature_comp=OwnedExpression)
	 */
	protected void sequence_NamedExpressionMember(ISerializationContext context, FeatureMembership semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, SysMLPackage.Literals.MEMBERSHIP__MEMBER_NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SysMLPackage.Literals.MEMBERSHIP__MEMBER_NAME));
			if (transientValues.isValueTransient(semanticObject, SysMLPackage.Literals.FEATURE_MEMBERSHIP__OWNED_MEMBER_FEATURE_COMP) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SysMLPackage.Literals.FEATURE_MEMBERSHIP__OWNED_MEMBER_FEATURE_COMP));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getNamedExpressionMemberAccess().getMemberNameNameParserRuleCall_0_0(), semanticObject.getMemberName());
		feeder.accept(grammarAccess.getNamedExpressionMemberAccess().getOwnedMemberFeature_compOwnedExpressionParserRuleCall_2_0(), semanticObject.getOwnedMemberFeature_comp());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     PackageMember returns Membership
	 *
	 * Constraint:
	 *     (
	 *         ownedRelationship_comp+=PrefixDocumentation* 
	 *         visibility=BasicVisibilityIndicator? 
	 *         (ownedMemberElement_comp=DefinitionElement | (memberElement=[Element|QualifiedName] memberName=Name?) | ownedMemberElement_comp=UsageElement)
	 *     )
	 */
	protected void sequence_NonUsagePackageMember_PackageMember_UsagePackageMember(ISerializationContext context, Membership semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     NonFeatureTypeMember returns Membership
	 *     NestedDefinitionMember returns Membership
	 *
	 * Constraint:
	 *     (
	 *         ownedRelationship_comp+=PrefixDocumentation* 
	 *         visibility=VisibilityIndicator? 
	 *         (ownedMemberElement_comp=DefinitionElement | (memberElement=[Element|QualifiedName] memberName=Name?))
	 *     )
	 */
	protected void sequence_NonUsagePackageMember_TypeMemberPrefix(ISerializationContext context, Membership semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     OwnedExpression returns NullExpression
	 *     ConditionalExpression returns NullExpression
	 *     ConditionalExpression.OperatorExpression_1_0 returns NullExpression
	 *     NullCoalescingExpression returns NullExpression
	 *     NullCoalescingExpression.OperatorExpression_1_0 returns NullExpression
	 *     ConditionalOrExpression returns NullExpression
	 *     ConditionalOrExpression.OperatorExpression_1_0 returns NullExpression
	 *     ConditionalAndExpression returns NullExpression
	 *     ConditionalAndExpression.OperatorExpression_1_0 returns NullExpression
	 *     OrExpression returns NullExpression
	 *     OrExpression.OperatorExpression_1_0 returns NullExpression
	 *     XorExpression returns NullExpression
	 *     XorExpression.OperatorExpression_1_0 returns NullExpression
	 *     AndExpression returns NullExpression
	 *     AndExpression.OperatorExpression_1_0 returns NullExpression
	 *     EqualityExpression returns NullExpression
	 *     EqualityExpression.OperatorExpression_1_0 returns NullExpression
	 *     ClassificationExpression returns NullExpression
	 *     ClassificationExpression.OperatorExpression_1_0 returns NullExpression
	 *     RelationalExpression returns NullExpression
	 *     RelationalExpression.OperatorExpression_1_0 returns NullExpression
	 *     AdditiveExpression returns NullExpression
	 *     AdditiveExpression.OperatorExpression_1_0 returns NullExpression
	 *     MultiplicativeExpression returns NullExpression
	 *     MultiplicativeExpression.OperatorExpression_1_0 returns NullExpression
	 *     ExponentiationExpression returns NullExpression
	 *     ExponentiationExpression.OperatorExpression_1_0 returns NullExpression
	 *     UnitsExpression returns NullExpression
	 *     UnitsExpression.OperatorExpression_1_0 returns NullExpression
	 *     UnaryExpression returns NullExpression
	 *     ExtentExpression returns NullExpression
	 *     SequenceExpression returns NullExpression
	 *     SequenceExpression.OperatorExpression_1_0_0 returns NullExpression
	 *     SequenceExpression.OperatorExpression_1_1_0 returns NullExpression
	 *     SequenceConstructionExpression returns NullExpression
	 *     SequenceConstructionExpression.OperatorExpression_1_2_0_0 returns NullExpression
	 *     SequenceConstructionExpression.OperatorExpression_1_2_1_0 returns NullExpression
	 *     SequenceElementList returns NullExpression
	 *     SequenceElementList.OperatorExpression_1_0 returns NullExpression
	 *     BaseExpression returns NullExpression
	 *     NullExpression returns NullExpression
	 *
	 * Constraint:
	 *     {NullExpression}
	 */
	protected void sequence_NullExpression_SequenceConstructionExpression(ISerializationContext context, NullExpression semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     OwnedDocumentation returns Documentation
	 *
	 * Constraint:
	 *     documentingComment_comp=DocumentationComment
	 */
	protected void sequence_OwnedDocumentation(ISerializationContext context, Documentation semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, SysMLPackage.Literals.DOCUMENTATION__DOCUMENTING_COMMENT_COMP) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SysMLPackage.Literals.DOCUMENTATION__DOCUMENTING_COMMENT_COMP));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getOwnedDocumentationAccess().getDocumentingComment_compDocumentationCommentParserRuleCall_0(), semanticObject.getDocumentingComment_comp());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     OwnedExpressionMember returns FeatureMembership
	 *
	 * Constraint:
	 *     ownedMemberFeature_comp=OwnedExpression
	 */
	protected void sequence_OwnedExpressionMember(ISerializationContext context, FeatureMembership semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, SysMLPackage.Literals.FEATURE_MEMBERSHIP__OWNED_MEMBER_FEATURE_COMP) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SysMLPackage.Literals.FEATURE_MEMBERSHIP__OWNED_MEMBER_FEATURE_COMP));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getOwnedExpressionMemberAccess().getOwnedMemberFeature_compOwnedExpressionParserRuleCall_0(), semanticObject.getOwnedMemberFeature_comp());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     OwnedFeatureTyping returns FeatureTyping
	 *     PortTyping returns FeatureTyping
	 *
	 * Constraint:
	 *     type=[Type|QualifiedName]
	 */
	protected void sequence_OwnedFeatureTyping(ISerializationContext context, FeatureTyping semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, SysMLPackage.Literals.FEATURE_TYPING__TYPE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SysMLPackage.Literals.FEATURE_TYPING__TYPE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getOwnedFeatureTypingAccess().getTypeTypeQualifiedNameParserRuleCall_0_1(), semanticObject.eGet(SysMLPackage.Literals.FEATURE_TYPING__TYPE, false));
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     OwnedRedefinition returns Redefinition
	 *
	 * Constraint:
	 *     redefinedFeature=[Feature|QualifiedName]
	 */
	protected void sequence_OwnedRedefinition(ISerializationContext context, Redefinition semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, SysMLPackage.Literals.REDEFINITION__REDEFINED_FEATURE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SysMLPackage.Literals.REDEFINITION__REDEFINED_FEATURE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getOwnedRedefinitionAccess().getRedefinedFeatureFeatureQualifiedNameParserRuleCall_0_1(), semanticObject.eGet(SysMLPackage.Literals.REDEFINITION__REDEFINED_FEATURE, false));
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     OwnedSubsetting returns Subsetting
	 *
	 * Constraint:
	 *     subsettedFeature=[Feature|QualifiedName]
	 */
	protected void sequence_OwnedSubsetting(ISerializationContext context, Subsetting semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, SysMLPackage.Literals.SUBSETTING__SUBSETTED_FEATURE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SysMLPackage.Literals.SUBSETTING__SUBSETTED_FEATURE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getOwnedSubsettingAccess().getSubsettedFeatureFeatureQualifiedNameParserRuleCall_0_1(), semanticObject.eGet(SysMLPackage.Literals.SUBSETTING__SUBSETTED_FEATURE, false));
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     OwnedSuperclassing returns Superclassing
	 *
	 * Constraint:
	 *     superclass=[Classifier|QualifiedName]
	 */
	protected void sequence_OwnedSuperclassing(ISerializationContext context, Superclassing semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, SysMLPackage.Literals.SUPERCLASSING__SUPERCLASS) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SysMLPackage.Literals.SUPERCLASSING__SUPERCLASS));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getOwnedSuperclassingAccess().getSuperclassClassifierQualifiedNameParserRuleCall_0_1(), semanticObject.eGet(SysMLPackage.Literals.SUPERCLASSING__SUPERCLASS, false));
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     RootPackage returns Package
	 *
	 * Constraint:
	 *     (documentation_comp+=OwnedDocumentation | ownedMembership_comp+=PackageMember | ownedImport_comp+=PackageImport)*
	 */
	protected void sequence_PackageBodyElement_RootPackage(ISerializationContext context, org.omg.sysml.lang.sysml.Package semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     PackageImport returns Import
	 *
	 * Constraint:
	 *     (
	 *         ownedRelationship_comp+=PrefixDocumentation* 
	 *         visibility=BasicVisibilityIndicator? 
	 *         (importedPackage=[Package|Name] | importedPackage=[Package|ColonQualifiedName] | importedPackage=[Package|DotQualifiedName])
	 *     )
	 */
	protected void sequence_PackageImport(ISerializationContext context, Import semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ParameterMember returns ParameterMembership
	 *
	 * Constraint:
	 *     (direction=FeatureDirection? ownedMemberParameter_comp=Parameter)
	 */
	protected void sequence_ParameterMember(ISerializationContext context, ParameterMembership semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     PortConjugation returns PortConjugation
	 *
	 * Constraint:
	 *     {PortConjugation}
	 */
	protected void sequence_PortConjugation(ISerializationContext context, PortConjugation semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     PrefixDocumentationComment returns Comment
	 *
	 * Constraint:
	 *     (humanId=Name? body=DOCUMENTATION_COMMENT)
	 */
	protected void sequence_PrefixDocumentationComment(ISerializationContext context, Comment semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     PrefixDocumentation returns Annotation
	 *
	 * Constraint:
	 *     ownedRelatedElement_comp+=PrefixDocumentationComment
	 */
	protected void sequence_PrefixDocumentation(ISerializationContext context, Annotation semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     OwnedExpression returns QueryPathExpression
	 *     ConditionalExpression returns QueryPathExpression
	 *     ConditionalExpression.OperatorExpression_1_0 returns QueryPathExpression
	 *     NullCoalescingExpression returns QueryPathExpression
	 *     NullCoalescingExpression.OperatorExpression_1_0 returns QueryPathExpression
	 *     ConditionalOrExpression returns QueryPathExpression
	 *     ConditionalOrExpression.OperatorExpression_1_0 returns QueryPathExpression
	 *     ConditionalAndExpression returns QueryPathExpression
	 *     ConditionalAndExpression.OperatorExpression_1_0 returns QueryPathExpression
	 *     OrExpression returns QueryPathExpression
	 *     OrExpression.OperatorExpression_1_0 returns QueryPathExpression
	 *     XorExpression returns QueryPathExpression
	 *     XorExpression.OperatorExpression_1_0 returns QueryPathExpression
	 *     AndExpression returns QueryPathExpression
	 *     AndExpression.OperatorExpression_1_0 returns QueryPathExpression
	 *     EqualityExpression returns QueryPathExpression
	 *     EqualityExpression.OperatorExpression_1_0 returns QueryPathExpression
	 *     ClassificationExpression returns QueryPathExpression
	 *     ClassificationExpression.OperatorExpression_1_0 returns QueryPathExpression
	 *     RelationalExpression returns QueryPathExpression
	 *     RelationalExpression.OperatorExpression_1_0 returns QueryPathExpression
	 *     AdditiveExpression returns QueryPathExpression
	 *     AdditiveExpression.OperatorExpression_1_0 returns QueryPathExpression
	 *     MultiplicativeExpression returns QueryPathExpression
	 *     MultiplicativeExpression.OperatorExpression_1_0 returns QueryPathExpression
	 *     ExponentiationExpression returns QueryPathExpression
	 *     ExponentiationExpression.OperatorExpression_1_0 returns QueryPathExpression
	 *     UnitsExpression returns QueryPathExpression
	 *     UnitsExpression.OperatorExpression_1_0 returns QueryPathExpression
	 *     UnaryExpression returns QueryPathExpression
	 *     ExtentExpression returns QueryPathExpression
	 *     SequenceExpression returns QueryPathExpression
	 *     SequenceExpression.OperatorExpression_1_0_0 returns QueryPathExpression
	 *     SequenceExpression.OperatorExpression_1_1_0 returns QueryPathExpression
	 *     SequenceConstructionExpression returns QueryPathExpression
	 *     SequenceConstructionExpression.OperatorExpression_1_2_0_0 returns QueryPathExpression
	 *     SequenceConstructionExpression.OperatorExpression_1_2_1_0 returns QueryPathExpression
	 *     SequenceElementList returns QueryPathExpression
	 *     SequenceElementList.OperatorExpression_1_0 returns QueryPathExpression
	 *     BaseExpression returns QueryPathExpression
	 *     QueryPathExpression returns QueryPathExpression
	 *     QueryPathExpression.QueryQualifierExpression_1_1 returns QueryPathExpression
	 *     QueryPathExpression.QueryPathStepExpression_2_1 returns QueryPathExpression
	 *     QueryHeadExpression returns QueryPathExpression
	 *
	 * Constraint:
	 *     ownedFeatureMembership_comp+=FeatureReferenceMember
	 */
	protected void sequence_QueryHeadExpression(ISerializationContext context, QueryPathExpression semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     QueryNameExpression returns QueryPathExpression
	 *
	 * Constraint:
	 *     ownedFeatureMembership_comp+=FeatureReferenceMember
	 */
	protected void sequence_QueryNameExpression(ISerializationContext context, QueryPathExpression semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     OwnedExpression returns QueryPathStepExpression
	 *     ConditionalExpression returns QueryPathStepExpression
	 *     ConditionalExpression.OperatorExpression_1_0 returns QueryPathStepExpression
	 *     NullCoalescingExpression returns QueryPathStepExpression
	 *     NullCoalescingExpression.OperatorExpression_1_0 returns QueryPathStepExpression
	 *     ConditionalOrExpression returns QueryPathStepExpression
	 *     ConditionalOrExpression.OperatorExpression_1_0 returns QueryPathStepExpression
	 *     ConditionalAndExpression returns QueryPathStepExpression
	 *     ConditionalAndExpression.OperatorExpression_1_0 returns QueryPathStepExpression
	 *     OrExpression returns QueryPathStepExpression
	 *     OrExpression.OperatorExpression_1_0 returns QueryPathStepExpression
	 *     XorExpression returns QueryPathStepExpression
	 *     XorExpression.OperatorExpression_1_0 returns QueryPathStepExpression
	 *     AndExpression returns QueryPathStepExpression
	 *     AndExpression.OperatorExpression_1_0 returns QueryPathStepExpression
	 *     EqualityExpression returns QueryPathStepExpression
	 *     EqualityExpression.OperatorExpression_1_0 returns QueryPathStepExpression
	 *     ClassificationExpression returns QueryPathStepExpression
	 *     ClassificationExpression.OperatorExpression_1_0 returns QueryPathStepExpression
	 *     RelationalExpression returns QueryPathStepExpression
	 *     RelationalExpression.OperatorExpression_1_0 returns QueryPathStepExpression
	 *     AdditiveExpression returns QueryPathStepExpression
	 *     AdditiveExpression.OperatorExpression_1_0 returns QueryPathStepExpression
	 *     MultiplicativeExpression returns QueryPathStepExpression
	 *     MultiplicativeExpression.OperatorExpression_1_0 returns QueryPathStepExpression
	 *     ExponentiationExpression returns QueryPathStepExpression
	 *     ExponentiationExpression.OperatorExpression_1_0 returns QueryPathStepExpression
	 *     UnitsExpression returns QueryPathStepExpression
	 *     UnitsExpression.OperatorExpression_1_0 returns QueryPathStepExpression
	 *     UnaryExpression returns QueryPathStepExpression
	 *     ExtentExpression returns QueryPathStepExpression
	 *     SequenceExpression returns QueryPathStepExpression
	 *     SequenceExpression.OperatorExpression_1_0_0 returns QueryPathStepExpression
	 *     SequenceExpression.OperatorExpression_1_1_0 returns QueryPathStepExpression
	 *     SequenceConstructionExpression returns QueryPathStepExpression
	 *     SequenceConstructionExpression.OperatorExpression_1_2_0_0 returns QueryPathStepExpression
	 *     SequenceConstructionExpression.OperatorExpression_1_2_1_0 returns QueryPathStepExpression
	 *     SequenceElementList returns QueryPathStepExpression
	 *     SequenceElementList.OperatorExpression_1_0 returns QueryPathStepExpression
	 *     BaseExpression returns QueryPathStepExpression
	 *     QueryPathExpression returns QueryPathStepExpression
	 *     QueryPathExpression.QueryPathStepExpression_2_1 returns QueryPathStepExpression
	 *     QueryPathExpression.QueryQualifierExpression_2_3_1 returns QueryPathStepExpression
	 *
	 * Constraint:
	 *     (operand_comp+=QueryPathExpression_QueryPathStepExpression_2_1 operand_comp+=QueryNameExpression)
	 */
	protected void sequence_QueryPathExpression(ISerializationContext context, QueryPathStepExpression semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     OwnedExpression returns QueryQualifierExpression
	 *     ConditionalExpression returns QueryQualifierExpression
	 *     ConditionalExpression.OperatorExpression_1_0 returns QueryQualifierExpression
	 *     NullCoalescingExpression returns QueryQualifierExpression
	 *     NullCoalescingExpression.OperatorExpression_1_0 returns QueryQualifierExpression
	 *     ConditionalOrExpression returns QueryQualifierExpression
	 *     ConditionalOrExpression.OperatorExpression_1_0 returns QueryQualifierExpression
	 *     ConditionalAndExpression returns QueryQualifierExpression
	 *     ConditionalAndExpression.OperatorExpression_1_0 returns QueryQualifierExpression
	 *     OrExpression returns QueryQualifierExpression
	 *     OrExpression.OperatorExpression_1_0 returns QueryQualifierExpression
	 *     XorExpression returns QueryQualifierExpression
	 *     XorExpression.OperatorExpression_1_0 returns QueryQualifierExpression
	 *     AndExpression returns QueryQualifierExpression
	 *     AndExpression.OperatorExpression_1_0 returns QueryQualifierExpression
	 *     EqualityExpression returns QueryQualifierExpression
	 *     EqualityExpression.OperatorExpression_1_0 returns QueryQualifierExpression
	 *     ClassificationExpression returns QueryQualifierExpression
	 *     ClassificationExpression.OperatorExpression_1_0 returns QueryQualifierExpression
	 *     RelationalExpression returns QueryQualifierExpression
	 *     RelationalExpression.OperatorExpression_1_0 returns QueryQualifierExpression
	 *     AdditiveExpression returns QueryQualifierExpression
	 *     AdditiveExpression.OperatorExpression_1_0 returns QueryQualifierExpression
	 *     MultiplicativeExpression returns QueryQualifierExpression
	 *     MultiplicativeExpression.OperatorExpression_1_0 returns QueryQualifierExpression
	 *     ExponentiationExpression returns QueryQualifierExpression
	 *     ExponentiationExpression.OperatorExpression_1_0 returns QueryQualifierExpression
	 *     UnitsExpression returns QueryQualifierExpression
	 *     UnitsExpression.OperatorExpression_1_0 returns QueryQualifierExpression
	 *     UnaryExpression returns QueryQualifierExpression
	 *     ExtentExpression returns QueryQualifierExpression
	 *     SequenceExpression returns QueryQualifierExpression
	 *     SequenceExpression.OperatorExpression_1_0_0 returns QueryQualifierExpression
	 *     SequenceExpression.OperatorExpression_1_1_0 returns QueryQualifierExpression
	 *     SequenceConstructionExpression returns QueryQualifierExpression
	 *     SequenceConstructionExpression.OperatorExpression_1_2_0_0 returns QueryQualifierExpression
	 *     SequenceConstructionExpression.OperatorExpression_1_2_1_0 returns QueryQualifierExpression
	 *     SequenceElementList returns QueryQualifierExpression
	 *     SequenceElementList.OperatorExpression_1_0 returns QueryQualifierExpression
	 *     BaseExpression returns QueryQualifierExpression
	 *     QueryPathExpression returns QueryQualifierExpression
	 *     QueryPathExpression.QueryPathStepExpression_2_1 returns QueryQualifierExpression
	 *
	 * Constraint:
	 *     (
	 *         (operand_comp+=QueryPathExpression_QueryQualifierExpression_1_1 ownedFeatureMembership_comp+=BodyExpressionMember) | 
	 *         (operand_comp+=QueryPathExpression_QueryQualifierExpression_2_3_1 ownedFeatureMembership_comp+=BodyExpressionMember)
	 *     )
	 */
	protected void sequence_QueryPathExpression(ISerializationContext context, QueryQualifierExpression semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ReturnParameterMember returns ReturnParameterMembership
	 *
	 * Constraint:
	 *     ownedMemberParameter_comp=Parameter
	 */
	protected void sequence_ReturnParameterMember(ISerializationContext context, ReturnParameterMembership semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, SysMLPackage.Literals.PARAMETER_MEMBERSHIP__OWNED_MEMBER_PARAMETER_COMP) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SysMLPackage.Literals.PARAMETER_MEMBERSHIP__OWNED_MEMBER_PARAMETER_COMP));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getReturnParameterMemberAccess().getOwnedMemberParameter_compParameterParserRuleCall_1_0(), semanticObject.getOwnedMemberParameter_comp());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     SatisfactionConnectorMember returns Membership
	 *
	 * Constraint:
	 *     ownedMemberElement_comp=SatisfactionConnector
	 */
	protected void sequence_SatisfactionConnectorMember(ISerializationContext context, Membership semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, SysMLPackage.Literals.MEMBERSHIP__OWNED_MEMBER_ELEMENT_COMP) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SysMLPackage.Literals.MEMBERSHIP__OWNED_MEMBER_ELEMENT_COMP));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getSatisfactionConnectorMemberAccess().getOwnedMemberElement_compSatisfactionConnectorParserRuleCall_0(), semanticObject.getOwnedMemberElement_comp());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     SatisfactionConnector returns BindingConnector
	 *
	 * Constraint:
	 *     (ownedFeatureMembership_comp+=EmptySourceEndMember ownedFeatureMembership_comp+=ConnectorEndMember)
	 */
	protected void sequence_SatisfactionConnector(ISerializationContext context, BindingConnector semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     SnapshotFeatureMember returns FeatureMembership
	 *
	 * Constraint:
	 *     ownedMemberFeature_comp=SnapshotFeature
	 */
	protected void sequence_SnapshotFeatureMember(ISerializationContext context, FeatureMembership semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, SysMLPackage.Literals.FEATURE_MEMBERSHIP__OWNED_MEMBER_FEATURE_COMP) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SysMLPackage.Literals.FEATURE_MEMBERSHIP__OWNED_MEMBER_FEATURE_COMP));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getSnapshotFeatureMemberAccess().getOwnedMemberFeature_compSnapshotFeatureParserRuleCall_0(), semanticObject.getOwnedMemberFeature_comp());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     SnapshotFeature returns SnapshotFeature
	 *
	 * Constraint:
	 *     {SnapshotFeature}
	 */
	protected void sequence_SnapshotFeature(ISerializationContext context, SnapshotFeature semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     SourceItemFlowMember returns FeatureMembership
	 *
	 * Constraint:
	 *     ownedMemberFeature_comp=SourceItemFlow
	 */
	protected void sequence_SourceItemFlowMember(ISerializationContext context, FeatureMembership semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, SysMLPackage.Literals.FEATURE_MEMBERSHIP__OWNED_MEMBER_FEATURE_COMP) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SysMLPackage.Literals.FEATURE_MEMBERSHIP__OWNED_MEMBER_FEATURE_COMP));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getSourceItemFlowMemberAccess().getOwnedMemberFeature_compSourceItemFlowParserRuleCall_0(), semanticObject.getOwnedMemberFeature_comp());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     SourceItemFlow returns ItemFlow
	 *
	 * Constraint:
	 *     (
	 *         ownedFeatureMembership_comp+=EmptyItemFeatureMember 
	 *         ownedFeatureMembership_comp+=ItemFlowEndMember 
	 *         ownedFeatureMembership_comp+=EmptyItemFlowEndMember
	 *     )
	 */
	protected void sequence_SourceItemFlow(ISerializationContext context, ItemFlow semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     SourceItemFlow returns SuccessionItemFlow
	 *
	 * Constraint:
	 *     (
	 *         ownedFeatureMembership_comp+=EmptyItemFeatureMember 
	 *         ownedFeatureMembership_comp+=ItemFlowEndMember 
	 *         ownedFeatureMembership_comp+=EmptyItemFlowEndMember
	 *     )
	 */
	protected void sequence_SourceItemFlow(ISerializationContext context, SuccessionItemFlow semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ActionTargetSuccession returns Succession
	 *     TargetSuccession returns Succession
	 *
	 * Constraint:
	 *     (ownedFeatureMembership_comp+=MultiplicitySourceEndMember ownedFeatureMembership_comp+=ConnectorEndMember)
	 */
	protected void sequence_TargetSuccession(ISerializationContext context, Succession semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     TargetTransitionUsage returns TransitionUsage
	 *
	 * Constraint:
	 *     (
	 *         (ownedImport_comp+=EmptyImport ownedFeatureMembership_comp+=TriggerActionMember)? 
	 *         ownedFeatureMembership_comp+=GuardExpressionMember? 
	 *         ownedFeatureMembership_comp+=EffectBehaviorMember? 
	 *         ownedFeatureMembership_comp+=TransitionSuccessionMember
	 *     )
	 */
	protected void sequence_TargetTransitionUsage(ISerializationContext context, TransitionUsage semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     TimeSliceFeatureMember returns FeatureMembership
	 *
	 * Constraint:
	 *     ownedMemberFeature_comp=TimeSliceFeature
	 */
	protected void sequence_TimeSliceFeatureMember(ISerializationContext context, FeatureMembership semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, SysMLPackage.Literals.FEATURE_MEMBERSHIP__OWNED_MEMBER_FEATURE_COMP) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SysMLPackage.Literals.FEATURE_MEMBERSHIP__OWNED_MEMBER_FEATURE_COMP));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getTimeSliceFeatureMemberAccess().getOwnedMemberFeature_compTimeSliceFeatureParserRuleCall_0(), semanticObject.getOwnedMemberFeature_comp());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     TimeSliceFeature returns TimeSliceFeature
	 *
	 * Constraint:
	 *     {TimeSliceFeature}
	 */
	protected void sequence_TimeSliceFeature(ISerializationContext context, TimeSliceFeature semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     TransitionSourceMember returns FeatureMembership
	 *
	 * Constraint:
	 *     memberFeature=[Feature|QualifiedName]
	 */
	protected void sequence_TransitionSourceMember(ISerializationContext context, FeatureMembership semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, SysMLPackage.Literals.FEATURE_MEMBERSHIP__MEMBER_FEATURE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SysMLPackage.Literals.FEATURE_MEMBERSHIP__MEMBER_FEATURE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getTransitionSourceMemberAccess().getMemberFeatureFeatureQualifiedNameParserRuleCall_0_1(), semanticObject.eGet(SysMLPackage.Literals.FEATURE_MEMBERSHIP__MEMBER_FEATURE, false));
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     TransitionSuccessionMember returns FeatureMembership
	 *
	 * Constraint:
	 *     ownedMemberFeature_comp=TransitionSuccession
	 */
	protected void sequence_TransitionSuccessionMember(ISerializationContext context, FeatureMembership semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, SysMLPackage.Literals.FEATURE_MEMBERSHIP__OWNED_MEMBER_FEATURE_COMP) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SysMLPackage.Literals.FEATURE_MEMBERSHIP__OWNED_MEMBER_FEATURE_COMP));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getTransitionSuccessionMemberAccess().getOwnedMemberFeature_compTransitionSuccessionParserRuleCall_0(), semanticObject.getOwnedMemberFeature_comp());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     TransitionSuccession returns Succession
	 *
	 * Constraint:
	 *     (ownedFeatureMembership_comp+=EmptySourceEndMember ownedFeatureMembership_comp+=ConnectorEndMember)
	 */
	protected void sequence_TransitionSuccession(ISerializationContext context, Succession semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     TriggerActionMember returns TransitionFeatureMembership
	 *
	 * Constraint:
	 *     (kind=TriggerFeatureKind ownedMemberFeature_comp=TriggerAction)
	 */
	protected void sequence_TriggerActionMember(ISerializationContext context, TransitionFeatureMembership semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, SysMLPackage.Literals.TRANSITION_FEATURE_MEMBERSHIP__KIND) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SysMLPackage.Literals.TRANSITION_FEATURE_MEMBERSHIP__KIND));
			if (transientValues.isValueTransient(semanticObject, SysMLPackage.Literals.FEATURE_MEMBERSHIP__OWNED_MEMBER_FEATURE_COMP) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SysMLPackage.Literals.FEATURE_MEMBERSHIP__OWNED_MEMBER_FEATURE_COMP));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getTriggerActionMemberAccess().getKindTriggerFeatureKindEnumRuleCall_0_0(), semanticObject.getKind());
		feeder.accept(grammarAccess.getTriggerActionMemberAccess().getOwnedMemberFeature_compTriggerActionParserRuleCall_1_0(), semanticObject.getOwnedMemberFeature_comp());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     TriggerAction returns AcceptActionUsage
	 *
	 * Constraint:
	 *     (ownedFeatureMembership_comp+=EmptyParameterMember ownedFeatureMembership_comp+=ItemFeatureMember)
	 */
	protected void sequence_TriggerAction(ISerializationContext context, AcceptActionUsage semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     TrueLiteralExpression returns LiteralBoolean
	 *
	 * Constraint:
	 *     {LiteralBoolean}
	 */
	protected void sequence_TrueLiteralExpression(ISerializationContext context, LiteralBoolean semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     TrueLiteralMember returns FeatureMembership
	 *
	 * Constraint:
	 *     ownedMemberFeature_comp=TrueLiteralExpression
	 */
	protected void sequence_TrueLiteralMember(ISerializationContext context, FeatureMembership semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, SysMLPackage.Literals.FEATURE_MEMBERSHIP__OWNED_MEMBER_FEATURE_COMP) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SysMLPackage.Literals.FEATURE_MEMBERSHIP__OWNED_MEMBER_FEATURE_COMP));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getTrueLiteralMemberAccess().getOwnedMemberFeature_compTrueLiteralExpressionParserRuleCall_0(), semanticObject.getOwnedMemberFeature_comp());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     TypeReferenceMember returns FeatureMembership
	 *
	 * Constraint:
	 *     ownedMemberFeature_comp=TypeReference
	 */
	protected void sequence_TypeReferenceMember(ISerializationContext context, FeatureMembership semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, SysMLPackage.Literals.FEATURE_MEMBERSHIP__OWNED_MEMBER_FEATURE_COMP) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SysMLPackage.Literals.FEATURE_MEMBERSHIP__OWNED_MEMBER_FEATURE_COMP));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getTypeReferenceMemberAccess().getOwnedMemberFeature_compTypeReferenceParserRuleCall_0(), semanticObject.getOwnedMemberFeature_comp());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     TypeReference returns Feature
	 *
	 * Constraint:
	 *     ownedRelationship_comp+=OwnedFeatureTyping
	 */
	protected void sequence_TypeReference(ISerializationContext context, Feature semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}
