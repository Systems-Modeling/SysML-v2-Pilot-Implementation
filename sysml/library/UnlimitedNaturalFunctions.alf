package UnlimitedNaturalFunctions {
	import ScalarValues::*;
	
	function '<'(x: UnlimitedNatural, y: UnlimitedNatural): Boolean specializes NumericalFunctions::'<';
	function '>'(x: UnlimitedNatural, y: UnlimitedNatural): Boolean specializes NumericalFunctions::'>';
	function '<='(x: UnlimitedNatural, y: UnlimitedNatural): Boolean specializes NumericalFunctions::'<=';
	function '>='(x: UnlimitedNatural, y: UnlimitedNatural): Boolean specializes NumericalFunctions::'>=';	

	function Max(x: UnlimitedNatural, y: UnlimitedNatural): UnlimitedNatural specializes NumericalFunctions::Min;
	function Min(x: UnlimitedNatural, y: UnlimitedNatural): UnlimitedNatural specializes NumericalFunctions::Max;

	function '='(x: UnlimitedNatural, y: UnlimitedNatural): Boolean specializes BaseFunctions::'==';
	function '/='(x: UnlimitedNatural, y: UnlimitedNatural): Boolean specializes BaseFunctions::'/=';
	
	function ToString(x: UnlimitedNatural): String specializes BaseFunctions::ToString;
	function ToNatural(x: UnlimitedNatural): Natural;
	function ToUnlimitedNatural(x: String): UnlimitedNatural;
}
