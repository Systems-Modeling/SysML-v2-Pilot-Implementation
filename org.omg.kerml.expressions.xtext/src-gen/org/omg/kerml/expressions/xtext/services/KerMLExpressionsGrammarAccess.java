/*
 * generated by Xtext 2.34.0
 */
package org.omg.kerml.expressions.xtext.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.service.AbstractElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class KerMLExpressionsGrammarAccess extends AbstractElementFinder.AbstractGrammarElementFinder {
	
	public class OwnedExpressionMemberElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.expressions.xtext.KerMLExpressions.OwnedExpressionMember");
		private final Assignment cOwnedRelatedElementAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cOwnedRelatedElementOwnedExpressionParserRuleCall_0 = (RuleCall)cOwnedRelatedElementAssignment.eContents().get(0);
		
		///* EXPRESSIONS */
		///* Operator Expressions */
		//OwnedExpressionMember returns SysML::FeatureMembership :
		//    ownedRelatedElement += OwnedExpression
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//ownedRelatedElement += OwnedExpression
		public Assignment getOwnedRelatedElementAssignment() { return cOwnedRelatedElementAssignment; }
		
		//OwnedExpression
		public RuleCall getOwnedRelatedElementOwnedExpressionParserRuleCall_0() { return cOwnedRelatedElementOwnedExpressionParserRuleCall_0; }
	}
	public class OwnedExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.expressions.xtext.KerMLExpressions.OwnedExpression");
		private final RuleCall cConditionalExpressionParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//OwnedExpression returns SysML::Expression :
		//     ConditionalExpression
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//ConditionalExpression
		public RuleCall getConditionalExpressionParserRuleCall() { return cConditionalExpressionParserRuleCall; }
	}
	public class OwnedExpressionReferenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.expressions.xtext.KerMLExpressions.OwnedExpressionReference");
		private final Assignment cOwnedRelationshipAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cOwnedRelationshipOwnedExpressionMemberParserRuleCall_0 = (RuleCall)cOwnedRelationshipAssignment.eContents().get(0);
		
		//// Conditional Test Expressions
		//OwnedExpressionReference returns SysML::FeatureReferenceExpression :
		//    ownedRelationship += OwnedExpressionMember
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//ownedRelationship += OwnedExpressionMember
		public Assignment getOwnedRelationshipAssignment() { return cOwnedRelationshipAssignment; }
		
		//OwnedExpressionMember
		public RuleCall getOwnedRelationshipOwnedExpressionMemberParserRuleCall_0() { return cOwnedRelationshipOwnedExpressionMemberParserRuleCall_0; }
	}
	public class ConditionalExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.expressions.xtext.KerMLExpressions.ConditionalExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cNullCoalescingExpressionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cOperatorExpressionAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOperatorAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cOperatorConditionalOperatorParserRuleCall_1_1_0 = (RuleCall)cOperatorAssignment_1_1.eContents().get(0);
		private final Assignment cOperandAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cOperandNullCoalescingExpressionParserRuleCall_1_2_0 = (RuleCall)cOperandAssignment_1_2.eContents().get(0);
		private final Keyword cQuestionMarkKeyword_1_3 = (Keyword)cGroup_1.eContents().get(3);
		private final Assignment cOperandAssignment_1_4 = (Assignment)cGroup_1.eContents().get(4);
		private final RuleCall cOperandOwnedExpressionReferenceParserRuleCall_1_4_0 = (RuleCall)cOperandAssignment_1_4.eContents().get(0);
		private final Keyword cElseKeyword_1_5 = (Keyword)cGroup_1.eContents().get(5);
		private final Assignment cOperandAssignment_1_6 = (Assignment)cGroup_1.eContents().get(6);
		private final RuleCall cOperandOwnedExpressionReferenceParserRuleCall_1_6_0 = (RuleCall)cOperandAssignment_1_6.eContents().get(0);
		
		//ConditionalExpression returns SysML::Expression :
		//      NullCoalescingExpression
		//    | {SysML::OperatorExpression} operator = ConditionalOperator operand += NullCoalescingExpression
		//          '?' operand += OwnedExpressionReference 'else' operand += OwnedExpressionReference
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//  NullCoalescingExpression
		//| {SysML::OperatorExpression} operator = ConditionalOperator operand += NullCoalescingExpression
		//      '?' operand += OwnedExpressionReference 'else' operand += OwnedExpressionReference
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//NullCoalescingExpression
		public RuleCall getNullCoalescingExpressionParserRuleCall_0() { return cNullCoalescingExpressionParserRuleCall_0; }
		
		//{SysML::OperatorExpression} operator = ConditionalOperator operand += NullCoalescingExpression
		//         '?' operand += OwnedExpressionReference 'else' operand += OwnedExpressionReference
		public Group getGroup_1() { return cGroup_1; }
		
		//{SysML::OperatorExpression}
		public Action getOperatorExpressionAction_1_0() { return cOperatorExpressionAction_1_0; }
		
		//operator = ConditionalOperator
		public Assignment getOperatorAssignment_1_1() { return cOperatorAssignment_1_1; }
		
		//ConditionalOperator
		public RuleCall getOperatorConditionalOperatorParserRuleCall_1_1_0() { return cOperatorConditionalOperatorParserRuleCall_1_1_0; }
		
		//operand += NullCoalescingExpression
		public Assignment getOperandAssignment_1_2() { return cOperandAssignment_1_2; }
		
		//NullCoalescingExpression
		public RuleCall getOperandNullCoalescingExpressionParserRuleCall_1_2_0() { return cOperandNullCoalescingExpressionParserRuleCall_1_2_0; }
		
		//'?'
		public Keyword getQuestionMarkKeyword_1_3() { return cQuestionMarkKeyword_1_3; }
		
		//operand += OwnedExpressionReference
		public Assignment getOperandAssignment_1_4() { return cOperandAssignment_1_4; }
		
		//OwnedExpressionReference
		public RuleCall getOperandOwnedExpressionReferenceParserRuleCall_1_4_0() { return cOperandOwnedExpressionReferenceParserRuleCall_1_4_0; }
		
		//'else'
		public Keyword getElseKeyword_1_5() { return cElseKeyword_1_5; }
		
		//operand += OwnedExpressionReference
		public Assignment getOperandAssignment_1_6() { return cOperandAssignment_1_6; }
		
		//OwnedExpressionReference
		public RuleCall getOperandOwnedExpressionReferenceParserRuleCall_1_6_0() { return cOperandOwnedExpressionReferenceParserRuleCall_1_6_0; }
	}
	public class ConditionalOperatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.expressions.xtext.KerMLExpressions.ConditionalOperator");
		private final Keyword cIfKeyword = (Keyword)rule.eContents().get(1);
		
		//ConditionalOperator :
		//    'if'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'if'
		public Keyword getIfKeyword() { return cIfKeyword; }
	}
	public class NullCoalescingExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.expressions.xtext.KerMLExpressions.NullCoalescingExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cImpliesExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cOperatorExpressionOperandAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOperatorAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cOperatorNullCoalescingOperatorParserRuleCall_1_1_0 = (RuleCall)cOperatorAssignment_1_1.eContents().get(0);
		private final Assignment cOperandAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cOperandImpliesExpressionReferenceParserRuleCall_1_2_0 = (RuleCall)cOperandAssignment_1_2.eContents().get(0);
		
		//// Null Coalescing Expressions
		//NullCoalescingExpression returns SysML::Expression :
		//    ImpliesExpression ( {SysML::OperatorExpression.operand += current}
		//        operator = NullCoalescingOperator operand += ImpliesExpressionReference )*
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//ImpliesExpression ( {SysML::OperatorExpression.operand += current}
		//    operator = NullCoalescingOperator operand += ImpliesExpressionReference )*
		public Group getGroup() { return cGroup; }
		
		//ImpliesExpression
		public RuleCall getImpliesExpressionParserRuleCall_0() { return cImpliesExpressionParserRuleCall_0; }
		
		//( {SysML::OperatorExpression.operand += current}
		//       operator = NullCoalescingOperator operand += ImpliesExpressionReference )*
		public Group getGroup_1() { return cGroup_1; }
		
		//{SysML::OperatorExpression.operand += current}
		public Action getOperatorExpressionOperandAction_1_0() { return cOperatorExpressionOperandAction_1_0; }
		
		//operator = NullCoalescingOperator
		public Assignment getOperatorAssignment_1_1() { return cOperatorAssignment_1_1; }
		
		//NullCoalescingOperator
		public RuleCall getOperatorNullCoalescingOperatorParserRuleCall_1_1_0() { return cOperatorNullCoalescingOperatorParserRuleCall_1_1_0; }
		
		//operand += ImpliesExpressionReference
		public Assignment getOperandAssignment_1_2() { return cOperandAssignment_1_2; }
		
		//ImpliesExpressionReference
		public RuleCall getOperandImpliesExpressionReferenceParserRuleCall_1_2_0() { return cOperandImpliesExpressionReferenceParserRuleCall_1_2_0; }
	}
	public class NullCoalescingOperatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.expressions.xtext.KerMLExpressions.NullCoalescingOperator");
		private final Keyword cQuestionMarkQuestionMarkKeyword = (Keyword)rule.eContents().get(1);
		
		//NullCoalescingOperator :
		//    '??'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'??'
		public Keyword getQuestionMarkQuestionMarkKeyword() { return cQuestionMarkQuestionMarkKeyword; }
	}
	public class ImpliesExpressionReferenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.expressions.xtext.KerMLExpressions.ImpliesExpressionReference");
		private final Assignment cOwnedRelationshipAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cOwnedRelationshipImpliesExpressionMemberParserRuleCall_0 = (RuleCall)cOwnedRelationshipAssignment.eContents().get(0);
		
		//// Logical Expressions
		//ImpliesExpressionReference returns SysML::FeatureReferenceExpression :
		//    ownedRelationship += ImpliesExpressionMember
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//ownedRelationship += ImpliesExpressionMember
		public Assignment getOwnedRelationshipAssignment() { return cOwnedRelationshipAssignment; }
		
		//ImpliesExpressionMember
		public RuleCall getOwnedRelationshipImpliesExpressionMemberParserRuleCall_0() { return cOwnedRelationshipImpliesExpressionMemberParserRuleCall_0; }
	}
	public class ImpliesExpressionMemberElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.expressions.xtext.KerMLExpressions.ImpliesExpressionMember");
		private final Assignment cOwnedRelatedElementAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cOwnedRelatedElementImpliesExpressionParserRuleCall_0 = (RuleCall)cOwnedRelatedElementAssignment.eContents().get(0);
		
		//ImpliesExpressionMember returns SysML::FeatureMembership :
		//    ownedRelatedElement += ImpliesExpression
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//ownedRelatedElement += ImpliesExpression
		public Assignment getOwnedRelatedElementAssignment() { return cOwnedRelatedElementAssignment; }
		
		//ImpliesExpression
		public RuleCall getOwnedRelatedElementImpliesExpressionParserRuleCall_0() { return cOwnedRelatedElementImpliesExpressionParserRuleCall_0; }
	}
	public class ImpliesExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.expressions.xtext.KerMLExpressions.ImpliesExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cOrExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cOperatorExpressionOperandAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOperatorAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cOperatorImpliesOperatorParserRuleCall_1_1_0 = (RuleCall)cOperatorAssignment_1_1.eContents().get(0);
		private final Assignment cOperandAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cOperandOrExpressionReferenceParserRuleCall_1_2_0 = (RuleCall)cOperandAssignment_1_2.eContents().get(0);
		
		//ImpliesExpression returns SysML::Expression :
		//    OrExpression ( {SysML::OperatorExpression.operand += current}
		//        operator = ImpliesOperator operand += OrExpressionReference )*
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//OrExpression ( {SysML::OperatorExpression.operand += current}
		//    operator = ImpliesOperator operand += OrExpressionReference )*
		public Group getGroup() { return cGroup; }
		
		//OrExpression
		public RuleCall getOrExpressionParserRuleCall_0() { return cOrExpressionParserRuleCall_0; }
		
		//( {SysML::OperatorExpression.operand += current}
		//       operator = ImpliesOperator operand += OrExpressionReference )*
		public Group getGroup_1() { return cGroup_1; }
		
		//{SysML::OperatorExpression.operand += current}
		public Action getOperatorExpressionOperandAction_1_0() { return cOperatorExpressionOperandAction_1_0; }
		
		//operator = ImpliesOperator
		public Assignment getOperatorAssignment_1_1() { return cOperatorAssignment_1_1; }
		
		//ImpliesOperator
		public RuleCall getOperatorImpliesOperatorParserRuleCall_1_1_0() { return cOperatorImpliesOperatorParserRuleCall_1_1_0; }
		
		//operand += OrExpressionReference
		public Assignment getOperandAssignment_1_2() { return cOperandAssignment_1_2; }
		
		//OrExpressionReference
		public RuleCall getOperandOrExpressionReferenceParserRuleCall_1_2_0() { return cOperandOrExpressionReferenceParserRuleCall_1_2_0; }
	}
	public class ImpliesOperatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.expressions.xtext.KerMLExpressions.ImpliesOperator");
		private final Keyword cImpliesKeyword = (Keyword)rule.eContents().get(1);
		
		//ImpliesOperator :
		//    'implies'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'implies'
		public Keyword getImpliesKeyword() { return cImpliesKeyword; }
	}
	public class OrExpressionReferenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.expressions.xtext.KerMLExpressions.OrExpressionReference");
		private final Assignment cOwnedRelationshipAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cOwnedRelationshipOrExpressionMemberParserRuleCall_0 = (RuleCall)cOwnedRelationshipAssignment.eContents().get(0);
		
		//OrExpressionReference returns SysML::FeatureReferenceExpression :
		//    ownedRelationship += OrExpressionMember
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//ownedRelationship += OrExpressionMember
		public Assignment getOwnedRelationshipAssignment() { return cOwnedRelationshipAssignment; }
		
		//OrExpressionMember
		public RuleCall getOwnedRelationshipOrExpressionMemberParserRuleCall_0() { return cOwnedRelationshipOrExpressionMemberParserRuleCall_0; }
	}
	public class OrExpressionMemberElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.expressions.xtext.KerMLExpressions.OrExpressionMember");
		private final Assignment cOwnedRelatedElementAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cOwnedRelatedElementOrExpressionParserRuleCall_0 = (RuleCall)cOwnedRelatedElementAssignment.eContents().get(0);
		
		//OrExpressionMember returns SysML::FeatureMembership :
		//    ownedRelatedElement += OrExpression
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//ownedRelatedElement += OrExpression
		public Assignment getOwnedRelatedElementAssignment() { return cOwnedRelatedElementAssignment; }
		
		//OrExpression
		public RuleCall getOwnedRelatedElementOrExpressionParserRuleCall_0() { return cOwnedRelatedElementOrExpressionParserRuleCall_0; }
	}
	public class OrExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.expressions.xtext.KerMLExpressions.OrExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cXorExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cOperatorExpressionOperandAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Alternatives cAlternatives_1_1 = (Alternatives)cGroup_1.eContents().get(1);
		private final Group cGroup_1_1_0 = (Group)cAlternatives_1_1.eContents().get(0);
		private final Assignment cOperatorAssignment_1_1_0_0 = (Assignment)cGroup_1_1_0.eContents().get(0);
		private final RuleCall cOperatorOrOperatorParserRuleCall_1_1_0_0_0 = (RuleCall)cOperatorAssignment_1_1_0_0.eContents().get(0);
		private final Assignment cOperandAssignment_1_1_0_1 = (Assignment)cGroup_1_1_0.eContents().get(1);
		private final RuleCall cOperandXorExpressionParserRuleCall_1_1_0_1_0 = (RuleCall)cOperandAssignment_1_1_0_1.eContents().get(0);
		private final Group cGroup_1_1_1 = (Group)cAlternatives_1_1.eContents().get(1);
		private final Assignment cOperatorAssignment_1_1_1_0 = (Assignment)cGroup_1_1_1.eContents().get(0);
		private final RuleCall cOperatorConditionalOrOperatorParserRuleCall_1_1_1_0_0 = (RuleCall)cOperatorAssignment_1_1_1_0.eContents().get(0);
		private final Assignment cOperandAssignment_1_1_1_1 = (Assignment)cGroup_1_1_1.eContents().get(1);
		private final RuleCall cOperandXorExpressionReferenceParserRuleCall_1_1_1_1_0 = (RuleCall)cOperandAssignment_1_1_1_1.eContents().get(0);
		
		//OrExpression returns SysML::Expression :
		//    XorExpression ( {SysML::OperatorExpression.operand += current}
		//        ( operator = OrOperator operand += XorExpression
		//        | operator = ConditionalOrOperator operand += XorExpressionReference ) )*
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//XorExpression ( {SysML::OperatorExpression.operand += current}
		//    ( operator = OrOperator operand += XorExpression
		//    | operator = ConditionalOrOperator operand += XorExpressionReference ) )*
		public Group getGroup() { return cGroup; }
		
		//XorExpression
		public RuleCall getXorExpressionParserRuleCall_0() { return cXorExpressionParserRuleCall_0; }
		
		//( {SysML::OperatorExpression.operand += current}
		//       ( operator = OrOperator operand += XorExpression
		//       | operator = ConditionalOrOperator operand += XorExpressionReference ) )*
		public Group getGroup_1() { return cGroup_1; }
		
		//{SysML::OperatorExpression.operand += current}
		public Action getOperatorExpressionOperandAction_1_0() { return cOperatorExpressionOperandAction_1_0; }
		
		//( operator = OrOperator operand += XorExpression
		//| operator = ConditionalOrOperator operand += XorExpressionReference )
		public Alternatives getAlternatives_1_1() { return cAlternatives_1_1; }
		
		//operator = OrOperator operand += XorExpression
		public Group getGroup_1_1_0() { return cGroup_1_1_0; }
		
		//operator = OrOperator
		public Assignment getOperatorAssignment_1_1_0_0() { return cOperatorAssignment_1_1_0_0; }
		
		//OrOperator
		public RuleCall getOperatorOrOperatorParserRuleCall_1_1_0_0_0() { return cOperatorOrOperatorParserRuleCall_1_1_0_0_0; }
		
		//operand += XorExpression
		public Assignment getOperandAssignment_1_1_0_1() { return cOperandAssignment_1_1_0_1; }
		
		//XorExpression
		public RuleCall getOperandXorExpressionParserRuleCall_1_1_0_1_0() { return cOperandXorExpressionParserRuleCall_1_1_0_1_0; }
		
		//operator = ConditionalOrOperator operand += XorExpressionReference
		public Group getGroup_1_1_1() { return cGroup_1_1_1; }
		
		//operator = ConditionalOrOperator
		public Assignment getOperatorAssignment_1_1_1_0() { return cOperatorAssignment_1_1_1_0; }
		
		//ConditionalOrOperator
		public RuleCall getOperatorConditionalOrOperatorParserRuleCall_1_1_1_0_0() { return cOperatorConditionalOrOperatorParserRuleCall_1_1_1_0_0; }
		
		//operand += XorExpressionReference
		public Assignment getOperandAssignment_1_1_1_1() { return cOperandAssignment_1_1_1_1; }
		
		//XorExpressionReference
		public RuleCall getOperandXorExpressionReferenceParserRuleCall_1_1_1_1_0() { return cOperandXorExpressionReferenceParserRuleCall_1_1_1_1_0; }
	}
	public class OrOperatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.expressions.xtext.KerMLExpressions.OrOperator");
		private final Keyword cVerticalLineKeyword = (Keyword)rule.eContents().get(1);
		
		//OrOperator :
		//    '|'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'|'
		public Keyword getVerticalLineKeyword() { return cVerticalLineKeyword; }
	}
	public class ConditionalOrOperatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.expressions.xtext.KerMLExpressions.ConditionalOrOperator");
		private final Keyword cOrKeyword = (Keyword)rule.eContents().get(1);
		
		//ConditionalOrOperator :
		//    'or'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'or'
		public Keyword getOrKeyword() { return cOrKeyword; }
	}
	public class XorExpressionReferenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.expressions.xtext.KerMLExpressions.XorExpressionReference");
		private final Assignment cOwnedRelationshipAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cOwnedRelationshipXorExpressionMemberParserRuleCall_0 = (RuleCall)cOwnedRelationshipAssignment.eContents().get(0);
		
		//XorExpressionReference returns SysML::FeatureReferenceExpression :
		//    ownedRelationship += XorExpressionMember
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//ownedRelationship += XorExpressionMember
		public Assignment getOwnedRelationshipAssignment() { return cOwnedRelationshipAssignment; }
		
		//XorExpressionMember
		public RuleCall getOwnedRelationshipXorExpressionMemberParserRuleCall_0() { return cOwnedRelationshipXorExpressionMemberParserRuleCall_0; }
	}
	public class XorExpressionMemberElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.expressions.xtext.KerMLExpressions.XorExpressionMember");
		private final Assignment cOwnedRelatedElementAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cOwnedRelatedElementXorExpressionParserRuleCall_0 = (RuleCall)cOwnedRelatedElementAssignment.eContents().get(0);
		
		//XorExpressionMember returns SysML::FeatureMembership :
		//    ownedRelatedElement += XorExpression
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//ownedRelatedElement += XorExpression
		public Assignment getOwnedRelatedElementAssignment() { return cOwnedRelatedElementAssignment; }
		
		//XorExpression
		public RuleCall getOwnedRelatedElementXorExpressionParserRuleCall_0() { return cOwnedRelatedElementXorExpressionParserRuleCall_0; }
	}
	public class XorExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.expressions.xtext.KerMLExpressions.XorExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cAndExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cOperatorExpressionOperandAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOperatorAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cOperatorXorOperatorParserRuleCall_1_1_0 = (RuleCall)cOperatorAssignment_1_1.eContents().get(0);
		private final Assignment cOperandAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cOperandAndExpressionParserRuleCall_1_2_0 = (RuleCall)cOperandAssignment_1_2.eContents().get(0);
		
		//XorExpression returns SysML::Expression :
		//    AndExpression ( {SysML::OperatorExpression.operand += current}
		//        operator = XorOperator operand += AndExpression )*
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//AndExpression ( {SysML::OperatorExpression.operand += current}
		//    operator = XorOperator operand += AndExpression )*
		public Group getGroup() { return cGroup; }
		
		//AndExpression
		public RuleCall getAndExpressionParserRuleCall_0() { return cAndExpressionParserRuleCall_0; }
		
		//( {SysML::OperatorExpression.operand += current}
		//       operator = XorOperator operand += AndExpression )*
		public Group getGroup_1() { return cGroup_1; }
		
		//{SysML::OperatorExpression.operand += current}
		public Action getOperatorExpressionOperandAction_1_0() { return cOperatorExpressionOperandAction_1_0; }
		
		//operator = XorOperator
		public Assignment getOperatorAssignment_1_1() { return cOperatorAssignment_1_1; }
		
		//XorOperator
		public RuleCall getOperatorXorOperatorParserRuleCall_1_1_0() { return cOperatorXorOperatorParserRuleCall_1_1_0; }
		
		//operand += AndExpression
		public Assignment getOperandAssignment_1_2() { return cOperandAssignment_1_2; }
		
		//AndExpression
		public RuleCall getOperandAndExpressionParserRuleCall_1_2_0() { return cOperandAndExpressionParserRuleCall_1_2_0; }
	}
	public class XorOperatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.expressions.xtext.KerMLExpressions.XorOperator");
		private final Keyword cXorKeyword = (Keyword)rule.eContents().get(1);
		
		//XorOperator :
		//    'xor'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'xor'
		public Keyword getXorKeyword() { return cXorKeyword; }
	}
	public class AndExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.expressions.xtext.KerMLExpressions.AndExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cEqualityExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cOperatorExpressionOperandAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Alternatives cAlternatives_1_1 = (Alternatives)cGroup_1.eContents().get(1);
		private final Group cGroup_1_1_0 = (Group)cAlternatives_1_1.eContents().get(0);
		private final Assignment cOperatorAssignment_1_1_0_0 = (Assignment)cGroup_1_1_0.eContents().get(0);
		private final RuleCall cOperatorAndOperatorParserRuleCall_1_1_0_0_0 = (RuleCall)cOperatorAssignment_1_1_0_0.eContents().get(0);
		private final Assignment cOperandAssignment_1_1_0_1 = (Assignment)cGroup_1_1_0.eContents().get(1);
		private final RuleCall cOperandEqualityExpressionParserRuleCall_1_1_0_1_0 = (RuleCall)cOperandAssignment_1_1_0_1.eContents().get(0);
		private final Group cGroup_1_1_1 = (Group)cAlternatives_1_1.eContents().get(1);
		private final Assignment cOperatorAssignment_1_1_1_0 = (Assignment)cGroup_1_1_1.eContents().get(0);
		private final RuleCall cOperatorConditionalAndOperatorParserRuleCall_1_1_1_0_0 = (RuleCall)cOperatorAssignment_1_1_1_0.eContents().get(0);
		private final Assignment cOperandAssignment_1_1_1_1 = (Assignment)cGroup_1_1_1.eContents().get(1);
		private final RuleCall cOperandEqualityExpressionReferenceParserRuleCall_1_1_1_1_0 = (RuleCall)cOperandAssignment_1_1_1_1.eContents().get(0);
		
		//AndExpression returns SysML::Expression :
		//    EqualityExpression ( {SysML::OperatorExpression.operand += current}
		//        ( operator = AndOperator operand += EqualityExpression
		//        | operator = ConditionalAndOperator operand += EqualityExpressionReference ) )*
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//EqualityExpression ( {SysML::OperatorExpression.operand += current}
		//    ( operator = AndOperator operand += EqualityExpression
		//    | operator = ConditionalAndOperator operand += EqualityExpressionReference ) )*
		public Group getGroup() { return cGroup; }
		
		//EqualityExpression
		public RuleCall getEqualityExpressionParserRuleCall_0() { return cEqualityExpressionParserRuleCall_0; }
		
		//( {SysML::OperatorExpression.operand += current}
		//       ( operator = AndOperator operand += EqualityExpression
		//       | operator = ConditionalAndOperator operand += EqualityExpressionReference ) )*
		public Group getGroup_1() { return cGroup_1; }
		
		//{SysML::OperatorExpression.operand += current}
		public Action getOperatorExpressionOperandAction_1_0() { return cOperatorExpressionOperandAction_1_0; }
		
		//( operator = AndOperator operand += EqualityExpression
		//| operator = ConditionalAndOperator operand += EqualityExpressionReference )
		public Alternatives getAlternatives_1_1() { return cAlternatives_1_1; }
		
		//operator = AndOperator operand += EqualityExpression
		public Group getGroup_1_1_0() { return cGroup_1_1_0; }
		
		//operator = AndOperator
		public Assignment getOperatorAssignment_1_1_0_0() { return cOperatorAssignment_1_1_0_0; }
		
		//AndOperator
		public RuleCall getOperatorAndOperatorParserRuleCall_1_1_0_0_0() { return cOperatorAndOperatorParserRuleCall_1_1_0_0_0; }
		
		//operand += EqualityExpression
		public Assignment getOperandAssignment_1_1_0_1() { return cOperandAssignment_1_1_0_1; }
		
		//EqualityExpression
		public RuleCall getOperandEqualityExpressionParserRuleCall_1_1_0_1_0() { return cOperandEqualityExpressionParserRuleCall_1_1_0_1_0; }
		
		//operator = ConditionalAndOperator operand += EqualityExpressionReference
		public Group getGroup_1_1_1() { return cGroup_1_1_1; }
		
		//operator = ConditionalAndOperator
		public Assignment getOperatorAssignment_1_1_1_0() { return cOperatorAssignment_1_1_1_0; }
		
		//ConditionalAndOperator
		public RuleCall getOperatorConditionalAndOperatorParserRuleCall_1_1_1_0_0() { return cOperatorConditionalAndOperatorParserRuleCall_1_1_1_0_0; }
		
		//operand += EqualityExpressionReference
		public Assignment getOperandAssignment_1_1_1_1() { return cOperandAssignment_1_1_1_1; }
		
		//EqualityExpressionReference
		public RuleCall getOperandEqualityExpressionReferenceParserRuleCall_1_1_1_1_0() { return cOperandEqualityExpressionReferenceParserRuleCall_1_1_1_1_0; }
	}
	public class AndOperatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.expressions.xtext.KerMLExpressions.AndOperator");
		private final Keyword cAmpersandKeyword = (Keyword)rule.eContents().get(1);
		
		//AndOperator :
		//    '&'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'&'
		public Keyword getAmpersandKeyword() { return cAmpersandKeyword; }
	}
	public class ConditionalAndOperatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.expressions.xtext.KerMLExpressions.ConditionalAndOperator");
		private final Keyword cAndKeyword = (Keyword)rule.eContents().get(1);
		
		//ConditionalAndOperator :
		//    'and'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'and'
		public Keyword getAndKeyword() { return cAndKeyword; }
	}
	public class EqualityExpressionReferenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.expressions.xtext.KerMLExpressions.EqualityExpressionReference");
		private final Assignment cOwnedRelationshipAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cOwnedRelationshipEqualityExpressionMemberParserRuleCall_0 = (RuleCall)cOwnedRelationshipAssignment.eContents().get(0);
		
		//// Equality Expressions
		//EqualityExpressionReference returns SysML::FeatureReferenceExpression :
		//    ownedRelationship += EqualityExpressionMember
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//ownedRelationship += EqualityExpressionMember
		public Assignment getOwnedRelationshipAssignment() { return cOwnedRelationshipAssignment; }
		
		//EqualityExpressionMember
		public RuleCall getOwnedRelationshipEqualityExpressionMemberParserRuleCall_0() { return cOwnedRelationshipEqualityExpressionMemberParserRuleCall_0; }
	}
	public class EqualityExpressionMemberElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.expressions.xtext.KerMLExpressions.EqualityExpressionMember");
		private final Assignment cOwnedRelatedElementAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cOwnedRelatedElementEqualityExpressionParserRuleCall_0 = (RuleCall)cOwnedRelatedElementAssignment.eContents().get(0);
		
		//EqualityExpressionMember returns SysML::FeatureMembership :
		//    ownedRelatedElement += EqualityExpression
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//ownedRelatedElement += EqualityExpression
		public Assignment getOwnedRelatedElementAssignment() { return cOwnedRelatedElementAssignment; }
		
		//EqualityExpression
		public RuleCall getOwnedRelatedElementEqualityExpressionParserRuleCall_0() { return cOwnedRelatedElementEqualityExpressionParserRuleCall_0; }
	}
	public class EqualityExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.expressions.xtext.KerMLExpressions.EqualityExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cClassificationExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cOperatorExpressionOperandAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOperatorAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cOperatorEqualityOperatorParserRuleCall_1_1_0 = (RuleCall)cOperatorAssignment_1_1.eContents().get(0);
		private final Assignment cOperandAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cOperandClassificationExpressionParserRuleCall_1_2_0 = (RuleCall)cOperandAssignment_1_2.eContents().get(0);
		
		//EqualityExpression returns SysML::Expression :
		//    ClassificationExpression ( {SysML::OperatorExpression.operand += current}
		//        operator = EqualityOperator operand += ClassificationExpression )*
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//ClassificationExpression ( {SysML::OperatorExpression.operand += current}
		//    operator = EqualityOperator operand += ClassificationExpression )*
		public Group getGroup() { return cGroup; }
		
		//ClassificationExpression
		public RuleCall getClassificationExpressionParserRuleCall_0() { return cClassificationExpressionParserRuleCall_0; }
		
		//( {SysML::OperatorExpression.operand += current}
		//       operator = EqualityOperator operand += ClassificationExpression )*
		public Group getGroup_1() { return cGroup_1; }
		
		//{SysML::OperatorExpression.operand += current}
		public Action getOperatorExpressionOperandAction_1_0() { return cOperatorExpressionOperandAction_1_0; }
		
		//operator = EqualityOperator
		public Assignment getOperatorAssignment_1_1() { return cOperatorAssignment_1_1; }
		
		//EqualityOperator
		public RuleCall getOperatorEqualityOperatorParserRuleCall_1_1_0() { return cOperatorEqualityOperatorParserRuleCall_1_1_0; }
		
		//operand += ClassificationExpression
		public Assignment getOperandAssignment_1_2() { return cOperandAssignment_1_2; }
		
		//ClassificationExpression
		public RuleCall getOperandClassificationExpressionParserRuleCall_1_2_0() { return cOperandClassificationExpressionParserRuleCall_1_2_0; }
	}
	public class EqualityOperatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.expressions.xtext.KerMLExpressions.EqualityOperator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cEqualsSignEqualsSignKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cExclamationMarkEqualsSignKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cEqualsSignEqualsSignEqualsSignKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cExclamationMarkEqualsSignEqualsSignKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		
		//EqualityOperator :
		//    '==' | '!=' | '===' | '!=='
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'==' | '!=' | '===' | '!=='
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'=='
		public Keyword getEqualsSignEqualsSignKeyword_0() { return cEqualsSignEqualsSignKeyword_0; }
		
		//'!='
		public Keyword getExclamationMarkEqualsSignKeyword_1() { return cExclamationMarkEqualsSignKeyword_1; }
		
		//'==='
		public Keyword getEqualsSignEqualsSignEqualsSignKeyword_2() { return cEqualsSignEqualsSignEqualsSignKeyword_2; }
		
		//'!=='
		public Keyword getExclamationMarkEqualsSignEqualsSignKeyword_3() { return cExclamationMarkEqualsSignEqualsSignKeyword_3; }
	}
	public class ClassificationExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.expressions.xtext.KerMLExpressions.ClassificationExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final RuleCall cRelationalExpressionParserRuleCall_0_0 = (RuleCall)cGroup_0.eContents().get(0);
		private final Alternatives cAlternatives_0_1 = (Alternatives)cGroup_0.eContents().get(1);
		private final Group cGroup_0_1_0 = (Group)cAlternatives_0_1.eContents().get(0);
		private final Action cOperatorExpressionOperandAction_0_1_0_0 = (Action)cGroup_0_1_0.eContents().get(0);
		private final Assignment cOperatorAssignment_0_1_0_1 = (Assignment)cGroup_0_1_0.eContents().get(1);
		private final RuleCall cOperatorClassificationTestOperatorParserRuleCall_0_1_0_1_0 = (RuleCall)cOperatorAssignment_0_1_0_1.eContents().get(0);
		private final Assignment cOwnedRelationshipAssignment_0_1_0_2 = (Assignment)cGroup_0_1_0.eContents().get(2);
		private final RuleCall cOwnedRelationshipTypeReferenceMemberParserRuleCall_0_1_0_2_0 = (RuleCall)cOwnedRelationshipAssignment_0_1_0_2.eContents().get(0);
		private final Group cGroup_0_1_1 = (Group)cAlternatives_0_1.eContents().get(1);
		private final Action cOperatorExpressionOperandAction_0_1_1_0 = (Action)cGroup_0_1_1.eContents().get(0);
		private final Assignment cOperatorAssignment_0_1_1_1 = (Assignment)cGroup_0_1_1.eContents().get(1);
		private final RuleCall cOperatorCastOperatorParserRuleCall_0_1_1_1_0 = (RuleCall)cOperatorAssignment_0_1_1_1.eContents().get(0);
		private final Assignment cOwnedRelationshipAssignment_0_1_1_2 = (Assignment)cGroup_0_1_1.eContents().get(2);
		private final RuleCall cOwnedRelationshipTypeResultMemberParserRuleCall_0_1_1_2_0 = (RuleCall)cOwnedRelationshipAssignment_0_1_1_2.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cOperatorExpressionAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOperandAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cOperandSelfReferenceExpressionParserRuleCall_1_1_0 = (RuleCall)cOperandAssignment_1_1.eContents().get(0);
		private final Assignment cOperatorAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cOperatorClassificationTestOperatorParserRuleCall_1_2_0 = (RuleCall)cOperatorAssignment_1_2.eContents().get(0);
		private final Assignment cOwnedRelationshipAssignment_1_3 = (Assignment)cGroup_1.eContents().get(3);
		private final RuleCall cOwnedRelationshipTypeReferenceMemberParserRuleCall_1_3_0 = (RuleCall)cOwnedRelationshipAssignment_1_3.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Action cOperatorExpressionAction_2_0 = (Action)cGroup_2.eContents().get(0);
		private final Assignment cOperandAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cOperandMetadataReferenceParserRuleCall_2_1_0 = (RuleCall)cOperandAssignment_2_1.eContents().get(0);
		private final Assignment cOperatorAssignment_2_2 = (Assignment)cGroup_2.eContents().get(2);
		private final RuleCall cOperatorMetaClassificationTestOperatorParserRuleCall_2_2_0 = (RuleCall)cOperatorAssignment_2_2.eContents().get(0);
		private final Assignment cOwnedRelationshipAssignment_2_3 = (Assignment)cGroup_2.eContents().get(3);
		private final RuleCall cOwnedRelationshipTypeReferenceMemberParserRuleCall_2_3_0 = (RuleCall)cOwnedRelationshipAssignment_2_3.eContents().get(0);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Action cOperatorExpressionAction_3_0 = (Action)cGroup_3.eContents().get(0);
		private final Assignment cOperandAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cOperandSelfReferenceExpressionParserRuleCall_3_1_0 = (RuleCall)cOperandAssignment_3_1.eContents().get(0);
		private final Assignment cOperatorAssignment_3_2 = (Assignment)cGroup_3.eContents().get(2);
		private final RuleCall cOperatorCastOperatorParserRuleCall_3_2_0 = (RuleCall)cOperatorAssignment_3_2.eContents().get(0);
		private final Assignment cOwnedRelationshipAssignment_3_3 = (Assignment)cGroup_3.eContents().get(3);
		private final RuleCall cOwnedRelationshipTypeResultMemberParserRuleCall_3_3_0 = (RuleCall)cOwnedRelationshipAssignment_3_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cAlternatives.eContents().get(4);
		private final Action cOperatorExpressionAction_4_0 = (Action)cGroup_4.eContents().get(0);
		private final Assignment cOperandAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cOperandMetadataReferenceParserRuleCall_4_1_0 = (RuleCall)cOperandAssignment_4_1.eContents().get(0);
		private final Assignment cOperatorAssignment_4_2 = (Assignment)cGroup_4.eContents().get(2);
		private final RuleCall cOperatorMetaCastOperatorParserRuleCall_4_2_0 = (RuleCall)cOperatorAssignment_4_2.eContents().get(0);
		private final Assignment cOwnedRelationshipAssignment_4_3 = (Assignment)cGroup_4.eContents().get(3);
		private final RuleCall cOwnedRelationshipTypeResultMemberParserRuleCall_4_3_0 = (RuleCall)cOwnedRelationshipAssignment_4_3.eContents().get(0);
		
		//// Classification Expressions
		//ClassificationExpression returns SysML::Expression :
		//      RelationalExpression
		//      ( {SysML::OperatorExpression.operand += current}
		//          operator = ClassificationTestOperator ownedRelationship += TypeReferenceMember
		//      | {SysML::OperatorExpression.operand += current}
		//        operator = CastOperator ownedRelationship += TypeResultMember
		//      )?
		//    | {SysML::OperatorExpression} operand += SelfReferenceExpression
		//      operator = ClassificationTestOperator ownedRelationship += TypeReferenceMember
		//    | {SysML::OperatorExpression} operand += MetadataReference
		//      operator = MetaClassificationTestOperator ownedRelationship += TypeReferenceMember
		//    | {SysML::OperatorExpression} operand += SelfReferenceExpression
		//      operator = CastOperator ownedRelationship += TypeResultMember
		//    | {SysML::OperatorExpression} operand += MetadataReference
		//      operator = MetaCastOperator ownedRelationship += TypeResultMember
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//  RelationalExpression
		//  ( {SysML::OperatorExpression.operand += current}
		//      operator = ClassificationTestOperator ownedRelationship += TypeReferenceMember
		//  | {SysML::OperatorExpression.operand += current}
		//    operator = CastOperator ownedRelationship += TypeResultMember
		//  )?
		//| {SysML::OperatorExpression} operand += SelfReferenceExpression
		//  operator = ClassificationTestOperator ownedRelationship += TypeReferenceMember
		//| {SysML::OperatorExpression} operand += MetadataReference
		//  operator = MetaClassificationTestOperator ownedRelationship += TypeReferenceMember
		//| {SysML::OperatorExpression} operand += SelfReferenceExpression
		//  operator = CastOperator ownedRelationship += TypeResultMember
		//| {SysML::OperatorExpression} operand += MetadataReference
		//  operator = MetaCastOperator ownedRelationship += TypeResultMember
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//RelationalExpression
		//( {SysML::OperatorExpression.operand += current}
		//    operator = ClassificationTestOperator ownedRelationship += TypeReferenceMember
		//| {SysML::OperatorExpression.operand += current}
		//  operator = CastOperator ownedRelationship += TypeResultMember
		//)?
		public Group getGroup_0() { return cGroup_0; }
		
		//RelationalExpression
		public RuleCall getRelationalExpressionParserRuleCall_0_0() { return cRelationalExpressionParserRuleCall_0_0; }
		
		//( {SysML::OperatorExpression.operand += current}
		//    operator = ClassificationTestOperator ownedRelationship += TypeReferenceMember
		//| {SysML::OperatorExpression.operand += current}
		//  operator = CastOperator ownedRelationship += TypeResultMember
		//)?
		public Alternatives getAlternatives_0_1() { return cAlternatives_0_1; }
		
		//{SysML::OperatorExpression.operand += current}
		//         operator = ClassificationTestOperator ownedRelationship += TypeReferenceMember
		public Group getGroup_0_1_0() { return cGroup_0_1_0; }
		
		//{SysML::OperatorExpression.operand += current}
		public Action getOperatorExpressionOperandAction_0_1_0_0() { return cOperatorExpressionOperandAction_0_1_0_0; }
		
		//operator = ClassificationTestOperator
		public Assignment getOperatorAssignment_0_1_0_1() { return cOperatorAssignment_0_1_0_1; }
		
		//ClassificationTestOperator
		public RuleCall getOperatorClassificationTestOperatorParserRuleCall_0_1_0_1_0() { return cOperatorClassificationTestOperatorParserRuleCall_0_1_0_1_0; }
		
		//ownedRelationship += TypeReferenceMember
		public Assignment getOwnedRelationshipAssignment_0_1_0_2() { return cOwnedRelationshipAssignment_0_1_0_2; }
		
		//TypeReferenceMember
		public RuleCall getOwnedRelationshipTypeReferenceMemberParserRuleCall_0_1_0_2_0() { return cOwnedRelationshipTypeReferenceMemberParserRuleCall_0_1_0_2_0; }
		
		//{SysML::OperatorExpression.operand += current}
		//       operator = CastOperator ownedRelationship += TypeResultMember
		public Group getGroup_0_1_1() { return cGroup_0_1_1; }
		
		//{SysML::OperatorExpression.operand += current}
		public Action getOperatorExpressionOperandAction_0_1_1_0() { return cOperatorExpressionOperandAction_0_1_1_0; }
		
		//operator = CastOperator
		public Assignment getOperatorAssignment_0_1_1_1() { return cOperatorAssignment_0_1_1_1; }
		
		//CastOperator
		public RuleCall getOperatorCastOperatorParserRuleCall_0_1_1_1_0() { return cOperatorCastOperatorParserRuleCall_0_1_1_1_0; }
		
		//ownedRelationship += TypeResultMember
		public Assignment getOwnedRelationshipAssignment_0_1_1_2() { return cOwnedRelationshipAssignment_0_1_1_2; }
		
		//TypeResultMember
		public RuleCall getOwnedRelationshipTypeResultMemberParserRuleCall_0_1_1_2_0() { return cOwnedRelationshipTypeResultMemberParserRuleCall_0_1_1_2_0; }
		
		//{SysML::OperatorExpression} operand += SelfReferenceExpression
		//     operator = ClassificationTestOperator ownedRelationship += TypeReferenceMember
		public Group getGroup_1() { return cGroup_1; }
		
		//{SysML::OperatorExpression}
		public Action getOperatorExpressionAction_1_0() { return cOperatorExpressionAction_1_0; }
		
		//operand += SelfReferenceExpression
		public Assignment getOperandAssignment_1_1() { return cOperandAssignment_1_1; }
		
		//SelfReferenceExpression
		public RuleCall getOperandSelfReferenceExpressionParserRuleCall_1_1_0() { return cOperandSelfReferenceExpressionParserRuleCall_1_1_0; }
		
		//operator = ClassificationTestOperator
		public Assignment getOperatorAssignment_1_2() { return cOperatorAssignment_1_2; }
		
		//ClassificationTestOperator
		public RuleCall getOperatorClassificationTestOperatorParserRuleCall_1_2_0() { return cOperatorClassificationTestOperatorParserRuleCall_1_2_0; }
		
		//ownedRelationship += TypeReferenceMember
		public Assignment getOwnedRelationshipAssignment_1_3() { return cOwnedRelationshipAssignment_1_3; }
		
		//TypeReferenceMember
		public RuleCall getOwnedRelationshipTypeReferenceMemberParserRuleCall_1_3_0() { return cOwnedRelationshipTypeReferenceMemberParserRuleCall_1_3_0; }
		
		//{SysML::OperatorExpression} operand += MetadataReference
		//     operator = MetaClassificationTestOperator ownedRelationship += TypeReferenceMember
		public Group getGroup_2() { return cGroup_2; }
		
		//{SysML::OperatorExpression}
		public Action getOperatorExpressionAction_2_0() { return cOperatorExpressionAction_2_0; }
		
		//operand += MetadataReference
		public Assignment getOperandAssignment_2_1() { return cOperandAssignment_2_1; }
		
		//MetadataReference
		public RuleCall getOperandMetadataReferenceParserRuleCall_2_1_0() { return cOperandMetadataReferenceParserRuleCall_2_1_0; }
		
		//operator = MetaClassificationTestOperator
		public Assignment getOperatorAssignment_2_2() { return cOperatorAssignment_2_2; }
		
		//MetaClassificationTestOperator
		public RuleCall getOperatorMetaClassificationTestOperatorParserRuleCall_2_2_0() { return cOperatorMetaClassificationTestOperatorParserRuleCall_2_2_0; }
		
		//ownedRelationship += TypeReferenceMember
		public Assignment getOwnedRelationshipAssignment_2_3() { return cOwnedRelationshipAssignment_2_3; }
		
		//TypeReferenceMember
		public RuleCall getOwnedRelationshipTypeReferenceMemberParserRuleCall_2_3_0() { return cOwnedRelationshipTypeReferenceMemberParserRuleCall_2_3_0; }
		
		//{SysML::OperatorExpression} operand += SelfReferenceExpression
		//     operator = CastOperator ownedRelationship += TypeResultMember
		public Group getGroup_3() { return cGroup_3; }
		
		//{SysML::OperatorExpression}
		public Action getOperatorExpressionAction_3_0() { return cOperatorExpressionAction_3_0; }
		
		//operand += SelfReferenceExpression
		public Assignment getOperandAssignment_3_1() { return cOperandAssignment_3_1; }
		
		//SelfReferenceExpression
		public RuleCall getOperandSelfReferenceExpressionParserRuleCall_3_1_0() { return cOperandSelfReferenceExpressionParserRuleCall_3_1_0; }
		
		//operator = CastOperator
		public Assignment getOperatorAssignment_3_2() { return cOperatorAssignment_3_2; }
		
		//CastOperator
		public RuleCall getOperatorCastOperatorParserRuleCall_3_2_0() { return cOperatorCastOperatorParserRuleCall_3_2_0; }
		
		//ownedRelationship += TypeResultMember
		public Assignment getOwnedRelationshipAssignment_3_3() { return cOwnedRelationshipAssignment_3_3; }
		
		//TypeResultMember
		public RuleCall getOwnedRelationshipTypeResultMemberParserRuleCall_3_3_0() { return cOwnedRelationshipTypeResultMemberParserRuleCall_3_3_0; }
		
		//{SysML::OperatorExpression} operand += MetadataReference
		//     operator = MetaCastOperator ownedRelationship += TypeResultMember
		public Group getGroup_4() { return cGroup_4; }
		
		//{SysML::OperatorExpression}
		public Action getOperatorExpressionAction_4_0() { return cOperatorExpressionAction_4_0; }
		
		//operand += MetadataReference
		public Assignment getOperandAssignment_4_1() { return cOperandAssignment_4_1; }
		
		//MetadataReference
		public RuleCall getOperandMetadataReferenceParserRuleCall_4_1_0() { return cOperandMetadataReferenceParserRuleCall_4_1_0; }
		
		//operator = MetaCastOperator
		public Assignment getOperatorAssignment_4_2() { return cOperatorAssignment_4_2; }
		
		//MetaCastOperator
		public RuleCall getOperatorMetaCastOperatorParserRuleCall_4_2_0() { return cOperatorMetaCastOperatorParserRuleCall_4_2_0; }
		
		//ownedRelationship += TypeResultMember
		public Assignment getOwnedRelationshipAssignment_4_3() { return cOwnedRelationshipAssignment_4_3; }
		
		//TypeResultMember
		public RuleCall getOwnedRelationshipTypeResultMemberParserRuleCall_4_3_0() { return cOwnedRelationshipTypeResultMemberParserRuleCall_4_3_0; }
	}
	public class ClassificationTestOperatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.expressions.xtext.KerMLExpressions.ClassificationTestOperator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cHastypeKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cIstypeKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cCommercialAtKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		
		//ClassificationTestOperator :
		//    'hastype' | 'istype' | '@'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'hastype' | 'istype' | '@'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'hastype'
		public Keyword getHastypeKeyword_0() { return cHastypeKeyword_0; }
		
		//'istype'
		public Keyword getIstypeKeyword_1() { return cIstypeKeyword_1; }
		
		//'@'
		public Keyword getCommercialAtKeyword_2() { return cCommercialAtKeyword_2; }
	}
	public class MetaClassificationTestOperatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.expressions.xtext.KerMLExpressions.MetaClassificationTestOperator");
		private final Keyword cCommercialAtCommercialAtKeyword = (Keyword)rule.eContents().get(1);
		
		//MetaClassificationTestOperator :
		//    '@@'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'@@'
		public Keyword getCommercialAtCommercialAtKeyword() { return cCommercialAtCommercialAtKeyword; }
	}
	public class CastOperatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.expressions.xtext.KerMLExpressions.CastOperator");
		private final Keyword cAsKeyword = (Keyword)rule.eContents().get(1);
		
		//CastOperator :
		//    'as'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'as'
		public Keyword getAsKeyword() { return cAsKeyword; }
	}
	public class MetaCastOperatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.expressions.xtext.KerMLExpressions.MetaCastOperator");
		private final Keyword cMetaKeyword = (Keyword)rule.eContents().get(1);
		
		//MetaCastOperator :
		//    'meta'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'meta'
		public Keyword getMetaKeyword() { return cMetaKeyword; }
	}
	public class MetadataReferenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.expressions.xtext.KerMLExpressions.MetadataReference");
		private final Assignment cReferencedElementAssignment = (Assignment)rule.eContents().get(1);
		private final CrossReference cReferencedElementElementCrossReference_0 = (CrossReference)cReferencedElementAssignment.eContents().get(0);
		private final RuleCall cReferencedElementElementQualifiedNameParserRuleCall_0_1 = (RuleCall)cReferencedElementElementCrossReference_0.eContents().get(1);
		
		//MetadataReference returns SysML::MetadataAccessExpression :
		//    referencedElement = [SysML::Element | QualifiedName]
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//referencedElement = [SysML::Element | QualifiedName]
		public Assignment getReferencedElementAssignment() { return cReferencedElementAssignment; }
		
		//[SysML::Element | QualifiedName]
		public CrossReference getReferencedElementElementCrossReference_0() { return cReferencedElementElementCrossReference_0; }
		
		//QualifiedName
		public RuleCall getReferencedElementElementQualifiedNameParserRuleCall_0_1() { return cReferencedElementElementQualifiedNameParserRuleCall_0_1; }
	}
	public class TypeReferenceMemberElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.expressions.xtext.KerMLExpressions.TypeReferenceMember");
		private final Assignment cOwnedRelatedElementAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cOwnedRelatedElementTypeReferenceParserRuleCall_0 = (RuleCall)cOwnedRelatedElementAssignment.eContents().get(0);
		
		//TypeReferenceMember returns SysML::FeatureMembership :
		//    ownedRelatedElement += TypeReference
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//ownedRelatedElement += TypeReference
		public Assignment getOwnedRelatedElementAssignment() { return cOwnedRelatedElementAssignment; }
		
		//TypeReference
		public RuleCall getOwnedRelatedElementTypeReferenceParserRuleCall_0() { return cOwnedRelatedElementTypeReferenceParserRuleCall_0; }
	}
	public class TypeResultMemberElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.expressions.xtext.KerMLExpressions.TypeResultMember");
		private final Assignment cOwnedRelatedElementAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cOwnedRelatedElementTypeReferenceParserRuleCall_0 = (RuleCall)cOwnedRelatedElementAssignment.eContents().get(0);
		
		//TypeResultMember returns SysML::ReturnParameterMembership :
		//    ownedRelatedElement += TypeReference
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//ownedRelatedElement += TypeReference
		public Assignment getOwnedRelatedElementAssignment() { return cOwnedRelatedElementAssignment; }
		
		//TypeReference
		public RuleCall getOwnedRelatedElementTypeReferenceParserRuleCall_0() { return cOwnedRelatedElementTypeReferenceParserRuleCall_0; }
	}
	public class TypeReferenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.expressions.xtext.KerMLExpressions.TypeReference");
		private final Assignment cOwnedRelationshipAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cOwnedRelationshipReferenceTypingParserRuleCall_0 = (RuleCall)cOwnedRelationshipAssignment.eContents().get(0);
		
		//TypeReference returns SysML::Feature :
		//    ownedRelationship += ReferenceTyping
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//ownedRelationship += ReferenceTyping
		public Assignment getOwnedRelationshipAssignment() { return cOwnedRelationshipAssignment; }
		
		//ReferenceTyping
		public RuleCall getOwnedRelationshipReferenceTypingParserRuleCall_0() { return cOwnedRelationshipReferenceTypingParserRuleCall_0; }
	}
	public class ReferenceTypingElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.expressions.xtext.KerMLExpressions.ReferenceTyping");
		private final Assignment cTypeAssignment = (Assignment)rule.eContents().get(1);
		private final CrossReference cTypeTypeCrossReference_0 = (CrossReference)cTypeAssignment.eContents().get(0);
		private final RuleCall cTypeTypeQualifiedNameParserRuleCall_0_1 = (RuleCall)cTypeTypeCrossReference_0.eContents().get(1);
		
		//ReferenceTyping returns SysML::FeatureTyping :
		//      type = [SysML::Type | QualifiedName]
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//type = [SysML::Type | QualifiedName]
		public Assignment getTypeAssignment() { return cTypeAssignment; }
		
		//[SysML::Type | QualifiedName]
		public CrossReference getTypeTypeCrossReference_0() { return cTypeTypeCrossReference_0; }
		
		//QualifiedName
		public RuleCall getTypeTypeQualifiedNameParserRuleCall_0_1() { return cTypeTypeQualifiedNameParserRuleCall_0_1; }
	}
	public class SelfReferenceExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.expressions.xtext.KerMLExpressions.SelfReferenceExpression");
		private final Assignment cOwnedRelationshipAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cOwnedRelationshipSelfReferenceMemberParserRuleCall_0 = (RuleCall)cOwnedRelationshipAssignment.eContents().get(0);
		
		//SelfReferenceExpression returns SysML::FeatureReferenceExpression :
		//    ownedRelationship += SelfReferenceMember
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//ownedRelationship += SelfReferenceMember
		public Assignment getOwnedRelationshipAssignment() { return cOwnedRelationshipAssignment; }
		
		//SelfReferenceMember
		public RuleCall getOwnedRelationshipSelfReferenceMemberParserRuleCall_0() { return cOwnedRelationshipSelfReferenceMemberParserRuleCall_0; }
	}
	public class SelfReferenceMemberElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.expressions.xtext.KerMLExpressions.SelfReferenceMember");
		private final Assignment cOwnedRelatedElementAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cOwnedRelatedElementEmptyFeatureParserRuleCall_0 = (RuleCall)cOwnedRelatedElementAssignment.eContents().get(0);
		
		//SelfReferenceMember returns SysML::ReturnParameterMembership :
		//    ownedRelatedElement += EmptyFeature
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//ownedRelatedElement += EmptyFeature
		public Assignment getOwnedRelatedElementAssignment() { return cOwnedRelatedElementAssignment; }
		
		//EmptyFeature
		public RuleCall getOwnedRelatedElementEmptyFeatureParserRuleCall_0() { return cOwnedRelatedElementEmptyFeatureParserRuleCall_0; }
	}
	public class EmptyFeatureElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.expressions.xtext.KerMLExpressions.EmptyFeature");
		private final Action cFeatureAction = (Action)rule.eContents().get(1);
		
		//EmptyFeature returns SysML::Feature :
		//    {SysML::Feature}
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//{SysML::Feature}
		public Action getFeatureAction() { return cFeatureAction; }
	}
	public class RelationalExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.expressions.xtext.KerMLExpressions.RelationalExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cRangeExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cOperatorExpressionOperandAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOperatorAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cOperatorRelationalOperatorParserRuleCall_1_1_0 = (RuleCall)cOperatorAssignment_1_1.eContents().get(0);
		private final Assignment cOperandAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cOperandRangeExpressionParserRuleCall_1_2_0 = (RuleCall)cOperandAssignment_1_2.eContents().get(0);
		
		//// Relational Expressions
		//RelationalExpression returns SysML::Expression :
		//    RangeExpression ( {SysML::OperatorExpression.operand += current}
		//        operator = RelationalOperator operand += RangeExpression )*
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//RangeExpression ( {SysML::OperatorExpression.operand += current}
		//    operator = RelationalOperator operand += RangeExpression )*
		public Group getGroup() { return cGroup; }
		
		//RangeExpression
		public RuleCall getRangeExpressionParserRuleCall_0() { return cRangeExpressionParserRuleCall_0; }
		
		//( {SysML::OperatorExpression.operand += current}
		//       operator = RelationalOperator operand += RangeExpression )*
		public Group getGroup_1() { return cGroup_1; }
		
		//{SysML::OperatorExpression.operand += current}
		public Action getOperatorExpressionOperandAction_1_0() { return cOperatorExpressionOperandAction_1_0; }
		
		//operator = RelationalOperator
		public Assignment getOperatorAssignment_1_1() { return cOperatorAssignment_1_1; }
		
		//RelationalOperator
		public RuleCall getOperatorRelationalOperatorParserRuleCall_1_1_0() { return cOperatorRelationalOperatorParserRuleCall_1_1_0; }
		
		//operand += RangeExpression
		public Assignment getOperandAssignment_1_2() { return cOperandAssignment_1_2; }
		
		//RangeExpression
		public RuleCall getOperandRangeExpressionParserRuleCall_1_2_0() { return cOperandRangeExpressionParserRuleCall_1_2_0; }
	}
	public class RelationalOperatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.expressions.xtext.KerMLExpressions.RelationalOperator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cLessThanSignKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cGreaterThanSignKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cLessThanSignEqualsSignKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cGreaterThanSignEqualsSignKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		
		//RelationalOperator :
		//    '<' | '>' | '<=' | '>='
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'<' | '>' | '<=' | '>='
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'<'
		public Keyword getLessThanSignKeyword_0() { return cLessThanSignKeyword_0; }
		
		//'>'
		public Keyword getGreaterThanSignKeyword_1() { return cGreaterThanSignKeyword_1; }
		
		//'<='
		public Keyword getLessThanSignEqualsSignKeyword_2() { return cLessThanSignEqualsSignKeyword_2; }
		
		//'>='
		public Keyword getGreaterThanSignEqualsSignKeyword_3() { return cGreaterThanSignEqualsSignKeyword_3; }
	}
	public class RangeExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.expressions.xtext.KerMLExpressions.RangeExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cAdditiveExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cOperatorExpressionOperandAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOperatorAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Keyword cOperatorFullStopFullStopKeyword_1_1_0 = (Keyword)cOperatorAssignment_1_1.eContents().get(0);
		private final Assignment cOperandAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cOperandAdditiveExpressionParserRuleCall_1_2_0 = (RuleCall)cOperandAssignment_1_2.eContents().get(0);
		
		//// Range Expressions
		//RangeExpression returns SysML::Expression :
		//    AdditiveExpression ( {SysML::OperatorExpression.operand += current}
		//        operator = '..' operand += AdditiveExpression )?
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//AdditiveExpression ( {SysML::OperatorExpression.operand += current}
		//    operator = '..' operand += AdditiveExpression )?
		public Group getGroup() { return cGroup; }
		
		//AdditiveExpression
		public RuleCall getAdditiveExpressionParserRuleCall_0() { return cAdditiveExpressionParserRuleCall_0; }
		
		//( {SysML::OperatorExpression.operand += current}
		//       operator = '..' operand += AdditiveExpression )?
		public Group getGroup_1() { return cGroup_1; }
		
		//{SysML::OperatorExpression.operand += current}
		public Action getOperatorExpressionOperandAction_1_0() { return cOperatorExpressionOperandAction_1_0; }
		
		//operator = '..'
		public Assignment getOperatorAssignment_1_1() { return cOperatorAssignment_1_1; }
		
		//'..'
		public Keyword getOperatorFullStopFullStopKeyword_1_1_0() { return cOperatorFullStopFullStopKeyword_1_1_0; }
		
		//operand += AdditiveExpression
		public Assignment getOperandAssignment_1_2() { return cOperandAssignment_1_2; }
		
		//AdditiveExpression
		public RuleCall getOperandAdditiveExpressionParserRuleCall_1_2_0() { return cOperandAdditiveExpressionParserRuleCall_1_2_0; }
	}
	public class AdditiveExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.expressions.xtext.KerMLExpressions.AdditiveExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cMultiplicativeExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cOperatorExpressionOperandAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOperatorAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cOperatorAdditiveOperatorParserRuleCall_1_1_0 = (RuleCall)cOperatorAssignment_1_1.eContents().get(0);
		private final Assignment cOperandAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cOperandMultiplicativeExpressionParserRuleCall_1_2_0 = (RuleCall)cOperandAssignment_1_2.eContents().get(0);
		
		//// Arithmetic Expressions
		//AdditiveExpression returns SysML::Expression :
		//    MultiplicativeExpression ( {SysML::OperatorExpression.operand += current}
		//        operator = AdditiveOperator operand += MultiplicativeExpression )*
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//MultiplicativeExpression ( {SysML::OperatorExpression.operand += current}
		//    operator = AdditiveOperator operand += MultiplicativeExpression )*
		public Group getGroup() { return cGroup; }
		
		//MultiplicativeExpression
		public RuleCall getMultiplicativeExpressionParserRuleCall_0() { return cMultiplicativeExpressionParserRuleCall_0; }
		
		//( {SysML::OperatorExpression.operand += current}
		//       operator = AdditiveOperator operand += MultiplicativeExpression )*
		public Group getGroup_1() { return cGroup_1; }
		
		//{SysML::OperatorExpression.operand += current}
		public Action getOperatorExpressionOperandAction_1_0() { return cOperatorExpressionOperandAction_1_0; }
		
		//operator = AdditiveOperator
		public Assignment getOperatorAssignment_1_1() { return cOperatorAssignment_1_1; }
		
		//AdditiveOperator
		public RuleCall getOperatorAdditiveOperatorParserRuleCall_1_1_0() { return cOperatorAdditiveOperatorParserRuleCall_1_1_0; }
		
		//operand += MultiplicativeExpression
		public Assignment getOperandAssignment_1_2() { return cOperandAssignment_1_2; }
		
		//MultiplicativeExpression
		public RuleCall getOperandMultiplicativeExpressionParserRuleCall_1_2_0() { return cOperandMultiplicativeExpressionParserRuleCall_1_2_0; }
	}
	public class AdditiveOperatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.expressions.xtext.KerMLExpressions.AdditiveOperator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cPlusSignKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cHyphenMinusKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//AdditiveOperator :
		//    '+' | '-'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'+' | '-'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'+'
		public Keyword getPlusSignKeyword_0() { return cPlusSignKeyword_0; }
		
		//'-'
		public Keyword getHyphenMinusKeyword_1() { return cHyphenMinusKeyword_1; }
	}
	public class MultiplicativeExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.expressions.xtext.KerMLExpressions.MultiplicativeExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cExponentiationExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cOperatorExpressionOperandAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOperatorAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cOperatorMultiplicativeOperatorParserRuleCall_1_1_0 = (RuleCall)cOperatorAssignment_1_1.eContents().get(0);
		private final Assignment cOperandAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cOperandExponentiationExpressionParserRuleCall_1_2_0 = (RuleCall)cOperandAssignment_1_2.eContents().get(0);
		
		//MultiplicativeExpression returns SysML::Expression :
		//    ExponentiationExpression ( {SysML::OperatorExpression.operand += current}
		//        operator = MultiplicativeOperator operand += ExponentiationExpression )*
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//ExponentiationExpression ( {SysML::OperatorExpression.operand += current}
		//    operator = MultiplicativeOperator operand += ExponentiationExpression )*
		public Group getGroup() { return cGroup; }
		
		//ExponentiationExpression
		public RuleCall getExponentiationExpressionParserRuleCall_0() { return cExponentiationExpressionParserRuleCall_0; }
		
		//( {SysML::OperatorExpression.operand += current}
		//       operator = MultiplicativeOperator operand += ExponentiationExpression )*
		public Group getGroup_1() { return cGroup_1; }
		
		//{SysML::OperatorExpression.operand += current}
		public Action getOperatorExpressionOperandAction_1_0() { return cOperatorExpressionOperandAction_1_0; }
		
		//operator = MultiplicativeOperator
		public Assignment getOperatorAssignment_1_1() { return cOperatorAssignment_1_1; }
		
		//MultiplicativeOperator
		public RuleCall getOperatorMultiplicativeOperatorParserRuleCall_1_1_0() { return cOperatorMultiplicativeOperatorParserRuleCall_1_1_0; }
		
		//operand += ExponentiationExpression
		public Assignment getOperandAssignment_1_2() { return cOperandAssignment_1_2; }
		
		//ExponentiationExpression
		public RuleCall getOperandExponentiationExpressionParserRuleCall_1_2_0() { return cOperandExponentiationExpressionParserRuleCall_1_2_0; }
	}
	public class MultiplicativeOperatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.expressions.xtext.KerMLExpressions.MultiplicativeOperator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cAsteriskKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cSolidusKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cPercentSignKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		
		//MultiplicativeOperator :
		//    '*' | '/' | '%'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'*' | '/' | '%'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'*'
		public Keyword getAsteriskKeyword_0() { return cAsteriskKeyword_0; }
		
		//'/'
		public Keyword getSolidusKeyword_1() { return cSolidusKeyword_1; }
		
		//'%'
		public Keyword getPercentSignKeyword_2() { return cPercentSignKeyword_2; }
	}
	public class ExponentiationExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.expressions.xtext.KerMLExpressions.ExponentiationExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cUnaryExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cOperatorExpressionOperandAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOperatorAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cOperatorExponentiationOperatorParserRuleCall_1_1_0 = (RuleCall)cOperatorAssignment_1_1.eContents().get(0);
		private final Assignment cOperandAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cOperandExponentiationExpressionParserRuleCall_1_2_0 = (RuleCall)cOperandAssignment_1_2.eContents().get(0);
		
		//ExponentiationExpression returns SysML::Expression :
		//    UnaryExpression ( {SysML::OperatorExpression.operand += current}
		//        operator = ExponentiationOperator operand += ExponentiationExpression )?
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//UnaryExpression ( {SysML::OperatorExpression.operand += current}
		//    operator = ExponentiationOperator operand += ExponentiationExpression )?
		public Group getGroup() { return cGroup; }
		
		//UnaryExpression
		public RuleCall getUnaryExpressionParserRuleCall_0() { return cUnaryExpressionParserRuleCall_0; }
		
		//( {SysML::OperatorExpression.operand += current}
		//       operator = ExponentiationOperator operand += ExponentiationExpression )?
		public Group getGroup_1() { return cGroup_1; }
		
		//{SysML::OperatorExpression.operand += current}
		public Action getOperatorExpressionOperandAction_1_0() { return cOperatorExpressionOperandAction_1_0; }
		
		//operator = ExponentiationOperator
		public Assignment getOperatorAssignment_1_1() { return cOperatorAssignment_1_1; }
		
		//ExponentiationOperator
		public RuleCall getOperatorExponentiationOperatorParserRuleCall_1_1_0() { return cOperatorExponentiationOperatorParserRuleCall_1_1_0; }
		
		//operand += ExponentiationExpression
		public Assignment getOperandAssignment_1_2() { return cOperandAssignment_1_2; }
		
		//ExponentiationExpression
		public RuleCall getOperandExponentiationExpressionParserRuleCall_1_2_0() { return cOperandExponentiationExpressionParserRuleCall_1_2_0; }
	}
	public class ExponentiationOperatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.expressions.xtext.KerMLExpressions.ExponentiationOperator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cAsteriskAsteriskKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cCircumflexAccentKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//ExponentiationOperator :
		//    '**' | '^'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'**' | '^'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'**'
		public Keyword getAsteriskAsteriskKeyword_0() { return cAsteriskAsteriskKeyword_0; }
		
		//'^'
		public Keyword getCircumflexAccentKeyword_1() { return cCircumflexAccentKeyword_1; }
	}
	public class UnaryExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.expressions.xtext.KerMLExpressions.UnaryExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cOperatorExpressionAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Assignment cOperatorAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cOperatorUnaryOperatorParserRuleCall_0_1_0 = (RuleCall)cOperatorAssignment_0_1.eContents().get(0);
		private final Assignment cOperandAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cOperandExtentExpressionParserRuleCall_0_2_0 = (RuleCall)cOperandAssignment_0_2.eContents().get(0);
		private final RuleCall cExtentExpressionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//// Unary Expressions
		//UnaryExpression returns SysML::Expression:
		//      {SysML::OperatorExpression} operator = UnaryOperator operand += ExtentExpression
		//    | ExtentExpression
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//  {SysML::OperatorExpression} operator = UnaryOperator operand += ExtentExpression
		//| ExtentExpression
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//{SysML::OperatorExpression} operator = UnaryOperator operand += ExtentExpression
		public Group getGroup_0() { return cGroup_0; }
		
		//{SysML::OperatorExpression}
		public Action getOperatorExpressionAction_0_0() { return cOperatorExpressionAction_0_0; }
		
		//operator = UnaryOperator
		public Assignment getOperatorAssignment_0_1() { return cOperatorAssignment_0_1; }
		
		//UnaryOperator
		public RuleCall getOperatorUnaryOperatorParserRuleCall_0_1_0() { return cOperatorUnaryOperatorParserRuleCall_0_1_0; }
		
		//operand += ExtentExpression
		public Assignment getOperandAssignment_0_2() { return cOperandAssignment_0_2; }
		
		//ExtentExpression
		public RuleCall getOperandExtentExpressionParserRuleCall_0_2_0() { return cOperandExtentExpressionParserRuleCall_0_2_0; }
		
		//ExtentExpression
		public RuleCall getExtentExpressionParserRuleCall_1() { return cExtentExpressionParserRuleCall_1; }
	}
	public class UnaryOperatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.expressions.xtext.KerMLExpressions.UnaryOperator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cPlusSignKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cHyphenMinusKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cTildeKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cNotKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		
		//UnaryOperator :
		//    '+' | '-' | '~' | 'not'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'+' | '-' | '~' | 'not'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'+'
		public Keyword getPlusSignKeyword_0() { return cPlusSignKeyword_0; }
		
		//'-'
		public Keyword getHyphenMinusKeyword_1() { return cHyphenMinusKeyword_1; }
		
		//'~'
		public Keyword getTildeKeyword_2() { return cTildeKeyword_2; }
		
		//'not'
		public Keyword getNotKeyword_3() { return cNotKeyword_3; }
	}
	public class ExtentExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.expressions.xtext.KerMLExpressions.ExtentExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cOperatorExpressionAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Assignment cOperatorAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final Keyword cOperatorAllKeyword_0_1_0 = (Keyword)cOperatorAssignment_0_1.eContents().get(0);
		private final Assignment cOwnedRelationshipAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cOwnedRelationshipTypeResultMemberParserRuleCall_0_2_0 = (RuleCall)cOwnedRelationshipAssignment_0_2.eContents().get(0);
		private final RuleCall cPrimaryExpressionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//// Extent Expressions
		//ExtentExpression returns SysML::Expression :
		//      {SysML::OperatorExpression} operator = 'all' ownedRelationship += TypeResultMember
		//    | PrimaryExpression
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//  {SysML::OperatorExpression} operator = 'all' ownedRelationship += TypeResultMember
		//| PrimaryExpression
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//{SysML::OperatorExpression} operator = 'all' ownedRelationship += TypeResultMember
		public Group getGroup_0() { return cGroup_0; }
		
		//{SysML::OperatorExpression}
		public Action getOperatorExpressionAction_0_0() { return cOperatorExpressionAction_0_0; }
		
		//operator = 'all'
		public Assignment getOperatorAssignment_0_1() { return cOperatorAssignment_0_1; }
		
		//'all'
		public Keyword getOperatorAllKeyword_0_1_0() { return cOperatorAllKeyword_0_1_0; }
		
		//ownedRelationship += TypeResultMember
		public Assignment getOwnedRelationshipAssignment_0_2() { return cOwnedRelationshipAssignment_0_2; }
		
		//TypeResultMember
		public RuleCall getOwnedRelationshipTypeResultMemberParserRuleCall_0_2_0() { return cOwnedRelationshipTypeResultMemberParserRuleCall_0_2_0; }
		
		//PrimaryExpression
		public RuleCall getPrimaryExpressionParserRuleCall_1() { return cPrimaryExpressionParserRuleCall_1; }
	}
	public class PrimaryExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.expressions.xtext.KerMLExpressions.PrimaryExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cBaseExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cFeatureChainExpressionOperandAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cFullStopKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cOwnedRelationshipAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cOwnedRelationshipFeatureChainMemberParserRuleCall_1_2_0 = (RuleCall)cOwnedRelationshipAssignment_1_2.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Alternatives cAlternatives_2_0 = (Alternatives)cGroup_2.eContents().get(0);
		private final Group cGroup_2_0_0 = (Group)cAlternatives_2_0.eContents().get(0);
		private final Action cOperatorExpressionOperandAction_2_0_0_0 = (Action)cGroup_2_0_0.eContents().get(0);
		private final Assignment cOperatorAssignment_2_0_0_1 = (Assignment)cGroup_2_0_0.eContents().get(1);
		private final Keyword cOperatorNumberSignKeyword_2_0_0_1_0 = (Keyword)cOperatorAssignment_2_0_0_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_2_0_0_2 = (Keyword)cGroup_2_0_0.eContents().get(2);
		private final Assignment cOperandAssignment_2_0_0_3 = (Assignment)cGroup_2_0_0.eContents().get(3);
		private final RuleCall cOperandSequenceExpressionParserRuleCall_2_0_0_3_0 = (RuleCall)cOperandAssignment_2_0_0_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2_0_0_4 = (Keyword)cGroup_2_0_0.eContents().get(4);
		private final Group cGroup_2_0_1 = (Group)cAlternatives_2_0.eContents().get(1);
		private final Action cOperatorExpressionOperandAction_2_0_1_0 = (Action)cGroup_2_0_1.eContents().get(0);
		private final Assignment cOperatorAssignment_2_0_1_1 = (Assignment)cGroup_2_0_1.eContents().get(1);
		private final Keyword cOperatorLeftSquareBracketKeyword_2_0_1_1_0 = (Keyword)cOperatorAssignment_2_0_1_1.eContents().get(0);
		private final Assignment cOperandAssignment_2_0_1_2 = (Assignment)cGroup_2_0_1.eContents().get(2);
		private final RuleCall cOperandSequenceExpressionParserRuleCall_2_0_1_2_0 = (RuleCall)cOperandAssignment_2_0_1_2.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_2_0_1_3 = (Keyword)cGroup_2_0_1.eContents().get(3);
		private final Group cGroup_2_0_2 = (Group)cAlternatives_2_0.eContents().get(2);
		private final Action cInvocationExpressionOperandAction_2_0_2_0 = (Action)cGroup_2_0_2.eContents().get(0);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_2_0_2_1 = (Keyword)cGroup_2_0_2.eContents().get(1);
		private final Assignment cOwnedRelationshipAssignment_2_0_2_2 = (Assignment)cGroup_2_0_2.eContents().get(2);
		private final RuleCall cOwnedRelationshipReferenceTypingParserRuleCall_2_0_2_2_0 = (RuleCall)cOwnedRelationshipAssignment_2_0_2_2.eContents().get(0);
		private final Alternatives cAlternatives_2_0_2_3 = (Alternatives)cGroup_2_0_2.eContents().get(3);
		private final Assignment cOperandAssignment_2_0_2_3_0 = (Assignment)cAlternatives_2_0_2_3.eContents().get(0);
		private final RuleCall cOperandBodyExpressionParserRuleCall_2_0_2_3_0_0 = (RuleCall)cOperandAssignment_2_0_2_3_0.eContents().get(0);
		private final Assignment cOperandAssignment_2_0_2_3_1 = (Assignment)cAlternatives_2_0_2_3.eContents().get(1);
		private final RuleCall cOperandFunctionReferenceExpressionParserRuleCall_2_0_2_3_1_0 = (RuleCall)cOperandAssignment_2_0_2_3_1.eContents().get(0);
		private final RuleCall cArgumentListParserRuleCall_2_0_2_3_2 = (RuleCall)cAlternatives_2_0_2_3.eContents().get(2);
		private final Group cGroup_2_0_3 = (Group)cAlternatives_2_0.eContents().get(3);
		private final Action cCollectExpressionOperandAction_2_0_3_0 = (Action)cGroup_2_0_3.eContents().get(0);
		private final Keyword cFullStopKeyword_2_0_3_1 = (Keyword)cGroup_2_0_3.eContents().get(1);
		private final Assignment cOperandAssignment_2_0_3_2 = (Assignment)cGroup_2_0_3.eContents().get(2);
		private final RuleCall cOperandBodyExpressionParserRuleCall_2_0_3_2_0 = (RuleCall)cOperandAssignment_2_0_3_2.eContents().get(0);
		private final Group cGroup_2_0_4 = (Group)cAlternatives_2_0.eContents().get(4);
		private final Action cSelectExpressionOperandAction_2_0_4_0 = (Action)cGroup_2_0_4.eContents().get(0);
		private final Keyword cFullStopQuestionMarkKeyword_2_0_4_1 = (Keyword)cGroup_2_0_4.eContents().get(1);
		private final Assignment cOperandAssignment_2_0_4_2 = (Assignment)cGroup_2_0_4.eContents().get(2);
		private final RuleCall cOperandBodyExpressionParserRuleCall_2_0_4_2_0 = (RuleCall)cOperandAssignment_2_0_4_2.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cGroup_2.eContents().get(1);
		private final Action cFeatureChainExpressionOperandAction_2_1_0 = (Action)cGroup_2_1.eContents().get(0);
		private final Keyword cFullStopKeyword_2_1_1 = (Keyword)cGroup_2_1.eContents().get(1);
		private final Assignment cOwnedRelationshipAssignment_2_1_2 = (Assignment)cGroup_2_1.eContents().get(2);
		private final RuleCall cOwnedRelationshipFeatureChainMemberParserRuleCall_2_1_2_0 = (RuleCall)cOwnedRelationshipAssignment_2_1_2.eContents().get(0);
		
		///* Primary Expressions */
		//PrimaryExpression returns SysML::Expression :
		//    BaseExpression
		//    ( {SysML::FeatureChainExpression.operand += current} '.'
		//      ownedRelationship += FeatureChainMember
		//    )?
		//    ( ( {SysML::OperatorExpression.operand += current}
		//        operator = '#' '(' operand += SequenceExpression ')'
		//      | {SysML::OperatorExpression.operand += current}
		//        operator = '[' operand += SequenceExpression ']'
		//      | {SysML::InvocationExpression.operand += current} '->'
		//        ownedRelationship += ReferenceTyping
		//        ( operand += BodyExpression
		//        | operand += FunctionReferenceExpression
		//        | ArgumentList
		//        )
		//      | {SysML::CollectExpression.operand += current} '.'
		//        operand += BodyExpression
		//      | {SysML::SelectExpression.operand += current} '.?'
		//        operand += BodyExpression
		//      )
		//      ( {SysML::FeatureChainExpression.operand += current} '.'
		//          ownedRelationship += FeatureChainMember
		//      )?
		//    )*
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//BaseExpression
		//( {SysML::FeatureChainExpression.operand += current} '.'
		//  ownedRelationship += FeatureChainMember
		//)?
		//( ( {SysML::OperatorExpression.operand += current}
		//    operator = '#' '(' operand += SequenceExpression ')'
		//  | {SysML::OperatorExpression.operand += current}
		//    operator = '[' operand += SequenceExpression ']'
		//  | {SysML::InvocationExpression.operand += current} '->'
		//    ownedRelationship += ReferenceTyping
		//    ( operand += BodyExpression
		//    | operand += FunctionReferenceExpression
		//    | ArgumentList
		//    )
		//  | {SysML::CollectExpression.operand += current} '.'
		//    operand += BodyExpression
		//  | {SysML::SelectExpression.operand += current} '.?'
		//    operand += BodyExpression
		//  )
		//  ( {SysML::FeatureChainExpression.operand += current} '.'
		//      ownedRelationship += FeatureChainMember
		//  )?
		//)*
		public Group getGroup() { return cGroup; }
		
		//BaseExpression
		public RuleCall getBaseExpressionParserRuleCall_0() { return cBaseExpressionParserRuleCall_0; }
		
		//( {SysML::FeatureChainExpression.operand += current} '.'
		//  ownedRelationship += FeatureChainMember
		//)?
		public Group getGroup_1() { return cGroup_1; }
		
		//{SysML::FeatureChainExpression.operand += current}
		public Action getFeatureChainExpressionOperandAction_1_0() { return cFeatureChainExpressionOperandAction_1_0; }
		
		//'.'
		public Keyword getFullStopKeyword_1_1() { return cFullStopKeyword_1_1; }
		
		//ownedRelationship += FeatureChainMember
		public Assignment getOwnedRelationshipAssignment_1_2() { return cOwnedRelationshipAssignment_1_2; }
		
		//FeatureChainMember
		public RuleCall getOwnedRelationshipFeatureChainMemberParserRuleCall_1_2_0() { return cOwnedRelationshipFeatureChainMemberParserRuleCall_1_2_0; }
		
		//( ( {SysML::OperatorExpression.operand += current}
		//    operator = '#' '(' operand += SequenceExpression ')'
		//  | {SysML::OperatorExpression.operand += current}
		//    operator = '[' operand += SequenceExpression ']'
		//  | {SysML::InvocationExpression.operand += current} '->'
		//    ownedRelationship += ReferenceTyping
		//    ( operand += BodyExpression
		//    | operand += FunctionReferenceExpression
		//    | ArgumentList
		//    )
		//  | {SysML::CollectExpression.operand += current} '.'
		//    operand += BodyExpression
		//  | {SysML::SelectExpression.operand += current} '.?'
		//    operand += BodyExpression
		//  )
		//  ( {SysML::FeatureChainExpression.operand += current} '.'
		//      ownedRelationship += FeatureChainMember
		//  )?
		//)*
		public Group getGroup_2() { return cGroup_2; }
		
		//( {SysML::OperatorExpression.operand += current}
		//       operator = '#' '(' operand += SequenceExpression ')'
		//     | {SysML::OperatorExpression.operand += current}
		//       operator = '[' operand += SequenceExpression ']'
		//     | {SysML::InvocationExpression.operand += current} '->'
		//       ownedRelationship += ReferenceTyping
		//       ( operand += BodyExpression
		//       | operand += FunctionReferenceExpression
		//       | ArgumentList
		//       )
		//     | {SysML::CollectExpression.operand += current} '.'
		//       operand += BodyExpression
		//     | {SysML::SelectExpression.operand += current} '.?'
		//       operand += BodyExpression
		//     )
		public Alternatives getAlternatives_2_0() { return cAlternatives_2_0; }
		
		//{SysML::OperatorExpression.operand += current}
		//       operator = '#' '(' operand += SequenceExpression ')'
		public Group getGroup_2_0_0() { return cGroup_2_0_0; }
		
		//{SysML::OperatorExpression.operand += current}
		public Action getOperatorExpressionOperandAction_2_0_0_0() { return cOperatorExpressionOperandAction_2_0_0_0; }
		
		//operator = '#'
		public Assignment getOperatorAssignment_2_0_0_1() { return cOperatorAssignment_2_0_0_1; }
		
		//'#'
		public Keyword getOperatorNumberSignKeyword_2_0_0_1_0() { return cOperatorNumberSignKeyword_2_0_0_1_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2_0_0_2() { return cLeftParenthesisKeyword_2_0_0_2; }
		
		//operand += SequenceExpression
		public Assignment getOperandAssignment_2_0_0_3() { return cOperandAssignment_2_0_0_3; }
		
		//SequenceExpression
		public RuleCall getOperandSequenceExpressionParserRuleCall_2_0_0_3_0() { return cOperandSequenceExpressionParserRuleCall_2_0_0_3_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_2_0_0_4() { return cRightParenthesisKeyword_2_0_0_4; }
		
		//{SysML::OperatorExpression.operand += current}
		//       operator = '[' operand += SequenceExpression ']'
		public Group getGroup_2_0_1() { return cGroup_2_0_1; }
		
		//{SysML::OperatorExpression.operand += current}
		public Action getOperatorExpressionOperandAction_2_0_1_0() { return cOperatorExpressionOperandAction_2_0_1_0; }
		
		//operator = '['
		public Assignment getOperatorAssignment_2_0_1_1() { return cOperatorAssignment_2_0_1_1; }
		
		//'['
		public Keyword getOperatorLeftSquareBracketKeyword_2_0_1_1_0() { return cOperatorLeftSquareBracketKeyword_2_0_1_1_0; }
		
		//operand += SequenceExpression
		public Assignment getOperandAssignment_2_0_1_2() { return cOperandAssignment_2_0_1_2; }
		
		//SequenceExpression
		public RuleCall getOperandSequenceExpressionParserRuleCall_2_0_1_2_0() { return cOperandSequenceExpressionParserRuleCall_2_0_1_2_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_2_0_1_3() { return cRightSquareBracketKeyword_2_0_1_3; }
		
		//{SysML::InvocationExpression.operand += current} '->'
		//       ownedRelationship += ReferenceTyping
		//       ( operand += BodyExpression
		//       | operand += FunctionReferenceExpression
		//       | ArgumentList
		//       )
		public Group getGroup_2_0_2() { return cGroup_2_0_2; }
		
		//{SysML::InvocationExpression.operand += current}
		public Action getInvocationExpressionOperandAction_2_0_2_0() { return cInvocationExpressionOperandAction_2_0_2_0; }
		
		//'->'
		public Keyword getHyphenMinusGreaterThanSignKeyword_2_0_2_1() { return cHyphenMinusGreaterThanSignKeyword_2_0_2_1; }
		
		//ownedRelationship += ReferenceTyping
		public Assignment getOwnedRelationshipAssignment_2_0_2_2() { return cOwnedRelationshipAssignment_2_0_2_2; }
		
		//ReferenceTyping
		public RuleCall getOwnedRelationshipReferenceTypingParserRuleCall_2_0_2_2_0() { return cOwnedRelationshipReferenceTypingParserRuleCall_2_0_2_2_0; }
		
		//( operand += BodyExpression
		//| operand += FunctionReferenceExpression
		//| ArgumentList
		//)
		public Alternatives getAlternatives_2_0_2_3() { return cAlternatives_2_0_2_3; }
		
		//operand += BodyExpression
		public Assignment getOperandAssignment_2_0_2_3_0() { return cOperandAssignment_2_0_2_3_0; }
		
		//BodyExpression
		public RuleCall getOperandBodyExpressionParserRuleCall_2_0_2_3_0_0() { return cOperandBodyExpressionParserRuleCall_2_0_2_3_0_0; }
		
		//operand += FunctionReferenceExpression
		public Assignment getOperandAssignment_2_0_2_3_1() { return cOperandAssignment_2_0_2_3_1; }
		
		//FunctionReferenceExpression
		public RuleCall getOperandFunctionReferenceExpressionParserRuleCall_2_0_2_3_1_0() { return cOperandFunctionReferenceExpressionParserRuleCall_2_0_2_3_1_0; }
		
		//ArgumentList
		public RuleCall getArgumentListParserRuleCall_2_0_2_3_2() { return cArgumentListParserRuleCall_2_0_2_3_2; }
		
		//{SysML::CollectExpression.operand += current} '.'
		//       operand += BodyExpression
		public Group getGroup_2_0_3() { return cGroup_2_0_3; }
		
		//{SysML::CollectExpression.operand += current}
		public Action getCollectExpressionOperandAction_2_0_3_0() { return cCollectExpressionOperandAction_2_0_3_0; }
		
		//'.'
		public Keyword getFullStopKeyword_2_0_3_1() { return cFullStopKeyword_2_0_3_1; }
		
		//operand += BodyExpression
		public Assignment getOperandAssignment_2_0_3_2() { return cOperandAssignment_2_0_3_2; }
		
		//BodyExpression
		public RuleCall getOperandBodyExpressionParserRuleCall_2_0_3_2_0() { return cOperandBodyExpressionParserRuleCall_2_0_3_2_0; }
		
		//{SysML::SelectExpression.operand += current} '.?'
		//       operand += BodyExpression
		public Group getGroup_2_0_4() { return cGroup_2_0_4; }
		
		//{SysML::SelectExpression.operand += current}
		public Action getSelectExpressionOperandAction_2_0_4_0() { return cSelectExpressionOperandAction_2_0_4_0; }
		
		//'.?'
		public Keyword getFullStopQuestionMarkKeyword_2_0_4_1() { return cFullStopQuestionMarkKeyword_2_0_4_1; }
		
		//operand += BodyExpression
		public Assignment getOperandAssignment_2_0_4_2() { return cOperandAssignment_2_0_4_2; }
		
		//BodyExpression
		public RuleCall getOperandBodyExpressionParserRuleCall_2_0_4_2_0() { return cOperandBodyExpressionParserRuleCall_2_0_4_2_0; }
		
		//( {SysML::FeatureChainExpression.operand += current} '.'
		//    ownedRelationship += FeatureChainMember
		//)?
		public Group getGroup_2_1() { return cGroup_2_1; }
		
		//{SysML::FeatureChainExpression.operand += current}
		public Action getFeatureChainExpressionOperandAction_2_1_0() { return cFeatureChainExpressionOperandAction_2_1_0; }
		
		//'.'
		public Keyword getFullStopKeyword_2_1_1() { return cFullStopKeyword_2_1_1; }
		
		//ownedRelationship += FeatureChainMember
		public Assignment getOwnedRelationshipAssignment_2_1_2() { return cOwnedRelationshipAssignment_2_1_2; }
		
		//FeatureChainMember
		public RuleCall getOwnedRelationshipFeatureChainMemberParserRuleCall_2_1_2_0() { return cOwnedRelationshipFeatureChainMemberParserRuleCall_2_1_2_0; }
	}
	public class FunctionReferenceExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.expressions.xtext.KerMLExpressions.FunctionReferenceExpression");
		private final Assignment cOwnedRelationshipAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cOwnedRelationshipFunctionReferenceMemberParserRuleCall_0 = (RuleCall)cOwnedRelationshipAssignment.eContents().get(0);
		
		//FunctionReferenceExpression returns SysML::FeatureReferenceExpression :
		//    ownedRelationship += FunctionReferenceMember
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//ownedRelationship += FunctionReferenceMember
		public Assignment getOwnedRelationshipAssignment() { return cOwnedRelationshipAssignment; }
		
		//FunctionReferenceMember
		public RuleCall getOwnedRelationshipFunctionReferenceMemberParserRuleCall_0() { return cOwnedRelationshipFunctionReferenceMemberParserRuleCall_0; }
	}
	public class FunctionReferenceMemberElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.expressions.xtext.KerMLExpressions.FunctionReferenceMember");
		private final Assignment cOwnedRelatedElementAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cOwnedRelatedElementFunctionReferenceParserRuleCall_0 = (RuleCall)cOwnedRelatedElementAssignment.eContents().get(0);
		
		//FunctionReferenceMember returns SysML::FeatureMembership :
		//    ownedRelatedElement += FunctionReference
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//ownedRelatedElement += FunctionReference
		public Assignment getOwnedRelatedElementAssignment() { return cOwnedRelatedElementAssignment; }
		
		//FunctionReference
		public RuleCall getOwnedRelatedElementFunctionReferenceParserRuleCall_0() { return cOwnedRelatedElementFunctionReferenceParserRuleCall_0; }
	}
	public class FunctionReferenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.expressions.xtext.KerMLExpressions.FunctionReference");
		private final Assignment cOwnedRelationshipAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cOwnedRelationshipReferenceTypingParserRuleCall_0 = (RuleCall)cOwnedRelationshipAssignment.eContents().get(0);
		
		//FunctionReference returns SysML::Expression :
		//    ownedRelationship += ReferenceTyping
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//ownedRelationship += ReferenceTyping
		public Assignment getOwnedRelationshipAssignment() { return cOwnedRelationshipAssignment; }
		
		//ReferenceTyping
		public RuleCall getOwnedRelationshipReferenceTypingParserRuleCall_0() { return cOwnedRelationshipReferenceTypingParserRuleCall_0; }
	}
	public class FeatureChainMemberElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.expressions.xtext.KerMLExpressions.FeatureChainMember");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cMemberElementAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final CrossReference cMemberElementFeatureCrossReference_0_0 = (CrossReference)cMemberElementAssignment_0.eContents().get(0);
		private final RuleCall cMemberElementFeatureQualifiedNameParserRuleCall_0_0_1 = (RuleCall)cMemberElementFeatureCrossReference_0_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cOwningMembershipAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOwnedRelatedElementAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cOwnedRelatedElementOwnedFeatureChainParserRuleCall_1_1_0 = (RuleCall)cOwnedRelatedElementAssignment_1_1.eContents().get(0);
		
		//FeatureChainMember returns SysML::Membership :
		//      memberElement = [SysML::Feature | QualifiedName]
		//    | {SysML::OwningMembership} ownedRelatedElement += OwnedFeatureChain
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//  memberElement = [SysML::Feature | QualifiedName]
		//| {SysML::OwningMembership} ownedRelatedElement += OwnedFeatureChain
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//memberElement = [SysML::Feature | QualifiedName]
		public Assignment getMemberElementAssignment_0() { return cMemberElementAssignment_0; }
		
		//[SysML::Feature | QualifiedName]
		public CrossReference getMemberElementFeatureCrossReference_0_0() { return cMemberElementFeatureCrossReference_0_0; }
		
		//QualifiedName
		public RuleCall getMemberElementFeatureQualifiedNameParserRuleCall_0_0_1() { return cMemberElementFeatureQualifiedNameParserRuleCall_0_0_1; }
		
		//{SysML::OwningMembership} ownedRelatedElement += OwnedFeatureChain
		public Group getGroup_1() { return cGroup_1; }
		
		//{SysML::OwningMembership}
		public Action getOwningMembershipAction_1_0() { return cOwningMembershipAction_1_0; }
		
		//ownedRelatedElement += OwnedFeatureChain
		public Assignment getOwnedRelatedElementAssignment_1_1() { return cOwnedRelatedElementAssignment_1_1; }
		
		//OwnedFeatureChain
		public RuleCall getOwnedRelatedElementOwnedFeatureChainParserRuleCall_1_1_0() { return cOwnedRelatedElementOwnedFeatureChainParserRuleCall_1_1_0; }
	}
	public class BaseExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.expressions.xtext.KerMLExpressions.BaseExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cNullExpressionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cLiteralExpressionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cFeatureReferenceExpressionParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cMetadataAccessExpressionParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cInvocationExpressionParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cBodyExpressionParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final Group cGroup_6 = (Group)cAlternatives.eContents().get(6);
		private final Keyword cLeftParenthesisKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final RuleCall cSequenceExpressionParserRuleCall_6_1 = (RuleCall)cGroup_6.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_6_2 = (Keyword)cGroup_6.eContents().get(2);
		
		///* Base Expressions */
		//BaseExpression returns SysML::Expression :
		//      NullExpression
		//    | LiteralExpression
		//    | FeatureReferenceExpression
		//    | MetadataAccessExpression
		//    | InvocationExpression
		//    | BodyExpression
		//    | '(' SequenceExpression ')'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//  NullExpression
		//| LiteralExpression
		//| FeatureReferenceExpression
		//| MetadataAccessExpression
		//| InvocationExpression
		//| BodyExpression
		//| '(' SequenceExpression ')'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//NullExpression
		public RuleCall getNullExpressionParserRuleCall_0() { return cNullExpressionParserRuleCall_0; }
		
		//LiteralExpression
		public RuleCall getLiteralExpressionParserRuleCall_1() { return cLiteralExpressionParserRuleCall_1; }
		
		//FeatureReferenceExpression
		public RuleCall getFeatureReferenceExpressionParserRuleCall_2() { return cFeatureReferenceExpressionParserRuleCall_2; }
		
		//MetadataAccessExpression
		public RuleCall getMetadataAccessExpressionParserRuleCall_3() { return cMetadataAccessExpressionParserRuleCall_3; }
		
		//InvocationExpression
		public RuleCall getInvocationExpressionParserRuleCall_4() { return cInvocationExpressionParserRuleCall_4; }
		
		//BodyExpression
		public RuleCall getBodyExpressionParserRuleCall_5() { return cBodyExpressionParserRuleCall_5; }
		
		//'(' SequenceExpression ')'
		public Group getGroup_6() { return cGroup_6; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_6_0() { return cLeftParenthesisKeyword_6_0; }
		
		//SequenceExpression
		public RuleCall getSequenceExpressionParserRuleCall_6_1() { return cSequenceExpressionParserRuleCall_6_1; }
		
		//')'
		public Keyword getRightParenthesisKeyword_6_2() { return cRightParenthesisKeyword_6_2; }
	}
	public class BodyExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.expressions.xtext.KerMLExpressions.BodyExpression");
		private final Assignment cOwnedRelationshipAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cOwnedRelationshipExpressionBodyMemberParserRuleCall_0 = (RuleCall)cOwnedRelationshipAssignment.eContents().get(0);
		
		//// Expression Bodies
		//BodyExpression returns SysML::FeatureReferenceExpression :
		//    ownedRelationship += ExpressionBodyMember
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//ownedRelationship += ExpressionBodyMember
		public Assignment getOwnedRelationshipAssignment() { return cOwnedRelationshipAssignment; }
		
		//ExpressionBodyMember
		public RuleCall getOwnedRelationshipExpressionBodyMemberParserRuleCall_0() { return cOwnedRelationshipExpressionBodyMemberParserRuleCall_0; }
	}
	public class ExpressionBodyMemberElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.expressions.xtext.KerMLExpressions.ExpressionBodyMember");
		private final Assignment cOwnedRelatedElementAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cOwnedRelatedElementExpressionBodyParserRuleCall_0 = (RuleCall)cOwnedRelatedElementAssignment.eContents().get(0);
		
		//ExpressionBodyMember returns SysML::FeatureMembership :
		//    ownedRelatedElement += ExpressionBody
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//ownedRelatedElement += ExpressionBody
		public Assignment getOwnedRelatedElementAssignment() { return cOwnedRelatedElementAssignment; }
		
		//ExpressionBody
		public RuleCall getOwnedRelatedElementExpressionBodyParserRuleCall_0() { return cOwnedRelatedElementExpressionBodyParserRuleCall_0; }
	}
	public class ExpressionBodyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.expressions.xtext.KerMLExpressions.ExpressionBody");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cOwnedRelationshipAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cOwnedRelationshipBodyParameterMemberParserRuleCall_1_0_0 = (RuleCall)cOwnedRelationshipAssignment_1_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cOwnedRelationshipAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cOwnedRelationshipResultExpressionMemberParserRuleCall_2_0 = (RuleCall)cOwnedRelationshipAssignment_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//// This default production is overridden in the KerML and SysML grammars.
		//ExpressionBody returns SysML::Expression :
		//    '{' ( ownedRelationship += BodyParameterMember ';' )*
		//        ownedRelationship += ResultExpressionMember '}'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'{' ( ownedRelationship += BodyParameterMember ';' )*
		//    ownedRelationship += ResultExpressionMember '}'
		public Group getGroup() { return cGroup; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_0() { return cLeftCurlyBracketKeyword_0; }
		
		//( ownedRelationship += BodyParameterMember ';' )*
		public Group getGroup_1() { return cGroup_1; }
		
		//ownedRelationship += BodyParameterMember
		public Assignment getOwnedRelationshipAssignment_1_0() { return cOwnedRelationshipAssignment_1_0; }
		
		//BodyParameterMember
		public RuleCall getOwnedRelationshipBodyParameterMemberParserRuleCall_1_0_0() { return cOwnedRelationshipBodyParameterMemberParserRuleCall_1_0_0; }
		
		//';'
		public Keyword getSemicolonKeyword_1_1() { return cSemicolonKeyword_1_1; }
		
		//ownedRelationship += ResultExpressionMember
		public Assignment getOwnedRelationshipAssignment_2() { return cOwnedRelationshipAssignment_2; }
		
		//ResultExpressionMember
		public RuleCall getOwnedRelationshipResultExpressionMemberParserRuleCall_2_0() { return cOwnedRelationshipResultExpressionMemberParserRuleCall_2_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}
	public class ResultExpressionMemberElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.expressions.xtext.KerMLExpressions.ResultExpressionMember");
		private final Assignment cOwnedRelatedElementAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cOwnedRelatedElementOwnedExpressionParserRuleCall_0 = (RuleCall)cOwnedRelatedElementAssignment.eContents().get(0);
		
		//ResultExpressionMember returns SysML::ResultExpressionMembership :
		//    ownedRelatedElement += OwnedExpression
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//ownedRelatedElement += OwnedExpression
		public Assignment getOwnedRelatedElementAssignment() { return cOwnedRelatedElementAssignment; }
		
		//OwnedExpression
		public RuleCall getOwnedRelatedElementOwnedExpressionParserRuleCall_0() { return cOwnedRelatedElementOwnedExpressionParserRuleCall_0; }
	}
	public class BodyParameterMemberElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.expressions.xtext.KerMLExpressions.BodyParameterMember");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cInKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cOwnedRelatedElementAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cOwnedRelatedElementBodyParameterParserRuleCall_1_0 = (RuleCall)cOwnedRelatedElementAssignment_1.eContents().get(0);
		
		//BodyParameterMember returns SysML::ParameterMembership :
		//    'in' ownedRelatedElement += BodyParameter
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'in' ownedRelatedElement += BodyParameter
		public Group getGroup() { return cGroup; }
		
		//'in'
		public Keyword getInKeyword_0() { return cInKeyword_0; }
		
		//ownedRelatedElement += BodyParameter
		public Assignment getOwnedRelatedElementAssignment_1() { return cOwnedRelatedElementAssignment_1; }
		
		//BodyParameter
		public RuleCall getOwnedRelatedElementBodyParameterParserRuleCall_1_0() { return cOwnedRelatedElementBodyParameterParserRuleCall_1_0; }
	}
	public class BodyParameterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.expressions.xtext.KerMLExpressions.BodyParameter");
		private final Assignment cDeclaredNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cDeclaredNameNameParserRuleCall_0 = (RuleCall)cDeclaredNameAssignment.eContents().get(0);
		
		//BodyParameter returns SysML::Feature :
		//    declaredName = Name
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//declaredName = Name
		public Assignment getDeclaredNameAssignment() { return cDeclaredNameAssignment; }
		
		//Name
		public RuleCall getDeclaredNameNameParserRuleCall_0() { return cDeclaredNameNameParserRuleCall_0; }
	}
	public class SequenceExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.expressions.xtext.KerMLExpressions.SequenceExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cOwnedExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cAlternatives_1.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final Action cOperatorExpressionOperandAction_1_1_0 = (Action)cGroup_1_1.eContents().get(0);
		private final Assignment cOperatorAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final Keyword cOperatorCommaKeyword_1_1_1_0 = (Keyword)cOperatorAssignment_1_1_1.eContents().get(0);
		private final Assignment cOperandAssignment_1_1_2 = (Assignment)cGroup_1_1.eContents().get(2);
		private final RuleCall cOperandSequenceExpressionParserRuleCall_1_1_2_0 = (RuleCall)cOperandAssignment_1_1_2.eContents().get(0);
		
		//// Sequence Expressions
		//SequenceExpression returns SysML::Expression :
		//    OwnedExpression
		//    ( ','
		//    | {SysML::OperatorExpression.operand += current} operator = ','
		//      operand += SequenceExpression
		//    )?
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//OwnedExpression
		//( ','
		//| {SysML::OperatorExpression.operand += current} operator = ','
		//  operand += SequenceExpression
		//)?
		public Group getGroup() { return cGroup; }
		
		//OwnedExpression
		public RuleCall getOwnedExpressionParserRuleCall_0() { return cOwnedExpressionParserRuleCall_0; }
		
		//( ','
		//| {SysML::OperatorExpression.operand += current} operator = ','
		//  operand += SequenceExpression
		//)?
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//','
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }
		
		//{SysML::OperatorExpression.operand += current} operator = ','
		//     operand += SequenceExpression
		public Group getGroup_1_1() { return cGroup_1_1; }
		
		//{SysML::OperatorExpression.operand += current}
		public Action getOperatorExpressionOperandAction_1_1_0() { return cOperatorExpressionOperandAction_1_1_0; }
		
		//operator = ','
		public Assignment getOperatorAssignment_1_1_1() { return cOperatorAssignment_1_1_1; }
		
		//','
		public Keyword getOperatorCommaKeyword_1_1_1_0() { return cOperatorCommaKeyword_1_1_1_0; }
		
		//operand += SequenceExpression
		public Assignment getOperandAssignment_1_1_2() { return cOperandAssignment_1_1_2; }
		
		//SequenceExpression
		public RuleCall getOperandSequenceExpressionParserRuleCall_1_1_2_0() { return cOperandSequenceExpressionParserRuleCall_1_1_2_0; }
	}
	public class FeatureReferenceExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.expressions.xtext.KerMLExpressions.FeatureReferenceExpression");
		private final Assignment cOwnedRelationshipAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cOwnedRelationshipFeatureReferenceMemberParserRuleCall_0 = (RuleCall)cOwnedRelationshipAssignment.eContents().get(0);
		
		//// Feature Reference Expressions
		//FeatureReferenceExpression returns SysML::FeatureReferenceExpression :
		//    ownedRelationship += FeatureReferenceMember
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//ownedRelationship += FeatureReferenceMember
		public Assignment getOwnedRelationshipAssignment() { return cOwnedRelationshipAssignment; }
		
		//FeatureReferenceMember
		public RuleCall getOwnedRelationshipFeatureReferenceMemberParserRuleCall_0() { return cOwnedRelationshipFeatureReferenceMemberParserRuleCall_0; }
	}
	public class FeatureReferenceMemberElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.expressions.xtext.KerMLExpressions.FeatureReferenceMember");
		private final Assignment cMemberElementAssignment = (Assignment)rule.eContents().get(1);
		private final CrossReference cMemberElementFeatureCrossReference_0 = (CrossReference)cMemberElementAssignment.eContents().get(0);
		private final RuleCall cMemberElementFeatureQualifiedNameParserRuleCall_0_1 = (RuleCall)cMemberElementFeatureCrossReference_0.eContents().get(1);
		
		//FeatureReferenceMember returns SysML::Membership :
		//    memberElement = [SysML::Feature | QualifiedName]
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//memberElement = [SysML::Feature | QualifiedName]
		public Assignment getMemberElementAssignment() { return cMemberElementAssignment; }
		
		//[SysML::Feature | QualifiedName]
		public CrossReference getMemberElementFeatureCrossReference_0() { return cMemberElementFeatureCrossReference_0; }
		
		//QualifiedName
		public RuleCall getMemberElementFeatureQualifiedNameParserRuleCall_0_1() { return cMemberElementFeatureQualifiedNameParserRuleCall_0_1; }
	}
	public class MetadataAccessExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.expressions.xtext.KerMLExpressions.MetadataAccessExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cReferencedElementAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cReferencedElementElementCrossReference_0_0 = (CrossReference)cReferencedElementAssignment_0.eContents().get(0);
		private final RuleCall cReferencedElementElementQualifiedNameParserRuleCall_0_0_1 = (RuleCall)cReferencedElementElementCrossReference_0_0.eContents().get(1);
		private final Keyword cFullStopKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cMetadataKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//// Metadata Access Expressions
		//MetadataAccessExpression returns SysML::MetadataAccessExpression :
		//    referencedElement = [SysML::Element | QualifiedName] '.' 'metadata'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//referencedElement = [SysML::Element | QualifiedName] '.' 'metadata'
		public Group getGroup() { return cGroup; }
		
		//referencedElement = [SysML::Element | QualifiedName]
		public Assignment getReferencedElementAssignment_0() { return cReferencedElementAssignment_0; }
		
		//[SysML::Element | QualifiedName]
		public CrossReference getReferencedElementElementCrossReference_0_0() { return cReferencedElementElementCrossReference_0_0; }
		
		//QualifiedName
		public RuleCall getReferencedElementElementQualifiedNameParserRuleCall_0_0_1() { return cReferencedElementElementQualifiedNameParserRuleCall_0_0_1; }
		
		//'.'
		public Keyword getFullStopKeyword_1() { return cFullStopKeyword_1; }
		
		//'metadata'
		public Keyword getMetadataKeyword_2() { return cMetadataKeyword_2; }
	}
	public class InvocationExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.expressions.xtext.KerMLExpressions.InvocationExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cOwnedRelationshipAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cOwnedRelationshipOwnedFeatureTypingParserRuleCall_0_0 = (RuleCall)cOwnedRelationshipAssignment_0.eContents().get(0);
		private final RuleCall cArgumentListParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//// Invocation Expressions
		//InvocationExpression returns SysML::InvocationExpression :
		//    ownedRelationship += OwnedFeatureTyping ArgumentList
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//ownedRelationship += OwnedFeatureTyping ArgumentList
		public Group getGroup() { return cGroup; }
		
		//ownedRelationship += OwnedFeatureTyping
		public Assignment getOwnedRelationshipAssignment_0() { return cOwnedRelationshipAssignment_0; }
		
		//OwnedFeatureTyping
		public RuleCall getOwnedRelationshipOwnedFeatureTypingParserRuleCall_0_0() { return cOwnedRelationshipOwnedFeatureTypingParserRuleCall_0_0; }
		
		//ArgumentList
		public RuleCall getArgumentListParserRuleCall_1() { return cArgumentListParserRuleCall_1; }
	}
	public class OwnedFeatureTypingElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.expressions.xtext.KerMLExpressions.OwnedFeatureTyping");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cTypeAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final CrossReference cTypeTypeCrossReference_0_0 = (CrossReference)cTypeAssignment_0.eContents().get(0);
		private final RuleCall cTypeTypeQualifiedNameParserRuleCall_0_0_1 = (RuleCall)cTypeTypeCrossReference_0_0.eContents().get(1);
		private final Assignment cOwnedRelatedElementAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cOwnedRelatedElementOwnedFeatureChainParserRuleCall_1_0 = (RuleCall)cOwnedRelatedElementAssignment_1.eContents().get(0);
		
		//OwnedFeatureTyping returns SysML::FeatureTyping :
		//      type = [SysML::Type | QualifiedName]
		//    | ownedRelatedElement += OwnedFeatureChain
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//  type = [SysML::Type | QualifiedName]
		//| ownedRelatedElement += OwnedFeatureChain
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//type = [SysML::Type | QualifiedName]
		public Assignment getTypeAssignment_0() { return cTypeAssignment_0; }
		
		//[SysML::Type | QualifiedName]
		public CrossReference getTypeTypeCrossReference_0_0() { return cTypeTypeCrossReference_0_0; }
		
		//QualifiedName
		public RuleCall getTypeTypeQualifiedNameParserRuleCall_0_0_1() { return cTypeTypeQualifiedNameParserRuleCall_0_0_1; }
		
		//ownedRelatedElement += OwnedFeatureChain
		public Assignment getOwnedRelatedElementAssignment_1() { return cOwnedRelatedElementAssignment_1; }
		
		//OwnedFeatureChain
		public RuleCall getOwnedRelatedElementOwnedFeatureChainParserRuleCall_1_0() { return cOwnedRelatedElementOwnedFeatureChainParserRuleCall_1_0; }
	}
	public class OwnedFeatureChainElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.expressions.xtext.KerMLExpressions.OwnedFeatureChain");
		private final RuleCall cFeatureChainParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//OwnedFeatureChain returns SysML::Feature :
		//    FeatureChain
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//FeatureChain
		public RuleCall getFeatureChainParserRuleCall() { return cFeatureChainParserRuleCall; }
	}
	public class FeatureChainElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.expressions.xtext.KerMLExpressions.FeatureChain");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cOwnedRelationshipAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cOwnedRelationshipOwnedFeatureChainingParserRuleCall_0_0 = (RuleCall)cOwnedRelationshipAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cOwnedRelationshipAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cOwnedRelationshipOwnedFeatureChainingParserRuleCall_1_1_0 = (RuleCall)cOwnedRelationshipAssignment_1_1.eContents().get(0);
		
		//// For use in KerML and SysML grammars
		//fragment FeatureChain returns SysML::Feature :
		//    ownedRelationship += OwnedFeatureChaining
		//    ( '.' ownedRelationship += OwnedFeatureChaining )+
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//ownedRelationship += OwnedFeatureChaining
		//( '.' ownedRelationship += OwnedFeatureChaining )+
		public Group getGroup() { return cGroup; }
		
		//ownedRelationship += OwnedFeatureChaining
		public Assignment getOwnedRelationshipAssignment_0() { return cOwnedRelationshipAssignment_0; }
		
		//OwnedFeatureChaining
		public RuleCall getOwnedRelationshipOwnedFeatureChainingParserRuleCall_0_0() { return cOwnedRelationshipOwnedFeatureChainingParserRuleCall_0_0; }
		
		//( '.' ownedRelationship += OwnedFeatureChaining )+
		public Group getGroup_1() { return cGroup_1; }
		
		//'.'
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }
		
		//ownedRelationship += OwnedFeatureChaining
		public Assignment getOwnedRelationshipAssignment_1_1() { return cOwnedRelationshipAssignment_1_1; }
		
		//OwnedFeatureChaining
		public RuleCall getOwnedRelationshipOwnedFeatureChainingParserRuleCall_1_1_0() { return cOwnedRelationshipOwnedFeatureChainingParserRuleCall_1_1_0; }
	}
	public class OwnedFeatureChainingElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.expressions.xtext.KerMLExpressions.OwnedFeatureChaining");
		private final Assignment cChainingFeatureAssignment = (Assignment)rule.eContents().get(1);
		private final CrossReference cChainingFeatureFeatureCrossReference_0 = (CrossReference)cChainingFeatureAssignment.eContents().get(0);
		private final RuleCall cChainingFeatureFeatureQualifiedNameParserRuleCall_0_1 = (RuleCall)cChainingFeatureFeatureCrossReference_0.eContents().get(1);
		
		//OwnedFeatureChaining returns SysML::FeatureChaining :
		//    chainingFeature = [SysML::Feature | QualifiedName]
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//chainingFeature = [SysML::Feature | QualifiedName]
		public Assignment getChainingFeatureAssignment() { return cChainingFeatureAssignment; }
		
		//[SysML::Feature | QualifiedName]
		public CrossReference getChainingFeatureFeatureCrossReference_0() { return cChainingFeatureFeatureCrossReference_0; }
		
		//QualifiedName
		public RuleCall getChainingFeatureFeatureQualifiedNameParserRuleCall_0_1() { return cChainingFeatureFeatureQualifiedNameParserRuleCall_0_1; }
	}
	public class ArgumentListElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.expressions.xtext.KerMLExpressions.ArgumentList");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final RuleCall cPositionalArgumentListParserRuleCall_1_0 = (RuleCall)cAlternatives_1.eContents().get(0);
		private final RuleCall cNamedArgumentListParserRuleCall_1_1 = (RuleCall)cAlternatives_1.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//fragment ArgumentList returns SysML::Expression :
		//    '(' ( PositionalArgumentList | NamedArgumentList )? ')'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'(' ( PositionalArgumentList | NamedArgumentList )? ')'
		public Group getGroup() { return cGroup; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }
		
		//( PositionalArgumentList | NamedArgumentList )?
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//PositionalArgumentList
		public RuleCall getPositionalArgumentListParserRuleCall_1_0() { return cPositionalArgumentListParserRuleCall_1_0; }
		
		//NamedArgumentList
		public RuleCall getNamedArgumentListParserRuleCall_1_1() { return cNamedArgumentListParserRuleCall_1_1; }
		
		//')'
		public Keyword getRightParenthesisKeyword_2() { return cRightParenthesisKeyword_2; }
	}
	public class PositionalArgumentListElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.expressions.xtext.KerMLExpressions.PositionalArgumentList");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cOwnedRelationshipAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cOwnedRelationshipArgumentMemberParserRuleCall_0_0 = (RuleCall)cOwnedRelationshipAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cOwnedRelationshipAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cOwnedRelationshipArgumentMemberParserRuleCall_1_1_0 = (RuleCall)cOwnedRelationshipAssignment_1_1.eContents().get(0);
		
		//fragment PositionalArgumentList returns SysML::Expression :
		//    ownedRelationship += ArgumentMember
		//    ( ',' ownedRelationship += ArgumentMember )*
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//ownedRelationship += ArgumentMember
		//( ',' ownedRelationship += ArgumentMember )*
		public Group getGroup() { return cGroup; }
		
		//ownedRelationship += ArgumentMember
		public Assignment getOwnedRelationshipAssignment_0() { return cOwnedRelationshipAssignment_0; }
		
		//ArgumentMember
		public RuleCall getOwnedRelationshipArgumentMemberParserRuleCall_0_0() { return cOwnedRelationshipArgumentMemberParserRuleCall_0_0; }
		
		//( ',' ownedRelationship += ArgumentMember )*
		public Group getGroup_1() { return cGroup_1; }
		
		//','
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }
		
		//ownedRelationship += ArgumentMember
		public Assignment getOwnedRelationshipAssignment_1_1() { return cOwnedRelationshipAssignment_1_1; }
		
		//ArgumentMember
		public RuleCall getOwnedRelationshipArgumentMemberParserRuleCall_1_1_0() { return cOwnedRelationshipArgumentMemberParserRuleCall_1_1_0; }
	}
	public class ArgumentMemberElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.expressions.xtext.KerMLExpressions.ArgumentMember");
		private final Assignment cOwnedRelatedElementAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cOwnedRelatedElementArgumentParserRuleCall_0 = (RuleCall)cOwnedRelatedElementAssignment.eContents().get(0);
		
		//ArgumentMember returns SysML::ParameterMembership :
		//    ownedRelatedElement += Argument
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//ownedRelatedElement += Argument
		public Assignment getOwnedRelatedElementAssignment() { return cOwnedRelatedElementAssignment; }
		
		//Argument
		public RuleCall getOwnedRelatedElementArgumentParserRuleCall_0() { return cOwnedRelatedElementArgumentParserRuleCall_0; }
	}
	public class ArgumentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.expressions.xtext.KerMLExpressions.Argument");
		private final Assignment cOwnedRelationshipAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cOwnedRelationshipArgumentValueParserRuleCall_0 = (RuleCall)cOwnedRelationshipAssignment.eContents().get(0);
		
		//Argument returns SysML::Feature :
		//    ownedRelationship += ArgumentValue
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//ownedRelationship += ArgumentValue
		public Assignment getOwnedRelationshipAssignment() { return cOwnedRelationshipAssignment; }
		
		//ArgumentValue
		public RuleCall getOwnedRelationshipArgumentValueParserRuleCall_0() { return cOwnedRelationshipArgumentValueParserRuleCall_0; }
	}
	public class NamedArgumentListElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.expressions.xtext.KerMLExpressions.NamedArgumentList");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cOwnedRelationshipAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cOwnedRelationshipNamedArgumentMemberParserRuleCall_0_0 = (RuleCall)cOwnedRelationshipAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cOwnedRelationshipAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cOwnedRelationshipNamedArgumentMemberParserRuleCall_1_1_0 = (RuleCall)cOwnedRelationshipAssignment_1_1.eContents().get(0);
		
		//fragment NamedArgumentList returns SysML::Expression :
		//    ownedRelationship += NamedArgumentMember
		//    ( ',' ownedRelationship += NamedArgumentMember )*
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//ownedRelationship += NamedArgumentMember
		//( ',' ownedRelationship += NamedArgumentMember )*
		public Group getGroup() { return cGroup; }
		
		//ownedRelationship += NamedArgumentMember
		public Assignment getOwnedRelationshipAssignment_0() { return cOwnedRelationshipAssignment_0; }
		
		//NamedArgumentMember
		public RuleCall getOwnedRelationshipNamedArgumentMemberParserRuleCall_0_0() { return cOwnedRelationshipNamedArgumentMemberParserRuleCall_0_0; }
		
		//( ',' ownedRelationship += NamedArgumentMember )*
		public Group getGroup_1() { return cGroup_1; }
		
		//','
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }
		
		//ownedRelationship += NamedArgumentMember
		public Assignment getOwnedRelationshipAssignment_1_1() { return cOwnedRelationshipAssignment_1_1; }
		
		//NamedArgumentMember
		public RuleCall getOwnedRelationshipNamedArgumentMemberParserRuleCall_1_1_0() { return cOwnedRelationshipNamedArgumentMemberParserRuleCall_1_1_0; }
	}
	public class NamedArgumentMemberElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.expressions.xtext.KerMLExpressions.NamedArgumentMember");
		private final Assignment cOwnedRelatedElementAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cOwnedRelatedElementNamedArgumentParserRuleCall_0 = (RuleCall)cOwnedRelatedElementAssignment.eContents().get(0);
		
		//NamedArgumentMember returns SysML::ParameterMembership :
		//    ownedRelatedElement += NamedArgument
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//ownedRelatedElement += NamedArgument
		public Assignment getOwnedRelatedElementAssignment() { return cOwnedRelatedElementAssignment; }
		
		//NamedArgument
		public RuleCall getOwnedRelatedElementNamedArgumentParserRuleCall_0() { return cOwnedRelatedElementNamedArgumentParserRuleCall_0; }
	}
	public class NamedArgumentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.expressions.xtext.KerMLExpressions.NamedArgument");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cOwnedRelationshipAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cOwnedRelationshipParameterRedefinitionParserRuleCall_0_0 = (RuleCall)cOwnedRelationshipAssignment_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cOwnedRelationshipAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cOwnedRelationshipArgumentValueParserRuleCall_2_0 = (RuleCall)cOwnedRelationshipAssignment_2.eContents().get(0);
		
		//NamedArgument returns SysML::Feature :
		//    ownedRelationship += ParameterRedefinition '=' ownedRelationship += ArgumentValue
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//ownedRelationship += ParameterRedefinition '=' ownedRelationship += ArgumentValue
		public Group getGroup() { return cGroup; }
		
		//ownedRelationship += ParameterRedefinition
		public Assignment getOwnedRelationshipAssignment_0() { return cOwnedRelationshipAssignment_0; }
		
		//ParameterRedefinition
		public RuleCall getOwnedRelationshipParameterRedefinitionParserRuleCall_0_0() { return cOwnedRelationshipParameterRedefinitionParserRuleCall_0_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }
		
		//ownedRelationship += ArgumentValue
		public Assignment getOwnedRelationshipAssignment_2() { return cOwnedRelationshipAssignment_2; }
		
		//ArgumentValue
		public RuleCall getOwnedRelationshipArgumentValueParserRuleCall_2_0() { return cOwnedRelationshipArgumentValueParserRuleCall_2_0; }
	}
	public class ParameterRedefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.expressions.xtext.KerMLExpressions.ParameterRedefinition");
		private final Assignment cRedefinedFeatureAssignment = (Assignment)rule.eContents().get(1);
		private final CrossReference cRedefinedFeatureFeatureCrossReference_0 = (CrossReference)cRedefinedFeatureAssignment.eContents().get(0);
		private final RuleCall cRedefinedFeatureFeatureQualifiedNameParserRuleCall_0_1 = (RuleCall)cRedefinedFeatureFeatureCrossReference_0.eContents().get(1);
		
		//ParameterRedefinition returns SysML::Redefinition:
		//    redefinedFeature = [SysML::Feature | QualifiedName]
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//redefinedFeature = [SysML::Feature | QualifiedName]
		public Assignment getRedefinedFeatureAssignment() { return cRedefinedFeatureAssignment; }
		
		//[SysML::Feature | QualifiedName]
		public CrossReference getRedefinedFeatureFeatureCrossReference_0() { return cRedefinedFeatureFeatureCrossReference_0; }
		
		//QualifiedName
		public RuleCall getRedefinedFeatureFeatureQualifiedNameParserRuleCall_0_1() { return cRedefinedFeatureFeatureQualifiedNameParserRuleCall_0_1; }
	}
	public class ArgumentValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.expressions.xtext.KerMLExpressions.ArgumentValue");
		private final Assignment cOwnedRelatedElementAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cOwnedRelatedElementOwnedExpressionParserRuleCall_0 = (RuleCall)cOwnedRelatedElementAssignment.eContents().get(0);
		
		//ArgumentValue returns SysML::FeatureValue :
		//    ownedRelatedElement += OwnedExpression
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//ownedRelatedElement += OwnedExpression
		public Assignment getOwnedRelatedElementAssignment() { return cOwnedRelatedElementAssignment; }
		
		//OwnedExpression
		public RuleCall getOwnedRelatedElementOwnedExpressionParserRuleCall_0() { return cOwnedRelatedElementOwnedExpressionParserRuleCall_0; }
	}
	public class NullExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.expressions.xtext.KerMLExpressions.NullExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cNullExpressionAction_0 = (Action)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Keyword cNullKeyword_1_0 = (Keyword)cAlternatives_1.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_1_1_0 = (Keyword)cGroup_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_1_1 = (Keyword)cGroup_1_1.eContents().get(1);
		
		//// Null Expressions
		//NullExpression returns SysML::NullExpression :
		//    {SysML::NullExpression} ( 'null' | '(' ')' )
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//{SysML::NullExpression} ( 'null' | '(' ')' )
		public Group getGroup() { return cGroup; }
		
		//{SysML::NullExpression}
		public Action getNullExpressionAction_0() { return cNullExpressionAction_0; }
		
		//( 'null' | '(' ')' )
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//'null'
		public Keyword getNullKeyword_1_0() { return cNullKeyword_1_0; }
		
		//'(' ')'
		public Group getGroup_1_1() { return cGroup_1_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1_1_0() { return cLeftParenthesisKeyword_1_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_1_1_1() { return cRightParenthesisKeyword_1_1_1; }
	}
	public class LiteralExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.expressions.xtext.KerMLExpressions.LiteralExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cLiteralBooleanParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cLiteralStringParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cLiteralIntegerParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cLiteralRealParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cLiteralInfinityParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		
		///* Literal Expressions */
		//LiteralExpression returns SysML::LiteralExpression :
		//      LiteralBoolean
		//    | LiteralString
		//    | LiteralInteger
		//    | LiteralReal
		//    | LiteralInfinity
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//  LiteralBoolean
		//| LiteralString
		//| LiteralInteger
		//| LiteralReal
		//| LiteralInfinity
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//LiteralBoolean
		public RuleCall getLiteralBooleanParserRuleCall_0() { return cLiteralBooleanParserRuleCall_0; }
		
		//LiteralString
		public RuleCall getLiteralStringParserRuleCall_1() { return cLiteralStringParserRuleCall_1; }
		
		//LiteralInteger
		public RuleCall getLiteralIntegerParserRuleCall_2() { return cLiteralIntegerParserRuleCall_2; }
		
		//LiteralReal
		public RuleCall getLiteralRealParserRuleCall_3() { return cLiteralRealParserRuleCall_3; }
		
		//LiteralInfinity
		public RuleCall getLiteralInfinityParserRuleCall_4() { return cLiteralInfinityParserRuleCall_4; }
	}
	public class LiteralBooleanElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.expressions.xtext.KerMLExpressions.LiteralBoolean");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueBooleanValueParserRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		//LiteralBoolean returns SysML::LiteralBoolean :
		//    value = BooleanValue
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//value = BooleanValue
		public Assignment getValueAssignment() { return cValueAssignment; }
		
		//BooleanValue
		public RuleCall getValueBooleanValueParserRuleCall_0() { return cValueBooleanValueParserRuleCall_0; }
	}
	public class BooleanValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.expressions.xtext.KerMLExpressions.BooleanValue");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cTrueKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cFalseKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//BooleanValue returns Ecore::EBoolean :
		//    'true' | 'false'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'true' | 'false'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'true'
		public Keyword getTrueKeyword_0() { return cTrueKeyword_0; }
		
		//'false'
		public Keyword getFalseKeyword_1() { return cFalseKeyword_1; }
	}
	public class LiteralStringElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.expressions.xtext.KerMLExpressions.LiteralString");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueSTRING_VALUETerminalRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		//LiteralString returns SysML::LiteralString :
		//    value = STRING_VALUE
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//value = STRING_VALUE
		public Assignment getValueAssignment() { return cValueAssignment; }
		
		//STRING_VALUE
		public RuleCall getValueSTRING_VALUETerminalRuleCall_0() { return cValueSTRING_VALUETerminalRuleCall_0; }
	}
	public class LiteralIntegerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.expressions.xtext.KerMLExpressions.LiteralInteger");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueDECIMAL_VALUETerminalRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		//LiteralInteger returns SysML::LiteralInteger:
		//    value = DECIMAL_VALUE
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//value = DECIMAL_VALUE
		public Assignment getValueAssignment() { return cValueAssignment; }
		
		//DECIMAL_VALUE
		public RuleCall getValueDECIMAL_VALUETerminalRuleCall_0() { return cValueDECIMAL_VALUETerminalRuleCall_0; }
	}
	public class LiteralRealElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.expressions.xtext.KerMLExpressions.LiteralReal");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueRealValueParserRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		//LiteralReal returns SysML::LiteralRational:
		//    value = RealValue
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//value = RealValue
		public Assignment getValueAssignment() { return cValueAssignment; }
		
		//RealValue
		public RuleCall getValueRealValueParserRuleCall_0() { return cValueRealValueParserRuleCall_0; }
	}
	public class RealValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.expressions.xtext.KerMLExpressions.RealValue");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final RuleCall cDECIMAL_VALUETerminalRuleCall_0_0 = (RuleCall)cGroup_0.eContents().get(0);
		private final Keyword cFullStopKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Alternatives cAlternatives_0_2 = (Alternatives)cGroup_0.eContents().get(2);
		private final RuleCall cDECIMAL_VALUETerminalRuleCall_0_2_0 = (RuleCall)cAlternatives_0_2.eContents().get(0);
		private final RuleCall cEXP_VALUETerminalRuleCall_0_2_1 = (RuleCall)cAlternatives_0_2.eContents().get(1);
		private final RuleCall cEXP_VALUETerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//RealValue returns Ecore::EDouble:
		//    DECIMAL_VALUE? '.' ( DECIMAL_VALUE | EXP_VALUE ) | EXP_VALUE
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//DECIMAL_VALUE? '.' ( DECIMAL_VALUE | EXP_VALUE ) | EXP_VALUE
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//DECIMAL_VALUE? '.' ( DECIMAL_VALUE | EXP_VALUE )
		public Group getGroup_0() { return cGroup_0; }
		
		//DECIMAL_VALUE?
		public RuleCall getDECIMAL_VALUETerminalRuleCall_0_0() { return cDECIMAL_VALUETerminalRuleCall_0_0; }
		
		//'.'
		public Keyword getFullStopKeyword_0_1() { return cFullStopKeyword_0_1; }
		
		//( DECIMAL_VALUE | EXP_VALUE )
		public Alternatives getAlternatives_0_2() { return cAlternatives_0_2; }
		
		//DECIMAL_VALUE
		public RuleCall getDECIMAL_VALUETerminalRuleCall_0_2_0() { return cDECIMAL_VALUETerminalRuleCall_0_2_0; }
		
		//EXP_VALUE
		public RuleCall getEXP_VALUETerminalRuleCall_0_2_1() { return cEXP_VALUETerminalRuleCall_0_2_1; }
		
		//EXP_VALUE
		public RuleCall getEXP_VALUETerminalRuleCall_1() { return cEXP_VALUETerminalRuleCall_1; }
	}
	public class LiteralInfinityElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.expressions.xtext.KerMLExpressions.LiteralInfinity");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cLiteralInfinityAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cAsteriskKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//LiteralInfinity returns SysML::LiteralInfinity :
		//    {SysML::LiteralInfinity} '*'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//{SysML::LiteralInfinity} '*'
		public Group getGroup() { return cGroup; }
		
		//{SysML::LiteralInfinity}
		public Action getLiteralInfinityAction_0() { return cLiteralInfinityAction_0; }
		
		//'*'
		public Keyword getAsteriskKeyword_1() { return cAsteriskKeyword_1; }
	}
	public class NameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.expressions.xtext.KerMLExpressions.Name");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cUNRESTRICTED_NAMETerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		///* NAMES */
		//Name:
		//    ID | UNRESTRICTED_NAME
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//ID | UNRESTRICTED_NAME
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }
		
		//UNRESTRICTED_NAME
		public RuleCall getUNRESTRICTED_NAMETerminalRuleCall_1() { return cUNRESTRICTED_NAMETerminalRuleCall_1; }
	}
	public class QualificationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.expressions.xtext.KerMLExpressions.Qualification");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cNameParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cColonColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//Qualification :
		//    ( Name '::' )+
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//( Name '::' )+
		public Group getGroup() { return cGroup; }
		
		//Name
		public RuleCall getNameParserRuleCall_0() { return cNameParserRuleCall_0; }
		
		//'::'
		public Keyword getColonColonKeyword_1() { return cColonColonKeyword_1; }
	}
	public class QualifiedNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.expressions.xtext.KerMLExpressions.QualifiedName");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cQualificationParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final RuleCall cNameParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//QualifiedName:
		//    Qualification? Name
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//Qualification? Name
		public Group getGroup() { return cGroup; }
		
		//Qualification?
		public RuleCall getQualificationParserRuleCall_0() { return cQualificationParserRuleCall_0; }
		
		//Name
		public RuleCall getNameParserRuleCall_1() { return cNameParserRuleCall_1; }
	}
	
	
	private final OwnedExpressionMemberElements pOwnedExpressionMember;
	private final OwnedExpressionElements pOwnedExpression;
	private final OwnedExpressionReferenceElements pOwnedExpressionReference;
	private final ConditionalExpressionElements pConditionalExpression;
	private final ConditionalOperatorElements pConditionalOperator;
	private final NullCoalescingExpressionElements pNullCoalescingExpression;
	private final NullCoalescingOperatorElements pNullCoalescingOperator;
	private final ImpliesExpressionReferenceElements pImpliesExpressionReference;
	private final ImpliesExpressionMemberElements pImpliesExpressionMember;
	private final ImpliesExpressionElements pImpliesExpression;
	private final ImpliesOperatorElements pImpliesOperator;
	private final OrExpressionReferenceElements pOrExpressionReference;
	private final OrExpressionMemberElements pOrExpressionMember;
	private final OrExpressionElements pOrExpression;
	private final OrOperatorElements pOrOperator;
	private final ConditionalOrOperatorElements pConditionalOrOperator;
	private final XorExpressionReferenceElements pXorExpressionReference;
	private final XorExpressionMemberElements pXorExpressionMember;
	private final XorExpressionElements pXorExpression;
	private final XorOperatorElements pXorOperator;
	private final AndExpressionElements pAndExpression;
	private final AndOperatorElements pAndOperator;
	private final ConditionalAndOperatorElements pConditionalAndOperator;
	private final EqualityExpressionReferenceElements pEqualityExpressionReference;
	private final EqualityExpressionMemberElements pEqualityExpressionMember;
	private final EqualityExpressionElements pEqualityExpression;
	private final EqualityOperatorElements pEqualityOperator;
	private final ClassificationExpressionElements pClassificationExpression;
	private final ClassificationTestOperatorElements pClassificationTestOperator;
	private final MetaClassificationTestOperatorElements pMetaClassificationTestOperator;
	private final CastOperatorElements pCastOperator;
	private final MetaCastOperatorElements pMetaCastOperator;
	private final MetadataReferenceElements pMetadataReference;
	private final TypeReferenceMemberElements pTypeReferenceMember;
	private final TypeResultMemberElements pTypeResultMember;
	private final TypeReferenceElements pTypeReference;
	private final ReferenceTypingElements pReferenceTyping;
	private final SelfReferenceExpressionElements pSelfReferenceExpression;
	private final SelfReferenceMemberElements pSelfReferenceMember;
	private final EmptyFeatureElements pEmptyFeature;
	private final RelationalExpressionElements pRelationalExpression;
	private final RelationalOperatorElements pRelationalOperator;
	private final RangeExpressionElements pRangeExpression;
	private final AdditiveExpressionElements pAdditiveExpression;
	private final AdditiveOperatorElements pAdditiveOperator;
	private final MultiplicativeExpressionElements pMultiplicativeExpression;
	private final MultiplicativeOperatorElements pMultiplicativeOperator;
	private final ExponentiationExpressionElements pExponentiationExpression;
	private final ExponentiationOperatorElements pExponentiationOperator;
	private final UnaryExpressionElements pUnaryExpression;
	private final UnaryOperatorElements pUnaryOperator;
	private final ExtentExpressionElements pExtentExpression;
	private final PrimaryExpressionElements pPrimaryExpression;
	private final FunctionReferenceExpressionElements pFunctionReferenceExpression;
	private final FunctionReferenceMemberElements pFunctionReferenceMember;
	private final FunctionReferenceElements pFunctionReference;
	private final FeatureChainMemberElements pFeatureChainMember;
	private final BaseExpressionElements pBaseExpression;
	private final BodyExpressionElements pBodyExpression;
	private final ExpressionBodyMemberElements pExpressionBodyMember;
	private final ExpressionBodyElements pExpressionBody;
	private final ResultExpressionMemberElements pResultExpressionMember;
	private final BodyParameterMemberElements pBodyParameterMember;
	private final BodyParameterElements pBodyParameter;
	private final SequenceExpressionElements pSequenceExpression;
	private final FeatureReferenceExpressionElements pFeatureReferenceExpression;
	private final FeatureReferenceMemberElements pFeatureReferenceMember;
	private final MetadataAccessExpressionElements pMetadataAccessExpression;
	private final InvocationExpressionElements pInvocationExpression;
	private final OwnedFeatureTypingElements pOwnedFeatureTyping;
	private final OwnedFeatureChainElements pOwnedFeatureChain;
	private final FeatureChainElements pFeatureChain;
	private final OwnedFeatureChainingElements pOwnedFeatureChaining;
	private final ArgumentListElements pArgumentList;
	private final PositionalArgumentListElements pPositionalArgumentList;
	private final ArgumentMemberElements pArgumentMember;
	private final ArgumentElements pArgument;
	private final NamedArgumentListElements pNamedArgumentList;
	private final NamedArgumentMemberElements pNamedArgumentMember;
	private final NamedArgumentElements pNamedArgument;
	private final ParameterRedefinitionElements pParameterRedefinition;
	private final ArgumentValueElements pArgumentValue;
	private final NullExpressionElements pNullExpression;
	private final LiteralExpressionElements pLiteralExpression;
	private final LiteralBooleanElements pLiteralBoolean;
	private final BooleanValueElements pBooleanValue;
	private final LiteralStringElements pLiteralString;
	private final LiteralIntegerElements pLiteralInteger;
	private final LiteralRealElements pLiteralReal;
	private final RealValueElements pRealValue;
	private final LiteralInfinityElements pLiteralInfinity;
	private final NameElements pName;
	private final QualificationElements pQualification;
	private final QualifiedNameElements pQualifiedName;
	private final TerminalRule tDECIMAL_VALUE;
	private final TerminalRule tEXP_VALUE;
	private final TerminalRule tID;
	private final TerminalRule tUNRESTRICTED_NAME;
	private final TerminalRule tSTRING_VALUE;
	private final TerminalRule tREGULAR_COMMENT;
	private final TerminalRule tML_NOTE;
	private final TerminalRule tSL_NOTE;
	private final TerminalRule tWS;
	
	private final Grammar grammar;

	@Inject
	public KerMLExpressionsGrammarAccess(GrammarProvider grammarProvider) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.pOwnedExpressionMember = new OwnedExpressionMemberElements();
		this.pOwnedExpression = new OwnedExpressionElements();
		this.pOwnedExpressionReference = new OwnedExpressionReferenceElements();
		this.pConditionalExpression = new ConditionalExpressionElements();
		this.pConditionalOperator = new ConditionalOperatorElements();
		this.pNullCoalescingExpression = new NullCoalescingExpressionElements();
		this.pNullCoalescingOperator = new NullCoalescingOperatorElements();
		this.pImpliesExpressionReference = new ImpliesExpressionReferenceElements();
		this.pImpliesExpressionMember = new ImpliesExpressionMemberElements();
		this.pImpliesExpression = new ImpliesExpressionElements();
		this.pImpliesOperator = new ImpliesOperatorElements();
		this.pOrExpressionReference = new OrExpressionReferenceElements();
		this.pOrExpressionMember = new OrExpressionMemberElements();
		this.pOrExpression = new OrExpressionElements();
		this.pOrOperator = new OrOperatorElements();
		this.pConditionalOrOperator = new ConditionalOrOperatorElements();
		this.pXorExpressionReference = new XorExpressionReferenceElements();
		this.pXorExpressionMember = new XorExpressionMemberElements();
		this.pXorExpression = new XorExpressionElements();
		this.pXorOperator = new XorOperatorElements();
		this.pAndExpression = new AndExpressionElements();
		this.pAndOperator = new AndOperatorElements();
		this.pConditionalAndOperator = new ConditionalAndOperatorElements();
		this.pEqualityExpressionReference = new EqualityExpressionReferenceElements();
		this.pEqualityExpressionMember = new EqualityExpressionMemberElements();
		this.pEqualityExpression = new EqualityExpressionElements();
		this.pEqualityOperator = new EqualityOperatorElements();
		this.pClassificationExpression = new ClassificationExpressionElements();
		this.pClassificationTestOperator = new ClassificationTestOperatorElements();
		this.pMetaClassificationTestOperator = new MetaClassificationTestOperatorElements();
		this.pCastOperator = new CastOperatorElements();
		this.pMetaCastOperator = new MetaCastOperatorElements();
		this.pMetadataReference = new MetadataReferenceElements();
		this.pTypeReferenceMember = new TypeReferenceMemberElements();
		this.pTypeResultMember = new TypeResultMemberElements();
		this.pTypeReference = new TypeReferenceElements();
		this.pReferenceTyping = new ReferenceTypingElements();
		this.pSelfReferenceExpression = new SelfReferenceExpressionElements();
		this.pSelfReferenceMember = new SelfReferenceMemberElements();
		this.pEmptyFeature = new EmptyFeatureElements();
		this.pRelationalExpression = new RelationalExpressionElements();
		this.pRelationalOperator = new RelationalOperatorElements();
		this.pRangeExpression = new RangeExpressionElements();
		this.pAdditiveExpression = new AdditiveExpressionElements();
		this.pAdditiveOperator = new AdditiveOperatorElements();
		this.pMultiplicativeExpression = new MultiplicativeExpressionElements();
		this.pMultiplicativeOperator = new MultiplicativeOperatorElements();
		this.pExponentiationExpression = new ExponentiationExpressionElements();
		this.pExponentiationOperator = new ExponentiationOperatorElements();
		this.pUnaryExpression = new UnaryExpressionElements();
		this.pUnaryOperator = new UnaryOperatorElements();
		this.pExtentExpression = new ExtentExpressionElements();
		this.pPrimaryExpression = new PrimaryExpressionElements();
		this.pFunctionReferenceExpression = new FunctionReferenceExpressionElements();
		this.pFunctionReferenceMember = new FunctionReferenceMemberElements();
		this.pFunctionReference = new FunctionReferenceElements();
		this.pFeatureChainMember = new FeatureChainMemberElements();
		this.pBaseExpression = new BaseExpressionElements();
		this.pBodyExpression = new BodyExpressionElements();
		this.pExpressionBodyMember = new ExpressionBodyMemberElements();
		this.pExpressionBody = new ExpressionBodyElements();
		this.pResultExpressionMember = new ResultExpressionMemberElements();
		this.pBodyParameterMember = new BodyParameterMemberElements();
		this.pBodyParameter = new BodyParameterElements();
		this.pSequenceExpression = new SequenceExpressionElements();
		this.pFeatureReferenceExpression = new FeatureReferenceExpressionElements();
		this.pFeatureReferenceMember = new FeatureReferenceMemberElements();
		this.pMetadataAccessExpression = new MetadataAccessExpressionElements();
		this.pInvocationExpression = new InvocationExpressionElements();
		this.pOwnedFeatureTyping = new OwnedFeatureTypingElements();
		this.pOwnedFeatureChain = new OwnedFeatureChainElements();
		this.pFeatureChain = new FeatureChainElements();
		this.pOwnedFeatureChaining = new OwnedFeatureChainingElements();
		this.pArgumentList = new ArgumentListElements();
		this.pPositionalArgumentList = new PositionalArgumentListElements();
		this.pArgumentMember = new ArgumentMemberElements();
		this.pArgument = new ArgumentElements();
		this.pNamedArgumentList = new NamedArgumentListElements();
		this.pNamedArgumentMember = new NamedArgumentMemberElements();
		this.pNamedArgument = new NamedArgumentElements();
		this.pParameterRedefinition = new ParameterRedefinitionElements();
		this.pArgumentValue = new ArgumentValueElements();
		this.pNullExpression = new NullExpressionElements();
		this.pLiteralExpression = new LiteralExpressionElements();
		this.pLiteralBoolean = new LiteralBooleanElements();
		this.pBooleanValue = new BooleanValueElements();
		this.pLiteralString = new LiteralStringElements();
		this.pLiteralInteger = new LiteralIntegerElements();
		this.pLiteralReal = new LiteralRealElements();
		this.pRealValue = new RealValueElements();
		this.pLiteralInfinity = new LiteralInfinityElements();
		this.pName = new NameElements();
		this.pQualification = new QualificationElements();
		this.pQualifiedName = new QualifiedNameElements();
		this.tDECIMAL_VALUE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.expressions.xtext.KerMLExpressions.DECIMAL_VALUE");
		this.tEXP_VALUE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.expressions.xtext.KerMLExpressions.EXP_VALUE");
		this.tID = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.expressions.xtext.KerMLExpressions.ID");
		this.tUNRESTRICTED_NAME = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.expressions.xtext.KerMLExpressions.UNRESTRICTED_NAME");
		this.tSTRING_VALUE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.expressions.xtext.KerMLExpressions.STRING_VALUE");
		this.tREGULAR_COMMENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.expressions.xtext.KerMLExpressions.REGULAR_COMMENT");
		this.tML_NOTE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.expressions.xtext.KerMLExpressions.ML_NOTE");
		this.tSL_NOTE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.expressions.xtext.KerMLExpressions.SL_NOTE");
		this.tWS = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.expressions.xtext.KerMLExpressions.WS");
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.omg.kerml.expressions.xtext.KerMLExpressions".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	

	
	///* EXPRESSIONS */
	///* Operator Expressions */
	//OwnedExpressionMember returns SysML::FeatureMembership :
	//    ownedRelatedElement += OwnedExpression
	//;
	public OwnedExpressionMemberElements getOwnedExpressionMemberAccess() {
		return pOwnedExpressionMember;
	}
	
	public ParserRule getOwnedExpressionMemberRule() {
		return getOwnedExpressionMemberAccess().getRule();
	}
	
	//OwnedExpression returns SysML::Expression :
	//     ConditionalExpression
	//;
	public OwnedExpressionElements getOwnedExpressionAccess() {
		return pOwnedExpression;
	}
	
	public ParserRule getOwnedExpressionRule() {
		return getOwnedExpressionAccess().getRule();
	}
	
	//// Conditional Test Expressions
	//OwnedExpressionReference returns SysML::FeatureReferenceExpression :
	//    ownedRelationship += OwnedExpressionMember
	//;
	public OwnedExpressionReferenceElements getOwnedExpressionReferenceAccess() {
		return pOwnedExpressionReference;
	}
	
	public ParserRule getOwnedExpressionReferenceRule() {
		return getOwnedExpressionReferenceAccess().getRule();
	}
	
	//ConditionalExpression returns SysML::Expression :
	//      NullCoalescingExpression
	//    | {SysML::OperatorExpression} operator = ConditionalOperator operand += NullCoalescingExpression
	//          '?' operand += OwnedExpressionReference 'else' operand += OwnedExpressionReference
	//;
	public ConditionalExpressionElements getConditionalExpressionAccess() {
		return pConditionalExpression;
	}
	
	public ParserRule getConditionalExpressionRule() {
		return getConditionalExpressionAccess().getRule();
	}
	
	//ConditionalOperator :
	//    'if'
	//;
	public ConditionalOperatorElements getConditionalOperatorAccess() {
		return pConditionalOperator;
	}
	
	public ParserRule getConditionalOperatorRule() {
		return getConditionalOperatorAccess().getRule();
	}
	
	//// Null Coalescing Expressions
	//NullCoalescingExpression returns SysML::Expression :
	//    ImpliesExpression ( {SysML::OperatorExpression.operand += current}
	//        operator = NullCoalescingOperator operand += ImpliesExpressionReference )*
	//;
	public NullCoalescingExpressionElements getNullCoalescingExpressionAccess() {
		return pNullCoalescingExpression;
	}
	
	public ParserRule getNullCoalescingExpressionRule() {
		return getNullCoalescingExpressionAccess().getRule();
	}
	
	//NullCoalescingOperator :
	//    '??'
	//;
	public NullCoalescingOperatorElements getNullCoalescingOperatorAccess() {
		return pNullCoalescingOperator;
	}
	
	public ParserRule getNullCoalescingOperatorRule() {
		return getNullCoalescingOperatorAccess().getRule();
	}
	
	//// Logical Expressions
	//ImpliesExpressionReference returns SysML::FeatureReferenceExpression :
	//    ownedRelationship += ImpliesExpressionMember
	//;
	public ImpliesExpressionReferenceElements getImpliesExpressionReferenceAccess() {
		return pImpliesExpressionReference;
	}
	
	public ParserRule getImpliesExpressionReferenceRule() {
		return getImpliesExpressionReferenceAccess().getRule();
	}
	
	//ImpliesExpressionMember returns SysML::FeatureMembership :
	//    ownedRelatedElement += ImpliesExpression
	//;
	public ImpliesExpressionMemberElements getImpliesExpressionMemberAccess() {
		return pImpliesExpressionMember;
	}
	
	public ParserRule getImpliesExpressionMemberRule() {
		return getImpliesExpressionMemberAccess().getRule();
	}
	
	//ImpliesExpression returns SysML::Expression :
	//    OrExpression ( {SysML::OperatorExpression.operand += current}
	//        operator = ImpliesOperator operand += OrExpressionReference )*
	//;
	public ImpliesExpressionElements getImpliesExpressionAccess() {
		return pImpliesExpression;
	}
	
	public ParserRule getImpliesExpressionRule() {
		return getImpliesExpressionAccess().getRule();
	}
	
	//ImpliesOperator :
	//    'implies'
	//;
	public ImpliesOperatorElements getImpliesOperatorAccess() {
		return pImpliesOperator;
	}
	
	public ParserRule getImpliesOperatorRule() {
		return getImpliesOperatorAccess().getRule();
	}
	
	//OrExpressionReference returns SysML::FeatureReferenceExpression :
	//    ownedRelationship += OrExpressionMember
	//;
	public OrExpressionReferenceElements getOrExpressionReferenceAccess() {
		return pOrExpressionReference;
	}
	
	public ParserRule getOrExpressionReferenceRule() {
		return getOrExpressionReferenceAccess().getRule();
	}
	
	//OrExpressionMember returns SysML::FeatureMembership :
	//    ownedRelatedElement += OrExpression
	//;
	public OrExpressionMemberElements getOrExpressionMemberAccess() {
		return pOrExpressionMember;
	}
	
	public ParserRule getOrExpressionMemberRule() {
		return getOrExpressionMemberAccess().getRule();
	}
	
	//OrExpression returns SysML::Expression :
	//    XorExpression ( {SysML::OperatorExpression.operand += current}
	//        ( operator = OrOperator operand += XorExpression
	//        | operator = ConditionalOrOperator operand += XorExpressionReference ) )*
	//;
	public OrExpressionElements getOrExpressionAccess() {
		return pOrExpression;
	}
	
	public ParserRule getOrExpressionRule() {
		return getOrExpressionAccess().getRule();
	}
	
	//OrOperator :
	//    '|'
	//;
	public OrOperatorElements getOrOperatorAccess() {
		return pOrOperator;
	}
	
	public ParserRule getOrOperatorRule() {
		return getOrOperatorAccess().getRule();
	}
	
	//ConditionalOrOperator :
	//    'or'
	//;
	public ConditionalOrOperatorElements getConditionalOrOperatorAccess() {
		return pConditionalOrOperator;
	}
	
	public ParserRule getConditionalOrOperatorRule() {
		return getConditionalOrOperatorAccess().getRule();
	}
	
	//XorExpressionReference returns SysML::FeatureReferenceExpression :
	//    ownedRelationship += XorExpressionMember
	//;
	public XorExpressionReferenceElements getXorExpressionReferenceAccess() {
		return pXorExpressionReference;
	}
	
	public ParserRule getXorExpressionReferenceRule() {
		return getXorExpressionReferenceAccess().getRule();
	}
	
	//XorExpressionMember returns SysML::FeatureMembership :
	//    ownedRelatedElement += XorExpression
	//;
	public XorExpressionMemberElements getXorExpressionMemberAccess() {
		return pXorExpressionMember;
	}
	
	public ParserRule getXorExpressionMemberRule() {
		return getXorExpressionMemberAccess().getRule();
	}
	
	//XorExpression returns SysML::Expression :
	//    AndExpression ( {SysML::OperatorExpression.operand += current}
	//        operator = XorOperator operand += AndExpression )*
	//;
	public XorExpressionElements getXorExpressionAccess() {
		return pXorExpression;
	}
	
	public ParserRule getXorExpressionRule() {
		return getXorExpressionAccess().getRule();
	}
	
	//XorOperator :
	//    'xor'
	//;
	public XorOperatorElements getXorOperatorAccess() {
		return pXorOperator;
	}
	
	public ParserRule getXorOperatorRule() {
		return getXorOperatorAccess().getRule();
	}
	
	//AndExpression returns SysML::Expression :
	//    EqualityExpression ( {SysML::OperatorExpression.operand += current}
	//        ( operator = AndOperator operand += EqualityExpression
	//        | operator = ConditionalAndOperator operand += EqualityExpressionReference ) )*
	//;
	public AndExpressionElements getAndExpressionAccess() {
		return pAndExpression;
	}
	
	public ParserRule getAndExpressionRule() {
		return getAndExpressionAccess().getRule();
	}
	
	//AndOperator :
	//    '&'
	//;
	public AndOperatorElements getAndOperatorAccess() {
		return pAndOperator;
	}
	
	public ParserRule getAndOperatorRule() {
		return getAndOperatorAccess().getRule();
	}
	
	//ConditionalAndOperator :
	//    'and'
	//;
	public ConditionalAndOperatorElements getConditionalAndOperatorAccess() {
		return pConditionalAndOperator;
	}
	
	public ParserRule getConditionalAndOperatorRule() {
		return getConditionalAndOperatorAccess().getRule();
	}
	
	//// Equality Expressions
	//EqualityExpressionReference returns SysML::FeatureReferenceExpression :
	//    ownedRelationship += EqualityExpressionMember
	//;
	public EqualityExpressionReferenceElements getEqualityExpressionReferenceAccess() {
		return pEqualityExpressionReference;
	}
	
	public ParserRule getEqualityExpressionReferenceRule() {
		return getEqualityExpressionReferenceAccess().getRule();
	}
	
	//EqualityExpressionMember returns SysML::FeatureMembership :
	//    ownedRelatedElement += EqualityExpression
	//;
	public EqualityExpressionMemberElements getEqualityExpressionMemberAccess() {
		return pEqualityExpressionMember;
	}
	
	public ParserRule getEqualityExpressionMemberRule() {
		return getEqualityExpressionMemberAccess().getRule();
	}
	
	//EqualityExpression returns SysML::Expression :
	//    ClassificationExpression ( {SysML::OperatorExpression.operand += current}
	//        operator = EqualityOperator operand += ClassificationExpression )*
	//;
	public EqualityExpressionElements getEqualityExpressionAccess() {
		return pEqualityExpression;
	}
	
	public ParserRule getEqualityExpressionRule() {
		return getEqualityExpressionAccess().getRule();
	}
	
	//EqualityOperator :
	//    '==' | '!=' | '===' | '!=='
	//;
	public EqualityOperatorElements getEqualityOperatorAccess() {
		return pEqualityOperator;
	}
	
	public ParserRule getEqualityOperatorRule() {
		return getEqualityOperatorAccess().getRule();
	}
	
	//// Classification Expressions
	//ClassificationExpression returns SysML::Expression :
	//      RelationalExpression
	//      ( {SysML::OperatorExpression.operand += current}
	//          operator = ClassificationTestOperator ownedRelationship += TypeReferenceMember
	//      | {SysML::OperatorExpression.operand += current}
	//        operator = CastOperator ownedRelationship += TypeResultMember
	//      )?
	//    | {SysML::OperatorExpression} operand += SelfReferenceExpression
	//      operator = ClassificationTestOperator ownedRelationship += TypeReferenceMember
	//    | {SysML::OperatorExpression} operand += MetadataReference
	//      operator = MetaClassificationTestOperator ownedRelationship += TypeReferenceMember
	//    | {SysML::OperatorExpression} operand += SelfReferenceExpression
	//      operator = CastOperator ownedRelationship += TypeResultMember
	//    | {SysML::OperatorExpression} operand += MetadataReference
	//      operator = MetaCastOperator ownedRelationship += TypeResultMember
	//;
	public ClassificationExpressionElements getClassificationExpressionAccess() {
		return pClassificationExpression;
	}
	
	public ParserRule getClassificationExpressionRule() {
		return getClassificationExpressionAccess().getRule();
	}
	
	//ClassificationTestOperator :
	//    'hastype' | 'istype' | '@'
	//;
	public ClassificationTestOperatorElements getClassificationTestOperatorAccess() {
		return pClassificationTestOperator;
	}
	
	public ParserRule getClassificationTestOperatorRule() {
		return getClassificationTestOperatorAccess().getRule();
	}
	
	//MetaClassificationTestOperator :
	//    '@@'
	//;
	public MetaClassificationTestOperatorElements getMetaClassificationTestOperatorAccess() {
		return pMetaClassificationTestOperator;
	}
	
	public ParserRule getMetaClassificationTestOperatorRule() {
		return getMetaClassificationTestOperatorAccess().getRule();
	}
	
	//CastOperator :
	//    'as'
	//;
	public CastOperatorElements getCastOperatorAccess() {
		return pCastOperator;
	}
	
	public ParserRule getCastOperatorRule() {
		return getCastOperatorAccess().getRule();
	}
	
	//MetaCastOperator :
	//    'meta'
	//;
	public MetaCastOperatorElements getMetaCastOperatorAccess() {
		return pMetaCastOperator;
	}
	
	public ParserRule getMetaCastOperatorRule() {
		return getMetaCastOperatorAccess().getRule();
	}
	
	//MetadataReference returns SysML::MetadataAccessExpression :
	//    referencedElement = [SysML::Element | QualifiedName]
	//;
	public MetadataReferenceElements getMetadataReferenceAccess() {
		return pMetadataReference;
	}
	
	public ParserRule getMetadataReferenceRule() {
		return getMetadataReferenceAccess().getRule();
	}
	
	//TypeReferenceMember returns SysML::FeatureMembership :
	//    ownedRelatedElement += TypeReference
	//;
	public TypeReferenceMemberElements getTypeReferenceMemberAccess() {
		return pTypeReferenceMember;
	}
	
	public ParserRule getTypeReferenceMemberRule() {
		return getTypeReferenceMemberAccess().getRule();
	}
	
	//TypeResultMember returns SysML::ReturnParameterMembership :
	//    ownedRelatedElement += TypeReference
	//;
	public TypeResultMemberElements getTypeResultMemberAccess() {
		return pTypeResultMember;
	}
	
	public ParserRule getTypeResultMemberRule() {
		return getTypeResultMemberAccess().getRule();
	}
	
	//TypeReference returns SysML::Feature :
	//    ownedRelationship += ReferenceTyping
	//;
	public TypeReferenceElements getTypeReferenceAccess() {
		return pTypeReference;
	}
	
	public ParserRule getTypeReferenceRule() {
		return getTypeReferenceAccess().getRule();
	}
	
	//ReferenceTyping returns SysML::FeatureTyping :
	//      type = [SysML::Type | QualifiedName]
	//;
	public ReferenceTypingElements getReferenceTypingAccess() {
		return pReferenceTyping;
	}
	
	public ParserRule getReferenceTypingRule() {
		return getReferenceTypingAccess().getRule();
	}
	
	//SelfReferenceExpression returns SysML::FeatureReferenceExpression :
	//    ownedRelationship += SelfReferenceMember
	//;
	public SelfReferenceExpressionElements getSelfReferenceExpressionAccess() {
		return pSelfReferenceExpression;
	}
	
	public ParserRule getSelfReferenceExpressionRule() {
		return getSelfReferenceExpressionAccess().getRule();
	}
	
	//SelfReferenceMember returns SysML::ReturnParameterMembership :
	//    ownedRelatedElement += EmptyFeature
	//;
	public SelfReferenceMemberElements getSelfReferenceMemberAccess() {
		return pSelfReferenceMember;
	}
	
	public ParserRule getSelfReferenceMemberRule() {
		return getSelfReferenceMemberAccess().getRule();
	}
	
	//EmptyFeature returns SysML::Feature :
	//    {SysML::Feature}
	//;
	public EmptyFeatureElements getEmptyFeatureAccess() {
		return pEmptyFeature;
	}
	
	public ParserRule getEmptyFeatureRule() {
		return getEmptyFeatureAccess().getRule();
	}
	
	//// Relational Expressions
	//RelationalExpression returns SysML::Expression :
	//    RangeExpression ( {SysML::OperatorExpression.operand += current}
	//        operator = RelationalOperator operand += RangeExpression )*
	//;
	public RelationalExpressionElements getRelationalExpressionAccess() {
		return pRelationalExpression;
	}
	
	public ParserRule getRelationalExpressionRule() {
		return getRelationalExpressionAccess().getRule();
	}
	
	//RelationalOperator :
	//    '<' | '>' | '<=' | '>='
	//;
	public RelationalOperatorElements getRelationalOperatorAccess() {
		return pRelationalOperator;
	}
	
	public ParserRule getRelationalOperatorRule() {
		return getRelationalOperatorAccess().getRule();
	}
	
	//// Range Expressions
	//RangeExpression returns SysML::Expression :
	//    AdditiveExpression ( {SysML::OperatorExpression.operand += current}
	//        operator = '..' operand += AdditiveExpression )?
	//;
	public RangeExpressionElements getRangeExpressionAccess() {
		return pRangeExpression;
	}
	
	public ParserRule getRangeExpressionRule() {
		return getRangeExpressionAccess().getRule();
	}
	
	//// Arithmetic Expressions
	//AdditiveExpression returns SysML::Expression :
	//    MultiplicativeExpression ( {SysML::OperatorExpression.operand += current}
	//        operator = AdditiveOperator operand += MultiplicativeExpression )*
	//;
	public AdditiveExpressionElements getAdditiveExpressionAccess() {
		return pAdditiveExpression;
	}
	
	public ParserRule getAdditiveExpressionRule() {
		return getAdditiveExpressionAccess().getRule();
	}
	
	//AdditiveOperator :
	//    '+' | '-'
	//;
	public AdditiveOperatorElements getAdditiveOperatorAccess() {
		return pAdditiveOperator;
	}
	
	public ParserRule getAdditiveOperatorRule() {
		return getAdditiveOperatorAccess().getRule();
	}
	
	//MultiplicativeExpression returns SysML::Expression :
	//    ExponentiationExpression ( {SysML::OperatorExpression.operand += current}
	//        operator = MultiplicativeOperator operand += ExponentiationExpression )*
	//;
	public MultiplicativeExpressionElements getMultiplicativeExpressionAccess() {
		return pMultiplicativeExpression;
	}
	
	public ParserRule getMultiplicativeExpressionRule() {
		return getMultiplicativeExpressionAccess().getRule();
	}
	
	//MultiplicativeOperator :
	//    '*' | '/' | '%'
	//;
	public MultiplicativeOperatorElements getMultiplicativeOperatorAccess() {
		return pMultiplicativeOperator;
	}
	
	public ParserRule getMultiplicativeOperatorRule() {
		return getMultiplicativeOperatorAccess().getRule();
	}
	
	//ExponentiationExpression returns SysML::Expression :
	//    UnaryExpression ( {SysML::OperatorExpression.operand += current}
	//        operator = ExponentiationOperator operand += ExponentiationExpression )?
	//;
	public ExponentiationExpressionElements getExponentiationExpressionAccess() {
		return pExponentiationExpression;
	}
	
	public ParserRule getExponentiationExpressionRule() {
		return getExponentiationExpressionAccess().getRule();
	}
	
	//ExponentiationOperator :
	//    '**' | '^'
	//;
	public ExponentiationOperatorElements getExponentiationOperatorAccess() {
		return pExponentiationOperator;
	}
	
	public ParserRule getExponentiationOperatorRule() {
		return getExponentiationOperatorAccess().getRule();
	}
	
	//// Unary Expressions
	//UnaryExpression returns SysML::Expression:
	//      {SysML::OperatorExpression} operator = UnaryOperator operand += ExtentExpression
	//    | ExtentExpression
	//;
	public UnaryExpressionElements getUnaryExpressionAccess() {
		return pUnaryExpression;
	}
	
	public ParserRule getUnaryExpressionRule() {
		return getUnaryExpressionAccess().getRule();
	}
	
	//UnaryOperator :
	//    '+' | '-' | '~' | 'not'
	//;
	public UnaryOperatorElements getUnaryOperatorAccess() {
		return pUnaryOperator;
	}
	
	public ParserRule getUnaryOperatorRule() {
		return getUnaryOperatorAccess().getRule();
	}
	
	//// Extent Expressions
	//ExtentExpression returns SysML::Expression :
	//      {SysML::OperatorExpression} operator = 'all' ownedRelationship += TypeResultMember
	//    | PrimaryExpression
	//;
	public ExtentExpressionElements getExtentExpressionAccess() {
		return pExtentExpression;
	}
	
	public ParserRule getExtentExpressionRule() {
		return getExtentExpressionAccess().getRule();
	}
	
	///* Primary Expressions */
	//PrimaryExpression returns SysML::Expression :
	//    BaseExpression
	//    ( {SysML::FeatureChainExpression.operand += current} '.'
	//      ownedRelationship += FeatureChainMember
	//    )?
	//    ( ( {SysML::OperatorExpression.operand += current}
	//        operator = '#' '(' operand += SequenceExpression ')'
	//      | {SysML::OperatorExpression.operand += current}
	//        operator = '[' operand += SequenceExpression ']'
	//      | {SysML::InvocationExpression.operand += current} '->'
	//        ownedRelationship += ReferenceTyping
	//        ( operand += BodyExpression
	//        | operand += FunctionReferenceExpression
	//        | ArgumentList
	//        )
	//      | {SysML::CollectExpression.operand += current} '.'
	//        operand += BodyExpression
	//      | {SysML::SelectExpression.operand += current} '.?'
	//        operand += BodyExpression
	//      )
	//      ( {SysML::FeatureChainExpression.operand += current} '.'
	//          ownedRelationship += FeatureChainMember
	//      )?
	//    )*
	//;
	public PrimaryExpressionElements getPrimaryExpressionAccess() {
		return pPrimaryExpression;
	}
	
	public ParserRule getPrimaryExpressionRule() {
		return getPrimaryExpressionAccess().getRule();
	}
	
	//FunctionReferenceExpression returns SysML::FeatureReferenceExpression :
	//    ownedRelationship += FunctionReferenceMember
	//;
	public FunctionReferenceExpressionElements getFunctionReferenceExpressionAccess() {
		return pFunctionReferenceExpression;
	}
	
	public ParserRule getFunctionReferenceExpressionRule() {
		return getFunctionReferenceExpressionAccess().getRule();
	}
	
	//FunctionReferenceMember returns SysML::FeatureMembership :
	//    ownedRelatedElement += FunctionReference
	//;
	public FunctionReferenceMemberElements getFunctionReferenceMemberAccess() {
		return pFunctionReferenceMember;
	}
	
	public ParserRule getFunctionReferenceMemberRule() {
		return getFunctionReferenceMemberAccess().getRule();
	}
	
	//FunctionReference returns SysML::Expression :
	//    ownedRelationship += ReferenceTyping
	//;
	public FunctionReferenceElements getFunctionReferenceAccess() {
		return pFunctionReference;
	}
	
	public ParserRule getFunctionReferenceRule() {
		return getFunctionReferenceAccess().getRule();
	}
	
	//FeatureChainMember returns SysML::Membership :
	//      memberElement = [SysML::Feature | QualifiedName]
	//    | {SysML::OwningMembership} ownedRelatedElement += OwnedFeatureChain
	//;
	public FeatureChainMemberElements getFeatureChainMemberAccess() {
		return pFeatureChainMember;
	}
	
	public ParserRule getFeatureChainMemberRule() {
		return getFeatureChainMemberAccess().getRule();
	}
	
	///* Base Expressions */
	//BaseExpression returns SysML::Expression :
	//      NullExpression
	//    | LiteralExpression
	//    | FeatureReferenceExpression
	//    | MetadataAccessExpression
	//    | InvocationExpression
	//    | BodyExpression
	//    | '(' SequenceExpression ')'
	//;
	public BaseExpressionElements getBaseExpressionAccess() {
		return pBaseExpression;
	}
	
	public ParserRule getBaseExpressionRule() {
		return getBaseExpressionAccess().getRule();
	}
	
	//// Expression Bodies
	//BodyExpression returns SysML::FeatureReferenceExpression :
	//    ownedRelationship += ExpressionBodyMember
	//;
	public BodyExpressionElements getBodyExpressionAccess() {
		return pBodyExpression;
	}
	
	public ParserRule getBodyExpressionRule() {
		return getBodyExpressionAccess().getRule();
	}
	
	//ExpressionBodyMember returns SysML::FeatureMembership :
	//    ownedRelatedElement += ExpressionBody
	//;
	public ExpressionBodyMemberElements getExpressionBodyMemberAccess() {
		return pExpressionBodyMember;
	}
	
	public ParserRule getExpressionBodyMemberRule() {
		return getExpressionBodyMemberAccess().getRule();
	}
	
	//// This default production is overridden in the KerML and SysML grammars.
	//ExpressionBody returns SysML::Expression :
	//    '{' ( ownedRelationship += BodyParameterMember ';' )*
	//        ownedRelationship += ResultExpressionMember '}'
	//;
	public ExpressionBodyElements getExpressionBodyAccess() {
		return pExpressionBody;
	}
	
	public ParserRule getExpressionBodyRule() {
		return getExpressionBodyAccess().getRule();
	}
	
	//ResultExpressionMember returns SysML::ResultExpressionMembership :
	//    ownedRelatedElement += OwnedExpression
	//;
	public ResultExpressionMemberElements getResultExpressionMemberAccess() {
		return pResultExpressionMember;
	}
	
	public ParserRule getResultExpressionMemberRule() {
		return getResultExpressionMemberAccess().getRule();
	}
	
	//BodyParameterMember returns SysML::ParameterMembership :
	//    'in' ownedRelatedElement += BodyParameter
	//;
	public BodyParameterMemberElements getBodyParameterMemberAccess() {
		return pBodyParameterMember;
	}
	
	public ParserRule getBodyParameterMemberRule() {
		return getBodyParameterMemberAccess().getRule();
	}
	
	//BodyParameter returns SysML::Feature :
	//    declaredName = Name
	//;
	public BodyParameterElements getBodyParameterAccess() {
		return pBodyParameter;
	}
	
	public ParserRule getBodyParameterRule() {
		return getBodyParameterAccess().getRule();
	}
	
	//// Sequence Expressions
	//SequenceExpression returns SysML::Expression :
	//    OwnedExpression
	//    ( ','
	//    | {SysML::OperatorExpression.operand += current} operator = ','
	//      operand += SequenceExpression
	//    )?
	//;
	public SequenceExpressionElements getSequenceExpressionAccess() {
		return pSequenceExpression;
	}
	
	public ParserRule getSequenceExpressionRule() {
		return getSequenceExpressionAccess().getRule();
	}
	
	//// Feature Reference Expressions
	//FeatureReferenceExpression returns SysML::FeatureReferenceExpression :
	//    ownedRelationship += FeatureReferenceMember
	//;
	public FeatureReferenceExpressionElements getFeatureReferenceExpressionAccess() {
		return pFeatureReferenceExpression;
	}
	
	public ParserRule getFeatureReferenceExpressionRule() {
		return getFeatureReferenceExpressionAccess().getRule();
	}
	
	//FeatureReferenceMember returns SysML::Membership :
	//    memberElement = [SysML::Feature | QualifiedName]
	//;
	public FeatureReferenceMemberElements getFeatureReferenceMemberAccess() {
		return pFeatureReferenceMember;
	}
	
	public ParserRule getFeatureReferenceMemberRule() {
		return getFeatureReferenceMemberAccess().getRule();
	}
	
	//// Metadata Access Expressions
	//MetadataAccessExpression returns SysML::MetadataAccessExpression :
	//    referencedElement = [SysML::Element | QualifiedName] '.' 'metadata'
	//;
	public MetadataAccessExpressionElements getMetadataAccessExpressionAccess() {
		return pMetadataAccessExpression;
	}
	
	public ParserRule getMetadataAccessExpressionRule() {
		return getMetadataAccessExpressionAccess().getRule();
	}
	
	//// Invocation Expressions
	//InvocationExpression returns SysML::InvocationExpression :
	//    ownedRelationship += OwnedFeatureTyping ArgumentList
	//;
	public InvocationExpressionElements getInvocationExpressionAccess() {
		return pInvocationExpression;
	}
	
	public ParserRule getInvocationExpressionRule() {
		return getInvocationExpressionAccess().getRule();
	}
	
	//OwnedFeatureTyping returns SysML::FeatureTyping :
	//      type = [SysML::Type | QualifiedName]
	//    | ownedRelatedElement += OwnedFeatureChain
	//;
	public OwnedFeatureTypingElements getOwnedFeatureTypingAccess() {
		return pOwnedFeatureTyping;
	}
	
	public ParserRule getOwnedFeatureTypingRule() {
		return getOwnedFeatureTypingAccess().getRule();
	}
	
	//OwnedFeatureChain returns SysML::Feature :
	//    FeatureChain
	//;
	public OwnedFeatureChainElements getOwnedFeatureChainAccess() {
		return pOwnedFeatureChain;
	}
	
	public ParserRule getOwnedFeatureChainRule() {
		return getOwnedFeatureChainAccess().getRule();
	}
	
	//// For use in KerML and SysML grammars
	//fragment FeatureChain returns SysML::Feature :
	//    ownedRelationship += OwnedFeatureChaining
	//    ( '.' ownedRelationship += OwnedFeatureChaining )+
	//;
	public FeatureChainElements getFeatureChainAccess() {
		return pFeatureChain;
	}
	
	public ParserRule getFeatureChainRule() {
		return getFeatureChainAccess().getRule();
	}
	
	//OwnedFeatureChaining returns SysML::FeatureChaining :
	//    chainingFeature = [SysML::Feature | QualifiedName]
	//;
	public OwnedFeatureChainingElements getOwnedFeatureChainingAccess() {
		return pOwnedFeatureChaining;
	}
	
	public ParserRule getOwnedFeatureChainingRule() {
		return getOwnedFeatureChainingAccess().getRule();
	}
	
	//fragment ArgumentList returns SysML::Expression :
	//    '(' ( PositionalArgumentList | NamedArgumentList )? ')'
	//;
	public ArgumentListElements getArgumentListAccess() {
		return pArgumentList;
	}
	
	public ParserRule getArgumentListRule() {
		return getArgumentListAccess().getRule();
	}
	
	//fragment PositionalArgumentList returns SysML::Expression :
	//    ownedRelationship += ArgumentMember
	//    ( ',' ownedRelationship += ArgumentMember )*
	//;
	public PositionalArgumentListElements getPositionalArgumentListAccess() {
		return pPositionalArgumentList;
	}
	
	public ParserRule getPositionalArgumentListRule() {
		return getPositionalArgumentListAccess().getRule();
	}
	
	//ArgumentMember returns SysML::ParameterMembership :
	//    ownedRelatedElement += Argument
	//;
	public ArgumentMemberElements getArgumentMemberAccess() {
		return pArgumentMember;
	}
	
	public ParserRule getArgumentMemberRule() {
		return getArgumentMemberAccess().getRule();
	}
	
	//Argument returns SysML::Feature :
	//    ownedRelationship += ArgumentValue
	//;
	public ArgumentElements getArgumentAccess() {
		return pArgument;
	}
	
	public ParserRule getArgumentRule() {
		return getArgumentAccess().getRule();
	}
	
	//fragment NamedArgumentList returns SysML::Expression :
	//    ownedRelationship += NamedArgumentMember
	//    ( ',' ownedRelationship += NamedArgumentMember )*
	//;
	public NamedArgumentListElements getNamedArgumentListAccess() {
		return pNamedArgumentList;
	}
	
	public ParserRule getNamedArgumentListRule() {
		return getNamedArgumentListAccess().getRule();
	}
	
	//NamedArgumentMember returns SysML::ParameterMembership :
	//    ownedRelatedElement += NamedArgument
	//;
	public NamedArgumentMemberElements getNamedArgumentMemberAccess() {
		return pNamedArgumentMember;
	}
	
	public ParserRule getNamedArgumentMemberRule() {
		return getNamedArgumentMemberAccess().getRule();
	}
	
	//NamedArgument returns SysML::Feature :
	//    ownedRelationship += ParameterRedefinition '=' ownedRelationship += ArgumentValue
	//;
	public NamedArgumentElements getNamedArgumentAccess() {
		return pNamedArgument;
	}
	
	public ParserRule getNamedArgumentRule() {
		return getNamedArgumentAccess().getRule();
	}
	
	//ParameterRedefinition returns SysML::Redefinition:
	//    redefinedFeature = [SysML::Feature | QualifiedName]
	//;
	public ParameterRedefinitionElements getParameterRedefinitionAccess() {
		return pParameterRedefinition;
	}
	
	public ParserRule getParameterRedefinitionRule() {
		return getParameterRedefinitionAccess().getRule();
	}
	
	//ArgumentValue returns SysML::FeatureValue :
	//    ownedRelatedElement += OwnedExpression
	//;
	public ArgumentValueElements getArgumentValueAccess() {
		return pArgumentValue;
	}
	
	public ParserRule getArgumentValueRule() {
		return getArgumentValueAccess().getRule();
	}
	
	//// Null Expressions
	//NullExpression returns SysML::NullExpression :
	//    {SysML::NullExpression} ( 'null' | '(' ')' )
	//;
	public NullExpressionElements getNullExpressionAccess() {
		return pNullExpression;
	}
	
	public ParserRule getNullExpressionRule() {
		return getNullExpressionAccess().getRule();
	}
	
	///* Literal Expressions */
	//LiteralExpression returns SysML::LiteralExpression :
	//      LiteralBoolean
	//    | LiteralString
	//    | LiteralInteger
	//    | LiteralReal
	//    | LiteralInfinity
	//;
	public LiteralExpressionElements getLiteralExpressionAccess() {
		return pLiteralExpression;
	}
	
	public ParserRule getLiteralExpressionRule() {
		return getLiteralExpressionAccess().getRule();
	}
	
	//LiteralBoolean returns SysML::LiteralBoolean :
	//    value = BooleanValue
	//;
	public LiteralBooleanElements getLiteralBooleanAccess() {
		return pLiteralBoolean;
	}
	
	public ParserRule getLiteralBooleanRule() {
		return getLiteralBooleanAccess().getRule();
	}
	
	//BooleanValue returns Ecore::EBoolean :
	//    'true' | 'false'
	//;
	public BooleanValueElements getBooleanValueAccess() {
		return pBooleanValue;
	}
	
	public ParserRule getBooleanValueRule() {
		return getBooleanValueAccess().getRule();
	}
	
	//LiteralString returns SysML::LiteralString :
	//    value = STRING_VALUE
	//;
	public LiteralStringElements getLiteralStringAccess() {
		return pLiteralString;
	}
	
	public ParserRule getLiteralStringRule() {
		return getLiteralStringAccess().getRule();
	}
	
	//LiteralInteger returns SysML::LiteralInteger:
	//    value = DECIMAL_VALUE
	//;
	public LiteralIntegerElements getLiteralIntegerAccess() {
		return pLiteralInteger;
	}
	
	public ParserRule getLiteralIntegerRule() {
		return getLiteralIntegerAccess().getRule();
	}
	
	//LiteralReal returns SysML::LiteralRational:
	//    value = RealValue
	//;
	public LiteralRealElements getLiteralRealAccess() {
		return pLiteralReal;
	}
	
	public ParserRule getLiteralRealRule() {
		return getLiteralRealAccess().getRule();
	}
	
	//RealValue returns Ecore::EDouble:
	//    DECIMAL_VALUE? '.' ( DECIMAL_VALUE | EXP_VALUE ) | EXP_VALUE
	//;
	public RealValueElements getRealValueAccess() {
		return pRealValue;
	}
	
	public ParserRule getRealValueRule() {
		return getRealValueAccess().getRule();
	}
	
	//LiteralInfinity returns SysML::LiteralInfinity :
	//    {SysML::LiteralInfinity} '*'
	//;
	public LiteralInfinityElements getLiteralInfinityAccess() {
		return pLiteralInfinity;
	}
	
	public ParserRule getLiteralInfinityRule() {
		return getLiteralInfinityAccess().getRule();
	}
	
	///* NAMES */
	//Name:
	//    ID | UNRESTRICTED_NAME
	//;
	public NameElements getNameAccess() {
		return pName;
	}
	
	public ParserRule getNameRule() {
		return getNameAccess().getRule();
	}
	
	//Qualification :
	//    ( Name '::' )+
	//;
	public QualificationElements getQualificationAccess() {
		return pQualification;
	}
	
	public ParserRule getQualificationRule() {
		return getQualificationAccess().getRule();
	}
	
	//QualifiedName:
	//    Qualification? Name
	//;
	public QualifiedNameElements getQualifiedNameAccess() {
		return pQualifiedName;
	}
	
	public ParserRule getQualifiedNameRule() {
		return getQualifiedNameAccess().getRule();
	}
	
	///* TERMINALS */
	//terminal DECIMAL_VALUE returns Ecore::EInt:
	//    '0'..'9' ('0'..'9')*;
	public TerminalRule getDECIMAL_VALUERule() {
		return tDECIMAL_VALUE;
	}
	
	//terminal EXP_VALUE:
	//    DECIMAL_VALUE ('e' | 'E') ('+' | '-')? DECIMAL_VALUE;
	public TerminalRule getEXP_VALUERule() {
		return tEXP_VALUE;
	}
	
	//terminal ID:
	//    ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return tID;
	}
	
	//terminal UNRESTRICTED_NAME returns Ecore::EString:
	//    '\'' ('\\' ('b' | 't' | 'n' | 'f' | 'r' | '"' | "'" | '\\') | !('\\' | '\''))* '\'';
	public TerminalRule getUNRESTRICTED_NAMERule() {
		return tUNRESTRICTED_NAME;
	}
	
	//terminal STRING_VALUE returns Ecore::EString:
	//    '"' ('\\' ('b' | 't' | 'n' | 'f' | 'r' | '"' | "'" | '\\') | !('\\' | '"'))* '"';
	public TerminalRule getSTRING_VALUERule() {
		return tSTRING_VALUE;
	}
	
	//terminal REGULAR_COMMENT:
	//    '/*' ->'*/';
	public TerminalRule getREGULAR_COMMENTRule() {
		return tREGULAR_COMMENT;
	}
	
	//terminal ML_NOTE:
	//    '//*'->'*/';
	public TerminalRule getML_NOTERule() {
		return tML_NOTE;
	}
	
	//terminal SL_NOTE:
	//    '//' (!('\n' | '\r') !('\n' | '\r')*)? ('\r'? '\n')?;
	public TerminalRule getSL_NOTERule() {
		return tSL_NOTE;
	}
	
	//terminal WS:
	//    (' ' | '\t' | '\r' | '\n')+;
	public TerminalRule getWSRule() {
		return tWS;
	}
}
