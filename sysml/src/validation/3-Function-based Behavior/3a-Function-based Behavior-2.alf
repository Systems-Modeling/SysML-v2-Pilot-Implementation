package '3a-Function-based Behavior' {
	import Transfers::Reception;
	import ControlNodes::Merge;
	import Base::Occurrence::startShot;
			
	// ITEMS
	
	class FuelCmd;
	class EngineTorque;
	class TransmissionTorque;
	class DriveshaftTorque;
	class WheelTorque;
	
	// SIGNALS
	
	class EngineStart;
	class EngineOff;
	
	// BEHAVIORS
	
	behavior 'Generate Torque'(in fuelCmd: FuelCmd, out engineTorque: EngineTorque);
	behavior 'Amplify Torque'(in engineTorque: EngineTorque, out transmissionTorque: TransmissionTorque);
	behavior 'Transfer Torque'(in transmissionTorque: TransmissionTorque, out driveshaftTorque: DriveshaftTorque);
	behavior 'Distribute Torque'(in driveShaftTorque: DriveshaftTorque, out wheelTorque1: WheelTorque, out wheelTorque2: WheelTorque);
	
	behavior 'Provide Power'(
		in fuelCmd: FuelCmd, 
		out wheelTorque1: WheelTorque, 
		out wheelTorque2: WheelTorque
	) {
		step 'generate torque': 'Generate Torque'(
			in fuelCmd = 'Provide Power'::fuelCmd, 
			out engineTorque
		);
		
		step 'amplify torque': 'Amplify Torque'(
			in engineTorque from 'generate torque'::engineTorque,  
			out transmissionTorque
		);
		
		step 'transfer torque': 'Transfer Torque'(
			in transmissionTorque from 'amplify torque'::transmissionTorque,  
			out driveshaftTorque
		);
		
		step 'distribute torque': 'Distribute Torque'(
			in driveshaftTorque from 'transfer torque'::driveshaftTorque, 
			out wheelTorque1 = 'Provide Power'::wheelTorque1, 
			out wheelTorque2 = 'Provide Power'::wheelTorque2
		); 
	}
	
	behavior 'Provide Power With Control'(
		in fuelCmd: FuelCmd, 
		out wheelTorque1: WheelTorque, 
		out wheelTorque2: WheelTorque
	) {
		portion is startShot;
		then[0..1] step merge: Merge[*];
		then step engineStart: Reception[*](out :EngineStart);
		then step engineOff: Reception[*](out :EngineOff);
		then[0..1] merge;
		
		step is engineStart;
		then step 'provide power': 'Provide Power'[*] (
			in fuelCmd = 'Provide Power With Control'::fuelCmd, 
			out wheelTorque1 = 'Provide Power With Control'::wheelTorque1,
			out wheelTorque2 = 'Provide Power With Control'::wheelTorque2
		);
		then engineOff;
	}
}