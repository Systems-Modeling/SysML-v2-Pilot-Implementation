/*
 * generated by Xtext 2.34.0
 */
package org.omg.kerml.xtext.serializer;

import com.google.inject.Inject;
import java.util.List;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.IGrammarAccess;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.nodemodel.INode;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.AbstractElementAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.AlternativeAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.GroupAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.TokenAlias;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynNavigable;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynTransition;
import org.eclipse.xtext.serializer.sequencer.AbstractSyntacticSequencer;
import org.omg.kerml.xtext.services.KerMLGrammarAccess;

@SuppressWarnings("all")
public abstract class AbstractKerMLSyntacticSequencer extends AbstractSyntacticSequencer {

	protected KerMLGrammarAccess grammarAccess;
	protected AbstractElementAlias match_BaseExpression_LeftParenthesisKeyword_6_0_a;
	protected AbstractElementAlias match_BaseExpression_LeftParenthesisKeyword_6_0_p;
	protected AbstractElementAlias match_BinaryConnectorDeclaration_FromKeyword_0_0_1_q;
	protected AbstractElementAlias match_BinaryConnectorDeclaration_FromKeyword_0_1_1_q;
	protected AbstractElementAlias match_BindingConnectorDeclaration_OfKeyword_1_1_0_q;
	protected AbstractElementAlias match_ClassifierConjugationPart_ConjugatesKeyword_0_1_or_TildeKeyword_0_0;
	protected AbstractElementAlias match_Comment_CommentKeyword_0_0_q;
	protected AbstractElementAlias match_ConjugationPart_ConjugatesKeyword_0_1_or_TildeKeyword_0_0;
	protected AbstractElementAlias match_Conjugation_ConjugatesKeyword_3_1_or_TildeKeyword_3_0;
	protected AbstractElementAlias match_Conjugation_ConjugationKeyword_0_0_q;
	protected AbstractElementAlias match_Dependency_FromKeyword_2_1_q;
	protected AbstractElementAlias match_Disjoining_DisjoiningKeyword_0_0_q;
	protected AbstractElementAlias match_FeatureConjugationPart_ConjugatesKeyword_0_1_or_TildeKeyword_0_0;
	protected AbstractElementAlias match_FeatureInverting_InvertingKeyword_0_0_q;
	protected AbstractElementAlias match_FeatureTyping_ColonKeyword_3_0_or___TypedKeyword_3_1_0_ByKeyword_3_1_1__;
	protected AbstractElementAlias match_FeatureTyping_SpecializationKeyword_0_0_q;
	protected AbstractElementAlias match_FeatureValue_EqualsSignKeyword_0_2_1_0_q;
	protected AbstractElementAlias match_Feature_FeatureKeyword_1_0_0_q;
	protected AbstractElementAlias match_Invariant_TrueKeyword_2_0_q;
	protected AbstractElementAlias match_MetadataBodyFeature_FeatureKeyword_0_q;
	protected AbstractElementAlias match_MetadataBodyFeature___ColonGreaterThanSignGreaterThanSignKeyword_1_0_or_RedefinesKeyword_1_1__q;
	protected AbstractElementAlias match_MetadataBody_SemicolonKeyword_0_or___LeftCurlyBracketKeyword_1_0_RightCurlyBracketKeyword_1_2__;
	protected AbstractElementAlias match_MetadataFeatureDeclaration_ColonKeyword_0_1_0_or___TypedKeyword_0_1_1_0_ByKeyword_0_1_1_1__;
	protected AbstractElementAlias match_MetadataFeature_CommercialAtKeyword_1_0_or_MetadataKeyword_1_1;
	protected AbstractElementAlias match_NamespaceBody_SemicolonKeyword_0_or___LeftCurlyBracketKeyword_1_0_RightCurlyBracketKeyword_1_2__;
	protected AbstractElementAlias match_NullExpression_NullKeyword_1_0_or___LeftParenthesisKeyword_1_1_0_RightParenthesisKeyword_1_1_1__;
	protected AbstractElementAlias match_PackageBody_SemicolonKeyword_0_or___LeftCurlyBracketKeyword_1_0_RightCurlyBracketKeyword_1_2__;
	protected AbstractElementAlias match_Redefines_ColonGreaterThanSignGreaterThanSignKeyword_0_0_or_RedefinesKeyword_0_1;
	protected AbstractElementAlias match_Redefinition_ColonGreaterThanSignGreaterThanSignKeyword_3_0_or_RedefinesKeyword_3_1;
	protected AbstractElementAlias match_Redefinition_SpecializationKeyword_0_0_q;
	protected AbstractElementAlias match_RelationshipBody_SemicolonKeyword_0_or___LeftCurlyBracketKeyword_1_0_RightCurlyBracketKeyword_1_2__;
	protected AbstractElementAlias match_SequenceExpression_CommaKeyword_1_0_q;
	protected AbstractElementAlias match_SpecializationPart_ColonGreaterThanSignKeyword_0_0_or_SpecializesKeyword_0_1;
	protected AbstractElementAlias match_Specialization_ColonGreaterThanSignKeyword_3_0_or_SpecializesKeyword_3_1;
	protected AbstractElementAlias match_Specialization_SpecializationKeyword_0_0_q;
	protected AbstractElementAlias match_Subclassification_ColonGreaterThanSignKeyword_3_0_or_SpecializesKeyword_3_1;
	protected AbstractElementAlias match_Subclassification_SpecializationKeyword_0_0_q;
	protected AbstractElementAlias match_Subsets_ColonGreaterThanSignKeyword_0_0_or_SubsetsKeyword_0_1;
	protected AbstractElementAlias match_Subsetting_ColonGreaterThanSignKeyword_3_0_or_SubsetsKeyword_3_1;
	protected AbstractElementAlias match_Subsetting_SpecializationKeyword_0_0_q;
	protected AbstractElementAlias match_SuccessionDeclaration_FirstKeyword_1_1_0_q;
	protected AbstractElementAlias match_SuperclassingPart_ColonGreaterThanSignKeyword_0_0_or_SpecializesKeyword_0_1;
	protected AbstractElementAlias match_TextualRepresentation_RepKeyword_0_0_q;
	protected AbstractElementAlias match_TypeBody_SemicolonKeyword_0_or___LeftCurlyBracketKeyword_1_0_RightCurlyBracketKeyword_1_2__;
	protected AbstractElementAlias match_TypeFeaturing_OfKeyword_1_1_q;
	protected AbstractElementAlias match_TypedBy_ColonKeyword_0_0_or___TypedKeyword_0_1_0_ByKeyword_0_1_1__;
	
	@Inject
	protected void init(IGrammarAccess access) {
		grammarAccess = (KerMLGrammarAccess) access;
		match_BaseExpression_LeftParenthesisKeyword_6_0_a = new TokenAlias(true, true, grammarAccess.getBaseExpressionAccess().getLeftParenthesisKeyword_6_0());
		match_BaseExpression_LeftParenthesisKeyword_6_0_p = new TokenAlias(true, false, grammarAccess.getBaseExpressionAccess().getLeftParenthesisKeyword_6_0());
		match_BinaryConnectorDeclaration_FromKeyword_0_0_1_q = new TokenAlias(false, true, grammarAccess.getBinaryConnectorDeclarationAccess().getFromKeyword_0_0_1());
		match_BinaryConnectorDeclaration_FromKeyword_0_1_1_q = new TokenAlias(false, true, grammarAccess.getBinaryConnectorDeclarationAccess().getFromKeyword_0_1_1());
		match_BindingConnectorDeclaration_OfKeyword_1_1_0_q = new TokenAlias(false, true, grammarAccess.getBindingConnectorDeclarationAccess().getOfKeyword_1_1_0());
		match_ClassifierConjugationPart_ConjugatesKeyword_0_1_or_TildeKeyword_0_0 = new AlternativeAlias(false, false, new TokenAlias(false, false, grammarAccess.getClassifierConjugationPartAccess().getConjugatesKeyword_0_1()), new TokenAlias(false, false, grammarAccess.getClassifierConjugationPartAccess().getTildeKeyword_0_0()));
		match_Comment_CommentKeyword_0_0_q = new TokenAlias(false, true, grammarAccess.getCommentAccess().getCommentKeyword_0_0());
		match_ConjugationPart_ConjugatesKeyword_0_1_or_TildeKeyword_0_0 = new AlternativeAlias(false, false, new TokenAlias(false, false, grammarAccess.getConjugationPartAccess().getConjugatesKeyword_0_1()), new TokenAlias(false, false, grammarAccess.getConjugationPartAccess().getTildeKeyword_0_0()));
		match_Conjugation_ConjugatesKeyword_3_1_or_TildeKeyword_3_0 = new AlternativeAlias(false, false, new TokenAlias(false, false, grammarAccess.getConjugationAccess().getConjugatesKeyword_3_1()), new TokenAlias(false, false, grammarAccess.getConjugationAccess().getTildeKeyword_3_0()));
		match_Conjugation_ConjugationKeyword_0_0_q = new TokenAlias(false, true, grammarAccess.getConjugationAccess().getConjugationKeyword_0_0());
		match_Dependency_FromKeyword_2_1_q = new TokenAlias(false, true, grammarAccess.getDependencyAccess().getFromKeyword_2_1());
		match_Disjoining_DisjoiningKeyword_0_0_q = new TokenAlias(false, true, grammarAccess.getDisjoiningAccess().getDisjoiningKeyword_0_0());
		match_FeatureConjugationPart_ConjugatesKeyword_0_1_or_TildeKeyword_0_0 = new AlternativeAlias(false, false, new TokenAlias(false, false, grammarAccess.getFeatureConjugationPartAccess().getConjugatesKeyword_0_1()), new TokenAlias(false, false, grammarAccess.getFeatureConjugationPartAccess().getTildeKeyword_0_0()));
		match_FeatureInverting_InvertingKeyword_0_0_q = new TokenAlias(false, true, grammarAccess.getFeatureInvertingAccess().getInvertingKeyword_0_0());
		match_FeatureTyping_ColonKeyword_3_0_or___TypedKeyword_3_1_0_ByKeyword_3_1_1__ = new AlternativeAlias(false, false, new GroupAlias(false, false, new TokenAlias(false, false, grammarAccess.getFeatureTypingAccess().getTypedKeyword_3_1_0()), new TokenAlias(false, false, grammarAccess.getFeatureTypingAccess().getByKeyword_3_1_1())), new TokenAlias(false, false, grammarAccess.getFeatureTypingAccess().getColonKeyword_3_0()));
		match_FeatureTyping_SpecializationKeyword_0_0_q = new TokenAlias(false, true, grammarAccess.getFeatureTypingAccess().getSpecializationKeyword_0_0());
		match_FeatureValue_EqualsSignKeyword_0_2_1_0_q = new TokenAlias(false, true, grammarAccess.getFeatureValueAccess().getEqualsSignKeyword_0_2_1_0());
		match_Feature_FeatureKeyword_1_0_0_q = new TokenAlias(false, true, grammarAccess.getFeatureAccess().getFeatureKeyword_1_0_0());
		match_Invariant_TrueKeyword_2_0_q = new TokenAlias(false, true, grammarAccess.getInvariantAccess().getTrueKeyword_2_0());
		match_MetadataBodyFeature_FeatureKeyword_0_q = new TokenAlias(false, true, grammarAccess.getMetadataBodyFeatureAccess().getFeatureKeyword_0());
		match_MetadataBodyFeature___ColonGreaterThanSignGreaterThanSignKeyword_1_0_or_RedefinesKeyword_1_1__q = new AlternativeAlias(false, true, new TokenAlias(false, false, grammarAccess.getMetadataBodyFeatureAccess().getColonGreaterThanSignGreaterThanSignKeyword_1_0()), new TokenAlias(false, false, grammarAccess.getMetadataBodyFeatureAccess().getRedefinesKeyword_1_1()));
		match_MetadataBody_SemicolonKeyword_0_or___LeftCurlyBracketKeyword_1_0_RightCurlyBracketKeyword_1_2__ = new AlternativeAlias(false, false, new GroupAlias(false, false, new TokenAlias(false, false, grammarAccess.getMetadataBodyAccess().getLeftCurlyBracketKeyword_1_0()), new TokenAlias(false, false, grammarAccess.getMetadataBodyAccess().getRightCurlyBracketKeyword_1_2())), new TokenAlias(false, false, grammarAccess.getMetadataBodyAccess().getSemicolonKeyword_0()));
		match_MetadataFeatureDeclaration_ColonKeyword_0_1_0_or___TypedKeyword_0_1_1_0_ByKeyword_0_1_1_1__ = new AlternativeAlias(false, false, new GroupAlias(false, false, new TokenAlias(false, false, grammarAccess.getMetadataFeatureDeclarationAccess().getTypedKeyword_0_1_1_0()), new TokenAlias(false, false, grammarAccess.getMetadataFeatureDeclarationAccess().getByKeyword_0_1_1_1())), new TokenAlias(false, false, grammarAccess.getMetadataFeatureDeclarationAccess().getColonKeyword_0_1_0()));
		match_MetadataFeature_CommercialAtKeyword_1_0_or_MetadataKeyword_1_1 = new AlternativeAlias(false, false, new TokenAlias(false, false, grammarAccess.getMetadataFeatureAccess().getCommercialAtKeyword_1_0()), new TokenAlias(false, false, grammarAccess.getMetadataFeatureAccess().getMetadataKeyword_1_1()));
		match_NamespaceBody_SemicolonKeyword_0_or___LeftCurlyBracketKeyword_1_0_RightCurlyBracketKeyword_1_2__ = new AlternativeAlias(false, false, new GroupAlias(false, false, new TokenAlias(false, false, grammarAccess.getNamespaceBodyAccess().getLeftCurlyBracketKeyword_1_0()), new TokenAlias(false, false, grammarAccess.getNamespaceBodyAccess().getRightCurlyBracketKeyword_1_2())), new TokenAlias(false, false, grammarAccess.getNamespaceBodyAccess().getSemicolonKeyword_0()));
		match_NullExpression_NullKeyword_1_0_or___LeftParenthesisKeyword_1_1_0_RightParenthesisKeyword_1_1_1__ = new AlternativeAlias(false, false, new GroupAlias(false, false, new TokenAlias(false, false, grammarAccess.getNullExpressionAccess().getLeftParenthesisKeyword_1_1_0()), new TokenAlias(false, false, grammarAccess.getNullExpressionAccess().getRightParenthesisKeyword_1_1_1())), new TokenAlias(false, false, grammarAccess.getNullExpressionAccess().getNullKeyword_1_0()));
		match_PackageBody_SemicolonKeyword_0_or___LeftCurlyBracketKeyword_1_0_RightCurlyBracketKeyword_1_2__ = new AlternativeAlias(false, false, new GroupAlias(false, false, new TokenAlias(false, false, grammarAccess.getPackageBodyAccess().getLeftCurlyBracketKeyword_1_0()), new TokenAlias(false, false, grammarAccess.getPackageBodyAccess().getRightCurlyBracketKeyword_1_2())), new TokenAlias(false, false, grammarAccess.getPackageBodyAccess().getSemicolonKeyword_0()));
		match_Redefines_ColonGreaterThanSignGreaterThanSignKeyword_0_0_or_RedefinesKeyword_0_1 = new AlternativeAlias(false, false, new TokenAlias(false, false, grammarAccess.getRedefinesAccess().getColonGreaterThanSignGreaterThanSignKeyword_0_0()), new TokenAlias(false, false, grammarAccess.getRedefinesAccess().getRedefinesKeyword_0_1()));
		match_Redefinition_ColonGreaterThanSignGreaterThanSignKeyword_3_0_or_RedefinesKeyword_3_1 = new AlternativeAlias(false, false, new TokenAlias(false, false, grammarAccess.getRedefinitionAccess().getColonGreaterThanSignGreaterThanSignKeyword_3_0()), new TokenAlias(false, false, grammarAccess.getRedefinitionAccess().getRedefinesKeyword_3_1()));
		match_Redefinition_SpecializationKeyword_0_0_q = new TokenAlias(false, true, grammarAccess.getRedefinitionAccess().getSpecializationKeyword_0_0());
		match_RelationshipBody_SemicolonKeyword_0_or___LeftCurlyBracketKeyword_1_0_RightCurlyBracketKeyword_1_2__ = new AlternativeAlias(false, false, new GroupAlias(false, false, new TokenAlias(false, false, grammarAccess.getRelationshipBodyAccess().getLeftCurlyBracketKeyword_1_0()), new TokenAlias(false, false, grammarAccess.getRelationshipBodyAccess().getRightCurlyBracketKeyword_1_2())), new TokenAlias(false, false, grammarAccess.getRelationshipBodyAccess().getSemicolonKeyword_0()));
		match_SequenceExpression_CommaKeyword_1_0_q = new TokenAlias(false, true, grammarAccess.getSequenceExpressionAccess().getCommaKeyword_1_0());
		match_SpecializationPart_ColonGreaterThanSignKeyword_0_0_or_SpecializesKeyword_0_1 = new AlternativeAlias(false, false, new TokenAlias(false, false, grammarAccess.getSpecializationPartAccess().getColonGreaterThanSignKeyword_0_0()), new TokenAlias(false, false, grammarAccess.getSpecializationPartAccess().getSpecializesKeyword_0_1()));
		match_Specialization_ColonGreaterThanSignKeyword_3_0_or_SpecializesKeyword_3_1 = new AlternativeAlias(false, false, new TokenAlias(false, false, grammarAccess.getSpecializationAccess().getColonGreaterThanSignKeyword_3_0()), new TokenAlias(false, false, grammarAccess.getSpecializationAccess().getSpecializesKeyword_3_1()));
		match_Specialization_SpecializationKeyword_0_0_q = new TokenAlias(false, true, grammarAccess.getSpecializationAccess().getSpecializationKeyword_0_0());
		match_Subclassification_ColonGreaterThanSignKeyword_3_0_or_SpecializesKeyword_3_1 = new AlternativeAlias(false, false, new TokenAlias(false, false, grammarAccess.getSubclassificationAccess().getColonGreaterThanSignKeyword_3_0()), new TokenAlias(false, false, grammarAccess.getSubclassificationAccess().getSpecializesKeyword_3_1()));
		match_Subclassification_SpecializationKeyword_0_0_q = new TokenAlias(false, true, grammarAccess.getSubclassificationAccess().getSpecializationKeyword_0_0());
		match_Subsets_ColonGreaterThanSignKeyword_0_0_or_SubsetsKeyword_0_1 = new AlternativeAlias(false, false, new TokenAlias(false, false, grammarAccess.getSubsetsAccess().getColonGreaterThanSignKeyword_0_0()), new TokenAlias(false, false, grammarAccess.getSubsetsAccess().getSubsetsKeyword_0_1()));
		match_Subsetting_ColonGreaterThanSignKeyword_3_0_or_SubsetsKeyword_3_1 = new AlternativeAlias(false, false, new TokenAlias(false, false, grammarAccess.getSubsettingAccess().getColonGreaterThanSignKeyword_3_0()), new TokenAlias(false, false, grammarAccess.getSubsettingAccess().getSubsetsKeyword_3_1()));
		match_Subsetting_SpecializationKeyword_0_0_q = new TokenAlias(false, true, grammarAccess.getSubsettingAccess().getSpecializationKeyword_0_0());
		match_SuccessionDeclaration_FirstKeyword_1_1_0_q = new TokenAlias(false, true, grammarAccess.getSuccessionDeclarationAccess().getFirstKeyword_1_1_0());
		match_SuperclassingPart_ColonGreaterThanSignKeyword_0_0_or_SpecializesKeyword_0_1 = new AlternativeAlias(false, false, new TokenAlias(false, false, grammarAccess.getSuperclassingPartAccess().getColonGreaterThanSignKeyword_0_0()), new TokenAlias(false, false, grammarAccess.getSuperclassingPartAccess().getSpecializesKeyword_0_1()));
		match_TextualRepresentation_RepKeyword_0_0_q = new TokenAlias(false, true, grammarAccess.getTextualRepresentationAccess().getRepKeyword_0_0());
		match_TypeBody_SemicolonKeyword_0_or___LeftCurlyBracketKeyword_1_0_RightCurlyBracketKeyword_1_2__ = new AlternativeAlias(false, false, new GroupAlias(false, false, new TokenAlias(false, false, grammarAccess.getTypeBodyAccess().getLeftCurlyBracketKeyword_1_0()), new TokenAlias(false, false, grammarAccess.getTypeBodyAccess().getRightCurlyBracketKeyword_1_2())), new TokenAlias(false, false, grammarAccess.getTypeBodyAccess().getSemicolonKeyword_0()));
		match_TypeFeaturing_OfKeyword_1_1_q = new TokenAlias(false, true, grammarAccess.getTypeFeaturingAccess().getOfKeyword_1_1());
		match_TypedBy_ColonKeyword_0_0_or___TypedKeyword_0_1_0_ByKeyword_0_1_1__ = new AlternativeAlias(false, false, new GroupAlias(false, false, new TokenAlias(false, false, grammarAccess.getTypedByAccess().getTypedKeyword_0_1_0()), new TokenAlias(false, false, grammarAccess.getTypedByAccess().getByKeyword_0_1_1())), new TokenAlias(false, false, grammarAccess.getTypedByAccess().getColonKeyword_0_0()));
	}
	
	@Override
	protected String getUnassignedRuleCallToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (ruleCall.getRule() == grammarAccess.getReferencesKeywordRule())
			return getReferencesKeywordToken(semanticObject, ruleCall, node);
		return "";
	}
	
	/**
	 * ReferencesKeyword :
	 * 	'::>' | 'references'
	 * ;
	 */
	protected String getReferencesKeywordToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "::>";
	}
	
	@Override
	protected void emitUnassignedTokens(EObject semanticObject, ISynTransition transition, INode fromNode, INode toNode) {
		if (transition.getAmbiguousSyntaxes().isEmpty()) return;
		List<INode> transitionNodes = collectNodes(fromNode, toNode);
		for (AbstractElementAlias syntax : transition.getAmbiguousSyntaxes()) {
			List<INode> syntaxNodes = getNodesFor(transitionNodes, syntax);
			if (match_BaseExpression_LeftParenthesisKeyword_6_0_a.equals(syntax))
				emit_BaseExpression_LeftParenthesisKeyword_6_0_a(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_BaseExpression_LeftParenthesisKeyword_6_0_p.equals(syntax))
				emit_BaseExpression_LeftParenthesisKeyword_6_0_p(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_BinaryConnectorDeclaration_FromKeyword_0_0_1_q.equals(syntax))
				emit_BinaryConnectorDeclaration_FromKeyword_0_0_1_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_BinaryConnectorDeclaration_FromKeyword_0_1_1_q.equals(syntax))
				emit_BinaryConnectorDeclaration_FromKeyword_0_1_1_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_BindingConnectorDeclaration_OfKeyword_1_1_0_q.equals(syntax))
				emit_BindingConnectorDeclaration_OfKeyword_1_1_0_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_ClassifierConjugationPart_ConjugatesKeyword_0_1_or_TildeKeyword_0_0.equals(syntax))
				emit_ClassifierConjugationPart_ConjugatesKeyword_0_1_or_TildeKeyword_0_0(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Comment_CommentKeyword_0_0_q.equals(syntax))
				emit_Comment_CommentKeyword_0_0_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_ConjugationPart_ConjugatesKeyword_0_1_or_TildeKeyword_0_0.equals(syntax))
				emit_ConjugationPart_ConjugatesKeyword_0_1_or_TildeKeyword_0_0(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Conjugation_ConjugatesKeyword_3_1_or_TildeKeyword_3_0.equals(syntax))
				emit_Conjugation_ConjugatesKeyword_3_1_or_TildeKeyword_3_0(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Conjugation_ConjugationKeyword_0_0_q.equals(syntax))
				emit_Conjugation_ConjugationKeyword_0_0_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Dependency_FromKeyword_2_1_q.equals(syntax))
				emit_Dependency_FromKeyword_2_1_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Disjoining_DisjoiningKeyword_0_0_q.equals(syntax))
				emit_Disjoining_DisjoiningKeyword_0_0_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_FeatureConjugationPart_ConjugatesKeyword_0_1_or_TildeKeyword_0_0.equals(syntax))
				emit_FeatureConjugationPart_ConjugatesKeyword_0_1_or_TildeKeyword_0_0(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_FeatureInverting_InvertingKeyword_0_0_q.equals(syntax))
				emit_FeatureInverting_InvertingKeyword_0_0_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_FeatureTyping_ColonKeyword_3_0_or___TypedKeyword_3_1_0_ByKeyword_3_1_1__.equals(syntax))
				emit_FeatureTyping_ColonKeyword_3_0_or___TypedKeyword_3_1_0_ByKeyword_3_1_1__(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_FeatureTyping_SpecializationKeyword_0_0_q.equals(syntax))
				emit_FeatureTyping_SpecializationKeyword_0_0_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_FeatureValue_EqualsSignKeyword_0_2_1_0_q.equals(syntax))
				emit_FeatureValue_EqualsSignKeyword_0_2_1_0_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Feature_FeatureKeyword_1_0_0_q.equals(syntax))
				emit_Feature_FeatureKeyword_1_0_0_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Invariant_TrueKeyword_2_0_q.equals(syntax))
				emit_Invariant_TrueKeyword_2_0_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_MetadataBodyFeature_FeatureKeyword_0_q.equals(syntax))
				emit_MetadataBodyFeature_FeatureKeyword_0_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_MetadataBodyFeature___ColonGreaterThanSignGreaterThanSignKeyword_1_0_or_RedefinesKeyword_1_1__q.equals(syntax))
				emit_MetadataBodyFeature___ColonGreaterThanSignGreaterThanSignKeyword_1_0_or_RedefinesKeyword_1_1__q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_MetadataBody_SemicolonKeyword_0_or___LeftCurlyBracketKeyword_1_0_RightCurlyBracketKeyword_1_2__.equals(syntax))
				emit_MetadataBody_SemicolonKeyword_0_or___LeftCurlyBracketKeyword_1_0_RightCurlyBracketKeyword_1_2__(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_MetadataFeatureDeclaration_ColonKeyword_0_1_0_or___TypedKeyword_0_1_1_0_ByKeyword_0_1_1_1__.equals(syntax))
				emit_MetadataFeatureDeclaration_ColonKeyword_0_1_0_or___TypedKeyword_0_1_1_0_ByKeyword_0_1_1_1__(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_MetadataFeature_CommercialAtKeyword_1_0_or_MetadataKeyword_1_1.equals(syntax))
				emit_MetadataFeature_CommercialAtKeyword_1_0_or_MetadataKeyword_1_1(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_NamespaceBody_SemicolonKeyword_0_or___LeftCurlyBracketKeyword_1_0_RightCurlyBracketKeyword_1_2__.equals(syntax))
				emit_NamespaceBody_SemicolonKeyword_0_or___LeftCurlyBracketKeyword_1_0_RightCurlyBracketKeyword_1_2__(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_NullExpression_NullKeyword_1_0_or___LeftParenthesisKeyword_1_1_0_RightParenthesisKeyword_1_1_1__.equals(syntax))
				emit_NullExpression_NullKeyword_1_0_or___LeftParenthesisKeyword_1_1_0_RightParenthesisKeyword_1_1_1__(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_PackageBody_SemicolonKeyword_0_or___LeftCurlyBracketKeyword_1_0_RightCurlyBracketKeyword_1_2__.equals(syntax))
				emit_PackageBody_SemicolonKeyword_0_or___LeftCurlyBracketKeyword_1_0_RightCurlyBracketKeyword_1_2__(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Redefines_ColonGreaterThanSignGreaterThanSignKeyword_0_0_or_RedefinesKeyword_0_1.equals(syntax))
				emit_Redefines_ColonGreaterThanSignGreaterThanSignKeyword_0_0_or_RedefinesKeyword_0_1(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Redefinition_ColonGreaterThanSignGreaterThanSignKeyword_3_0_or_RedefinesKeyword_3_1.equals(syntax))
				emit_Redefinition_ColonGreaterThanSignGreaterThanSignKeyword_3_0_or_RedefinesKeyword_3_1(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Redefinition_SpecializationKeyword_0_0_q.equals(syntax))
				emit_Redefinition_SpecializationKeyword_0_0_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_RelationshipBody_SemicolonKeyword_0_or___LeftCurlyBracketKeyword_1_0_RightCurlyBracketKeyword_1_2__.equals(syntax))
				emit_RelationshipBody_SemicolonKeyword_0_or___LeftCurlyBracketKeyword_1_0_RightCurlyBracketKeyword_1_2__(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_SequenceExpression_CommaKeyword_1_0_q.equals(syntax))
				emit_SequenceExpression_CommaKeyword_1_0_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_SpecializationPart_ColonGreaterThanSignKeyword_0_0_or_SpecializesKeyword_0_1.equals(syntax))
				emit_SpecializationPart_ColonGreaterThanSignKeyword_0_0_or_SpecializesKeyword_0_1(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Specialization_ColonGreaterThanSignKeyword_3_0_or_SpecializesKeyword_3_1.equals(syntax))
				emit_Specialization_ColonGreaterThanSignKeyword_3_0_or_SpecializesKeyword_3_1(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Specialization_SpecializationKeyword_0_0_q.equals(syntax))
				emit_Specialization_SpecializationKeyword_0_0_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Subclassification_ColonGreaterThanSignKeyword_3_0_or_SpecializesKeyword_3_1.equals(syntax))
				emit_Subclassification_ColonGreaterThanSignKeyword_3_0_or_SpecializesKeyword_3_1(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Subclassification_SpecializationKeyword_0_0_q.equals(syntax))
				emit_Subclassification_SpecializationKeyword_0_0_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Subsets_ColonGreaterThanSignKeyword_0_0_or_SubsetsKeyword_0_1.equals(syntax))
				emit_Subsets_ColonGreaterThanSignKeyword_0_0_or_SubsetsKeyword_0_1(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Subsetting_ColonGreaterThanSignKeyword_3_0_or_SubsetsKeyword_3_1.equals(syntax))
				emit_Subsetting_ColonGreaterThanSignKeyword_3_0_or_SubsetsKeyword_3_1(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Subsetting_SpecializationKeyword_0_0_q.equals(syntax))
				emit_Subsetting_SpecializationKeyword_0_0_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_SuccessionDeclaration_FirstKeyword_1_1_0_q.equals(syntax))
				emit_SuccessionDeclaration_FirstKeyword_1_1_0_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_SuperclassingPart_ColonGreaterThanSignKeyword_0_0_or_SpecializesKeyword_0_1.equals(syntax))
				emit_SuperclassingPart_ColonGreaterThanSignKeyword_0_0_or_SpecializesKeyword_0_1(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_TextualRepresentation_RepKeyword_0_0_q.equals(syntax))
				emit_TextualRepresentation_RepKeyword_0_0_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_TypeBody_SemicolonKeyword_0_or___LeftCurlyBracketKeyword_1_0_RightCurlyBracketKeyword_1_2__.equals(syntax))
				emit_TypeBody_SemicolonKeyword_0_or___LeftCurlyBracketKeyword_1_0_RightCurlyBracketKeyword_1_2__(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_TypeFeaturing_OfKeyword_1_1_q.equals(syntax))
				emit_TypeFeaturing_OfKeyword_1_1_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_TypedBy_ColonKeyword_0_0_or___TypedKeyword_0_1_0_ByKeyword_0_1_1__.equals(syntax))
				emit_TypedBy_ColonKeyword_0_0_or___TypedKeyword_0_1_0_ByKeyword_0_1_1__(semanticObject, getLastNavigableState(), syntaxNodes);
			else acceptNodes(getLastNavigableState(), syntaxNodes);
		}
	}

	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     '('*
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) '*' (rule start)
	 *     (rule start) (ambiguity) ('null' | ('(' ')')) (rule start)
	 *     (rule start) (ambiguity) operand+=MetadataReference
	 *     (rule start) (ambiguity) operand+=SelfReferenceExpression
	 *     (rule start) (ambiguity) operator='all'
	 *     (rule start) (ambiguity) operator=ConditionalOperator
	 *     (rule start) (ambiguity) operator=UnaryOperator
	 *     (rule start) (ambiguity) ownedRelationship+=ExpressionBodyMember
	 *     (rule start) (ambiguity) ownedRelationship+=FeatureReferenceMember
	 *     (rule start) (ambiguity) ownedRelationship+=OwnedFeatureTyping
	 *     (rule start) (ambiguity) referencedElement=[Element|QualifiedName]
	 *     (rule start) (ambiguity) value=BooleanValue
	 *     (rule start) (ambiguity) value=DECIMAL_VALUE
	 *     (rule start) (ambiguity) value=RealValue
	 *     (rule start) (ambiguity) value=STRING_VALUE
	 *     (rule start) (ambiguity) {CollectExpression.operand+=}
	 *     (rule start) (ambiguity) {FeatureChainExpression.operand+=}
	 *     (rule start) (ambiguity) {InvocationExpression.operand+=}
	 *     (rule start) (ambiguity) {OperatorExpression.operand+=}
	 *     (rule start) (ambiguity) {SelectExpression.operand+=}
	 
	 * </pre>
	 */
	protected void emit_BaseExpression_LeftParenthesisKeyword_6_0_a(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     '('+
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) operand+=MetadataReference
	 *     (rule start) (ambiguity) operand+=SelfReferenceExpression
	 *     (rule start) (ambiguity) operator='all'
	 *     (rule start) (ambiguity) operator=ConditionalOperator
	 *     (rule start) (ambiguity) operator=UnaryOperator
	 *     (rule start) (ambiguity) {CollectExpression.operand+=}
	 *     (rule start) (ambiguity) {FeatureChainExpression.operand+=}
	 *     (rule start) (ambiguity) {InvocationExpression.operand+=}
	 *     (rule start) (ambiguity) {OperatorExpression.operand+=}
	 *     (rule start) (ambiguity) {SelectExpression.operand+=}
	 
	 * </pre>
	 */
	protected void emit_BaseExpression_LeftParenthesisKeyword_6_0_p(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     'from'?
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) 'connector' (ambiguity) ownedRelationship+=ConnectorEndMember
	 *     direction=FeatureDirection 'connector' (ambiguity) ownedRelationship+=ConnectorEndMember
	 *     isAbstract?='abstract' 'connector' (ambiguity) ownedRelationship+=ConnectorEndMember
	 *     isComposite?='composite' 'connector' (ambiguity) ownedRelationship+=ConnectorEndMember
	 *     isDerived?='derived' 'connector' (ambiguity) ownedRelationship+=ConnectorEndMember
	 *     isEnd?='end' 'connector' (ambiguity) ownedRelationship+=ConnectorEndMember
	 *     isPortion?='portion' 'connector' (ambiguity) ownedRelationship+=ConnectorEndMember
	 *     isReadOnly?='readonly' 'connector' (ambiguity) ownedRelationship+=ConnectorEndMember
	 *     ownedRelationship+=PrefixMetadataMember 'connector' (ambiguity) ownedRelationship+=ConnectorEndMember
	 
	 * </pre>
	 */
	protected void emit_BinaryConnectorDeclaration_FromKeyword_0_0_1_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     'from'?
	 *
	 * This ambiguous syntax occurs at:
	 *     isSufficient?='all' (ambiguity) ownedRelationship+=ConnectorEndMember
	 
	 * </pre>
	 */
	protected void emit_BinaryConnectorDeclaration_FromKeyword_0_1_1_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     'of'?
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) 'binding' (ambiguity) ownedRelationship+=ConnectorEndMember
	 *     direction=FeatureDirection 'binding' (ambiguity) ownedRelationship+=ConnectorEndMember
	 *     isAbstract?='abstract' 'binding' (ambiguity) ownedRelationship+=ConnectorEndMember
	 *     isComposite?='composite' 'binding' (ambiguity) ownedRelationship+=ConnectorEndMember
	 *     isDerived?='derived' 'binding' (ambiguity) ownedRelationship+=ConnectorEndMember
	 *     isEnd?='end' 'binding' (ambiguity) ownedRelationship+=ConnectorEndMember
	 *     isPortion?='portion' 'binding' (ambiguity) ownedRelationship+=ConnectorEndMember
	 *     isReadOnly?='readonly' 'binding' (ambiguity) ownedRelationship+=ConnectorEndMember
	 *     isSufficient?='all' (ambiguity) ownedRelationship+=ConnectorEndMember
	 *     ownedRelationship+=PrefixMetadataMember 'binding' (ambiguity) ownedRelationship+=ConnectorEndMember
	 
	 * </pre>
	 */
	protected void emit_BindingConnectorDeclaration_OfKeyword_1_1_0_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     '~' | 'conjugates'
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) 'assoc' 'struct' (ambiguity) ownedRelationship+=ClassifierConjugation
	 *     (rule start) 'assoc' (ambiguity) ownedRelationship+=ClassifierConjugation
	 *     (rule start) 'behavior' (ambiguity) ownedRelationship+=ClassifierConjugation
	 *     (rule start) 'class' (ambiguity) ownedRelationship+=ClassifierConjugation
	 *     (rule start) 'classifier' (ambiguity) ownedRelationship+=ClassifierConjugation
	 *     (rule start) 'datatype' (ambiguity) ownedRelationship+=ClassifierConjugation
	 *     (rule start) 'function' (ambiguity) ownedRelationship+=ClassifierConjugation
	 *     (rule start) 'interaction' (ambiguity) ownedRelationship+=ClassifierConjugation
	 *     (rule start) 'metaclass' (ambiguity) ownedRelationship+=ClassifierConjugation
	 *     (rule start) 'predicate' (ambiguity) ownedRelationship+=ClassifierConjugation
	 *     (rule start) 'struct' (ambiguity) ownedRelationship+=ClassifierConjugation
	 *     declaredName=Name (ambiguity) ownedRelationship+=ClassifierConjugation
	 *     declaredShortName=Name '&gt;' (ambiguity) ownedRelationship+=ClassifierConjugation
	 *     isAbstract?='abstract' 'assoc' 'struct' (ambiguity) ownedRelationship+=ClassifierConjugation
	 *     isAbstract?='abstract' 'assoc' (ambiguity) ownedRelationship+=ClassifierConjugation
	 *     isAbstract?='abstract' 'behavior' (ambiguity) ownedRelationship+=ClassifierConjugation
	 *     isAbstract?='abstract' 'class' (ambiguity) ownedRelationship+=ClassifierConjugation
	 *     isAbstract?='abstract' 'classifier' (ambiguity) ownedRelationship+=ClassifierConjugation
	 *     isAbstract?='abstract' 'datatype' (ambiguity) ownedRelationship+=ClassifierConjugation
	 *     isAbstract?='abstract' 'function' (ambiguity) ownedRelationship+=ClassifierConjugation
	 *     isAbstract?='abstract' 'interaction' (ambiguity) ownedRelationship+=ClassifierConjugation
	 *     isAbstract?='abstract' 'metaclass' (ambiguity) ownedRelationship+=ClassifierConjugation
	 *     isAbstract?='abstract' 'predicate' (ambiguity) ownedRelationship+=ClassifierConjugation
	 *     isAbstract?='abstract' 'struct' (ambiguity) ownedRelationship+=ClassifierConjugation
	 *     isSufficient?='all' (ambiguity) ownedRelationship+=ClassifierConjugation
	 *     ownedRelationship+=OwnedMultiplicity (ambiguity) ownedRelationship+=ClassifierConjugation
	 *     ownedRelationship+=PrefixMetadataMember 'assoc' 'struct' (ambiguity) ownedRelationship+=ClassifierConjugation
	 *     ownedRelationship+=PrefixMetadataMember 'assoc' (ambiguity) ownedRelationship+=ClassifierConjugation
	 *     ownedRelationship+=PrefixMetadataMember 'behavior' (ambiguity) ownedRelationship+=ClassifierConjugation
	 *     ownedRelationship+=PrefixMetadataMember 'class' (ambiguity) ownedRelationship+=ClassifierConjugation
	 *     ownedRelationship+=PrefixMetadataMember 'classifier' (ambiguity) ownedRelationship+=ClassifierConjugation
	 *     ownedRelationship+=PrefixMetadataMember 'datatype' (ambiguity) ownedRelationship+=ClassifierConjugation
	 *     ownedRelationship+=PrefixMetadataMember 'function' (ambiguity) ownedRelationship+=ClassifierConjugation
	 *     ownedRelationship+=PrefixMetadataMember 'interaction' (ambiguity) ownedRelationship+=ClassifierConjugation
	 *     ownedRelationship+=PrefixMetadataMember 'metaclass' (ambiguity) ownedRelationship+=ClassifierConjugation
	 *     ownedRelationship+=PrefixMetadataMember 'predicate' (ambiguity) ownedRelationship+=ClassifierConjugation
	 *     ownedRelationship+=PrefixMetadataMember 'struct' (ambiguity) ownedRelationship+=ClassifierConjugation
	 
	 * </pre>
	 */
	protected void emit_ClassifierConjugationPart_ConjugatesKeyword_0_1_or_TildeKeyword_0_0(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     'comment'?
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) 'locale' locale=STRING_VALUE
	 *     (rule start) (ambiguity) body=REGULAR_COMMENT
	 
	 * </pre>
	 */
	protected void emit_Comment_CommentKeyword_0_0_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     '~' | 'conjugates'
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) 'type' (ambiguity) ownedRelationship+=OwnedConjugation
	 *     declaredName=Name (ambiguity) ownedRelationship+=OwnedConjugation
	 *     declaredShortName=Name '&gt;' (ambiguity) ownedRelationship+=OwnedConjugation
	 *     isAbstract?='abstract' 'type' (ambiguity) ownedRelationship+=OwnedConjugation
	 *     isSufficient?='all' (ambiguity) ownedRelationship+=OwnedConjugation
	 *     ownedRelationship+=OwnedMultiplicity (ambiguity) ownedRelationship+=OwnedConjugation
	 *     ownedRelationship+=PrefixMetadataMember 'type' (ambiguity) ownedRelationship+=OwnedConjugation
	 
	 * </pre>
	 */
	protected void emit_ConjugationPart_ConjugatesKeyword_0_1_or_TildeKeyword_0_0(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     '~' | 'conjugates'
	 *
	 * This ambiguous syntax occurs at:
	 *     conjugatedType=[Type|QualifiedName] (ambiguity) originalType=[Type|QualifiedName]
	 *     conjugatedType=[Type|QualifiedName] (ambiguity) ownedRelatedElement+=OwnedFeatureChain
	 *     ownedRelatedElement+=OwnedFeatureChain (ambiguity) originalType=[Type|QualifiedName]
	 *     ownedRelatedElement+=OwnedFeatureChain (ambiguity) ownedRelatedElement+=OwnedFeatureChain
	 
	 * </pre>
	 */
	protected void emit_Conjugation_ConjugatesKeyword_3_1_or_TildeKeyword_3_0(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     'conjugation'?
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) 'conjugate' conjugatedType=[Type|QualifiedName]
	 *     (rule start) (ambiguity) 'conjugate' ownedRelatedElement+=OwnedFeatureChain
	 
	 * </pre>
	 */
	protected void emit_Conjugation_ConjugationKeyword_0_0_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     'from'?
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) 'dependency' (ambiguity) client+=[Element|QualifiedName]
	 *     ownedRelationship+=PrefixMetadataAnnotation 'dependency' (ambiguity) client+=[Element|QualifiedName]
	 
	 * </pre>
	 */
	protected void emit_Dependency_FromKeyword_2_1_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     'disjoining'?
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) 'disjoint' ownedRelatedElement+=OwnedFeatureChain
	 *     (rule start) (ambiguity) 'disjoint' typeDisjoined=[Type|QualifiedName]
	 
	 * </pre>
	 */
	protected void emit_Disjoining_DisjoiningKeyword_0_0_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     '~' | 'conjugates'
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) 'binding' (ambiguity) ownedRelationship+=FeatureConjugation
	 *     (rule start) 'bool' (ambiguity) ownedRelationship+=FeatureConjugation
	 *     (rule start) 'connector' (ambiguity) ownedRelationship+=FeatureConjugation
	 *     (rule start) 'expr' (ambiguity) ownedRelationship+=FeatureConjugation
	 *     (rule start) 'feature'? (ambiguity) ownedRelationship+=FeatureConjugation
	 *     (rule start) 'flow' (ambiguity) ownedRelationship+=FeatureConjugation
	 *     (rule start) 'inv' 'true'? (ambiguity) ownedRelationship+=FeatureConjugation
	 *     (rule start) 'step' (ambiguity) ownedRelationship+=FeatureConjugation
	 *     (rule start) 'succession' 'flow' (ambiguity) ownedRelationship+=FeatureConjugation
	 *     (rule start) 'succession' (ambiguity) ownedRelationship+=FeatureConjugation
	 *     declaredName=Name (ambiguity) ownedRelationship+=FeatureConjugation
	 *     declaredShortName=Name '&gt;' (ambiguity) ownedRelationship+=FeatureConjugation
	 *     direction=FeatureDirection 'binding' (ambiguity) ownedRelationship+=FeatureConjugation
	 *     direction=FeatureDirection 'bool' (ambiguity) ownedRelationship+=FeatureConjugation
	 *     direction=FeatureDirection 'connector' (ambiguity) ownedRelationship+=FeatureConjugation
	 *     direction=FeatureDirection 'expr' (ambiguity) ownedRelationship+=FeatureConjugation
	 *     direction=FeatureDirection 'feature'? (ambiguity) ownedRelationship+=FeatureConjugation
	 *     direction=FeatureDirection 'flow' (ambiguity) ownedRelationship+=FeatureConjugation
	 *     direction=FeatureDirection 'inv' 'true'? (ambiguity) ownedRelationship+=FeatureConjugation
	 *     direction=FeatureDirection 'step' (ambiguity) ownedRelationship+=FeatureConjugation
	 *     direction=FeatureDirection 'succession' 'flow' (ambiguity) ownedRelationship+=FeatureConjugation
	 *     direction=FeatureDirection 'succession' (ambiguity) ownedRelationship+=FeatureConjugation
	 *     isAbstract?='abstract' 'binding' (ambiguity) ownedRelationship+=FeatureConjugation
	 *     isAbstract?='abstract' 'bool' (ambiguity) ownedRelationship+=FeatureConjugation
	 *     isAbstract?='abstract' 'connector' (ambiguity) ownedRelationship+=FeatureConjugation
	 *     isAbstract?='abstract' 'expr' (ambiguity) ownedRelationship+=FeatureConjugation
	 *     isAbstract?='abstract' 'feature'? (ambiguity) ownedRelationship+=FeatureConjugation
	 *     isAbstract?='abstract' 'flow' (ambiguity) ownedRelationship+=FeatureConjugation
	 *     isAbstract?='abstract' 'inv' 'true'? (ambiguity) ownedRelationship+=FeatureConjugation
	 *     isAbstract?='abstract' 'step' (ambiguity) ownedRelationship+=FeatureConjugation
	 *     isAbstract?='abstract' 'succession' 'flow' (ambiguity) ownedRelationship+=FeatureConjugation
	 *     isAbstract?='abstract' 'succession' (ambiguity) ownedRelationship+=FeatureConjugation
	 *     isComposite?='composite' 'binding' (ambiguity) ownedRelationship+=FeatureConjugation
	 *     isComposite?='composite' 'bool' (ambiguity) ownedRelationship+=FeatureConjugation
	 *     isComposite?='composite' 'connector' (ambiguity) ownedRelationship+=FeatureConjugation
	 *     isComposite?='composite' 'expr' (ambiguity) ownedRelationship+=FeatureConjugation
	 *     isComposite?='composite' 'feature'? (ambiguity) ownedRelationship+=FeatureConjugation
	 *     isComposite?='composite' 'flow' (ambiguity) ownedRelationship+=FeatureConjugation
	 *     isComposite?='composite' 'inv' 'true'? (ambiguity) ownedRelationship+=FeatureConjugation
	 *     isComposite?='composite' 'step' (ambiguity) ownedRelationship+=FeatureConjugation
	 *     isComposite?='composite' 'succession' 'flow' (ambiguity) ownedRelationship+=FeatureConjugation
	 *     isComposite?='composite' 'succession' (ambiguity) ownedRelationship+=FeatureConjugation
	 *     isDerived?='derived' 'binding' (ambiguity) ownedRelationship+=FeatureConjugation
	 *     isDerived?='derived' 'bool' (ambiguity) ownedRelationship+=FeatureConjugation
	 *     isDerived?='derived' 'connector' (ambiguity) ownedRelationship+=FeatureConjugation
	 *     isDerived?='derived' 'expr' (ambiguity) ownedRelationship+=FeatureConjugation
	 *     isDerived?='derived' 'feature'? (ambiguity) ownedRelationship+=FeatureConjugation
	 *     isDerived?='derived' 'flow' (ambiguity) ownedRelationship+=FeatureConjugation
	 *     isDerived?='derived' 'inv' 'true'? (ambiguity) ownedRelationship+=FeatureConjugation
	 *     isDerived?='derived' 'step' (ambiguity) ownedRelationship+=FeatureConjugation
	 *     isDerived?='derived' 'succession' 'flow' (ambiguity) ownedRelationship+=FeatureConjugation
	 *     isDerived?='derived' 'succession' (ambiguity) ownedRelationship+=FeatureConjugation
	 *     isEnd?='end' 'binding' (ambiguity) ownedRelationship+=FeatureConjugation
	 *     isEnd?='end' 'bool' (ambiguity) ownedRelationship+=FeatureConjugation
	 *     isEnd?='end' 'connector' (ambiguity) ownedRelationship+=FeatureConjugation
	 *     isEnd?='end' 'expr' (ambiguity) ownedRelationship+=FeatureConjugation
	 *     isEnd?='end' 'feature'? (ambiguity) ownedRelationship+=FeatureConjugation
	 *     isEnd?='end' 'flow' (ambiguity) ownedRelationship+=FeatureConjugation
	 *     isEnd?='end' 'inv' 'true'? (ambiguity) ownedRelationship+=FeatureConjugation
	 *     isEnd?='end' 'step' (ambiguity) ownedRelationship+=FeatureConjugation
	 *     isEnd?='end' 'succession' 'flow' (ambiguity) ownedRelationship+=FeatureConjugation
	 *     isEnd?='end' 'succession' (ambiguity) ownedRelationship+=FeatureConjugation
	 *     isNegated?='false' (ambiguity) ownedRelationship+=FeatureConjugation
	 *     isPortion?='portion' 'binding' (ambiguity) ownedRelationship+=FeatureConjugation
	 *     isPortion?='portion' 'bool' (ambiguity) ownedRelationship+=FeatureConjugation
	 *     isPortion?='portion' 'connector' (ambiguity) ownedRelationship+=FeatureConjugation
	 *     isPortion?='portion' 'expr' (ambiguity) ownedRelationship+=FeatureConjugation
	 *     isPortion?='portion' 'feature'? (ambiguity) ownedRelationship+=FeatureConjugation
	 *     isPortion?='portion' 'flow' (ambiguity) ownedRelationship+=FeatureConjugation
	 *     isPortion?='portion' 'inv' 'true'? (ambiguity) ownedRelationship+=FeatureConjugation
	 *     isPortion?='portion' 'step' (ambiguity) ownedRelationship+=FeatureConjugation
	 *     isPortion?='portion' 'succession' 'flow' (ambiguity) ownedRelationship+=FeatureConjugation
	 *     isPortion?='portion' 'succession' (ambiguity) ownedRelationship+=FeatureConjugation
	 *     isReadOnly?='readonly' 'binding' (ambiguity) ownedRelationship+=FeatureConjugation
	 *     isReadOnly?='readonly' 'bool' (ambiguity) ownedRelationship+=FeatureConjugation
	 *     isReadOnly?='readonly' 'connector' (ambiguity) ownedRelationship+=FeatureConjugation
	 *     isReadOnly?='readonly' 'expr' (ambiguity) ownedRelationship+=FeatureConjugation
	 *     isReadOnly?='readonly' 'feature'? (ambiguity) ownedRelationship+=FeatureConjugation
	 *     isReadOnly?='readonly' 'flow' (ambiguity) ownedRelationship+=FeatureConjugation
	 *     isReadOnly?='readonly' 'inv' 'true'? (ambiguity) ownedRelationship+=FeatureConjugation
	 *     isReadOnly?='readonly' 'step' (ambiguity) ownedRelationship+=FeatureConjugation
	 *     isReadOnly?='readonly' 'succession' 'flow' (ambiguity) ownedRelationship+=FeatureConjugation
	 *     isReadOnly?='readonly' 'succession' (ambiguity) ownedRelationship+=FeatureConjugation
	 *     isSufficient?='all' (ambiguity) ownedRelationship+=FeatureConjugation
	 *     ownedRelationship+=PrefixMetadataMember 'binding' (ambiguity) ownedRelationship+=FeatureConjugation
	 *     ownedRelationship+=PrefixMetadataMember 'bool' (ambiguity) ownedRelationship+=FeatureConjugation
	 *     ownedRelationship+=PrefixMetadataMember 'connector' (ambiguity) ownedRelationship+=FeatureConjugation
	 *     ownedRelationship+=PrefixMetadataMember 'expr' (ambiguity) ownedRelationship+=FeatureConjugation
	 *     ownedRelationship+=PrefixMetadataMember 'feature'? (ambiguity) ownedRelationship+=FeatureConjugation
	 *     ownedRelationship+=PrefixMetadataMember 'flow' (ambiguity) ownedRelationship+=FeatureConjugation
	 *     ownedRelationship+=PrefixMetadataMember 'inv' 'true'? (ambiguity) ownedRelationship+=FeatureConjugation
	 *     ownedRelationship+=PrefixMetadataMember 'step' (ambiguity) ownedRelationship+=FeatureConjugation
	 *     ownedRelationship+=PrefixMetadataMember 'succession' 'flow' (ambiguity) ownedRelationship+=FeatureConjugation
	 *     ownedRelationship+=PrefixMetadataMember 'succession' (ambiguity) ownedRelationship+=FeatureConjugation
	 
	 * </pre>
	 */
	protected void emit_FeatureConjugationPart_ConjugatesKeyword_0_1_or_TildeKeyword_0_0(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     'inverting'?
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) 'inverse' featureInverted=[Feature|QualifiedName]
	 *     (rule start) (ambiguity) 'inverse' ownedRelatedElement+=OwnedFeatureChain
	 
	 * </pre>
	 */
	protected void emit_FeatureInverting_InvertingKeyword_0_0_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     ':' | ('typed' 'by')
	 *
	 * This ambiguous syntax occurs at:
	 *     typedFeature=[Feature|QualifiedName] (ambiguity) ownedRelatedElement+=OwnedFeatureChain
	 *     typedFeature=[Feature|QualifiedName] (ambiguity) type=[Type|QualifiedName]
	 
	 * </pre>
	 */
	protected void emit_FeatureTyping_ColonKeyword_3_0_or___TypedKeyword_3_1_0_ByKeyword_3_1_1__(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     'specialization'?
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) 'typing' typedFeature=[Feature|QualifiedName]
	 
	 * </pre>
	 */
	protected void emit_FeatureTyping_SpecializationKeyword_0_0_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     '='?
	 *
	 * This ambiguous syntax occurs at:
	 *     isDefault?='default' (ambiguity) ownedRelatedElement+=OwnedExpression
	 
	 * </pre>
	 */
	protected void emit_FeatureValue_EqualsSignKeyword_0_2_1_0_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     'feature'?
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) '&lt;' declaredShortName=Name
	 *     (rule start) (ambiguity) (':' | ('typed' 'by')) ownedRelationship+=OwnedFeatureTyping
	 *     (rule start) (ambiguity) (':&gt;' | 'subsets') ownedRelationship+=OwnedSubsetting
	 *     (rule start) (ambiguity) (':&gt;&gt;' | 'redefines') ownedRelationship+=OwnedRedefinition
	 *     (rule start) (ambiguity) ('~' | 'conjugates') ownedRelationship+=FeatureConjugation
	 *     (rule start) (ambiguity) ReferencesKeyword ownedRelationship+=OwnedReferenceSubsetting
	 *     (rule start) (ambiguity) declaredName=Name
	 *     (rule start) (ambiguity) isNonunique?='nonunique'
	 *     (rule start) (ambiguity) isOrdered?='ordered'
	 *     (rule start) (ambiguity) isSufficient?='all'
	 *     (rule start) (ambiguity) ownedRelationship+=OwnedMultiplicity
	 *     direction=FeatureDirection (ambiguity) '&lt;' declaredShortName=Name
	 *     direction=FeatureDirection (ambiguity) (':' | ('typed' 'by')) ownedRelationship+=OwnedFeatureTyping
	 *     direction=FeatureDirection (ambiguity) (':&gt;' | 'subsets') ownedRelationship+=OwnedSubsetting
	 *     direction=FeatureDirection (ambiguity) (':&gt;&gt;' | 'redefines') ownedRelationship+=OwnedRedefinition
	 *     direction=FeatureDirection (ambiguity) ('~' | 'conjugates') ownedRelationship+=FeatureConjugation
	 *     direction=FeatureDirection (ambiguity) ReferencesKeyword ownedRelationship+=OwnedReferenceSubsetting
	 *     direction=FeatureDirection (ambiguity) declaredName=Name
	 *     direction=FeatureDirection (ambiguity) isNonunique?='nonunique'
	 *     direction=FeatureDirection (ambiguity) isOrdered?='ordered'
	 *     direction=FeatureDirection (ambiguity) isSufficient?='all'
	 *     direction=FeatureDirection (ambiguity) ownedRelationship+=OwnedMultiplicity
	 *     isAbstract?='abstract' (ambiguity) '&lt;' declaredShortName=Name
	 *     isAbstract?='abstract' (ambiguity) (':' | ('typed' 'by')) ownedRelationship+=OwnedFeatureTyping
	 *     isAbstract?='abstract' (ambiguity) (':&gt;' | 'subsets') ownedRelationship+=OwnedSubsetting
	 *     isAbstract?='abstract' (ambiguity) (':&gt;&gt;' | 'redefines') ownedRelationship+=OwnedRedefinition
	 *     isAbstract?='abstract' (ambiguity) ('~' | 'conjugates') ownedRelationship+=FeatureConjugation
	 *     isAbstract?='abstract' (ambiguity) ReferencesKeyword ownedRelationship+=OwnedReferenceSubsetting
	 *     isAbstract?='abstract' (ambiguity) declaredName=Name
	 *     isAbstract?='abstract' (ambiguity) isNonunique?='nonunique'
	 *     isAbstract?='abstract' (ambiguity) isOrdered?='ordered'
	 *     isAbstract?='abstract' (ambiguity) isSufficient?='all'
	 *     isAbstract?='abstract' (ambiguity) ownedRelationship+=OwnedMultiplicity
	 *     isComposite?='composite' (ambiguity) '&lt;' declaredShortName=Name
	 *     isComposite?='composite' (ambiguity) (':' | ('typed' 'by')) ownedRelationship+=OwnedFeatureTyping
	 *     isComposite?='composite' (ambiguity) (':&gt;' | 'subsets') ownedRelationship+=OwnedSubsetting
	 *     isComposite?='composite' (ambiguity) (':&gt;&gt;' | 'redefines') ownedRelationship+=OwnedRedefinition
	 *     isComposite?='composite' (ambiguity) ('~' | 'conjugates') ownedRelationship+=FeatureConjugation
	 *     isComposite?='composite' (ambiguity) ReferencesKeyword ownedRelationship+=OwnedReferenceSubsetting
	 *     isComposite?='composite' (ambiguity) declaredName=Name
	 *     isComposite?='composite' (ambiguity) isNonunique?='nonunique'
	 *     isComposite?='composite' (ambiguity) isOrdered?='ordered'
	 *     isComposite?='composite' (ambiguity) isSufficient?='all'
	 *     isComposite?='composite' (ambiguity) ownedRelationship+=OwnedMultiplicity
	 *     isDerived?='derived' (ambiguity) '&lt;' declaredShortName=Name
	 *     isDerived?='derived' (ambiguity) (':' | ('typed' 'by')) ownedRelationship+=OwnedFeatureTyping
	 *     isDerived?='derived' (ambiguity) (':&gt;' | 'subsets') ownedRelationship+=OwnedSubsetting
	 *     isDerived?='derived' (ambiguity) (':&gt;&gt;' | 'redefines') ownedRelationship+=OwnedRedefinition
	 *     isDerived?='derived' (ambiguity) ('~' | 'conjugates') ownedRelationship+=FeatureConjugation
	 *     isDerived?='derived' (ambiguity) ReferencesKeyword ownedRelationship+=OwnedReferenceSubsetting
	 *     isDerived?='derived' (ambiguity) declaredName=Name
	 *     isDerived?='derived' (ambiguity) isNonunique?='nonunique'
	 *     isDerived?='derived' (ambiguity) isOrdered?='ordered'
	 *     isDerived?='derived' (ambiguity) isSufficient?='all'
	 *     isDerived?='derived' (ambiguity) ownedRelationship+=OwnedMultiplicity
	 *     isEnd?='end' (ambiguity) '&lt;' declaredShortName=Name
	 *     isEnd?='end' (ambiguity) (':' | ('typed' 'by')) ownedRelationship+=OwnedFeatureTyping
	 *     isEnd?='end' (ambiguity) (':&gt;' | 'subsets') ownedRelationship+=OwnedSubsetting
	 *     isEnd?='end' (ambiguity) (':&gt;&gt;' | 'redefines') ownedRelationship+=OwnedRedefinition
	 *     isEnd?='end' (ambiguity) ('~' | 'conjugates') ownedRelationship+=FeatureConjugation
	 *     isEnd?='end' (ambiguity) ReferencesKeyword ownedRelationship+=OwnedReferenceSubsetting
	 *     isEnd?='end' (ambiguity) declaredName=Name
	 *     isEnd?='end' (ambiguity) isNonunique?='nonunique'
	 *     isEnd?='end' (ambiguity) isOrdered?='ordered'
	 *     isEnd?='end' (ambiguity) isSufficient?='all'
	 *     isEnd?='end' (ambiguity) ownedRelationship+=OwnedMultiplicity
	 *     isPortion?='portion' (ambiguity) '&lt;' declaredShortName=Name
	 *     isPortion?='portion' (ambiguity) (':' | ('typed' 'by')) ownedRelationship+=OwnedFeatureTyping
	 *     isPortion?='portion' (ambiguity) (':&gt;' | 'subsets') ownedRelationship+=OwnedSubsetting
	 *     isPortion?='portion' (ambiguity) (':&gt;&gt;' | 'redefines') ownedRelationship+=OwnedRedefinition
	 *     isPortion?='portion' (ambiguity) ('~' | 'conjugates') ownedRelationship+=FeatureConjugation
	 *     isPortion?='portion' (ambiguity) ReferencesKeyword ownedRelationship+=OwnedReferenceSubsetting
	 *     isPortion?='portion' (ambiguity) declaredName=Name
	 *     isPortion?='portion' (ambiguity) isNonunique?='nonunique'
	 *     isPortion?='portion' (ambiguity) isOrdered?='ordered'
	 *     isPortion?='portion' (ambiguity) isSufficient?='all'
	 *     isPortion?='portion' (ambiguity) ownedRelationship+=OwnedMultiplicity
	 *     isReadOnly?='readonly' (ambiguity) '&lt;' declaredShortName=Name
	 *     isReadOnly?='readonly' (ambiguity) (':' | ('typed' 'by')) ownedRelationship+=OwnedFeatureTyping
	 *     isReadOnly?='readonly' (ambiguity) (':&gt;' | 'subsets') ownedRelationship+=OwnedSubsetting
	 *     isReadOnly?='readonly' (ambiguity) (':&gt;&gt;' | 'redefines') ownedRelationship+=OwnedRedefinition
	 *     isReadOnly?='readonly' (ambiguity) ('~' | 'conjugates') ownedRelationship+=FeatureConjugation
	 *     isReadOnly?='readonly' (ambiguity) ReferencesKeyword ownedRelationship+=OwnedReferenceSubsetting
	 *     isReadOnly?='readonly' (ambiguity) declaredName=Name
	 *     isReadOnly?='readonly' (ambiguity) isNonunique?='nonunique'
	 *     isReadOnly?='readonly' (ambiguity) isOrdered?='ordered'
	 *     isReadOnly?='readonly' (ambiguity) isSufficient?='all'
	 *     isReadOnly?='readonly' (ambiguity) ownedRelationship+=OwnedMultiplicity
	 *     ownedRelationship+=PrefixMetadataMember (ambiguity) '&lt;' declaredShortName=Name
	 *     ownedRelationship+=PrefixMetadataMember (ambiguity) (':' | ('typed' 'by')) ownedRelationship+=OwnedFeatureTyping
	 *     ownedRelationship+=PrefixMetadataMember (ambiguity) (':&gt;' | 'subsets') ownedRelationship+=OwnedSubsetting
	 *     ownedRelationship+=PrefixMetadataMember (ambiguity) (':&gt;&gt;' | 'redefines') ownedRelationship+=OwnedRedefinition
	 *     ownedRelationship+=PrefixMetadataMember (ambiguity) ('~' | 'conjugates') ownedRelationship+=FeatureConjugation
	 *     ownedRelationship+=PrefixMetadataMember (ambiguity) ReferencesKeyword ownedRelationship+=OwnedReferenceSubsetting
	 *     ownedRelationship+=PrefixMetadataMember (ambiguity) declaredName=Name
	 *     ownedRelationship+=PrefixMetadataMember (ambiguity) isNonunique?='nonunique'
	 *     ownedRelationship+=PrefixMetadataMember (ambiguity) isOrdered?='ordered'
	 *     ownedRelationship+=PrefixMetadataMember (ambiguity) isSufficient?='all'
	 *     ownedRelationship+=PrefixMetadataMember (ambiguity) ownedRelationship+=OwnedMultiplicity
	 
	 * </pre>
	 */
	protected void emit_Feature_FeatureKeyword_1_0_0_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     'true'?
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) 'inv' (ambiguity) ';' (rule start)
	 *     (rule start) 'inv' (ambiguity) '&lt;' declaredShortName=Name
	 *     (rule start) 'inv' (ambiguity) '{' ownedRelationship+=AliasMember
	 *     (rule start) 'inv' (ambiguity) '{' ownedRelationship+=FeatureMember
	 *     (rule start) 'inv' (ambiguity) '{' ownedRelationship+=Import
	 *     (rule start) 'inv' (ambiguity) '{' ownedRelationship+=NonFeatureMember
	 *     (rule start) 'inv' (ambiguity) '{' ownedRelationship+=ResultExpressionMember
	 *     (rule start) 'inv' (ambiguity) '{' ownedRelationship+=ReturnFeatureMember
	 *     (rule start) 'inv' (ambiguity) (':' | ('typed' 'by')) ownedRelationship+=OwnedFeatureTyping
	 *     (rule start) 'inv' (ambiguity) (':&gt;' | 'subsets') ownedRelationship+=OwnedSubsetting
	 *     (rule start) 'inv' (ambiguity) (':&gt;&gt;' | 'redefines') ownedRelationship+=OwnedRedefinition
	 *     (rule start) 'inv' (ambiguity) ('~' | 'conjugates') ownedRelationship+=FeatureConjugation
	 *     (rule start) 'inv' (ambiguity) ReferencesKeyword ownedRelationship+=OwnedReferenceSubsetting
	 *     (rule start) 'inv' (ambiguity) declaredName=Name
	 *     (rule start) 'inv' (ambiguity) isNonunique?='nonunique'
	 *     (rule start) 'inv' (ambiguity) isOrdered?='ordered'
	 *     (rule start) 'inv' (ambiguity) isSufficient?='all'
	 *     (rule start) 'inv' (ambiguity) ownedRelationship+=FeatureValue
	 *     (rule start) 'inv' (ambiguity) ownedRelationship+=OwnedMultiplicity
	 *     direction=FeatureDirection 'inv' (ambiguity) ';' (rule end)
	 *     direction=FeatureDirection 'inv' (ambiguity) '&lt;' declaredShortName=Name
	 *     direction=FeatureDirection 'inv' (ambiguity) '{' ownedRelationship+=AliasMember
	 *     direction=FeatureDirection 'inv' (ambiguity) '{' ownedRelationship+=FeatureMember
	 *     direction=FeatureDirection 'inv' (ambiguity) '{' ownedRelationship+=Import
	 *     direction=FeatureDirection 'inv' (ambiguity) '{' ownedRelationship+=NonFeatureMember
	 *     direction=FeatureDirection 'inv' (ambiguity) '{' ownedRelationship+=ResultExpressionMember
	 *     direction=FeatureDirection 'inv' (ambiguity) '{' ownedRelationship+=ReturnFeatureMember
	 *     direction=FeatureDirection 'inv' (ambiguity) (':' | ('typed' 'by')) ownedRelationship+=OwnedFeatureTyping
	 *     direction=FeatureDirection 'inv' (ambiguity) (':&gt;' | 'subsets') ownedRelationship+=OwnedSubsetting
	 *     direction=FeatureDirection 'inv' (ambiguity) (':&gt;&gt;' | 'redefines') ownedRelationship+=OwnedRedefinition
	 *     direction=FeatureDirection 'inv' (ambiguity) ('~' | 'conjugates') ownedRelationship+=FeatureConjugation
	 *     direction=FeatureDirection 'inv' (ambiguity) ReferencesKeyword ownedRelationship+=OwnedReferenceSubsetting
	 *     direction=FeatureDirection 'inv' (ambiguity) declaredName=Name
	 *     direction=FeatureDirection 'inv' (ambiguity) isNonunique?='nonunique'
	 *     direction=FeatureDirection 'inv' (ambiguity) isOrdered?='ordered'
	 *     direction=FeatureDirection 'inv' (ambiguity) isSufficient?='all'
	 *     direction=FeatureDirection 'inv' (ambiguity) ownedRelationship+=FeatureValue
	 *     direction=FeatureDirection 'inv' (ambiguity) ownedRelationship+=OwnedMultiplicity
	 *     isAbstract?='abstract' 'inv' (ambiguity) ';' (rule end)
	 *     isAbstract?='abstract' 'inv' (ambiguity) '&lt;' declaredShortName=Name
	 *     isAbstract?='abstract' 'inv' (ambiguity) '{' ownedRelationship+=AliasMember
	 *     isAbstract?='abstract' 'inv' (ambiguity) '{' ownedRelationship+=FeatureMember
	 *     isAbstract?='abstract' 'inv' (ambiguity) '{' ownedRelationship+=Import
	 *     isAbstract?='abstract' 'inv' (ambiguity) '{' ownedRelationship+=NonFeatureMember
	 *     isAbstract?='abstract' 'inv' (ambiguity) '{' ownedRelationship+=ResultExpressionMember
	 *     isAbstract?='abstract' 'inv' (ambiguity) '{' ownedRelationship+=ReturnFeatureMember
	 *     isAbstract?='abstract' 'inv' (ambiguity) (':' | ('typed' 'by')) ownedRelationship+=OwnedFeatureTyping
	 *     isAbstract?='abstract' 'inv' (ambiguity) (':&gt;' | 'subsets') ownedRelationship+=OwnedSubsetting
	 *     isAbstract?='abstract' 'inv' (ambiguity) (':&gt;&gt;' | 'redefines') ownedRelationship+=OwnedRedefinition
	 *     isAbstract?='abstract' 'inv' (ambiguity) ('~' | 'conjugates') ownedRelationship+=FeatureConjugation
	 *     isAbstract?='abstract' 'inv' (ambiguity) ReferencesKeyword ownedRelationship+=OwnedReferenceSubsetting
	 *     isAbstract?='abstract' 'inv' (ambiguity) declaredName=Name
	 *     isAbstract?='abstract' 'inv' (ambiguity) isNonunique?='nonunique'
	 *     isAbstract?='abstract' 'inv' (ambiguity) isOrdered?='ordered'
	 *     isAbstract?='abstract' 'inv' (ambiguity) isSufficient?='all'
	 *     isAbstract?='abstract' 'inv' (ambiguity) ownedRelationship+=FeatureValue
	 *     isAbstract?='abstract' 'inv' (ambiguity) ownedRelationship+=OwnedMultiplicity
	 *     isComposite?='composite' 'inv' (ambiguity) ';' (rule end)
	 *     isComposite?='composite' 'inv' (ambiguity) '&lt;' declaredShortName=Name
	 *     isComposite?='composite' 'inv' (ambiguity) '{' ownedRelationship+=AliasMember
	 *     isComposite?='composite' 'inv' (ambiguity) '{' ownedRelationship+=FeatureMember
	 *     isComposite?='composite' 'inv' (ambiguity) '{' ownedRelationship+=Import
	 *     isComposite?='composite' 'inv' (ambiguity) '{' ownedRelationship+=NonFeatureMember
	 *     isComposite?='composite' 'inv' (ambiguity) '{' ownedRelationship+=ResultExpressionMember
	 *     isComposite?='composite' 'inv' (ambiguity) '{' ownedRelationship+=ReturnFeatureMember
	 *     isComposite?='composite' 'inv' (ambiguity) (':' | ('typed' 'by')) ownedRelationship+=OwnedFeatureTyping
	 *     isComposite?='composite' 'inv' (ambiguity) (':&gt;' | 'subsets') ownedRelationship+=OwnedSubsetting
	 *     isComposite?='composite' 'inv' (ambiguity) (':&gt;&gt;' | 'redefines') ownedRelationship+=OwnedRedefinition
	 *     isComposite?='composite' 'inv' (ambiguity) ('~' | 'conjugates') ownedRelationship+=FeatureConjugation
	 *     isComposite?='composite' 'inv' (ambiguity) ReferencesKeyword ownedRelationship+=OwnedReferenceSubsetting
	 *     isComposite?='composite' 'inv' (ambiguity) declaredName=Name
	 *     isComposite?='composite' 'inv' (ambiguity) isNonunique?='nonunique'
	 *     isComposite?='composite' 'inv' (ambiguity) isOrdered?='ordered'
	 *     isComposite?='composite' 'inv' (ambiguity) isSufficient?='all'
	 *     isComposite?='composite' 'inv' (ambiguity) ownedRelationship+=FeatureValue
	 *     isComposite?='composite' 'inv' (ambiguity) ownedRelationship+=OwnedMultiplicity
	 *     isDerived?='derived' 'inv' (ambiguity) ';' (rule end)
	 *     isDerived?='derived' 'inv' (ambiguity) '&lt;' declaredShortName=Name
	 *     isDerived?='derived' 'inv' (ambiguity) '{' ownedRelationship+=AliasMember
	 *     isDerived?='derived' 'inv' (ambiguity) '{' ownedRelationship+=FeatureMember
	 *     isDerived?='derived' 'inv' (ambiguity) '{' ownedRelationship+=Import
	 *     isDerived?='derived' 'inv' (ambiguity) '{' ownedRelationship+=NonFeatureMember
	 *     isDerived?='derived' 'inv' (ambiguity) '{' ownedRelationship+=ResultExpressionMember
	 *     isDerived?='derived' 'inv' (ambiguity) '{' ownedRelationship+=ReturnFeatureMember
	 *     isDerived?='derived' 'inv' (ambiguity) (':' | ('typed' 'by')) ownedRelationship+=OwnedFeatureTyping
	 *     isDerived?='derived' 'inv' (ambiguity) (':&gt;' | 'subsets') ownedRelationship+=OwnedSubsetting
	 *     isDerived?='derived' 'inv' (ambiguity) (':&gt;&gt;' | 'redefines') ownedRelationship+=OwnedRedefinition
	 *     isDerived?='derived' 'inv' (ambiguity) ('~' | 'conjugates') ownedRelationship+=FeatureConjugation
	 *     isDerived?='derived' 'inv' (ambiguity) ReferencesKeyword ownedRelationship+=OwnedReferenceSubsetting
	 *     isDerived?='derived' 'inv' (ambiguity) declaredName=Name
	 *     isDerived?='derived' 'inv' (ambiguity) isNonunique?='nonunique'
	 *     isDerived?='derived' 'inv' (ambiguity) isOrdered?='ordered'
	 *     isDerived?='derived' 'inv' (ambiguity) isSufficient?='all'
	 *     isDerived?='derived' 'inv' (ambiguity) ownedRelationship+=FeatureValue
	 *     isDerived?='derived' 'inv' (ambiguity) ownedRelationship+=OwnedMultiplicity
	 *     isEnd?='end' 'inv' (ambiguity) ';' (rule end)
	 *     isEnd?='end' 'inv' (ambiguity) '&lt;' declaredShortName=Name
	 *     isEnd?='end' 'inv' (ambiguity) '{' ownedRelationship+=AliasMember
	 *     isEnd?='end' 'inv' (ambiguity) '{' ownedRelationship+=FeatureMember
	 *     isEnd?='end' 'inv' (ambiguity) '{' ownedRelationship+=Import
	 *     isEnd?='end' 'inv' (ambiguity) '{' ownedRelationship+=NonFeatureMember
	 *     isEnd?='end' 'inv' (ambiguity) '{' ownedRelationship+=ResultExpressionMember
	 *     isEnd?='end' 'inv' (ambiguity) '{' ownedRelationship+=ReturnFeatureMember
	 *     isEnd?='end' 'inv' (ambiguity) (':' | ('typed' 'by')) ownedRelationship+=OwnedFeatureTyping
	 *     isEnd?='end' 'inv' (ambiguity) (':&gt;' | 'subsets') ownedRelationship+=OwnedSubsetting
	 *     isEnd?='end' 'inv' (ambiguity) (':&gt;&gt;' | 'redefines') ownedRelationship+=OwnedRedefinition
	 *     isEnd?='end' 'inv' (ambiguity) ('~' | 'conjugates') ownedRelationship+=FeatureConjugation
	 *     isEnd?='end' 'inv' (ambiguity) ReferencesKeyword ownedRelationship+=OwnedReferenceSubsetting
	 *     isEnd?='end' 'inv' (ambiguity) declaredName=Name
	 *     isEnd?='end' 'inv' (ambiguity) isNonunique?='nonunique'
	 *     isEnd?='end' 'inv' (ambiguity) isOrdered?='ordered'
	 *     isEnd?='end' 'inv' (ambiguity) isSufficient?='all'
	 *     isEnd?='end' 'inv' (ambiguity) ownedRelationship+=FeatureValue
	 *     isEnd?='end' 'inv' (ambiguity) ownedRelationship+=OwnedMultiplicity
	 *     isPortion?='portion' 'inv' (ambiguity) ';' (rule end)
	 *     isPortion?='portion' 'inv' (ambiguity) '&lt;' declaredShortName=Name
	 *     isPortion?='portion' 'inv' (ambiguity) '{' ownedRelationship+=AliasMember
	 *     isPortion?='portion' 'inv' (ambiguity) '{' ownedRelationship+=FeatureMember
	 *     isPortion?='portion' 'inv' (ambiguity) '{' ownedRelationship+=Import
	 *     isPortion?='portion' 'inv' (ambiguity) '{' ownedRelationship+=NonFeatureMember
	 *     isPortion?='portion' 'inv' (ambiguity) '{' ownedRelationship+=ResultExpressionMember
	 *     isPortion?='portion' 'inv' (ambiguity) '{' ownedRelationship+=ReturnFeatureMember
	 *     isPortion?='portion' 'inv' (ambiguity) (':' | ('typed' 'by')) ownedRelationship+=OwnedFeatureTyping
	 *     isPortion?='portion' 'inv' (ambiguity) (':&gt;' | 'subsets') ownedRelationship+=OwnedSubsetting
	 *     isPortion?='portion' 'inv' (ambiguity) (':&gt;&gt;' | 'redefines') ownedRelationship+=OwnedRedefinition
	 *     isPortion?='portion' 'inv' (ambiguity) ('~' | 'conjugates') ownedRelationship+=FeatureConjugation
	 *     isPortion?='portion' 'inv' (ambiguity) ReferencesKeyword ownedRelationship+=OwnedReferenceSubsetting
	 *     isPortion?='portion' 'inv' (ambiguity) declaredName=Name
	 *     isPortion?='portion' 'inv' (ambiguity) isNonunique?='nonunique'
	 *     isPortion?='portion' 'inv' (ambiguity) isOrdered?='ordered'
	 *     isPortion?='portion' 'inv' (ambiguity) isSufficient?='all'
	 *     isPortion?='portion' 'inv' (ambiguity) ownedRelationship+=FeatureValue
	 *     isPortion?='portion' 'inv' (ambiguity) ownedRelationship+=OwnedMultiplicity
	 *     isReadOnly?='readonly' 'inv' (ambiguity) ';' (rule end)
	 *     isReadOnly?='readonly' 'inv' (ambiguity) '&lt;' declaredShortName=Name
	 *     isReadOnly?='readonly' 'inv' (ambiguity) '{' ownedRelationship+=AliasMember
	 *     isReadOnly?='readonly' 'inv' (ambiguity) '{' ownedRelationship+=FeatureMember
	 *     isReadOnly?='readonly' 'inv' (ambiguity) '{' ownedRelationship+=Import
	 *     isReadOnly?='readonly' 'inv' (ambiguity) '{' ownedRelationship+=NonFeatureMember
	 *     isReadOnly?='readonly' 'inv' (ambiguity) '{' ownedRelationship+=ResultExpressionMember
	 *     isReadOnly?='readonly' 'inv' (ambiguity) '{' ownedRelationship+=ReturnFeatureMember
	 *     isReadOnly?='readonly' 'inv' (ambiguity) (':' | ('typed' 'by')) ownedRelationship+=OwnedFeatureTyping
	 *     isReadOnly?='readonly' 'inv' (ambiguity) (':&gt;' | 'subsets') ownedRelationship+=OwnedSubsetting
	 *     isReadOnly?='readonly' 'inv' (ambiguity) (':&gt;&gt;' | 'redefines') ownedRelationship+=OwnedRedefinition
	 *     isReadOnly?='readonly' 'inv' (ambiguity) ('~' | 'conjugates') ownedRelationship+=FeatureConjugation
	 *     isReadOnly?='readonly' 'inv' (ambiguity) ReferencesKeyword ownedRelationship+=OwnedReferenceSubsetting
	 *     isReadOnly?='readonly' 'inv' (ambiguity) declaredName=Name
	 *     isReadOnly?='readonly' 'inv' (ambiguity) isNonunique?='nonunique'
	 *     isReadOnly?='readonly' 'inv' (ambiguity) isOrdered?='ordered'
	 *     isReadOnly?='readonly' 'inv' (ambiguity) isSufficient?='all'
	 *     isReadOnly?='readonly' 'inv' (ambiguity) ownedRelationship+=FeatureValue
	 *     isReadOnly?='readonly' 'inv' (ambiguity) ownedRelationship+=OwnedMultiplicity
	 *     ownedRelationship+=PrefixMetadataMember 'inv' (ambiguity) ';' (rule end)
	 *     ownedRelationship+=PrefixMetadataMember 'inv' (ambiguity) '&lt;' declaredShortName=Name
	 *     ownedRelationship+=PrefixMetadataMember 'inv' (ambiguity) '{' ownedRelationship+=AliasMember
	 *     ownedRelationship+=PrefixMetadataMember 'inv' (ambiguity) '{' ownedRelationship+=FeatureMember
	 *     ownedRelationship+=PrefixMetadataMember 'inv' (ambiguity) '{' ownedRelationship+=Import
	 *     ownedRelationship+=PrefixMetadataMember 'inv' (ambiguity) '{' ownedRelationship+=NonFeatureMember
	 *     ownedRelationship+=PrefixMetadataMember 'inv' (ambiguity) '{' ownedRelationship+=ResultExpressionMember
	 *     ownedRelationship+=PrefixMetadataMember 'inv' (ambiguity) '{' ownedRelationship+=ReturnFeatureMember
	 *     ownedRelationship+=PrefixMetadataMember 'inv' (ambiguity) (':' | ('typed' 'by')) ownedRelationship+=OwnedFeatureTyping
	 *     ownedRelationship+=PrefixMetadataMember 'inv' (ambiguity) (':&gt;' | 'subsets') ownedRelationship+=OwnedSubsetting
	 *     ownedRelationship+=PrefixMetadataMember 'inv' (ambiguity) (':&gt;&gt;' | 'redefines') ownedRelationship+=OwnedRedefinition
	 *     ownedRelationship+=PrefixMetadataMember 'inv' (ambiguity) ('~' | 'conjugates') ownedRelationship+=FeatureConjugation
	 *     ownedRelationship+=PrefixMetadataMember 'inv' (ambiguity) ReferencesKeyword ownedRelationship+=OwnedReferenceSubsetting
	 *     ownedRelationship+=PrefixMetadataMember 'inv' (ambiguity) declaredName=Name
	 *     ownedRelationship+=PrefixMetadataMember 'inv' (ambiguity) isNonunique?='nonunique'
	 *     ownedRelationship+=PrefixMetadataMember 'inv' (ambiguity) isOrdered?='ordered'
	 *     ownedRelationship+=PrefixMetadataMember 'inv' (ambiguity) isSufficient?='all'
	 *     ownedRelationship+=PrefixMetadataMember 'inv' (ambiguity) ownedRelationship+=FeatureValue
	 *     ownedRelationship+=PrefixMetadataMember 'inv' (ambiguity) ownedRelationship+=OwnedMultiplicity
	 
	 * </pre>
	 */
	protected void emit_Invariant_TrueKeyword_2_0_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     'feature'?
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) (':&gt;&gt;' | 'redefines')? ownedRelationship+=OwnedRedefinition
	 
	 * </pre>
	 */
	protected void emit_MetadataBodyFeature_FeatureKeyword_0_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     (':&gt;&gt;' | 'redefines')?
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) 'feature'? (ambiguity) ownedRelationship+=OwnedRedefinition
	 
	 * </pre>
	 */
	protected void emit_MetadataBodyFeature___ColonGreaterThanSignGreaterThanSignKeyword_1_0_or_RedefinesKeyword_1_1__q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     ';' | ('{' '}')
	 *
	 * This ambiguous syntax occurs at:
	 *     isNonunique?='nonunique' (ambiguity) (rule end)
	 *     isOrdered?='ordered' (ambiguity) (rule end)
	 *     ownedRelationship+=Annotation (ambiguity) (rule end)
	 *     ownedRelationship+=FeatureValue (ambiguity) (rule end)
	 *     ownedRelationship+=MetadataTyping (ambiguity) (rule end)
	 *     ownedRelationship+=OwnedFeatureTyping (ambiguity) (rule end)
	 *     ownedRelationship+=OwnedMultiplicity (ambiguity) (rule end)
	 *     ownedRelationship+=OwnedRedefinition (ambiguity) (rule end)
	 *     ownedRelationship+=OwnedReferenceSubsetting (ambiguity) (rule end)
	 *     ownedRelationship+=OwnedSubsetting (ambiguity) (rule end)
	 
	 * </pre>
	 */
	protected void emit_MetadataBody_SemicolonKeyword_0_or___LeftCurlyBracketKeyword_1_0_RightCurlyBracketKeyword_1_2__(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     ':' | ('typed' 'by')
	 *
	 * This ambiguous syntax occurs at:
	 *     declaredName=Name (ambiguity) ownedRelationship+=MetadataTyping
	 *     declaredShortName=Name '&gt;' (ambiguity) ownedRelationship+=MetadataTyping
	 
	 * </pre>
	 */
	protected void emit_MetadataFeatureDeclaration_ColonKeyword_0_1_0_or___TypedKeyword_0_1_1_0_ByKeyword_0_1_1_1__(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     '@' | 'metadata'
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) '&lt;' declaredShortName=Name
	 *     (rule start) (ambiguity) declaredName=Name
	 *     (rule start) (ambiguity) ownedRelationship+=MetadataTyping
	 *     ownedRelationship+=PrefixMetadataMember (ambiguity) '&lt;' declaredShortName=Name
	 *     ownedRelationship+=PrefixMetadataMember (ambiguity) declaredName=Name
	 *     ownedRelationship+=PrefixMetadataMember (ambiguity) ownedRelationship+=MetadataTyping
	 
	 * </pre>
	 */
	protected void emit_MetadataFeature_CommercialAtKeyword_1_0_or_MetadataKeyword_1_1(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     ';' | ('{' '}')
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) 'namespace' (ambiguity) (rule start)
	 *     declaredName=Name (ambiguity) (rule end)
	 *     declaredShortName=Name '&gt;' (ambiguity) (rule end)
	 *     ownedRelationship+=PrefixMetadataMember 'namespace' (ambiguity) (rule end)
	 
	 * </pre>
	 */
	protected void emit_NamespaceBody_SemicolonKeyword_0_or___LeftCurlyBracketKeyword_1_0_RightCurlyBracketKeyword_1_2__(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     'null' | ('(' ')')
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) '('* (ambiguity) (rule start)
	 *     (rule start) (ambiguity) (rule start)
	 
	 * </pre>
	 */
	protected void emit_NullExpression_NullKeyword_1_0_or___LeftParenthesisKeyword_1_1_0_RightParenthesisKeyword_1_1_1__(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     ';' | ('{' '}')
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) 'library' 'package' (ambiguity) (rule start)
	 *     (rule start) 'package' (ambiguity) (rule start)
	 *     declaredName=Name (ambiguity) (rule end)
	 *     declaredShortName=Name '&gt;' (ambiguity) (rule end)
	 *     isStandard?='standard' 'library' 'package' (ambiguity) (rule end)
	 *     ownedRelationship+=PrefixMetadataMember 'package' (ambiguity) (rule end)
	 
	 * </pre>
	 */
	protected void emit_PackageBody_SemicolonKeyword_0_or___LeftCurlyBracketKeyword_1_0_RightCurlyBracketKeyword_1_2__(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     ':&gt;&gt;' | 'redefines'
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) 'binding' (ambiguity) ownedRelationship+=OwnedRedefinition
	 *     (rule start) 'bool' (ambiguity) ownedRelationship+=OwnedRedefinition
	 *     (rule start) 'connector' (ambiguity) ownedRelationship+=OwnedRedefinition
	 *     (rule start) 'expr' (ambiguity) ownedRelationship+=OwnedRedefinition
	 *     (rule start) 'feature'? (ambiguity) ownedRelationship+=OwnedRedefinition
	 *     (rule start) 'flow' (ambiguity) ownedRelationship+=OwnedRedefinition
	 *     (rule start) 'inv' 'true'? (ambiguity) ownedRelationship+=OwnedRedefinition
	 *     (rule start) 'step' (ambiguity) ownedRelationship+=OwnedRedefinition
	 *     (rule start) 'succession' 'flow' (ambiguity) ownedRelationship+=OwnedRedefinition
	 *     (rule start) 'succession' (ambiguity) ownedRelationship+=OwnedRedefinition
	 *     (rule start) (ambiguity) ownedRelationship+=OwnedRedefinition
	 *     declaredName=Name (ambiguity) ownedRelationship+=OwnedRedefinition
	 *     declaredShortName=Name '&gt;' (ambiguity) ownedRelationship+=OwnedRedefinition
	 *     direction=FeatureDirection 'binding' (ambiguity) ownedRelationship+=OwnedRedefinition
	 *     direction=FeatureDirection 'bool' (ambiguity) ownedRelationship+=OwnedRedefinition
	 *     direction=FeatureDirection 'connector' (ambiguity) ownedRelationship+=OwnedRedefinition
	 *     direction=FeatureDirection 'expr' (ambiguity) ownedRelationship+=OwnedRedefinition
	 *     direction=FeatureDirection 'feature'? (ambiguity) ownedRelationship+=OwnedRedefinition
	 *     direction=FeatureDirection 'flow' (ambiguity) ownedRelationship+=OwnedRedefinition
	 *     direction=FeatureDirection 'inv' 'true'? (ambiguity) ownedRelationship+=OwnedRedefinition
	 *     direction=FeatureDirection 'step' (ambiguity) ownedRelationship+=OwnedRedefinition
	 *     direction=FeatureDirection 'succession' 'flow' (ambiguity) ownedRelationship+=OwnedRedefinition
	 *     direction=FeatureDirection 'succession' (ambiguity) ownedRelationship+=OwnedRedefinition
	 *     isAbstract?='abstract' 'binding' (ambiguity) ownedRelationship+=OwnedRedefinition
	 *     isAbstract?='abstract' 'bool' (ambiguity) ownedRelationship+=OwnedRedefinition
	 *     isAbstract?='abstract' 'connector' (ambiguity) ownedRelationship+=OwnedRedefinition
	 *     isAbstract?='abstract' 'expr' (ambiguity) ownedRelationship+=OwnedRedefinition
	 *     isAbstract?='abstract' 'feature'? (ambiguity) ownedRelationship+=OwnedRedefinition
	 *     isAbstract?='abstract' 'flow' (ambiguity) ownedRelationship+=OwnedRedefinition
	 *     isAbstract?='abstract' 'inv' 'true'? (ambiguity) ownedRelationship+=OwnedRedefinition
	 *     isAbstract?='abstract' 'step' (ambiguity) ownedRelationship+=OwnedRedefinition
	 *     isAbstract?='abstract' 'succession' 'flow' (ambiguity) ownedRelationship+=OwnedRedefinition
	 *     isAbstract?='abstract' 'succession' (ambiguity) ownedRelationship+=OwnedRedefinition
	 *     isComposite?='composite' 'binding' (ambiguity) ownedRelationship+=OwnedRedefinition
	 *     isComposite?='composite' 'bool' (ambiguity) ownedRelationship+=OwnedRedefinition
	 *     isComposite?='composite' 'connector' (ambiguity) ownedRelationship+=OwnedRedefinition
	 *     isComposite?='composite' 'expr' (ambiguity) ownedRelationship+=OwnedRedefinition
	 *     isComposite?='composite' 'feature'? (ambiguity) ownedRelationship+=OwnedRedefinition
	 *     isComposite?='composite' 'flow' (ambiguity) ownedRelationship+=OwnedRedefinition
	 *     isComposite?='composite' 'inv' 'true'? (ambiguity) ownedRelationship+=OwnedRedefinition
	 *     isComposite?='composite' 'step' (ambiguity) ownedRelationship+=OwnedRedefinition
	 *     isComposite?='composite' 'succession' 'flow' (ambiguity) ownedRelationship+=OwnedRedefinition
	 *     isComposite?='composite' 'succession' (ambiguity) ownedRelationship+=OwnedRedefinition
	 *     isDerived?='derived' 'binding' (ambiguity) ownedRelationship+=OwnedRedefinition
	 *     isDerived?='derived' 'bool' (ambiguity) ownedRelationship+=OwnedRedefinition
	 *     isDerived?='derived' 'connector' (ambiguity) ownedRelationship+=OwnedRedefinition
	 *     isDerived?='derived' 'expr' (ambiguity) ownedRelationship+=OwnedRedefinition
	 *     isDerived?='derived' 'feature'? (ambiguity) ownedRelationship+=OwnedRedefinition
	 *     isDerived?='derived' 'flow' (ambiguity) ownedRelationship+=OwnedRedefinition
	 *     isDerived?='derived' 'inv' 'true'? (ambiguity) ownedRelationship+=OwnedRedefinition
	 *     isDerived?='derived' 'step' (ambiguity) ownedRelationship+=OwnedRedefinition
	 *     isDerived?='derived' 'succession' 'flow' (ambiguity) ownedRelationship+=OwnedRedefinition
	 *     isDerived?='derived' 'succession' (ambiguity) ownedRelationship+=OwnedRedefinition
	 *     isEnd?='end' 'binding' (ambiguity) ownedRelationship+=OwnedRedefinition
	 *     isEnd?='end' 'bool' (ambiguity) ownedRelationship+=OwnedRedefinition
	 *     isEnd?='end' 'connector' (ambiguity) ownedRelationship+=OwnedRedefinition
	 *     isEnd?='end' 'expr' (ambiguity) ownedRelationship+=OwnedRedefinition
	 *     isEnd?='end' 'feature'? (ambiguity) ownedRelationship+=OwnedRedefinition
	 *     isEnd?='end' 'flow' (ambiguity) ownedRelationship+=OwnedRedefinition
	 *     isEnd?='end' 'inv' 'true'? (ambiguity) ownedRelationship+=OwnedRedefinition
	 *     isEnd?='end' 'step' (ambiguity) ownedRelationship+=OwnedRedefinition
	 *     isEnd?='end' 'succession' 'flow' (ambiguity) ownedRelationship+=OwnedRedefinition
	 *     isEnd?='end' 'succession' (ambiguity) ownedRelationship+=OwnedRedefinition
	 *     isNegated?='false' (ambiguity) ownedRelationship+=OwnedRedefinition
	 *     isNonunique?='nonunique' (ambiguity) ownedRelationship+=OwnedRedefinition
	 *     isOrdered?='ordered' (ambiguity) ownedRelationship+=OwnedRedefinition
	 *     isPortion?='portion' 'binding' (ambiguity) ownedRelationship+=OwnedRedefinition
	 *     isPortion?='portion' 'bool' (ambiguity) ownedRelationship+=OwnedRedefinition
	 *     isPortion?='portion' 'connector' (ambiguity) ownedRelationship+=OwnedRedefinition
	 *     isPortion?='portion' 'expr' (ambiguity) ownedRelationship+=OwnedRedefinition
	 *     isPortion?='portion' 'feature'? (ambiguity) ownedRelationship+=OwnedRedefinition
	 *     isPortion?='portion' 'flow' (ambiguity) ownedRelationship+=OwnedRedefinition
	 *     isPortion?='portion' 'inv' 'true'? (ambiguity) ownedRelationship+=OwnedRedefinition
	 *     isPortion?='portion' 'step' (ambiguity) ownedRelationship+=OwnedRedefinition
	 *     isPortion?='portion' 'succession' 'flow' (ambiguity) ownedRelationship+=OwnedRedefinition
	 *     isPortion?='portion' 'succession' (ambiguity) ownedRelationship+=OwnedRedefinition
	 *     isReadOnly?='readonly' 'binding' (ambiguity) ownedRelationship+=OwnedRedefinition
	 *     isReadOnly?='readonly' 'bool' (ambiguity) ownedRelationship+=OwnedRedefinition
	 *     isReadOnly?='readonly' 'connector' (ambiguity) ownedRelationship+=OwnedRedefinition
	 *     isReadOnly?='readonly' 'expr' (ambiguity) ownedRelationship+=OwnedRedefinition
	 *     isReadOnly?='readonly' 'feature'? (ambiguity) ownedRelationship+=OwnedRedefinition
	 *     isReadOnly?='readonly' 'flow' (ambiguity) ownedRelationship+=OwnedRedefinition
	 *     isReadOnly?='readonly' 'inv' 'true'? (ambiguity) ownedRelationship+=OwnedRedefinition
	 *     isReadOnly?='readonly' 'step' (ambiguity) ownedRelationship+=OwnedRedefinition
	 *     isReadOnly?='readonly' 'succession' 'flow' (ambiguity) ownedRelationship+=OwnedRedefinition
	 *     isReadOnly?='readonly' 'succession' (ambiguity) ownedRelationship+=OwnedRedefinition
	 *     isSufficient?='all' (ambiguity) ownedRelationship+=OwnedRedefinition
	 *     ownedRelationship+=OwnedFeatureTyping (ambiguity) ownedRelationship+=OwnedRedefinition
	 *     ownedRelationship+=OwnedMultiplicity (ambiguity) ownedRelationship+=OwnedRedefinition
	 *     ownedRelationship+=OwnedRedefinition (ambiguity) ownedRelationship+=OwnedRedefinition
	 *     ownedRelationship+=OwnedReferenceSubsetting (ambiguity) ownedRelationship+=OwnedRedefinition
	 *     ownedRelationship+=OwnedSubsetting (ambiguity) ownedRelationship+=OwnedRedefinition
	 *     ownedRelationship+=PrefixMetadataMember 'binding' (ambiguity) ownedRelationship+=OwnedRedefinition
	 *     ownedRelationship+=PrefixMetadataMember 'bool' (ambiguity) ownedRelationship+=OwnedRedefinition
	 *     ownedRelationship+=PrefixMetadataMember 'connector' (ambiguity) ownedRelationship+=OwnedRedefinition
	 *     ownedRelationship+=PrefixMetadataMember 'expr' (ambiguity) ownedRelationship+=OwnedRedefinition
	 *     ownedRelationship+=PrefixMetadataMember 'feature'? (ambiguity) ownedRelationship+=OwnedRedefinition
	 *     ownedRelationship+=PrefixMetadataMember 'flow' (ambiguity) ownedRelationship+=OwnedRedefinition
	 *     ownedRelationship+=PrefixMetadataMember 'inv' 'true'? (ambiguity) ownedRelationship+=OwnedRedefinition
	 *     ownedRelationship+=PrefixMetadataMember 'step' (ambiguity) ownedRelationship+=OwnedRedefinition
	 *     ownedRelationship+=PrefixMetadataMember 'succession' 'flow' (ambiguity) ownedRelationship+=OwnedRedefinition
	 *     ownedRelationship+=PrefixMetadataMember 'succession' (ambiguity) ownedRelationship+=OwnedRedefinition
	 
	 * </pre>
	 */
	protected void emit_Redefines_ColonGreaterThanSignGreaterThanSignKeyword_0_0_or_RedefinesKeyword_0_1(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     ':&gt;&gt;' | 'redefines'
	 *
	 * This ambiguous syntax occurs at:
	 *     ownedRelatedElement+=OwnedFeatureChain (ambiguity) ownedRelatedElement+=OwnedFeatureChain
	 *     ownedRelatedElement+=OwnedFeatureChain (ambiguity) redefinedFeature=[Feature|QualifiedName]
	 *     redefiningFeature=[Feature|QualifiedName] (ambiguity) ownedRelatedElement+=OwnedFeatureChain
	 *     redefiningFeature=[Feature|QualifiedName] (ambiguity) redefinedFeature=[Feature|QualifiedName]
	 
	 * </pre>
	 */
	protected void emit_Redefinition_ColonGreaterThanSignGreaterThanSignKeyword_3_0_or_RedefinesKeyword_3_1(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     'specialization'?
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) 'redefinition' ownedRelatedElement+=OwnedFeatureChain
	 *     (rule start) (ambiguity) 'redefinition' redefiningFeature=[Feature|QualifiedName]
	 
	 * </pre>
	 */
	protected void emit_Redefinition_SpecializationKeyword_0_0_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     ';' | ('{' '}')
	 *
	 * This ambiguous syntax occurs at:
	 *     disjoiningType=[Type|QualifiedName] (ambiguity) (rule end)
	 *     featuringType=[Feature|QualifiedName] (ambiguity) (rule end)
	 *     general=[Type|QualifiedName] (ambiguity) (rule end)
	 *     importedMembership=[Membership|QualifiedName] (ambiguity) (rule end)
	 *     importedNamespace=[Namespace|QualifiedName] '::' '*' (ambiguity) (rule end)
	 *     invertingFeature=[Feature|QualifiedName] (ambiguity) (rule end)
	 *     isRecursive?='**' (ambiguity) (rule end)
	 *     memberElement=[Element|QualifiedName] (ambiguity) (rule end)
	 *     originalType=[Type|QualifiedName] (ambiguity) (rule end)
	 *     ownedRelatedElement+=FilterPackage (ambiguity) (rule end)
	 *     ownedRelatedElement+=OwnedFeatureChain (ambiguity) (rule end)
	 *     redefinedFeature=[Feature|QualifiedName] (ambiguity) (rule end)
	 *     subsettedFeature=[Feature|QualifiedName] (ambiguity) (rule end)
	 *     superclassifier=[Classifier|QualifiedName] (ambiguity) (rule end)
	 *     supplier+=[Element|QualifiedName] (ambiguity) (rule end)
	 *     type=[Type|QualifiedName] (ambiguity) (rule end)
	 
	 * </pre>
	 */
	protected void emit_RelationshipBody_SemicolonKeyword_0_or___LeftCurlyBracketKeyword_1_0_RightCurlyBracketKeyword_1_2__(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     ','?
	 *
	 * This ambiguous syntax occurs at:
	 *     operand+=AdditiveExpression (ambiguity) ')' (rule end)
	 *     operand+=AndExpression (ambiguity) ')' (rule end)
	 *     operand+=BodyExpression (ambiguity) ')' (rule end)
	 *     operand+=ClassificationExpression (ambiguity) ')' (rule end)
	 *     operand+=EqualityExpression (ambiguity) ')' (rule end)
	 *     operand+=EqualityExpressionReference (ambiguity) ')' (rule end)
	 *     operand+=ExponentiationExpression (ambiguity) ')' (rule end)
	 *     operand+=ExtentExpression (ambiguity) ')' (rule end)
	 *     operand+=FunctionReferenceExpression (ambiguity) ')' (rule end)
	 *     operand+=ImpliesExpressionReference (ambiguity) ')' (rule end)
	 *     operand+=MultiplicativeExpression (ambiguity) ')' (rule end)
	 *     operand+=OrExpressionReference (ambiguity) ')' (rule end)
	 *     operand+=OwnedExpressionReference (ambiguity) ')' (rule end)
	 *     operand+=RangeExpression (ambiguity) ')' (rule end)
	 *     operand+=SequenceExpression ')' (ambiguity) ')' (rule end)
	 *     operand+=SequenceExpression ']' (ambiguity) ')' (rule end)
	 *     operand+=XorExpression (ambiguity) ')' (rule end)
	 *     operand+=XorExpressionReference (ambiguity) ')' (rule end)
	 *     ownedRelationship+=FeatureChainMember (ambiguity) ')' (rule end)
	 *     ownedRelationship+=TypeReferenceMember (ambiguity) ')' (rule end)
	 *     ownedRelationship+=TypeResultMember (ambiguity) ')' (rule end)
	 
	 * </pre>
	 */
	protected void emit_SequenceExpression_CommaKeyword_1_0_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     ':&gt;' | 'specializes'
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) 'type' (ambiguity) ownedRelationship+=OwnedSpecialization
	 *     declaredName=Name (ambiguity) ownedRelationship+=OwnedSpecialization
	 *     declaredShortName=Name '&gt;' (ambiguity) ownedRelationship+=OwnedSpecialization
	 *     isAbstract?='abstract' 'type' (ambiguity) ownedRelationship+=OwnedSpecialization
	 *     isSufficient?='all' (ambiguity) ownedRelationship+=OwnedSpecialization
	 *     ownedRelationship+=OwnedMultiplicity (ambiguity) ownedRelationship+=OwnedSpecialization
	 *     ownedRelationship+=PrefixMetadataMember 'type' (ambiguity) ownedRelationship+=OwnedSpecialization
	 
	 * </pre>
	 */
	protected void emit_SpecializationPart_ColonGreaterThanSignKeyword_0_0_or_SpecializesKeyword_0_1(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     ':&gt;' | 'specializes'
	 *
	 * This ambiguous syntax occurs at:
	 *     ownedRelatedElement+=OwnedFeatureChain (ambiguity) general=[Type|QualifiedName]
	 *     ownedRelatedElement+=OwnedFeatureChain (ambiguity) ownedRelatedElement+=OwnedFeatureChain
	 *     specific=[Type|QualifiedName] (ambiguity) general=[Type|QualifiedName]
	 *     specific=[Type|QualifiedName] (ambiguity) ownedRelatedElement+=OwnedFeatureChain
	 
	 * </pre>
	 */
	protected void emit_Specialization_ColonGreaterThanSignKeyword_3_0_or_SpecializesKeyword_3_1(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     'specialization'?
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) 'subtype' ownedRelatedElement+=OwnedFeatureChain
	 *     (rule start) (ambiguity) 'subtype' specific=[Type|QualifiedName]
	 
	 * </pre>
	 */
	protected void emit_Specialization_SpecializationKeyword_0_0_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     ':&gt;' | 'specializes'
	 *
	 * This ambiguous syntax occurs at:
	 *     subclassifier=[Classifier|QualifiedName] (ambiguity) superclassifier=[Classifier|QualifiedName]
	 
	 * </pre>
	 */
	protected void emit_Subclassification_ColonGreaterThanSignKeyword_3_0_or_SpecializesKeyword_3_1(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     'specialization'?
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) 'subclassifier' subclassifier=[Classifier|QualifiedName]
	 
	 * </pre>
	 */
	protected void emit_Subclassification_SpecializationKeyword_0_0_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     ':&gt;' | 'subsets'
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) 'binding' (ambiguity) ownedRelationship+=OwnedSubsetting
	 *     (rule start) 'bool' (ambiguity) ownedRelationship+=OwnedSubsetting
	 *     (rule start) 'connector' (ambiguity) ownedRelationship+=OwnedSubsetting
	 *     (rule start) 'expr' (ambiguity) ownedRelationship+=OwnedSubsetting
	 *     (rule start) 'feature'? (ambiguity) ownedRelationship+=OwnedSubsetting
	 *     (rule start) 'flow' (ambiguity) ownedRelationship+=OwnedSubsetting
	 *     (rule start) 'inv' 'true'? (ambiguity) ownedRelationship+=OwnedSubsetting
	 *     (rule start) 'multiplicity' (ambiguity) ownedRelationship+=OwnedSubsetting
	 *     (rule start) 'step' (ambiguity) ownedRelationship+=OwnedSubsetting
	 *     (rule start) 'succession' 'flow' (ambiguity) ownedRelationship+=OwnedSubsetting
	 *     (rule start) 'succession' (ambiguity) ownedRelationship+=OwnedSubsetting
	 *     (rule start) (ambiguity) ownedRelationship+=OwnedSubsetting
	 *     declaredName=Name (ambiguity) ownedRelationship+=OwnedSubsetting
	 *     declaredShortName=Name '&gt;' (ambiguity) ownedRelationship+=OwnedSubsetting
	 *     direction=FeatureDirection 'binding' (ambiguity) ownedRelationship+=OwnedSubsetting
	 *     direction=FeatureDirection 'bool' (ambiguity) ownedRelationship+=OwnedSubsetting
	 *     direction=FeatureDirection 'connector' (ambiguity) ownedRelationship+=OwnedSubsetting
	 *     direction=FeatureDirection 'expr' (ambiguity) ownedRelationship+=OwnedSubsetting
	 *     direction=FeatureDirection 'feature'? (ambiguity) ownedRelationship+=OwnedSubsetting
	 *     direction=FeatureDirection 'flow' (ambiguity) ownedRelationship+=OwnedSubsetting
	 *     direction=FeatureDirection 'inv' 'true'? (ambiguity) ownedRelationship+=OwnedSubsetting
	 *     direction=FeatureDirection 'step' (ambiguity) ownedRelationship+=OwnedSubsetting
	 *     direction=FeatureDirection 'succession' 'flow' (ambiguity) ownedRelationship+=OwnedSubsetting
	 *     direction=FeatureDirection 'succession' (ambiguity) ownedRelationship+=OwnedSubsetting
	 *     isAbstract?='abstract' 'binding' (ambiguity) ownedRelationship+=OwnedSubsetting
	 *     isAbstract?='abstract' 'bool' (ambiguity) ownedRelationship+=OwnedSubsetting
	 *     isAbstract?='abstract' 'connector' (ambiguity) ownedRelationship+=OwnedSubsetting
	 *     isAbstract?='abstract' 'expr' (ambiguity) ownedRelationship+=OwnedSubsetting
	 *     isAbstract?='abstract' 'feature'? (ambiguity) ownedRelationship+=OwnedSubsetting
	 *     isAbstract?='abstract' 'flow' (ambiguity) ownedRelationship+=OwnedSubsetting
	 *     isAbstract?='abstract' 'inv' 'true'? (ambiguity) ownedRelationship+=OwnedSubsetting
	 *     isAbstract?='abstract' 'step' (ambiguity) ownedRelationship+=OwnedSubsetting
	 *     isAbstract?='abstract' 'succession' 'flow' (ambiguity) ownedRelationship+=OwnedSubsetting
	 *     isAbstract?='abstract' 'succession' (ambiguity) ownedRelationship+=OwnedSubsetting
	 *     isComposite?='composite' 'binding' (ambiguity) ownedRelationship+=OwnedSubsetting
	 *     isComposite?='composite' 'bool' (ambiguity) ownedRelationship+=OwnedSubsetting
	 *     isComposite?='composite' 'connector' (ambiguity) ownedRelationship+=OwnedSubsetting
	 *     isComposite?='composite' 'expr' (ambiguity) ownedRelationship+=OwnedSubsetting
	 *     isComposite?='composite' 'feature'? (ambiguity) ownedRelationship+=OwnedSubsetting
	 *     isComposite?='composite' 'flow' (ambiguity) ownedRelationship+=OwnedSubsetting
	 *     isComposite?='composite' 'inv' 'true'? (ambiguity) ownedRelationship+=OwnedSubsetting
	 *     isComposite?='composite' 'step' (ambiguity) ownedRelationship+=OwnedSubsetting
	 *     isComposite?='composite' 'succession' 'flow' (ambiguity) ownedRelationship+=OwnedSubsetting
	 *     isComposite?='composite' 'succession' (ambiguity) ownedRelationship+=OwnedSubsetting
	 *     isDerived?='derived' 'binding' (ambiguity) ownedRelationship+=OwnedSubsetting
	 *     isDerived?='derived' 'bool' (ambiguity) ownedRelationship+=OwnedSubsetting
	 *     isDerived?='derived' 'connector' (ambiguity) ownedRelationship+=OwnedSubsetting
	 *     isDerived?='derived' 'expr' (ambiguity) ownedRelationship+=OwnedSubsetting
	 *     isDerived?='derived' 'feature'? (ambiguity) ownedRelationship+=OwnedSubsetting
	 *     isDerived?='derived' 'flow' (ambiguity) ownedRelationship+=OwnedSubsetting
	 *     isDerived?='derived' 'inv' 'true'? (ambiguity) ownedRelationship+=OwnedSubsetting
	 *     isDerived?='derived' 'step' (ambiguity) ownedRelationship+=OwnedSubsetting
	 *     isDerived?='derived' 'succession' 'flow' (ambiguity) ownedRelationship+=OwnedSubsetting
	 *     isDerived?='derived' 'succession' (ambiguity) ownedRelationship+=OwnedSubsetting
	 *     isEnd?='end' 'binding' (ambiguity) ownedRelationship+=OwnedSubsetting
	 *     isEnd?='end' 'bool' (ambiguity) ownedRelationship+=OwnedSubsetting
	 *     isEnd?='end' 'connector' (ambiguity) ownedRelationship+=OwnedSubsetting
	 *     isEnd?='end' 'expr' (ambiguity) ownedRelationship+=OwnedSubsetting
	 *     isEnd?='end' 'feature'? (ambiguity) ownedRelationship+=OwnedSubsetting
	 *     isEnd?='end' 'flow' (ambiguity) ownedRelationship+=OwnedSubsetting
	 *     isEnd?='end' 'inv' 'true'? (ambiguity) ownedRelationship+=OwnedSubsetting
	 *     isEnd?='end' 'step' (ambiguity) ownedRelationship+=OwnedSubsetting
	 *     isEnd?='end' 'succession' 'flow' (ambiguity) ownedRelationship+=OwnedSubsetting
	 *     isEnd?='end' 'succession' (ambiguity) ownedRelationship+=OwnedSubsetting
	 *     isNegated?='false' (ambiguity) ownedRelationship+=OwnedSubsetting
	 *     isNonunique?='nonunique' (ambiguity) ownedRelationship+=OwnedSubsetting
	 *     isOrdered?='ordered' (ambiguity) ownedRelationship+=OwnedSubsetting
	 *     isPortion?='portion' 'binding' (ambiguity) ownedRelationship+=OwnedSubsetting
	 *     isPortion?='portion' 'bool' (ambiguity) ownedRelationship+=OwnedSubsetting
	 *     isPortion?='portion' 'connector' (ambiguity) ownedRelationship+=OwnedSubsetting
	 *     isPortion?='portion' 'expr' (ambiguity) ownedRelationship+=OwnedSubsetting
	 *     isPortion?='portion' 'feature'? (ambiguity) ownedRelationship+=OwnedSubsetting
	 *     isPortion?='portion' 'flow' (ambiguity) ownedRelationship+=OwnedSubsetting
	 *     isPortion?='portion' 'inv' 'true'? (ambiguity) ownedRelationship+=OwnedSubsetting
	 *     isPortion?='portion' 'step' (ambiguity) ownedRelationship+=OwnedSubsetting
	 *     isPortion?='portion' 'succession' 'flow' (ambiguity) ownedRelationship+=OwnedSubsetting
	 *     isPortion?='portion' 'succession' (ambiguity) ownedRelationship+=OwnedSubsetting
	 *     isReadOnly?='readonly' 'binding' (ambiguity) ownedRelationship+=OwnedSubsetting
	 *     isReadOnly?='readonly' 'bool' (ambiguity) ownedRelationship+=OwnedSubsetting
	 *     isReadOnly?='readonly' 'connector' (ambiguity) ownedRelationship+=OwnedSubsetting
	 *     isReadOnly?='readonly' 'expr' (ambiguity) ownedRelationship+=OwnedSubsetting
	 *     isReadOnly?='readonly' 'feature'? (ambiguity) ownedRelationship+=OwnedSubsetting
	 *     isReadOnly?='readonly' 'flow' (ambiguity) ownedRelationship+=OwnedSubsetting
	 *     isReadOnly?='readonly' 'inv' 'true'? (ambiguity) ownedRelationship+=OwnedSubsetting
	 *     isReadOnly?='readonly' 'step' (ambiguity) ownedRelationship+=OwnedSubsetting
	 *     isReadOnly?='readonly' 'succession' 'flow' (ambiguity) ownedRelationship+=OwnedSubsetting
	 *     isReadOnly?='readonly' 'succession' (ambiguity) ownedRelationship+=OwnedSubsetting
	 *     isSufficient?='all' (ambiguity) ownedRelationship+=OwnedSubsetting
	 *     ownedRelationship+=OwnedFeatureTyping (ambiguity) ownedRelationship+=OwnedSubsetting
	 *     ownedRelationship+=OwnedMultiplicity (ambiguity) ownedRelationship+=OwnedSubsetting
	 *     ownedRelationship+=OwnedRedefinition (ambiguity) ownedRelationship+=OwnedSubsetting
	 *     ownedRelationship+=OwnedReferenceSubsetting (ambiguity) ownedRelationship+=OwnedSubsetting
	 *     ownedRelationship+=OwnedSubsetting (ambiguity) ownedRelationship+=OwnedSubsetting
	 *     ownedRelationship+=PrefixMetadataMember 'binding' (ambiguity) ownedRelationship+=OwnedSubsetting
	 *     ownedRelationship+=PrefixMetadataMember 'bool' (ambiguity) ownedRelationship+=OwnedSubsetting
	 *     ownedRelationship+=PrefixMetadataMember 'connector' (ambiguity) ownedRelationship+=OwnedSubsetting
	 *     ownedRelationship+=PrefixMetadataMember 'expr' (ambiguity) ownedRelationship+=OwnedSubsetting
	 *     ownedRelationship+=PrefixMetadataMember 'feature'? (ambiguity) ownedRelationship+=OwnedSubsetting
	 *     ownedRelationship+=PrefixMetadataMember 'flow' (ambiguity) ownedRelationship+=OwnedSubsetting
	 *     ownedRelationship+=PrefixMetadataMember 'inv' 'true'? (ambiguity) ownedRelationship+=OwnedSubsetting
	 *     ownedRelationship+=PrefixMetadataMember 'step' (ambiguity) ownedRelationship+=OwnedSubsetting
	 *     ownedRelationship+=PrefixMetadataMember 'succession' 'flow' (ambiguity) ownedRelationship+=OwnedSubsetting
	 *     ownedRelationship+=PrefixMetadataMember 'succession' (ambiguity) ownedRelationship+=OwnedSubsetting
	 
	 * </pre>
	 */
	protected void emit_Subsets_ColonGreaterThanSignKeyword_0_0_or_SubsetsKeyword_0_1(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     ':&gt;' | 'subsets'
	 *
	 * This ambiguous syntax occurs at:
	 *     ownedRelatedElement+=OwnedFeatureChain (ambiguity) ownedRelatedElement+=OwnedFeatureChain
	 *     ownedRelatedElement+=OwnedFeatureChain (ambiguity) subsettedFeature=[Feature|QualifiedName]
	 *     subsettingFeature=[Feature|QualifiedName] (ambiguity) ownedRelatedElement+=OwnedFeatureChain
	 *     subsettingFeature=[Feature|QualifiedName] (ambiguity) subsettedFeature=[Feature|QualifiedName]
	 
	 * </pre>
	 */
	protected void emit_Subsetting_ColonGreaterThanSignKeyword_3_0_or_SubsetsKeyword_3_1(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     'specialization'?
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) 'subset' ownedRelatedElement+=OwnedFeatureChain
	 *     (rule start) (ambiguity) 'subset' subsettingFeature=[Feature|QualifiedName]
	 
	 * </pre>
	 */
	protected void emit_Subsetting_SpecializationKeyword_0_0_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     'first'?
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) 'succession' (ambiguity) ownedRelationship+=ConnectorEndMember
	 *     direction=FeatureDirection 'succession' (ambiguity) ownedRelationship+=ConnectorEndMember
	 *     isAbstract?='abstract' 'succession' (ambiguity) ownedRelationship+=ConnectorEndMember
	 *     isComposite?='composite' 'succession' (ambiguity) ownedRelationship+=ConnectorEndMember
	 *     isDerived?='derived' 'succession' (ambiguity) ownedRelationship+=ConnectorEndMember
	 *     isEnd?='end' 'succession' (ambiguity) ownedRelationship+=ConnectorEndMember
	 *     isPortion?='portion' 'succession' (ambiguity) ownedRelationship+=ConnectorEndMember
	 *     isReadOnly?='readonly' 'succession' (ambiguity) ownedRelationship+=ConnectorEndMember
	 *     isSufficient?='all' (ambiguity) ownedRelationship+=ConnectorEndMember
	 *     ownedRelationship+=PrefixMetadataMember 'succession' (ambiguity) ownedRelationship+=ConnectorEndMember
	 
	 * </pre>
	 */
	protected void emit_SuccessionDeclaration_FirstKeyword_1_1_0_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     ':&gt;' | 'specializes'
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) 'assoc' 'struct' (ambiguity) ownedRelationship+=Ownedsubclassification
	 *     (rule start) 'assoc' (ambiguity) ownedRelationship+=Ownedsubclassification
	 *     (rule start) 'behavior' (ambiguity) ownedRelationship+=Ownedsubclassification
	 *     (rule start) 'class' (ambiguity) ownedRelationship+=Ownedsubclassification
	 *     (rule start) 'classifier' (ambiguity) ownedRelationship+=Ownedsubclassification
	 *     (rule start) 'datatype' (ambiguity) ownedRelationship+=Ownedsubclassification
	 *     (rule start) 'function' (ambiguity) ownedRelationship+=Ownedsubclassification
	 *     (rule start) 'interaction' (ambiguity) ownedRelationship+=Ownedsubclassification
	 *     (rule start) 'metaclass' (ambiguity) ownedRelationship+=Ownedsubclassification
	 *     (rule start) 'predicate' (ambiguity) ownedRelationship+=Ownedsubclassification
	 *     (rule start) 'struct' (ambiguity) ownedRelationship+=Ownedsubclassification
	 *     declaredName=Name (ambiguity) ownedRelationship+=Ownedsubclassification
	 *     declaredShortName=Name '&gt;' (ambiguity) ownedRelationship+=Ownedsubclassification
	 *     isAbstract?='abstract' 'assoc' 'struct' (ambiguity) ownedRelationship+=Ownedsubclassification
	 *     isAbstract?='abstract' 'assoc' (ambiguity) ownedRelationship+=Ownedsubclassification
	 *     isAbstract?='abstract' 'behavior' (ambiguity) ownedRelationship+=Ownedsubclassification
	 *     isAbstract?='abstract' 'class' (ambiguity) ownedRelationship+=Ownedsubclassification
	 *     isAbstract?='abstract' 'classifier' (ambiguity) ownedRelationship+=Ownedsubclassification
	 *     isAbstract?='abstract' 'datatype' (ambiguity) ownedRelationship+=Ownedsubclassification
	 *     isAbstract?='abstract' 'function' (ambiguity) ownedRelationship+=Ownedsubclassification
	 *     isAbstract?='abstract' 'interaction' (ambiguity) ownedRelationship+=Ownedsubclassification
	 *     isAbstract?='abstract' 'metaclass' (ambiguity) ownedRelationship+=Ownedsubclassification
	 *     isAbstract?='abstract' 'predicate' (ambiguity) ownedRelationship+=Ownedsubclassification
	 *     isAbstract?='abstract' 'struct' (ambiguity) ownedRelationship+=Ownedsubclassification
	 *     isSufficient?='all' (ambiguity) ownedRelationship+=Ownedsubclassification
	 *     ownedRelationship+=OwnedMultiplicity (ambiguity) ownedRelationship+=Ownedsubclassification
	 *     ownedRelationship+=PrefixMetadataMember 'assoc' 'struct' (ambiguity) ownedRelationship+=Ownedsubclassification
	 *     ownedRelationship+=PrefixMetadataMember 'assoc' (ambiguity) ownedRelationship+=Ownedsubclassification
	 *     ownedRelationship+=PrefixMetadataMember 'behavior' (ambiguity) ownedRelationship+=Ownedsubclassification
	 *     ownedRelationship+=PrefixMetadataMember 'class' (ambiguity) ownedRelationship+=Ownedsubclassification
	 *     ownedRelationship+=PrefixMetadataMember 'classifier' (ambiguity) ownedRelationship+=Ownedsubclassification
	 *     ownedRelationship+=PrefixMetadataMember 'datatype' (ambiguity) ownedRelationship+=Ownedsubclassification
	 *     ownedRelationship+=PrefixMetadataMember 'function' (ambiguity) ownedRelationship+=Ownedsubclassification
	 *     ownedRelationship+=PrefixMetadataMember 'interaction' (ambiguity) ownedRelationship+=Ownedsubclassification
	 *     ownedRelationship+=PrefixMetadataMember 'metaclass' (ambiguity) ownedRelationship+=Ownedsubclassification
	 *     ownedRelationship+=PrefixMetadataMember 'predicate' (ambiguity) ownedRelationship+=Ownedsubclassification
	 *     ownedRelationship+=PrefixMetadataMember 'struct' (ambiguity) ownedRelationship+=Ownedsubclassification
	 
	 * </pre>
	 */
	protected void emit_SuperclassingPart_ColonGreaterThanSignKeyword_0_0_or_SpecializesKeyword_0_1(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     'rep'?
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) 'language' language=STRING_VALUE
	 
	 * </pre>
	 */
	protected void emit_TextualRepresentation_RepKeyword_0_0_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     ';' | ('{' '}')
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) 'assoc' 'struct' (ambiguity) (rule start)
	 *     (rule start) 'assoc' (ambiguity) (rule start)
	 *     (rule start) 'behavior' (ambiguity) (rule start)
	 *     (rule start) 'binding' (ambiguity) (rule start)
	 *     (rule start) 'class' (ambiguity) (rule start)
	 *     (rule start) 'classifier' (ambiguity) (rule start)
	 *     (rule start) 'connector' (ambiguity) (rule start)
	 *     (rule start) 'datatype' (ambiguity) (rule start)
	 *     (rule start) 'feature' (ambiguity) (rule start)
	 *     (rule start) 'flow' (ambiguity) (rule start)
	 *     (rule start) 'interaction' (ambiguity) (rule start)
	 *     (rule start) 'metaclass' (ambiguity) (rule start)
	 *     (rule start) 'step' (ambiguity) (rule start)
	 *     (rule start) 'struct' (ambiguity) (rule start)
	 *     (rule start) 'succession' 'flow' (ambiguity) (rule start)
	 *     (rule start) 'succession' (ambiguity) (rule start)
	 *     declaredName=Name (ambiguity) (rule end)
	 *     declaredShortName=Name '&gt;' (ambiguity) (rule end)
	 *     direction=FeatureDirection 'binding' (ambiguity) (rule end)
	 *     direction=FeatureDirection 'connector' (ambiguity) (rule end)
	 *     direction=FeatureDirection 'feature' (ambiguity) (rule end)
	 *     direction=FeatureDirection 'flow' (ambiguity) (rule end)
	 *     direction=FeatureDirection 'step' (ambiguity) (rule end)
	 *     direction=FeatureDirection 'succession' 'flow' (ambiguity) (rule end)
	 *     direction=FeatureDirection 'succession' (ambiguity) (rule end)
	 *     isAbstract?='abstract' 'assoc' 'struct' (ambiguity) (rule end)
	 *     isAbstract?='abstract' 'assoc' (ambiguity) (rule end)
	 *     isAbstract?='abstract' 'behavior' (ambiguity) (rule end)
	 *     isAbstract?='abstract' 'binding' (ambiguity) (rule end)
	 *     isAbstract?='abstract' 'class' (ambiguity) (rule end)
	 *     isAbstract?='abstract' 'classifier' (ambiguity) (rule end)
	 *     isAbstract?='abstract' 'connector' (ambiguity) (rule end)
	 *     isAbstract?='abstract' 'datatype' (ambiguity) (rule end)
	 *     isAbstract?='abstract' 'feature' (ambiguity) (rule end)
	 *     isAbstract?='abstract' 'flow' (ambiguity) (rule end)
	 *     isAbstract?='abstract' 'interaction' (ambiguity) (rule end)
	 *     isAbstract?='abstract' 'metaclass' (ambiguity) (rule end)
	 *     isAbstract?='abstract' 'step' (ambiguity) (rule end)
	 *     isAbstract?='abstract' 'struct' (ambiguity) (rule end)
	 *     isAbstract?='abstract' 'succession' 'flow' (ambiguity) (rule end)
	 *     isAbstract?='abstract' 'succession' (ambiguity) (rule end)
	 *     isComposite?='composite' 'binding' (ambiguity) (rule end)
	 *     isComposite?='composite' 'connector' (ambiguity) (rule end)
	 *     isComposite?='composite' 'feature' (ambiguity) (rule end)
	 *     isComposite?='composite' 'flow' (ambiguity) (rule end)
	 *     isComposite?='composite' 'step' (ambiguity) (rule end)
	 *     isComposite?='composite' 'succession' 'flow' (ambiguity) (rule end)
	 *     isComposite?='composite' 'succession' (ambiguity) (rule end)
	 *     isDerived?='derived' 'binding' (ambiguity) (rule end)
	 *     isDerived?='derived' 'connector' (ambiguity) (rule end)
	 *     isDerived?='derived' 'feature' (ambiguity) (rule end)
	 *     isDerived?='derived' 'flow' (ambiguity) (rule end)
	 *     isDerived?='derived' 'step' (ambiguity) (rule end)
	 *     isDerived?='derived' 'succession' 'flow' (ambiguity) (rule end)
	 *     isDerived?='derived' 'succession' (ambiguity) (rule end)
	 *     isEnd?='end' 'binding' (ambiguity) (rule end)
	 *     isEnd?='end' 'connector' (ambiguity) (rule end)
	 *     isEnd?='end' 'feature' (ambiguity) (rule end)
	 *     isEnd?='end' 'flow' (ambiguity) (rule end)
	 *     isEnd?='end' 'step' (ambiguity) (rule end)
	 *     isEnd?='end' 'succession' 'flow' (ambiguity) (rule end)
	 *     isEnd?='end' 'succession' (ambiguity) (rule end)
	 *     isNonunique?='nonunique' (ambiguity) (rule end)
	 *     isOrdered?='ordered' (ambiguity) (rule end)
	 *     isPortion?='portion' 'binding' (ambiguity) (rule end)
	 *     isPortion?='portion' 'connector' (ambiguity) (rule end)
	 *     isPortion?='portion' 'feature' (ambiguity) (rule end)
	 *     isPortion?='portion' 'flow' (ambiguity) (rule end)
	 *     isPortion?='portion' 'step' (ambiguity) (rule end)
	 *     isPortion?='portion' 'succession' 'flow' (ambiguity) (rule end)
	 *     isPortion?='portion' 'succession' (ambiguity) (rule end)
	 *     isReadOnly?='readonly' 'binding' (ambiguity) (rule end)
	 *     isReadOnly?='readonly' 'connector' (ambiguity) (rule end)
	 *     isReadOnly?='readonly' 'feature' (ambiguity) (rule end)
	 *     isReadOnly?='readonly' 'flow' (ambiguity) (rule end)
	 *     isReadOnly?='readonly' 'step' (ambiguity) (rule end)
	 *     isReadOnly?='readonly' 'succession' 'flow' (ambiguity) (rule end)
	 *     isReadOnly?='readonly' 'succession' (ambiguity) (rule end)
	 *     isSufficient?='all' (ambiguity) (rule end)
	 *     ownedRelationship+=ClassifierConjugation (ambiguity) (rule end)
	 *     ownedRelationship+=ConnectorEndMember ')' (ambiguity) (rule end)
	 *     ownedRelationship+=ConnectorEndMember (ambiguity) (rule end)
	 *     ownedRelationship+=Differencing (ambiguity) (rule end)
	 *     ownedRelationship+=FeatureConjugation (ambiguity) (rule end)
	 *     ownedRelationship+=FeatureValue (ambiguity) (rule end)
	 *     ownedRelationship+=Intersecting (ambiguity) (rule end)
	 *     ownedRelationship+=ItemFeatureMember (ambiguity) (rule end)
	 *     ownedRelationship+=ItemFlowEndMember (ambiguity) (rule end)
	 *     ownedRelationship+=MultiplicityExpressionMember ']' (ambiguity) (rule end)
	 *     ownedRelationship+=OwnedConjugation (ambiguity) (rule end)
	 *     ownedRelationship+=OwnedDisjoining (ambiguity) (rule end)
	 *     ownedRelationship+=OwnedFeatureChaining (ambiguity) (rule end)
	 *     ownedRelationship+=OwnedFeatureInverting (ambiguity) (rule end)
	 *     ownedRelationship+=OwnedFeatureTyping (ambiguity) (rule end)
	 *     ownedRelationship+=OwnedMultiplicity (ambiguity) (rule end)
	 *     ownedRelationship+=OwnedRedefinition (ambiguity) (rule end)
	 *     ownedRelationship+=OwnedReferenceSubsetting (ambiguity) (rule end)
	 *     ownedRelationship+=OwnedSpecialization (ambiguity) (rule end)
	 *     ownedRelationship+=OwnedSubsetting (ambiguity) (rule end)
	 *     ownedRelationship+=OwnedTypeFeaturing (ambiguity) (rule end)
	 *     ownedRelationship+=Ownedsubclassification (ambiguity) (rule end)
	 *     ownedRelationship+=PrefixMetadataMember 'assoc' 'struct' (ambiguity) (rule end)
	 *     ownedRelationship+=PrefixMetadataMember 'assoc' (ambiguity) (rule end)
	 *     ownedRelationship+=PrefixMetadataMember 'behavior' (ambiguity) (rule end)
	 *     ownedRelationship+=PrefixMetadataMember 'binding' (ambiguity) (rule end)
	 *     ownedRelationship+=PrefixMetadataMember 'class' (ambiguity) (rule end)
	 *     ownedRelationship+=PrefixMetadataMember 'classifier' (ambiguity) (rule end)
	 *     ownedRelationship+=PrefixMetadataMember 'connector' (ambiguity) (rule end)
	 *     ownedRelationship+=PrefixMetadataMember 'datatype' (ambiguity) (rule end)
	 *     ownedRelationship+=PrefixMetadataMember 'feature' (ambiguity) (rule end)
	 *     ownedRelationship+=PrefixMetadataMember 'flow' (ambiguity) (rule end)
	 *     ownedRelationship+=PrefixMetadataMember 'interaction' (ambiguity) (rule end)
	 *     ownedRelationship+=PrefixMetadataMember 'metaclass' (ambiguity) (rule end)
	 *     ownedRelationship+=PrefixMetadataMember 'step' (ambiguity) (rule end)
	 *     ownedRelationship+=PrefixMetadataMember 'struct' (ambiguity) (rule end)
	 *     ownedRelationship+=PrefixMetadataMember 'succession' 'flow' (ambiguity) (rule end)
	 *     ownedRelationship+=PrefixMetadataMember 'succession' (ambiguity) (rule end)
	 *     ownedRelationship+=PrefixMetadataMember (ambiguity) (rule end)
	 *     ownedRelationship+=Unioning (ambiguity) (rule end)
	 
	 * </pre>
	 */
	protected void emit_TypeBody_SemicolonKeyword_0_or___LeftCurlyBracketKeyword_1_0_RightCurlyBracketKeyword_1_2__(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     'of'?
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) 'featuring' (ambiguity) featureOfType=[Feature|QualifiedName]
	 
	 * </pre>
	 */
	protected void emit_TypeFeaturing_OfKeyword_1_1_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     ':' | ('typed' 'by')
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) 'binding' (ambiguity) ownedRelationship+=OwnedFeatureTyping
	 *     (rule start) 'bool' (ambiguity) ownedRelationship+=OwnedFeatureTyping
	 *     (rule start) 'connector' (ambiguity) ownedRelationship+=OwnedFeatureTyping
	 *     (rule start) 'expr' (ambiguity) ownedRelationship+=OwnedFeatureTyping
	 *     (rule start) 'feature'? (ambiguity) ownedRelationship+=OwnedFeatureTyping
	 *     (rule start) 'flow' (ambiguity) ownedRelationship+=OwnedFeatureTyping
	 *     (rule start) 'inv' 'true'? (ambiguity) ownedRelationship+=OwnedFeatureTyping
	 *     (rule start) 'step' (ambiguity) ownedRelationship+=OwnedFeatureTyping
	 *     (rule start) 'succession' 'flow' (ambiguity) ownedRelationship+=OwnedFeatureTyping
	 *     (rule start) 'succession' (ambiguity) ownedRelationship+=OwnedFeatureTyping
	 *     (rule start) (ambiguity) ownedRelationship+=OwnedFeatureTyping
	 *     declaredName=Name (ambiguity) ownedRelationship+=OwnedFeatureTyping
	 *     declaredShortName=Name '&gt;' (ambiguity) ownedRelationship+=OwnedFeatureTyping
	 *     direction=FeatureDirection 'binding' (ambiguity) ownedRelationship+=OwnedFeatureTyping
	 *     direction=FeatureDirection 'bool' (ambiguity) ownedRelationship+=OwnedFeatureTyping
	 *     direction=FeatureDirection 'connector' (ambiguity) ownedRelationship+=OwnedFeatureTyping
	 *     direction=FeatureDirection 'expr' (ambiguity) ownedRelationship+=OwnedFeatureTyping
	 *     direction=FeatureDirection 'feature'? (ambiguity) ownedRelationship+=OwnedFeatureTyping
	 *     direction=FeatureDirection 'flow' (ambiguity) ownedRelationship+=OwnedFeatureTyping
	 *     direction=FeatureDirection 'inv' 'true'? (ambiguity) ownedRelationship+=OwnedFeatureTyping
	 *     direction=FeatureDirection 'step' (ambiguity) ownedRelationship+=OwnedFeatureTyping
	 *     direction=FeatureDirection 'succession' 'flow' (ambiguity) ownedRelationship+=OwnedFeatureTyping
	 *     direction=FeatureDirection 'succession' (ambiguity) ownedRelationship+=OwnedFeatureTyping
	 *     isAbstract?='abstract' 'binding' (ambiguity) ownedRelationship+=OwnedFeatureTyping
	 *     isAbstract?='abstract' 'bool' (ambiguity) ownedRelationship+=OwnedFeatureTyping
	 *     isAbstract?='abstract' 'connector' (ambiguity) ownedRelationship+=OwnedFeatureTyping
	 *     isAbstract?='abstract' 'expr' (ambiguity) ownedRelationship+=OwnedFeatureTyping
	 *     isAbstract?='abstract' 'feature'? (ambiguity) ownedRelationship+=OwnedFeatureTyping
	 *     isAbstract?='abstract' 'flow' (ambiguity) ownedRelationship+=OwnedFeatureTyping
	 *     isAbstract?='abstract' 'inv' 'true'? (ambiguity) ownedRelationship+=OwnedFeatureTyping
	 *     isAbstract?='abstract' 'step' (ambiguity) ownedRelationship+=OwnedFeatureTyping
	 *     isAbstract?='abstract' 'succession' 'flow' (ambiguity) ownedRelationship+=OwnedFeatureTyping
	 *     isAbstract?='abstract' 'succession' (ambiguity) ownedRelationship+=OwnedFeatureTyping
	 *     isComposite?='composite' 'binding' (ambiguity) ownedRelationship+=OwnedFeatureTyping
	 *     isComposite?='composite' 'bool' (ambiguity) ownedRelationship+=OwnedFeatureTyping
	 *     isComposite?='composite' 'connector' (ambiguity) ownedRelationship+=OwnedFeatureTyping
	 *     isComposite?='composite' 'expr' (ambiguity) ownedRelationship+=OwnedFeatureTyping
	 *     isComposite?='composite' 'feature'? (ambiguity) ownedRelationship+=OwnedFeatureTyping
	 *     isComposite?='composite' 'flow' (ambiguity) ownedRelationship+=OwnedFeatureTyping
	 *     isComposite?='composite' 'inv' 'true'? (ambiguity) ownedRelationship+=OwnedFeatureTyping
	 *     isComposite?='composite' 'step' (ambiguity) ownedRelationship+=OwnedFeatureTyping
	 *     isComposite?='composite' 'succession' 'flow' (ambiguity) ownedRelationship+=OwnedFeatureTyping
	 *     isComposite?='composite' 'succession' (ambiguity) ownedRelationship+=OwnedFeatureTyping
	 *     isDerived?='derived' 'binding' (ambiguity) ownedRelationship+=OwnedFeatureTyping
	 *     isDerived?='derived' 'bool' (ambiguity) ownedRelationship+=OwnedFeatureTyping
	 *     isDerived?='derived' 'connector' (ambiguity) ownedRelationship+=OwnedFeatureTyping
	 *     isDerived?='derived' 'expr' (ambiguity) ownedRelationship+=OwnedFeatureTyping
	 *     isDerived?='derived' 'feature'? (ambiguity) ownedRelationship+=OwnedFeatureTyping
	 *     isDerived?='derived' 'flow' (ambiguity) ownedRelationship+=OwnedFeatureTyping
	 *     isDerived?='derived' 'inv' 'true'? (ambiguity) ownedRelationship+=OwnedFeatureTyping
	 *     isDerived?='derived' 'step' (ambiguity) ownedRelationship+=OwnedFeatureTyping
	 *     isDerived?='derived' 'succession' 'flow' (ambiguity) ownedRelationship+=OwnedFeatureTyping
	 *     isDerived?='derived' 'succession' (ambiguity) ownedRelationship+=OwnedFeatureTyping
	 *     isEnd?='end' 'binding' (ambiguity) ownedRelationship+=OwnedFeatureTyping
	 *     isEnd?='end' 'bool' (ambiguity) ownedRelationship+=OwnedFeatureTyping
	 *     isEnd?='end' 'connector' (ambiguity) ownedRelationship+=OwnedFeatureTyping
	 *     isEnd?='end' 'expr' (ambiguity) ownedRelationship+=OwnedFeatureTyping
	 *     isEnd?='end' 'feature'? (ambiguity) ownedRelationship+=OwnedFeatureTyping
	 *     isEnd?='end' 'flow' (ambiguity) ownedRelationship+=OwnedFeatureTyping
	 *     isEnd?='end' 'inv' 'true'? (ambiguity) ownedRelationship+=OwnedFeatureTyping
	 *     isEnd?='end' 'step' (ambiguity) ownedRelationship+=OwnedFeatureTyping
	 *     isEnd?='end' 'succession' 'flow' (ambiguity) ownedRelationship+=OwnedFeatureTyping
	 *     isEnd?='end' 'succession' (ambiguity) ownedRelationship+=OwnedFeatureTyping
	 *     isNegated?='false' (ambiguity) ownedRelationship+=OwnedFeatureTyping
	 *     isNonunique?='nonunique' (ambiguity) ownedRelationship+=OwnedFeatureTyping
	 *     isOrdered?='ordered' (ambiguity) ownedRelationship+=OwnedFeatureTyping
	 *     isPortion?='portion' 'binding' (ambiguity) ownedRelationship+=OwnedFeatureTyping
	 *     isPortion?='portion' 'bool' (ambiguity) ownedRelationship+=OwnedFeatureTyping
	 *     isPortion?='portion' 'connector' (ambiguity) ownedRelationship+=OwnedFeatureTyping
	 *     isPortion?='portion' 'expr' (ambiguity) ownedRelationship+=OwnedFeatureTyping
	 *     isPortion?='portion' 'feature'? (ambiguity) ownedRelationship+=OwnedFeatureTyping
	 *     isPortion?='portion' 'flow' (ambiguity) ownedRelationship+=OwnedFeatureTyping
	 *     isPortion?='portion' 'inv' 'true'? (ambiguity) ownedRelationship+=OwnedFeatureTyping
	 *     isPortion?='portion' 'step' (ambiguity) ownedRelationship+=OwnedFeatureTyping
	 *     isPortion?='portion' 'succession' 'flow' (ambiguity) ownedRelationship+=OwnedFeatureTyping
	 *     isPortion?='portion' 'succession' (ambiguity) ownedRelationship+=OwnedFeatureTyping
	 *     isReadOnly?='readonly' 'binding' (ambiguity) ownedRelationship+=OwnedFeatureTyping
	 *     isReadOnly?='readonly' 'bool' (ambiguity) ownedRelationship+=OwnedFeatureTyping
	 *     isReadOnly?='readonly' 'connector' (ambiguity) ownedRelationship+=OwnedFeatureTyping
	 *     isReadOnly?='readonly' 'expr' (ambiguity) ownedRelationship+=OwnedFeatureTyping
	 *     isReadOnly?='readonly' 'feature'? (ambiguity) ownedRelationship+=OwnedFeatureTyping
	 *     isReadOnly?='readonly' 'flow' (ambiguity) ownedRelationship+=OwnedFeatureTyping
	 *     isReadOnly?='readonly' 'inv' 'true'? (ambiguity) ownedRelationship+=OwnedFeatureTyping
	 *     isReadOnly?='readonly' 'step' (ambiguity) ownedRelationship+=OwnedFeatureTyping
	 *     isReadOnly?='readonly' 'succession' 'flow' (ambiguity) ownedRelationship+=OwnedFeatureTyping
	 *     isReadOnly?='readonly' 'succession' (ambiguity) ownedRelationship+=OwnedFeatureTyping
	 *     isSufficient?='all' (ambiguity) ownedRelationship+=OwnedFeatureTyping
	 *     ownedRelationship+=OwnedFeatureTyping (ambiguity) ownedRelationship+=OwnedFeatureTyping
	 *     ownedRelationship+=OwnedMultiplicity (ambiguity) ownedRelationship+=OwnedFeatureTyping
	 *     ownedRelationship+=OwnedRedefinition (ambiguity) ownedRelationship+=OwnedFeatureTyping
	 *     ownedRelationship+=OwnedReferenceSubsetting (ambiguity) ownedRelationship+=OwnedFeatureTyping
	 *     ownedRelationship+=OwnedSubsetting (ambiguity) ownedRelationship+=OwnedFeatureTyping
	 *     ownedRelationship+=PrefixMetadataMember 'binding' (ambiguity) ownedRelationship+=OwnedFeatureTyping
	 *     ownedRelationship+=PrefixMetadataMember 'bool' (ambiguity) ownedRelationship+=OwnedFeatureTyping
	 *     ownedRelationship+=PrefixMetadataMember 'connector' (ambiguity) ownedRelationship+=OwnedFeatureTyping
	 *     ownedRelationship+=PrefixMetadataMember 'expr' (ambiguity) ownedRelationship+=OwnedFeatureTyping
	 *     ownedRelationship+=PrefixMetadataMember 'feature'? (ambiguity) ownedRelationship+=OwnedFeatureTyping
	 *     ownedRelationship+=PrefixMetadataMember 'flow' (ambiguity) ownedRelationship+=OwnedFeatureTyping
	 *     ownedRelationship+=PrefixMetadataMember 'inv' 'true'? (ambiguity) ownedRelationship+=OwnedFeatureTyping
	 *     ownedRelationship+=PrefixMetadataMember 'step' (ambiguity) ownedRelationship+=OwnedFeatureTyping
	 *     ownedRelationship+=PrefixMetadataMember 'succession' 'flow' (ambiguity) ownedRelationship+=OwnedFeatureTyping
	 *     ownedRelationship+=PrefixMetadataMember 'succession' (ambiguity) ownedRelationship+=OwnedFeatureTyping
	 
	 * </pre>
	 */
	protected void emit_TypedBy_ColonKeyword_0_0_or___TypedKeyword_0_1_0_ByKeyword_0_1_1__(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
}
