/*
 * generated by Xtext 2.16.0
 */
package org.omg.sysml.serializer;

import com.google.inject.Inject;
import java.util.List;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.IGrammarAccess;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.nodemodel.INode;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.AbstractElementAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.AlternativeAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.GroupAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.TokenAlias;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynNavigable;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynTransition;
import org.eclipse.xtext.serializer.sequencer.AbstractSyntacticSequencer;
import org.omg.sysml.services.AlfGrammarAccess;

@SuppressWarnings("all")
public class AlfSyntacticSequencer extends AbstractSyntacticSequencer {

	protected AlfGrammarAccess grammarAccess;
	protected AbstractElementAlias match_AssociationBody_SemicolonKeyword_0_or___LeftCurlyBracketKeyword_1_0_RightCurlyBracketKeyword_1_2__;
	protected AbstractElementAlias match_BaseExpression_LeftParenthesisKeyword_7_0_a;
	protected AbstractElementAlias match_BaseExpression_LeftParenthesisKeyword_7_0_p;
	protected AbstractElementAlias match_BehaviorBody_SemicolonKeyword_0_or___LeftCurlyBracketKeyword_1_0_RightCurlyBracketKeyword_1_2__;
	protected AbstractElementAlias match_CategoryBody_SemicolonKeyword_0_or___LeftCurlyBracketKeyword_1_0_RightCurlyBracketKeyword_1_2__;
	protected AbstractElementAlias match_ConnectorDeclaration_IsKeyword_0_0_2_q;
	protected AbstractElementAlias match_FeaturePackageMemberElement_FeatureKeyword_0_0_q;
	protected AbstractElementAlias match_FeaturePackageMemberElement_FeatureKeyword_1_1_q;
	protected AbstractElementAlias match_FunctionBody_SemicolonKeyword_0_or___LeftCurlyBracketKeyword_1_0_RightCurlyBracketKeyword_1_3__;
	protected AbstractElementAlias match_PackageImport_ColonColonKeyword_3_0_1_0_or_FullStopKeyword_3_0_1_1;
	protected AbstractElementAlias match_QueryHeadExpression_FullStopSolidusKeyword_0_q;
	protected AbstractElementAlias match_TypePart___ColonKeyword_0_0_AnyKeyword_0_2_1__q;
	
	@Inject
	protected void init(IGrammarAccess access) {
		grammarAccess = (AlfGrammarAccess) access;
		match_AssociationBody_SemicolonKeyword_0_or___LeftCurlyBracketKeyword_1_0_RightCurlyBracketKeyword_1_2__ = new AlternativeAlias(false, false, new GroupAlias(false, false, new TokenAlias(false, false, grammarAccess.getAssociationBodyAccess().getLeftCurlyBracketKeyword_1_0()), new TokenAlias(false, false, grammarAccess.getAssociationBodyAccess().getRightCurlyBracketKeyword_1_2())), new TokenAlias(false, false, grammarAccess.getAssociationBodyAccess().getSemicolonKeyword_0()));
		match_BaseExpression_LeftParenthesisKeyword_7_0_a = new TokenAlias(true, true, grammarAccess.getBaseExpressionAccess().getLeftParenthesisKeyword_7_0());
		match_BaseExpression_LeftParenthesisKeyword_7_0_p = new TokenAlias(true, false, grammarAccess.getBaseExpressionAccess().getLeftParenthesisKeyword_7_0());
		match_BehaviorBody_SemicolonKeyword_0_or___LeftCurlyBracketKeyword_1_0_RightCurlyBracketKeyword_1_2__ = new AlternativeAlias(false, false, new GroupAlias(false, false, new TokenAlias(false, false, grammarAccess.getBehaviorBodyAccess().getLeftCurlyBracketKeyword_1_0()), new TokenAlias(false, false, grammarAccess.getBehaviorBodyAccess().getRightCurlyBracketKeyword_1_2())), new TokenAlias(false, false, grammarAccess.getBehaviorBodyAccess().getSemicolonKeyword_0()));
		match_CategoryBody_SemicolonKeyword_0_or___LeftCurlyBracketKeyword_1_0_RightCurlyBracketKeyword_1_2__ = new AlternativeAlias(false, false, new GroupAlias(false, false, new TokenAlias(false, false, grammarAccess.getCategoryBodyAccess().getLeftCurlyBracketKeyword_1_0()), new TokenAlias(false, false, grammarAccess.getCategoryBodyAccess().getRightCurlyBracketKeyword_1_2())), new TokenAlias(false, false, grammarAccess.getCategoryBodyAccess().getSemicolonKeyword_0()));
		match_ConnectorDeclaration_IsKeyword_0_0_2_q = new TokenAlias(false, true, grammarAccess.getConnectorDeclarationAccess().getIsKeyword_0_0_2());
		match_FeaturePackageMemberElement_FeatureKeyword_0_0_q = new TokenAlias(false, true, grammarAccess.getFeaturePackageMemberElementAccess().getFeatureKeyword_0_0());
		match_FeaturePackageMemberElement_FeatureKeyword_1_1_q = new TokenAlias(false, true, grammarAccess.getFeaturePackageMemberElementAccess().getFeatureKeyword_1_1());
		match_FunctionBody_SemicolonKeyword_0_or___LeftCurlyBracketKeyword_1_0_RightCurlyBracketKeyword_1_3__ = new AlternativeAlias(false, false, new GroupAlias(false, false, new TokenAlias(false, false, grammarAccess.getFunctionBodyAccess().getLeftCurlyBracketKeyword_1_0()), new TokenAlias(false, false, grammarAccess.getFunctionBodyAccess().getRightCurlyBracketKeyword_1_3())), new TokenAlias(false, false, grammarAccess.getFunctionBodyAccess().getSemicolonKeyword_0()));
		match_PackageImport_ColonColonKeyword_3_0_1_0_or_FullStopKeyword_3_0_1_1 = new AlternativeAlias(false, false, new TokenAlias(false, false, grammarAccess.getPackageImportAccess().getColonColonKeyword_3_0_1_0()), new TokenAlias(false, false, grammarAccess.getPackageImportAccess().getFullStopKeyword_3_0_1_1()));
		match_QueryHeadExpression_FullStopSolidusKeyword_0_q = new TokenAlias(false, true, grammarAccess.getQueryHeadExpressionAccess().getFullStopSolidusKeyword_0());
		match_TypePart___ColonKeyword_0_0_AnyKeyword_0_2_1__q = new GroupAlias(false, true, new TokenAlias(false, false, grammarAccess.getTypePartAccess().getColonKeyword_0_0()), new TokenAlias(false, false, grammarAccess.getTypePartAccess().getAnyKeyword_0_2_1()));
	}
	
	@Override
	protected String getUnassignedRuleCallToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		return "";
	}
	
	
	@Override
	protected void emitUnassignedTokens(EObject semanticObject, ISynTransition transition, INode fromNode, INode toNode) {
		if (transition.getAmbiguousSyntaxes().isEmpty()) return;
		List<INode> transitionNodes = collectNodes(fromNode, toNode);
		for (AbstractElementAlias syntax : transition.getAmbiguousSyntaxes()) {
			List<INode> syntaxNodes = getNodesFor(transitionNodes, syntax);
			if (match_AssociationBody_SemicolonKeyword_0_or___LeftCurlyBracketKeyword_1_0_RightCurlyBracketKeyword_1_2__.equals(syntax))
				emit_AssociationBody_SemicolonKeyword_0_or___LeftCurlyBracketKeyword_1_0_RightCurlyBracketKeyword_1_2__(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_BaseExpression_LeftParenthesisKeyword_7_0_a.equals(syntax))
				emit_BaseExpression_LeftParenthesisKeyword_7_0_a(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_BaseExpression_LeftParenthesisKeyword_7_0_p.equals(syntax))
				emit_BaseExpression_LeftParenthesisKeyword_7_0_p(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_BehaviorBody_SemicolonKeyword_0_or___LeftCurlyBracketKeyword_1_0_RightCurlyBracketKeyword_1_2__.equals(syntax))
				emit_BehaviorBody_SemicolonKeyword_0_or___LeftCurlyBracketKeyword_1_0_RightCurlyBracketKeyword_1_2__(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_CategoryBody_SemicolonKeyword_0_or___LeftCurlyBracketKeyword_1_0_RightCurlyBracketKeyword_1_2__.equals(syntax))
				emit_CategoryBody_SemicolonKeyword_0_or___LeftCurlyBracketKeyword_1_0_RightCurlyBracketKeyword_1_2__(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_ConnectorDeclaration_IsKeyword_0_0_2_q.equals(syntax))
				emit_ConnectorDeclaration_IsKeyword_0_0_2_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_FeaturePackageMemberElement_FeatureKeyword_0_0_q.equals(syntax))
				emit_FeaturePackageMemberElement_FeatureKeyword_0_0_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_FeaturePackageMemberElement_FeatureKeyword_1_1_q.equals(syntax))
				emit_FeaturePackageMemberElement_FeatureKeyword_1_1_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_FunctionBody_SemicolonKeyword_0_or___LeftCurlyBracketKeyword_1_0_RightCurlyBracketKeyword_1_3__.equals(syntax))
				emit_FunctionBody_SemicolonKeyword_0_or___LeftCurlyBracketKeyword_1_0_RightCurlyBracketKeyword_1_3__(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_PackageImport_ColonColonKeyword_3_0_1_0_or_FullStopKeyword_3_0_1_1.equals(syntax))
				emit_PackageImport_ColonColonKeyword_3_0_1_0_or_FullStopKeyword_3_0_1_1(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_QueryHeadExpression_FullStopSolidusKeyword_0_q.equals(syntax))
				emit_QueryHeadExpression_FullStopSolidusKeyword_0_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_TypePart___ColonKeyword_0_0_AnyKeyword_0_2_1__q.equals(syntax))
				emit_TypePart___ColonKeyword_0_0_AnyKeyword_0_2_1__q(semanticObject, getLastNavigableState(), syntaxNodes);
			else acceptNodes(getLastNavigableState(), syntaxNodes);
		}
	}

	/**
	 * Ambiguous syntax:
	 *     ';' | ('{' '}')
	 *
	 * This ambiguous syntax occurs at:
	 *     name=Name (ambiguity) (rule end)
	 *     ownedRelationship_comp+=Superclassing (ambiguity) (rule end)
	 */
	protected void emit_AssociationBody_SemicolonKeyword_0_or___LeftCurlyBracketKeyword_1_0_RightCurlyBracketKeyword_1_2__(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     '('*
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) '*' (rule start)
	 *     (rule start) (ambiguity) './'? ownedRelationship_comp+=FeatureReference
	 *     (rule start) (ambiguity) 'null' (rule start)
	 *     (rule start) (ambiguity) '{' '}' (rule start)
	 *     (rule start) (ambiguity) '{' element_comp+=Expression
	 *     (rule start) (ambiguity) operator=UnaryOperator
	 *     (rule start) (ambiguity) ownedRelationship_comp+=FeatureTyping
	 *     (rule start) (ambiguity) ownedRelationship_comp+=TypeReferenceMember
	 *     (rule start) (ambiguity) value=BOOLEAN_VALUE
	 *     (rule start) (ambiguity) value=NATURAL_VALUE
	 *     (rule start) (ambiguity) value=RealValue
	 *     (rule start) (ambiguity) value=STRING_VALUE
	 *     (rule start) (ambiguity) {OperatorExpression.operand_comp+=}
	 *     (rule start) (ambiguity) {QueryPathStepExpression.operand_comp+=}
	 *     (rule start) (ambiguity) {QueryQualifierExpression.operand_comp+=}
	 */
	protected void emit_BaseExpression_LeftParenthesisKeyword_7_0_a(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     '('+
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) operator=UnaryOperator
	 *     (rule start) (ambiguity) {OperatorExpression.operand_comp+=}
	 */
	protected void emit_BaseExpression_LeftParenthesisKeyword_7_0_p(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ';' | ('{' '}')
	 *
	 * This ambiguous syntax occurs at:
	 *     isComposite?='compose' 'any' (ambiguity) (rule end)
	 *     isNonunique?='nonunique' (ambiguity) (rule end)
	 *     isOrdered?='ordered' (ambiguity) (rule end)
	 *     name=Name '(' ')' (ambiguity) (rule end)
	 *     name=Name (ambiguity) (rule end)
	 *     ownedRelationship_comp+=FeatureTyping (ambiguity) (rule end)
	 *     ownedRelationship_comp+=Multiplicity (ambiguity) (rule end)
	 *     ownedRelationship_comp+=ParameterMember ')' (ambiguity) (rule end)
	 *     ownedRelationship_comp+=Redefinition (ambiguity) (rule end)
	 *     ownedRelationship_comp+=Subset (ambiguity) (rule end)
	 *     ownedRelationship_comp+=Superclassing (ambiguity) (rule end)
	 */
	protected void emit_BehaviorBody_SemicolonKeyword_0_or___LeftCurlyBracketKeyword_1_0_RightCurlyBracketKeyword_1_2__(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ';' | ('{' '}')
	 *
	 * This ambiguous syntax occurs at:
	 *     isComposite?='compose' 'any' (ambiguity) (rule end)
	 *     isNonunique?='nonunique' (ambiguity) (rule end)
	 *     isOrdered?='ordered' (ambiguity) (rule end)
	 *     name=Name (':' 'any')? (ambiguity) (rule end)
	 *     name=Name (ambiguity) (rule end)
	 *     ownedRelationship_comp+=ConnectorEndMember ')' (ambiguity) (rule end)
	 *     ownedRelationship_comp+=ConnectorEndMember (ambiguity) (rule end)
	 *     ownedRelationship_comp+=FeatureTyping (ambiguity) (rule end)
	 *     ownedRelationship_comp+=FeatureValue (ambiguity) (rule end)
	 *     ownedRelationship_comp+=Multiplicity (ambiguity) (rule end)
	 *     ownedRelationship_comp+=Redefinition (':' 'any')? (ambiguity) (rule end)
	 *     ownedRelationship_comp+=Redefinition (ambiguity) (rule end)
	 *     ownedRelationship_comp+=Subset (ambiguity) (rule end)
	 *     ownedRelationship_comp+=Superclassing (ambiguity) (rule end)
	 */
	protected void emit_CategoryBody_SemicolonKeyword_0_or___LeftCurlyBracketKeyword_1_0_RightCurlyBracketKeyword_1_2__(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     'is'?
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) ownedRelationship_comp+=ConnectorEndMember
	 */
	protected void emit_ConnectorDeclaration_IsKeyword_0_0_2_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     'feature'?
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) ownedRelatedElement_comp+=NamedFeatureDefinition
	 *     ownedRelationship_comp+=Annotation (ambiguity) ownedRelatedElement_comp+=NamedFeatureDefinition
	 *     visibility=PackageElementVisibilityIndicator (ambiguity) ownedRelatedElement_comp+=NamedFeatureDefinition
	 */
	protected void emit_FeaturePackageMemberElement_FeatureKeyword_0_0_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     'feature'?
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) 'abstract' (ambiguity) ownedRelatedElement_comp+=AbstractNamedFeatureDefinition
	 *     ownedRelationship_comp+=Annotation 'abstract' (ambiguity) ownedRelatedElement_comp+=AbstractNamedFeatureDefinition
	 *     visibility=PackageElementVisibilityIndicator 'abstract' (ambiguity) ownedRelatedElement_comp+=AbstractNamedFeatureDefinition
	 */
	protected void emit_FeaturePackageMemberElement_FeatureKeyword_1_1_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ';' | ('{' '}')
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) 'expr' (ambiguity) (rule start)
	 *     isAbstract?='abstract' 'expr' (ambiguity) (rule end)
	 *     isComposite?='compose' 'any' (ambiguity) (rule end)
	 *     isNonunique?='nonunique' (ambiguity) (rule end)
	 *     isOrdered?='ordered' (ambiguity) (rule end)
	 *     name=Name (ambiguity) (rule end)
	 *     ownedRelationship_comp+=FeatureTyping (ambiguity) (rule end)
	 *     ownedRelationship_comp+=Multiplicity (ambiguity) (rule end)
	 *     ownedRelationship_comp+=Redefinition (ambiguity) (rule end)
	 *     ownedRelationship_comp+=ReturnParameterMember (ambiguity) (rule end)
	 *     ownedRelationship_comp+=Subset (ambiguity) (rule end)
	 *     ownedRelationship_comp+=Superclassing (ambiguity) (rule end)
	 */
	protected void emit_FunctionBody_SemicolonKeyword_0_or___LeftCurlyBracketKeyword_1_0_RightCurlyBracketKeyword_1_3__(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     '::' | '.'
	 *
	 * This ambiguous syntax occurs at:
	 *     importedPackage=[Package|Name] (ambiguity) '*' ';' (rule end)
	 */
	protected void emit_PackageImport_ColonColonKeyword_3_0_1_0_or_FullStopKeyword_3_0_1_1(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     './'?
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) '('* (ambiguity) ownedRelationship_comp+=FeatureReference
	 */
	protected void emit_QueryHeadExpression_FullStopSolidusKeyword_0_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     (':' 'any')?
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) (rule start)
	 *     (rule start) (ambiguity) isNonunique?='nonunique'
	 *     (rule start) (ambiguity) isOrdered?='ordered'
	 *     (rule start) (ambiguity) ownedRelationship_comp+=Multiplicity
	 *     name=Name (ambiguity) '=' ownedRelationship_comp+=FeatureValue
	 *     name=Name (ambiguity) 'redefines' ownedRelationship_comp+=Redefinition
	 *     name=Name (ambiguity) 'subsets' ownedRelationship_comp+=Subset
	 *     name=Name (ambiguity) '{' ownedRelationship_comp+=CategoryMember
	 *     name=Name (ambiguity) '{' ownedRelationship_comp+=PackageImport
	 *     name=Name (ambiguity) (';' | ('{' '}')) (rule end)
	 *     name=Name (ambiguity) isAbstract?=';'
	 *     name=Name (ambiguity) isAbstract?='{'
	 *     name=Name (ambiguity) isNonunique?='nonunique'
	 *     name=Name (ambiguity) isOrdered?='ordered'
	 *     name=Name (ambiguity) ownedRelationship_comp+=Multiplicity
	 *     ownedRelationship_comp+=Redefinition (ambiguity) '=' ownedRelationship_comp+=FeatureValue
	 *     ownedRelationship_comp+=Redefinition (ambiguity) 'redefines' ownedRelationship_comp+=Redefinition
	 *     ownedRelationship_comp+=Redefinition (ambiguity) 'subsets' ownedRelationship_comp+=Subset
	 *     ownedRelationship_comp+=Redefinition (ambiguity) '{' ownedRelationship_comp+=CategoryMember
	 *     ownedRelationship_comp+=Redefinition (ambiguity) '{' ownedRelationship_comp+=PackageImport
	 *     ownedRelationship_comp+=Redefinition (ambiguity) (';' | ('{' '}')) (rule end)
	 *     ownedRelationship_comp+=Redefinition (ambiguity) isAbstract?=';'
	 *     ownedRelationship_comp+=Redefinition (ambiguity) isAbstract?='{'
	 *     ownedRelationship_comp+=Redefinition (ambiguity) isNonunique?='nonunique'
	 *     ownedRelationship_comp+=Redefinition (ambiguity) isOrdered?='ordered'
	 *     ownedRelationship_comp+=Redefinition (ambiguity) ownedRelationship_comp+=Multiplicity
	 */
	protected void emit_TypePart___ColonKeyword_0_0_AnyKeyword_0_2_1__q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
}
