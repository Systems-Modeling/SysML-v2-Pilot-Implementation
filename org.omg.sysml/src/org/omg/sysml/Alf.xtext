/*****************************************************************************
 * SysML 2 Pilot Implementation
 * Copyright (c) 2018, 2019 Model Driven Solutions, Inc.
 * Copyright (c) 2018 IncQuery Labs Ltd.
 * Copyright (c) 2019 Maplesoft (Waterloo Maple, Inc.)
 *    
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of theGNU Lesser General Public License
 * along with this program.  If not, see <https://www.gnu.org/licenses/>.
 *
 * @license LGPL-3.0-or-later <http://spdx.org/licenses/LGPL-3.0-or-later>
 * 
 * Contributors:
 *  Ed Seidewitz, MDS
 *  Zoltan Kiss, IncQuery
 *  Balazs Grill, IncQuery
 *  Hisahsi Miyashita, Maplesoft
 * 
 *****************************************************************************/

grammar org.omg.sysml.Alf hidden (WS, ML_COMMENT, SL_COMMENT)

import "http://www.eclipse.org/emf/2002/Ecore" as Ecore
import "http://www.omg.org/spec/SysML/2.0" as SysML

/* UNITS */

UnitDefinition returns SysML::Package :
	  PackageUnitDefinition 
	| ClassUnitDefinition 
	| ObjectClassUnitDefinition
	| ValueClassUnitDefinition
	| AssociationUnitDefinition 
	| BehaviorUnitDefinition
	| FunctionUnitDefinition
	| FeatureUnitDefinition
;

PackageUnitDefinition returns SysML::Package: 
    UnitPrefix PackageDefinition 
;

ClassUnitDefinition returns SysML::ObjectClass : 
	UnitPrefix ClassDefinition
;

ObjectClassUnitDefinition returns SysML::ObjectClass:
	UnitPrefix ObjectClassDefinition
;

ValueClassUnitDefinition returns SysML::ValueClass :
	UnitPrefix ValueClassDefinition
;

AssociationUnitDefinition returns SysML::Association :
	UnitPrefix AssociationDefinition
;

BehaviorUnitDefinition returns SysML::Behavior :
	UnitPrefix BehaviorDefinition
;

FunctionUnitDefinition returns SysML::Function :
	UnitPrefix FunctionDefinition
;

FeatureUnitDefinition returns SysML::Feature :
	UnitPrefix FeatureBodyDefinition
;

fragment UnitPrefix returns SysML::Package :
	//	( 'namespace' namespace += [SysML::Package | QualifiedName] )?
	( ownedRelationship_comp += PackageImport | ownedRelationship_comp += ElementImport )*
	( ownedRelationship_comp += Annotation )*
;

/* VISIBILITY */

enum PackageElementVisibilityIndicator returns SysML::VisibilityKind:
	public = 'public' | private = 'private'
;

enum VisibilityIndicator returns SysML::VisibilityKind :
	public = 'public' | private = 'private' | protected = 'protected' | package = 'packaged'
;

/* COMMENTS */

Annotation returns SysML::Annotation :
	ownedRelatedElement_comp += Comment
;

Comment returns SysML::Comment :
	body = DOCUMENTATION_COMMENT
;

/* IMPORTS */

PackageImport returns SysML::Import :
	( ownedRelationship_comp += Annotation )*
	( visibility = PackageElementVisibilityIndicator )?  
	'import' (
	  importedPackage = [SysML::Package|Name] ( '::' | '.' ) '*' 
	| importedPackage = [SysML::Package|ColonQualifiedName] '::' '*' 
	| importedPackage = [SysML::Package|DotQualifiedName] '.' '*'
	) ';'
;

ElementImport returns SysML::Membership :
	PackageMemberPrefix	
	'import' memberElement = [SysML::Element|QualifiedName] ( 'as' memberName = Name )? ';'
;

/* PACKAGES */

NonFeatureDefinition returns SysML::Package:
	  PackageDefinitionOrStub 
	| ClassDefinitionOrStub 
	| ObjectClassDefinitionOrStub
	| ValueClassDefinitionOrStub 
	| AssociationDefinitionOrStub
	| BehaviorDefinitionOrStub
	| FunctionDefinitionOrStub
;

PackageDefinitionOrStub returns SysML::Package :
	PackageDefinition
//	'package' name = Name ( isStub ?= ';' | '{' ( ownedRelationship_comp += PackageMember )* '}' )
;

fragment PackageDefinition returns SysML::Package: 
	'package' name = Name '{' ( ownedRelationship_comp += PackageMember | ownedRelationship_comp += PackageImport )* '}' 
;

/* PACKAGE MEMBERSHIPS */

PackageMember returns SysML::Membership : 
	PackageMemberPrefix	
	( NonFeatureMemberElement 
	| FeaturePackageMemberElement
	)
;

fragment PackageMemberPrefix returns SysML::Membership :
	( ownedRelationship_comp += Annotation )*
//  ( annotation += StereotypeAnnotation )*
    ( visibility = PackageElementVisibilityIndicator )?		
;

fragment NonFeatureMemberElement returns SysML::Membership :
	( ownedRelatedElement_comp += NonFeatureDefinition
	| 'package' ( memberName = Name )? 'is' memberElement = [SysML::Package|QualifiedName] ';'
    | 'Class' ( memberName = Name )? 'is' memberElement = [SysML::Class|QualifiedName] ';'
    | 'class' ( memberName = Name )? 'is' memberElement = [SysML::ObjectClass|QualifiedName] ';'
    | 'datatype' ( memberName = Name )? 'is' memberElement = [SysML::ValueClass|QualifiedName] ';'
    | 'assoc' ( memberName = Name )? 'is' memberElement = [SysML::Association|QualifiedName] ';'
    | 'behavior' ( memberName = Name )? 'is' memberElement = [SysML::Behavior|QualifiedName] ';'
    | 'function' ( memberName = Name )? 'is' memberElement = [SysML::Function|QualifiedName] ';'
	| 'import' memberElement = [SysML::Element|QualifiedName] ( 'as' memberName = Name )? ';'
	)
;

//NonFeatureMemberKind :
//	'package' | 'class' | 'assoc'
//;

fragment FeaturePackageMemberElement returns SysML::Membership :
	  'feature'? ownedRelatedElement_comp +=NamedFeatureDefinition
	| 'abstract' 'feature'? ownedRelatedElement_comp +=AbstractNamedFeatureDefinition
	| 'feature' ownedRelatedElement_comp +=UnnamedFeatureDefinition
	| 'abstract' 'feature' ownedRelatedElement_comp +=AbstractUnnamedFeatureDefinition
	| ( 'feature' ( memberName = Name )? | memberName = Name ) 'is' memberElement = [SysML::Feature|QualifiedName] ';'
	| BehaviorStepMemberDefinition
;

/* CATEGORIES */

fragment CategoryBody returns SysML::Category :
	';' | '{' ( ownedRelationship_comp += CategoryMember | ownedRelationship_comp += PackageImport )* '}'
;

fragment AbstractCategoryBody returns SysML::Category :
	isAbstract ?= ';' | isAbstract ?= '{' ( ownedRelationship_comp += CategoryMember | ownedRelationship_comp += PackageImport )* '}'
;

/* CATEGORY MEMBERSHIPS */

CategoryMember returns SysML::Membership : 
	NonFeatureCategoryMember | FeatureMember | FeatureCategoryMember
;

NonFeatureCategoryMember returns SysML::Membership : 
	CategoryMemberPrefix NonFeatureMemberElement
;

FeatureCategoryMember returns SysML::FeatureMembership : 
	CategoryMemberPrefix
	(
    // These alternatives are provided for legacy Alf backwards compatibility.	
      ( direction = FeatureDirection )? ownedRelatedElement_comp += NamedFeatureDefinition
    | 'abstract' ( direction = FeatureDirection )? ownedRelatedElement_comp += AbstractNamedFeatureDefinition
	| ( direction = FeatureDirection )? memberName = Name 'is' memberFeature = [SysML::Feature|QualifiedName] ';'		
	)
;

FeatureMember returns SysML::FeatureMembership :
	CategoryMemberPrefix
	(
      ( 'feature' | isPart ?= 'part' | isPort ?= 'port' ) ( direction = FeatureDirection )?  
      ( ownedRelatedElement_comp += FeatureDefinition 
      | ( memberName = Name )? 'is' memberFeature = [SysML::Feature|QualifiedName] ';'
      )
    | 'abstract' ( 'feature' | isPart ?= 'part' | isPort ?= 'port' ) ( direction = FeatureDirection )?
      ownedRelatedElement_comp += AbstractFeatureDefinition
	| 'connector' 
	  ( ownedRelatedElement_comp += ConnectorDefinition 
	  | ( memberName = Name )? 'is' memberFeature = [SysML::Connector|QualifiedName] ';'
	  )
    | 'abstract' 'connector' ownedRelatedElement_comp += AbstractConnectorDefinition
    )
;

enum FeatureDirection returns SysML::FeatureDirectionKind:
	in = 'in' | out = 'out' | inout = 'inout'
;

fragment CategoryMemberPrefix returns SysML::Membership :
	( ownedRelationship_comp += Annotation )*
//  ( annotation += StereotypeAnnotation )*
    ( visibility = VisibilityIndicator )?
;

/* CLASSES */

ClassDefinitionOrStub returns SysML::Class :
	ClassDefinition 
//	ClassDeclaration ( isStub ?= ';' | CategoryBody )
;

fragment ClassDefinition returns SysML::Class : 
	ClassDeclaration CategoryBody
;

fragment ClassDeclaration returns SysML::Class :
	( isAbstract ?= 'abstract' )? 'Class' ClassDeclarationCompletion
;

fragment ClassDeclarationCompletion returns SysML::Class :	
	name = Name 
//  ( '<' ownedMember += ClassifierTemplateParameter ( ',' ownedMember += ClassifierTemplateParameter )* '>' )? 
	SpecializationList?
;

fragment SpecializationList returns SysML::Class :
	'specializes' ownedRelationship_comp += Superclassing ( ',' ownedRelationship_comp += Superclassing )*
;

Superclassing returns SysML::Superclassing:
	superclass = [SysML::Class | QualifiedName]
;

/* OBJECT CLASSES */

ObjectClassDefinitionOrStub returns SysML::ObjectClass :
	ObjectClassDefinition
;

fragment ObjectClassDefinition returns SysML::ObjectClass : 
	ObjectClassDeclaration CategoryBody
;

fragment ObjectClassDeclaration returns SysML::ObjectClass :
	( isAbstract ?= 'abstract' )? 'class' ClassDeclarationCompletion
;

/* VALUE CLASSES (DATA TYPES) */

ValueClassDefinitionOrStub returns SysML::ValueClass :
	ValueClassDefinition
;

fragment ValueClassDefinition returns SysML::ValueClass :
	ValueClassDeclaration CategoryBody
;

fragment ValueClassDeclaration returns SysML::ValueClass :
	( isAbstract ?= 'abstract' )? 'datatype' ClassDeclarationCompletion
;

/* ASSOCIATIONS */

AssociationDefinitionOrStub returns SysML::Association :
	AssociationDefinition
	// AssociationDeclaration { isStub = ';' | AssociationBody }
;

fragment AssociationDefinition returns SysML::Association :
	AssociationDeclaration AssociationBody
;

fragment AssociationDeclaration returns SysML::Association :
	( isAbstract ?= 'abstract' )? 'assoc' ClassDeclarationCompletion
;

fragment AssociationBody returns SysML::Association :
	';'| '{' ( ownedRelationship_comp += AssociationMember | ownedRelationship_comp += PackageImport )* '}'
;

/* ASSOCIATION MEMBERSHIPS */

AssociationMember returns SysML::Membership :
	NonFeatureCategoryMember | FeatureMember | AssociationEndFeatureMember
;

AssociationEndFeatureMember returns SysML::EndFeatureMembership :
	CategoryMemberPrefix
    (
      'end' ( isPart ?= 'part' | isPort ?= 'port' )? ( direction = FeatureDirection )? ownedRelatedElement_comp += FeatureDefinition
    | 'abstract' 'end' ( isPart ?= 'part' | isPort ?= 'port' )? ( direction = FeatureDirection )? ownedRelatedElement_comp += AbstractFeatureDefinition
	| 'end' ( isPart ?= 'part') ( memberName = Name )? 'is' memberFeature = [SysML::Feature|QualifiedName] ';'

	// These alternatives are provided for legacy Alf backwards compatibility;
    | ( direction = FeatureDirection )? ownedRelatedElement_comp += NamedFeatureDefinition
    | 'abstract' ( direction = FeatureDirection )? ownedRelatedElement_comp += AbstractNamedFeatureDefinition
	| memberName = Name 'is' memberFeature = [SysML::Feature|QualifiedName] ';'
	
	)
;

/* BEHAVIORS */

BehaviorDefinitionOrStub returns SysML::Behavior :
	BehaviorDefinition
;

fragment BehaviorDefinition returns SysML::Behavior :
	BehaviorDeclaration BehaviorBody
;

fragment BehaviorDeclaration returns SysML::Behavior :
	( isAbstract ?= 'abstract')? 'behavior' name = Name ParameterList SpecializationList?
;

fragment ParameterList returns SysML::Category :
	'(' ( ownedRelationship_comp += ParameterMember ( ',' ownedRelationship_comp += ParameterMember )* )? ')'
;

fragment BehaviorBody returns SysML::Category :
	';'| '{' ( ownedRelationship_comp += BehaviorMember | ownedRelationship_comp += PackageImport )* '}'
;

/* BEHAVIOR MEMBERSHIPS */

ParameterMember returns SysML::ParameterMembership :
	( direction = FeatureDirection )? memberName = Name ownedRelatedElement_comp += ParameterDefinition
;

BehaviorMember returns SysML::Membership :
	NonFeatureCategoryMember | FeatureMember | BehaviorStepMember	
;

BehaviorStepMember returns SysML::FeatureMembership :
	CategoryMemberPrefix BehaviorStepMemberDefinition
;

fragment BehaviorStepMemberDefinition returns SysML::Membership :
	  ownedRelatedElement_comp += StepDefinition
	| 'step' ( memberName = Name )? 'is' memberElement = [SysML::Step|QualifiedName] ';'
	| ownedRelatedElement_comp += ExpressionDefinition
	| 'expr' ( memberName = Name )? 'is' memberElement = [SysML::Expression|QualifiedName] ';'	
;

/* FUNCTIONS */

FunctionDefinitionOrStub returns SysML::Function :
	FunctionDefinition  
;

fragment FunctionDefinition returns SysML::Function :
	FunctionDeclaration FunctionBody
;

fragment FunctionDeclaration returns SysML::Function :
	( isAbstract ?= 'abstract')? 'function' name = Name ParameterList ReturnParameterPart SpecializationList?
;

fragment ReturnParameterPart returns SysML::Category :
	ownedRelationship_comp += ReturnParameterMember
;

fragment FunctionBody returns SysML::Category :
	  ';'
	| '{' ( ownedRelationship_comp += BehaviorMember | ownedRelationship_comp += PackageImport )* 
	      ( ownedRelationship_comp += ExpressionMember )? '}'
;

/* FUNCTION MEMBERSHIPS */

ReturnParameterMember returns SysML::ReturnParameterMembership :
	( memberName = Name )? ownedRelatedElement_comp += ParameterDefinition
;

ExpressionMember returns SysML::FeatureMembership :
	ownedRelatedElement_comp += Expression
;

/* FEATURES */

FeatureDefinition returns SysML::Feature :
	NamedFeatureDefinition | UnnamedFeatureDefinition
;

AbstractFeatureDefinition returns SysML::Feature :
	AbstractNamedFeatureDefinition | AbstractUnnamedFeatureDefinition
;

NamedFeatureDefinition returns SysML::Feature :
	FeatureDeclaration FeatureCompletion
;

AbstractNamedFeatureDefinition returns SysML::Feature :
	FeatureDeclaration AbstractFeatureCompletion
;

UnnamedFeatureDefinition returns SysML::Feature :
	'redefines' ownedRelationship_comp += Redefinition TypePart
	FeatureCompletion
;

AbstractUnnamedFeatureDefinition returns SysML::Feature :
	'redefines' ownedRelationship_comp += Redefinition TypePart
	AbstractFeatureCompletion
;

fragment FeatureBodyDefinition returns SysML::Feature :
	( isAbstract ?= 'abstract' )? 'feature' FeatureDeclaration FeatureCompletion
;

fragment FeatureDeclaration returns SysML::Feature :
	name = Name TypePart SubsettingPart
;

fragment FeatureCompletion returns SysML::Feature :
	( '=' ownedRelationship_comp += FeatureValue )? CategoryBody
;

fragment AbstractFeatureCompletion returns SysML::Feature :
	( '=' ownedRelationship_comp += FeatureValue )? AbstractCategoryBody
;

FeatureValue returns SysML::FeatureValue :
	ownedRelatedElement_comp += Expression
;

fragment TypePart returns SysML::Feature :
	( ':' ( isComposite ?= 'compose' )? ( ownedRelationship_comp += FeatureTyping | 'any' ) )?
	( ownedRelationship_comp += Multiplicity )? 
	( isOrdered ?= 'ordered'? & isNonunique ?= 'nonunique'? )
;

FeatureTyping returns SysML::FeatureTyping :
	type = [SysML::Category | QualifiedName]
;

Multiplicity returns SysML::Multiplicity :
	'[' ( ownedRelatedElement_comp +=  NaturalLiteralExpression '..' )? ownedRelatedElement_comp +=  UnlimitedNaturalLiteralExpression ']'
;

fragment SubsettingPart returns SysML::Feature :
	  (  
	  	Subsets ( ',' ownedRelationship_comp += Subset )*
	  | Redefines ( ',' ownedRelationship_comp += Redefinition )*
	  )*
;

fragment Subsets returns SysML::Feature :
	'subsets' ownedRelationship_comp += Subset 
;

Subset returns SysML::Subsetting:
	subsettedFeature = [SysML::Feature|QualifiedName]
;

fragment Redefines returns SysML::Feature :
	'redefines' ownedRelationship_comp += Redefinition
;

Redefinition returns SysML::Redefinition:
	redefinedFeature = [SysML::Feature|QualifiedName] 
;

/* CONNECTORS */

ConnectorDefinition returns SysML::Connector :	 
	ConnectorDeclaration CategoryBody	  
;

AbstractConnectorDefinition returns SysML::Connector :
	ConnectorDeclaration AbstractCategoryBody
;

fragment ConnectorDeclaration returns SysML::Connector :
	( ( ( name = Name )? ( ':' ownedRelationship_comp += ConnectorTyping )? 'is')?
		  ownedRelationship_comp += ConnectorEndMember 'to' ownedRelationship_comp += ConnectorEndMember
	| ( name = Name )? ( ':' ownedRelationship_comp += ConnectorTyping )?
	  '(' ownedRelationship_comp += ConnectorEndMember ',' ownedRelationship_comp += ConnectorEndMember
	      ( ',' ownedRelationship_comp += ConnectorEndMember )*
	  ')'
	)
;

ConnectorTyping returns SysML::FeatureTyping :
	type = [SysML::Association | QualifiedName]
;

ConnectorEnd returns SysML::Feature :
	ownedRelationship_comp += Subset
;

/* CONNECTOR MEMBERSHIPS */

ConnectorEndMember returns SysML::EndFeatureMembership :
	( memberName = Name '=>' )? ownedRelatedElement_comp += ConnectorEnd
;

/* PARAMETERS */

ParameterDefinition returns SysML::Parameter :
	TypePart // ( Subsets | Redefines )*
;

/* STEPS */

StepDefinition returns SysML::Step :
	( isAbstract ?= 'abstract')? 'step' 
	( name = Name TypePart ParameterList? SubsettingPart 
	| 'redefines' ownedRelationship_comp += Redefinition TypePart ParameterList?
	) 
	BehaviorBody
;

/* EXPRESSIONS */

// Block Expressions

ExpressionDefinition returns SysML::BlockExpression :
	( isAbstract ?= 'abstract')? 'expr' 
	( name = Name TypePart ( ParameterList ReturnParameterPart )? SubsettingPart 
	| 'redefines' ownedRelationship_comp += Redefinition TypePart ( ParameterList ReturnParameterPart )?
	)?
	FunctionBody
;

Expression returns SysML::Expression :
	 ConditionalExpression
;

// Conditional Test Expressions

ConditionalExpression returns SysML::Expression :
	NullCoalescingExpression ( {SysML::OperatorExpression.operand_comp += current}
		operator = ConditionalTestOperator operand_comp += Expression ':' operand_comp += ConditionalExpression
	)?
;

ConditionalTestOperator: 
	'?'
;

// Null Coalescing Expressions

NullCoalescingExpression returns SysML::Expression :
	ConditionalOrExpression ( {SysML::OperatorExpression.operand_comp += current}
		operator = NullCoalescingOperator operand_comp += ConditionalOrExpression )*
;

NullCoalescingOperator :
	'??'
;

// Conditional Logical Expressions

ConditionalOrExpression returns SysML::Expression :
	ConditionalAndExpression ( {SysML::OperatorExpression.operand_comp += current}
		operator = ConditionalOrOperator operand_comp += ConditionalAndExpression )*
;

ConditionalOrOperator :
	'||'
;

ConditionalAndExpression returns SysML::Expression :
	OrExpression ( {SysML::OperatorExpression.operand_comp += current}
		operator = ConditionalAndOperator operand_comp += OrExpression )*
;

ConditionalAndOperator :
	'&&'
;

OrExpression returns SysML::Expression :
	XorExpression ( {SysML::OperatorExpression.operand_comp += current}  
		operator = OrOperator operand_comp += XorExpression )*
;

// Logical Expressions

OrOperator :
	'|'
;

XorExpression returns SysML::Expression :
	AndExpression ( {SysML::OperatorExpression.operand_comp += current}  
		operator = XorOperator operand_comp += AndExpression )*
;

XorOperator :
	'^'
;

AndExpression returns SysML::Expression :
	EqualityExpression ( {SysML::OperatorExpression.operand_comp += current}  
		operator = AndOperator operand_comp += EqualityExpression )*
;

AndOperator :
	'&'
;

// Equality Expressions

EqualityExpression returns SysML::Expression :
	ClassificationExpression ( {SysML::OperatorExpression.operand_comp += current}  
		operator = EqualityOperator operand_comp += ClassificationExpression )*
	
;

EqualityOperator :
	'==' | '!=' 
;

// Classification Expressions

ClassificationExpression returns SysML::Expression :
	RelationalExpression ( {SysML::OperatorExpression.operand_comp += current}
		operator = ClassificationOperator ownedRelationship_comp += TypeReferenceMember )?
;

ClassificationOperator :
	'instanceof' | 'hastype'
;

// Relational Expressions

RelationalExpression returns SysML::Expression :
	AdditiveExpression ( {SysML::OperatorExpression.operand_comp += current}  
		operator = RelationalOperator operand_comp += AdditiveExpression )*
;

RelationalOperator :
	'<' | '>' | '<=' | '>='
;

// Arithmetic Expressions

AdditiveExpression returns SysML::Expression :
	MultiplicativeExpression ( {SysML::OperatorExpression.operand_comp += current}  
		operator = AdditiveOperator operand_comp += MultiplicativeExpression )*	
;

AdditiveOperator :
	'+' | '-' 
;

MultiplicativeExpression returns SysML::Expression :
	UnitsExpression ( {SysML::OperatorExpression.operand_comp += current}  
		operator = MultiplicativeOperator operand_comp += UnitsExpression )*	
;

MultiplicativeOperator :
	'*' | '/' | '**' 
;

// Units Expressions

UnitsExpression returns SysML::Expression :
	UnaryExpression ( {SysML::OperatorExpression.operand_comp += current} 
		operator = '@' '[' operand_comp += Expression ']' )?		
;

// Unary Expressions

UnaryExpression returns SysML::Expression:
	SequenceAccessExpression | {SysML::OperatorExpression} operator = UnaryOperator operand_comp += SequenceAccessExpression
;

UnaryOperator :
	'+' | '-' | '!' | '~'
;

SequenceAccessExpression returns SysML::Expression :
	 PrimaryExpression 
	 ( {SysML::OperatorExpression.operand_comp += current} operator = '[' operand_comp += Expression ']' )?
;

// Primary Expressions

PrimaryExpression returns SysML::Expression :
	BaseExpression ( {SysML::OperatorExpression.operand_comp += current} '->' 
		operator = Name ( ownedRelationship_comp += BodyMember )+
	)*
;

BodyExpression returns SysML::BlockExpression :
	// TODO: Update syntax (if possible) to remove need for backtracking.
	// (Backtracking is required if typing is allowed on body parameters. Otherwise, a "=>" on the first alternative is sufficient.)
	  ownedRelationship_comp += BodyParameterMember ( ownedRelationship_comp += BodyParameterMember )* '(' ownedRelationship_comp += ExpressionMember ')'
	| ownedRelationship_comp += ExpressionTyping
;

ExpressionTyping returns SysML::FeatureTyping :
	type = [ SysML::Function | QualifiedName ]
;

// Base Expressions

BaseExpression returns SysML::Expression :
	  NullExpression
	| LiteralExpression 
	| FeatureReferenceExpression 
	| QueryPathExpression
	| InvocationExpression 
	| ClassExtentExpression
	| SequenceConstructionExpression 
	| '(' Expression ')'
;

FeatureReferenceExpression returns SysML::FeatureReferenceExpression :
	ownedRelationship_comp += FeatureReference
;

InvocationExpression returns SysML::InvocationExpression :
	ownedRelationship_comp += FeatureTyping '(' Tuple? ')'
;

fragment Tuple returns SysML::Expression :
	PositionalTuple | NamedTuple
;

fragment PositionalTuple returns SysML::Expression :
	ownedRelationship_comp += ExpressionMember ( ',' ownedRelationship_comp += ExpressionMember )*
;

fragment NamedTuple returns SysML::Expression :
	ownedRelationship_comp += NamedExpressionMember ( ',' ownedRelationship_comp += NamedExpressionMember )*
;

ClassExtentExpression returns SysML::OperatorExpression :
	ownedRelationship_comp += TypeReferenceMember '.' operator = 'allInstances' '(' ')'
;

TypeReference returns SysML::Feature :
	ownedRelationship_comp += FeatureTyping
;

SequenceConstructionExpression returns SysML::SequenceConstructionExpression:
	{SysML::SequenceConstructionExpression} '{' ( element_comp += Expression ( ',' element_comp += Expression )* )? '}'
;

NullExpression returns SysML::NullExpression :
	{SysML::NullExpression} 'null'
;

// Literal Expressions

LiteralExpression returns SysML::LiteralExpression :
	BooleanLiteralExpression | StringLiteralExpression | RealLiteralExpression | UnlimitedNaturalLiteralExpression
;

BooleanLiteralExpression returns SysML::LiteralBoolean :
	value = BOOLEAN_VALUE
;

StringLiteralExpression returns SysML::LiteralString :
	value = STRING_VALUE
;

RealLiteralExpression returns SysML::LiteralReal:
	value = RealValue
;

RealValue returns Ecore::EDouble:
	NATURAL_VALUE? '.' ( NATURAL_VALUE | EXP_VALUE ) | EXP_VALUE
;

NaturalLiteralExpression returns SysML::LiteralInteger:
	value = NATURAL_VALUE
;

UnlimitedNaturalLiteralExpression returns SysML::LiteralExpression:
	NaturalLiteralExpression | {SysML::LiteralUnbounded} '*'
;

/* EXPRESSION MEMBERSHIPS */

FeatureReference returns SysML::FeatureMembership :
	memberFeature = [SysML::Feature | QualifiedName ]
;

TypeReferenceMember returns SysML::FeatureMembership :
	ownedRelatedElement_comp += TypeReference
;

NamedExpressionMember returns SysML::FeatureMembership :
	memberName = Name '=>' ownedRelatedElement_comp += Expression
;

BodyMember returns SysML::FeatureMembership :
	ownedRelatedElement_comp += BodyExpression
;

BodyParameterMember returns SysML::ParameterMembership :
	memberName = Name ownedRelatedElement_comp += ParameterDefinition
;

/* QUERY PATH EXPRESSION */

QueryPathExpression returns SysML::Expression :
	QueryHeadExpression
	( '[' {SysML::QueryQualifierExpression.operand_comp += current}
         ( ownedRelationship_comp += BodyMember ) ']' )?
	( '/' {SysML::QueryPathStepExpression.operand_comp += current}
		operand_comp += QueryNameExpression
		( '[' {SysML::QueryQualifierExpression.operand_comp += current}
	         ( ownedRelationship_comp += BodyMember ) ']' )?
	)*
;

QueryNameExpression returns SysML::QueryPathExpression :
    /* isParent ?= '..'
    | isDescendants ?= '/'
    | @traversal
    */
    ownedRelationship_comp += FeatureReference
;

QueryHeadExpression returns SysML::FeatureReferenceExpression :
	'./' FeatureReferenceExpression
;
        

/* NAMES */

Name :
	ID | UNRESTRICTED_NAME
;

QualifiedName :
	Name | ColonQualifiedName | DotQualifiedName
;

ColonQualifiedName :
	Name ('::' Name)+
;

DotQualifiedName :
	Name ('.' Name)+
;

/* TERMINALS */

terminal BOOLEAN_VALUE returns Ecore::EBoolean : 
	'true' | 'false' ;

terminal NATURAL_VALUE returns Ecore::EInt :
	('0' | '1'..'9' (('_')? '0'..'9')*) | //DECIMAL 
	(('0b' | '0B') '0'..'1' (('_')? '0'..'1')*) | // BINARY
	(('0x'|'0X') ('0'..'9'|'a'..'f'|'A'..'F')  (('_')? ('0'..'9'|'a'..'f'|'A'..'F'))*) | // HEX
	('0' ('_')? '0'..'7' (('_')? '0'..'7')*) // OCT
;

terminal EXP_VALUE :
	NATURAL_VALUE ('e' | 'E') ('+' | '-')? NATURAL_VALUE
;

terminal ID : ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')* ;
terminal UNRESTRICTED_NAME returns Ecore::EString : 
	'\'' ( '\\' ('b'|'t'|'n'|'f'|'r'|'"'|"'"|'\\') | !('\\'|'\'') )* '\'' ;

terminal STRING_VALUE returns Ecore::EString : 
	'"' ( '\\' ('b'|'t'|'n'|'f'|'r'|'"'|"'"|'\\') | !('\\'|'"') )* '"' ;

terminal DOCUMENTATION_COMMENT : '/**' -> '*/' ;
terminal STATEMENT_ANNOTATION : '//@' -> '\n'
//  '//@' WS? ID (WS? '(' WS? (ID | UNRESTRICTED_NAME) (WS? ',' WS? (ID | UNRESTRICTED_NAME))* WS? ')')? 
//  (WS? '@' WS? ID (WS? '(' WS? (ID | UNRESTRICTED_NAME) (WS? ',' WS? (ID | UNRESTRICTED_NAME))* WS? ')')?)* (' '|'\t')* ('\r'? '\n')
;
terminal INLINE_STATEMENT : '/*@inline(' (ID | UNRESTRICTED_NAME) ')' -> '*/';

terminal ML_COMMENT	: '/*' !('*' | '@') -> '*/';
terminal SL_COMMENT : '//' (!('@'|'\n'|'\r') !('\n'|'\r')*)? ('\r'? '\n')?;

terminal WS : (' '|'\t'|'\r'|'\n')+;
