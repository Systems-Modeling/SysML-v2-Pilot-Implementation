/**
 * This package defines the transfer interactions used to type item flows.
 */
package Transfers {
	private import Base::*;
	private import ScalarValues::Boolean;
	private import Occurrences::*;
	private import BaseFunctions::notEmpty;
	
	/**
	 * Transfer is the most general interaction used for typing item flows. It represents the
	 * transfer of items from an output feature of the source of the interaction to an input
	 * feature of the target of the interaction.
	 */
	interaction Transfer specializes Performance, BinaryLink {
		/**
		 * The entity whose output is the source of the items to be transferred.
		 */
		end transferSource: Occurrence[0..*] redefines BinaryLink::source {
			out sourceOutput: Occurrence[0..*];
		}
		
		/**
		 * The entity whose input is the target of the items to be transferred.
		 */
		end transferTarget: Occurrence[0..*] redefines BinaryLink::target {
			in targetInput: Occurrence[0..*];
		}
		
		/**
		 * If isMove is true, then all items begin moving from the transferSource at the start
		 * of the transfer.
		 */
		feature isMove: Boolean = notEmpty(moving);
		
		/**
		 * If isPush is true, then all items are pushed out of the transferSource at the
		 * start of the transfer.
		 */
		feature isPush: Boolean = notEmpty(pushing);
		
		/**
		 * If isInstance is true, then the transfer is instantaneous.
		 */
		feature isInstant: Boolean = notEmpty(instant);
		
		/**
		 * The items that are transferred.
		 */
		feature item: Anything[1..*];
		
		/**
		 * The output of the items from the sourceOutput.
		 */
		connector sourceOutputLink: BinaryLink[1..*] is transferSource::sourceOutput to item {
			feature startShot: Occurrence redefines BinaryLink::startShot;
			feature endShot: Occurrence redefines BinaryLink::endShot;
		}
		
		/**
		 * The input of the items to the targetInput.
		 */
		connector targetInputLink: BinaryLink[1..*] is item to transferTarget::targetInput {
			feature startShot: Occurrence redefines BinaryLink::startShot;
		}
		
		/**
		 * The start of the transfer happens during the output of each of the items from the
		 * transferSource. 
		 */
		connector sending: HappensDuring[1..*] is startShot[1] to sourceOutputLink[1..*];
		
		/**
		 * If isMove is true, then the output of each of the items from the transferSource
		 * starts at the start of the transfer.
		 * (isMove implies size(moving) == size(sourceOutputLink))
		 */	
		connector moving: HappensWhile[0..*] is sourceOutputLink::startShot[0..*] to startShot[0..1];
		
		/**
		 * If isPush is true, then the output of each of the items from the transferSource
		 * ends at the start of the transfer.
		 * (isPush implies size(pushing) == size(sourceOutputLink)))
		 */
		connector pushing: HappensWhile[0..*] is sourceOutputLink::endShot[0..*] to startShot[0..1];
		
		/**
		 * The input of each of the items to the transferTarget starts at the end of the transfer.
		 */
		connector delivering: HappensWhile[1..*] is targetInputLink::startShot[1..*] to endShot[1];
		
		/**
		 * If isInstant is true, then the start and end of the transfer happen at the same time.
		 */
		connector instant: SelfLink[0..1] is startShot[1] to endShot[1];
	}
	 
	/**
	 * TransferBefore is a specialization of Transfer in which the transferSource happens before
	 * the transfer, which happens before the transferTarget.
	 */
	interaction TransferBefore specializes Transfer, HappensBefore {
	 	end transferSource: Occurrence[0..*] redefines Transfer::transferSource, HappensBefore::earlierOccurrence;
	  	end transferTarget: Occurrence[0..*] redefines Transfer::transferTarget, HappensBefore::laterOccurrence;
	  	
	  	feature self: TransferBefore redefines Base::self;
	  	
	  	succession transferSource to self;
	  	succession self to transferTarget;
	}
	
	/**
	 * SignalTransfer is a specialization of Transfer that represents an asynchronous signal from an
	 * unidentified source to a reception step of a target behavior.
	 */
	interaction SignalTransfer specializes Transfer {
		end transferSource: Occurrence[0..*] redefines Transfer::transferSource;
		end transferTarget: Reception[0..*] redefines Transfer::transferTarget {
			feature signalInput: Object[0..*] redefines Transfer::transferTarget::targetInput, Reception::signalInput;
		}
	}
	
	/**
	 * A Reception is the behavior of receiving an asynchronous signal transfer. The received signal object
	 * is the output of the behavior.
	 */
	behavior Reception(out signal: Object[0..*]) {
		abstract feature signalInput: Object[0..*] = signal;
	}	
	  
	/**
	 * transfers is a specialization of performances and binaryLinks restricted to type 
	 * Transfer. It is the default subsetting for streaming item flows.
	 */
	feature transfers: Transfer[0..*] nonunique subsets performances, binaryLinks {
		end transferSource: Occurrence[0..*] redefines Transfer::transferSource, binaryLinks::source;
		end transferTarget: Occurrence[0..*] redefines Transfer::transferTarget, binaryLinks::target;
	}
	  
	/**
	 * successionTransfers is a specialization of transfers and successions restricted to
	 * type TransferBefore. It is the default subsetting for sucession (non-streaming) item flows.
	 */
	feature flows: TransferBefore[0..*] nonunique subsets transfers, successions {
		end transferSource: Occurrence[0..*] redefines transfers::transferSource, HappensBefore::earlierOccurrence;
		end transferTarget: Occurrence[0..*] redefines transfers::transferTarget, HappensBefore::laterOccurrence;
	}
}